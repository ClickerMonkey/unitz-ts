{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 8db8f483dca4f669a222","webpack:///./src/Plurality.ts","webpack:///./src/System.ts","webpack:///./src/Functions.ts","webpack:///./src/Range.ts","webpack:///./src/Value.ts","webpack:///./src/Parse.ts","webpack:///./src/Output.ts","webpack:///./src/Transform.ts","webpack:///./src/Group.ts","webpack:///./src/Class.ts","webpack:///./src/Sort.ts","webpack:///./src/Global.ts","webpack:///./src/Base.ts","webpack:///./src/index.ts"],"names":[],"mappings":"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","file":"unitz.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Unitz\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Unitz\"] = factory();\n\telse\n\t\troot[\"Unitz\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 8db8f483dca4f669a222","\n\nexport enum Plurality\n{\n  SINGULAR,\n  PLURAL,\n  EITHER\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Plurality.ts","\n\nexport enum System\n{\n  METRIC,\n  IMPERIAL,\n  NONE,\n  ANY,\n  GIVEN\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/System.ts","\n\nexport let EPSILON = 0.00001;\n\nexport function isZero(x: 3): boolean\n{\n  return abs( x ) < EPSILON;\n}\n\nexport function isEqual(a: number, b: number): boolean\n{\n  return abs( a - b ) < EPSILON;\n}\n\nexport function isWhole(x: number): boolean\n{\n  return abs( Math.floor( x ) - x ) < EPSILON;\n}\n\nexport function isSingular(x: any): boolean\n{\n  return isNumber( x ) && abs( abs( x ) - 1 ) < EPSILON;\n}\n\nexport function isPlural(x: number): boolean\n{\n  return x !== 1 && x !== -1;\n}\n\nexport function isNumber(x: any): boolean\n{\n  return isFinite(x);\n}\n\nexport function gcd(a: number, b: number): number\n{\n  if (!isWhole(a) || !isWhole(b))\n  {\n    return 1;\n  }\n\n  let x: number = a < b ? a : b;\n  let y: number = a < b ? b : a;\n  x = abs(x);\n  y = abs(y);\n\n  while(y)\n  {\n    let t = y;\n    y = x % y;\n    x = t;\n  }\n\n  return x;\n}\n\nexport function abs(x: number): number\n{\n  return x < 0 ? -x : x;\n}\n\nexport function sign(x: number): number\n{\n  return x < 0 ? -1 : (x === 0 ? 0 : 1);\n}\n\nexport function appendTo<T>(array: T[], input: T | T[]): T[]\n{\n  if (input instanceof Array)\n  {\n    array.push.apply( array, input );\n  }\n  else if (input)\n  {\n    array.push( input );\n  }\n\n  return array;\n}\n\nexport function isGroupDefinition(input: any): boolean\n{\n  return !!(input && input.system && input.unit && input.denominators && input.units);\n}\n\nexport function isValueDefinition(input: any): boolean\n{\n  return !!(input && (input.value || input.unit || input.num || input.den));\n}\n\nexport function isRangeDefinition(input: any): boolean\n{\n  return !!(input && input.min && input.max);\n}\n\nexport function isArray(input: any): boolean\n{\n  return input instanceof Array;\n}\n\nexport function isString(input: any): boolean\n{\n  return typeof(input) === 'string';\n}\n\nexport function isDefined(input: any): boolean\n{\n  return typeof(input) !== 'undefined';\n}\n\nexport function coalesce(a: any, b: any): any\n{\n  return isDefined( a ) ? a : b;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Functions.ts","\nimport { Value } from './Value';\nimport { Transform } from './Transform';\n\n\nexport type RangeMap = { [key: string]: Range };\n\nexport type RangeList = Range[];\n\nexport type RangeMutator = (range: Range) => Range;\n\nexport class Range\n{\n\n  public static SEPARATOR: string = ' - ';\n\n  public readonly min: Value;\n  public readonly max: Value;\n\n  public constructor(min: Value, max: Value)\n  {\n    this.min = min.value < max.value ? min : max;\n    this.max = max.value > min.value ? max : min;\n  }\n\n  public get isValid(): boolean\n  {\n    return this.min.isValid && this.max.isValid;\n  }\n\n  public get isFraction(): boolean\n  {\n    return this.min.isFraction || this.max.isFraction;\n  }\n\n  public get isDecimal(): boolean\n  {\n    return this.min.isDecimal && this.max.isDecimal;\n  }\n\n  public get isRange(): boolean\n  {\n    return this.min.value !== this.max.value;\n  }\n\n  public get isFixed(): boolean\n  {\n    return this.min.value === this.max.value;\n  }\n\n  public get average(): number\n  {\n    return (this.min.value + this.max.value) * 0.5;\n  }\n\n  public get value(): number\n  {\n    return this.min.value;\n  }\n\n  public get minimum(): number\n  {\n    return this.min.value;\n  }\n\n  public get maximum(): number\n  {\n    return this.max.value;\n  }\n\n  public get unit(): string\n  {\n    return this.min.group.unit;\n  }\n\n  public get asString(): string\n  {\n    return (this.min.value === this.max.value) ?\n      (this.min.asString) :\n      (this.min.asString + Range.SEPARATOR + this.max.asString);\n  }\n\n  public isMatch(range: Range): boolean\n  {\n    return this.min.group === range.min.group &&\n      this.max.group === range.max.group;\n  }\n\n  public positive(): Range\n  {\n    let minNegative: boolean = this.min.value < 0;\n    let maxNegative: boolean = this.max.value < 0;\n\n    if (maxNegative)\n    {\n      return null;\n    }\n\n    let min: Value = minNegative ? this.min.zero() : this.min.copy();\n    let max: Value = this.max.copy();\n\n    return new Range( min, max );\n  }\n\n  public negative(): Range\n  {\n    let minPositive: boolean = this.min.value >= 0;\n    let maxPositive: boolean = this.max.value >= 0;\n\n    if (minPositive)\n    {\n      return null;\n    }\n\n    let min: Value = this.min.copy();\n    let max: Value = maxPositive ? this.max.zero() : this.max.copy();\n\n    return new Range( min, max );\n  }\n\n  public nonzero(): Range\n  {\n    let minZero: boolean = this.min.value === 0;\n    let maxZero: boolean = this.max.value === 0;\n\n    if (minZero && maxZero)\n    {\n      return null;\n    }\n\n    let min: Value = this.min.copy();\n    let max: Value = this.max.copy();\n\n    return new Range( min, max );\n  }\n\n  public maxd(): Range\n  {\n    let fixed: Value = this.max.copy();\n\n    return new Range(fixed, fixed);\n  }\n\n  public mind(): Range\n  {\n    let fixed: Value = this.min.copy();\n\n    return new Range(fixed, fixed);\n  }\n\n  public normalize(transform: Transform): Range\n  {\n    let min: Value = this.min.normalize( transform );\n    let max: Value = this.max.normalize( transform );\n\n    return new Range(min, max)\n  }\n\n  public add(addend: Range, scale: number = 1): Range\n  {\n    let min: Value = this.min.add(addend.min, scale);\n    let max: Value = this.max.add(addend.max, scale);\n\n    return new Range(min, max);\n  }\n\n  public sub(subtrahend: Range, scale: number = 1): Range\n  {\n    let min: Value = this.min.sub(subtrahend.min, scale);\n    let max: Value = this.max.sub(subtrahend.max, scale);\n\n    return new Range(min, max);\n  }\n\n  public mul(scale: number): Range\n  {\n    let min: Value = this.min.mul(scale);\n    let max: Value = this.max.mul(scale);\n\n    return new Range(min, max);\n  }\n\n  public static fromFixed(fixed: Value): Range\n  {\n    return new Range(fixed, fixed);\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Range.ts","\nimport { gcd, abs, EPSILON } from './Functions';\nimport { Transform } from './Transform';\nimport { Group } from './Group';\n\nexport type ValueMap = { [unit: string]: Value };\n\nexport class Value\n{\n\n  public static INVALID: Value = new Value(Number.NaN, Number.NaN, 1, '', null);\n  public static SEPARATOR_FRACTION: string = '/';\n  public static SEPARATOR_MIXED: string = ' ';\n\n  public readonly value: number;\n  public readonly num: number;\n  public readonly den: number;\n  public readonly group: Group;\n  public unit: string;\n\n  public constructor(value: number, num: number, den: number, unit: string, group: Group)\n  {\n    let divisor: number = gcd(num, den);\n    this.value = value;\n    this.num = num / divisor;\n    this.den = den / divisor;\n    this.unit = unit;\n    this.group = group;\n  }\n\n  public get isValid(): boolean\n  {\n    return isFinite(this.value);\n  }\n\n  public get isFraction(): boolean\n  {\n    return this.den !== 1;\n  }\n\n  public get isDecimal(): boolean\n  {\n    return this.den === 1;\n  }\n\n  public get scaled(): number\n  {\n    return this.group ? this.value * this.group.baseScale : this.value;\n  }\n\n  public get classScaled(): number\n  {\n    return this.group ? this.value * this.group.classScale : this.value;\n  }\n\n  public get actual(): number\n  {\n    return this.num / this.den;\n  }\n\n  public get mixedWhole(): number\n  {\n    return this.den !== 1 ? Math.floor(this.num / this.den) : 0;\n  }\n\n  public get mixedNum(): number\n  {\n    return this.den !== 1 ? this.num % this.den : this.num;\n  }\n\n  public get floor(): number\n  {\n    return Math.floor(this.value);\n  }\n\n  public get remainder(): number\n  {\n    return this.value - this.floor;\n  }\n\n  public get error(): number\n  {\n    return this.actual - this.value;\n  }\n\n  public get distance(): number\n  {\n    return abs(this.error);\n  }\n\n  public get asString(): string\n  {\n    return (this.den === 1) ?\n      (this.value + '') :\n      (this.mixedWhole !== 0 ?\n          (this.mixedWhole + Value.SEPARATOR_MIXED + this.mixedNum + Value.SEPARATOR_FRACTION + this.den) :\n          (this.num + Value.SEPARATOR_FRACTION + this.den)\n      )\n    ;\n  }\n\n  public copy(): Value\n  {\n    return new Value(this.value, this.num, this.den, this.unit, this.group);\n  }\n\n  public zero(): Value\n  {\n    return new Value(0, 0, 1, this.unit, this.group);\n  }\n\n  public floored(): Value\n  {\n    return new Value(this.floor, this.floor, 1, this.unit, this.group);\n  }\n\n  public convertTo(to: Group): number\n  {\n    let group: Group = this.group;\n\n    return group ? group.parent.convert( this.value, group, to ) : this.value;\n  }\n\n  public convertToValue(group: Group): Value\n  {\n    return Value.fromNumberForGroup( this.convertTo( group ), group );\n  }\n\n  public conversions(transform: Transform, reverse: boolean, callback: (transformed: Value, index: number) => void): void\n  {\n    if (this.group)\n    {\n      this.group.matches(transform, reverse, (group, index) =>\n      {\n        callback( this.convertToValue( group ), index );\n      });\n    }\n  }\n\n  public normalize(transform: Transform): Value\n  {\n    let closest: Value = this;\n    let closestString: string = this.asString;\n\n    this.conversions(transform, false, (convert) =>\n    {\n      let convertString: string = convert.asString;\n\n      if (convertString.length <= closestString.length)\n      {\n        closest = convert;\n        closestString = convertString;\n      }\n    });\n\n    return closest;\n  }\n\n  public add(addend: Value, scale: number = 1): Value\n  {\n    let num = this.num * addend.den + addend.num * this.den * scale;\n    let den = this.den * addend.den;\n    let result = this.value + addend.value * scale;\n\n    return new Value(result, num, den, this.unit, this.group);\n  }\n\n  public sub(subtrahend: Value, scale: number = 1): Value\n  {\n    let num = this.num * subtrahend.den - subtrahend.num * this.den * scale;\n    let den = this.den * subtrahend.den;\n    let result = this.value - subtrahend.value * scale;\n\n    return new Value(result, num, den, this.unit, this.group);\n  }\n\n  public mul(scale: number): Value\n  {\n    return new Value(this.value * scale, this.num * scale, this.den, this.unit, this.group);\n  }\n\n  public static fromNumber(value: number, unit: string = '', group: Group = null): Value\n  {\n    return new Value(value, value, 1, unit, group);\n  }\n\n  public static fromNumberWithRange(value: number, unit: string = '', group: Group = null, minDen: number = 1, maxDen: number = 100): Value\n  {\n    let closestDenominator: number = 0;\n    let closestDistance: number = -1;\n\n    for (let i = minDen; i <= maxDen; i++)\n    {\n      let den = i;\n      let num = Math.floor( den * value );\n      let actual = num / den;\n      let distance = abs(value - actual);\n\n      if (closestDistance === -1 || distance < closestDistance)\n      {\n        closestDistance = distance;\n        closestDenominator = den;\n      }\n    }\n\n    if (closestDistance > EPSILON)\n    {\n      return new Value(value, value, 1, unit, group);\n    }\n\n    return new Value(value, Math.floor(value * closestDenominator), closestDenominator, unit, group);\n  }\n\n  public static fromNumberForGroup(value: number, group: Group): Value\n  {\n    return this.fromNumberWithDenominators( value, group.denominators, group.preferredUnit, group );\n  }\n\n  public static fromNumberWithDenominators(value: number, denominators: number[], unit: string = '', group: Group = null): Value\n  {\n    let closestDenominator: number = 0;\n    let closestDistance: number = -1;\n\n    for (let i = 0; i < denominators.length; i++)\n    {\n      let den = denominators[ i ];\n      let num = Math.floor( den * value );\n      let actual = num / den;\n      let distance = abs(value - actual);\n\n      if (closestDistance === -1 || distance < closestDistance)\n      {\n        closestDistance = distance;\n        closestDenominator = den;\n      }\n    }\n\n    if (closestDistance > EPSILON)\n    {\n      return new Value(value, value, 1, unit, group);\n    }\n\n    return new Value(value, Math.floor(value * closestDenominator), closestDenominator, unit, group);\n  }\n\n  public static fromFraction(num: number, den: number, unit: string = '', group: Group = null): Value\n  {\n    return new Value(num / den, num, den, unit, group);\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Value.ts","\nimport { isArray, isString, isRangeDefinition, isValueDefinition, isDefined } from './Functions';\nimport { RangeInput, RangesInput, RangeDefinition, ValueInput, ValueDefinition, ParseResult } from './Types';\nimport { Group, GroupFactory } from './Group';\nimport { Range, RangeList } from './Range';\nimport { Value } from './Value';\n\n\nexport let REGEX_RANGE: RegExp = /\\s*(-?[^-]+)-(.+)/;\nexport let REGEX_LIST: RegExp = /\\s*,\\s*/;\nexport let REGEX_PARSE: RegExp = /^\\s*(-?\\d*)(\\s+(\\d+))?(\\s*\\/\\s*(\\d+)|\\.(\\d+)|)\\s*(.*)\\s*$/i;\n\nexport function parseRanges(input: RangesInput, groups: GroupFactory): RangeList\n{\n  if (isArray(input))\n  {\n    return parseRangesFromArray( <RangeInput[]>input, groups );\n  }\n  else if (isString(input))\n  {\n    return parseRangesFromString( <string>input, groups );\n  }\n  else if (isRangeDefinition(input))\n  {\n    return parseRangesFromArray( [ <RangeDefinition>input ], groups );\n  }\n  else if (isValueDefinition(input))\n  {\n    return parseRangesFromArray( [ <ValueDefinition>input ], groups );\n  }\n\n  return [];\n}\n\nfunction parseRangesFromArray(input: RangeInput[], groups: GroupFactory): RangeList\n{\n  let ranges = [];\n\n  for (let i = 0; i < input.length; i++)\n  {\n    let range: Range = parseRange( input[ i ], groups );\n\n    ranges.push( range );\n  }\n\n  return ranges;\n}\n\nfunction parseRangesFromString(input: string, groups: GroupFactory): RangeList\n{\n  let ranges: string[] = input.split( REGEX_LIST );\n\n  return parseRangesFromArray( ranges, groups );\n}\n\nexport function parseRange(input: RangeInput, groups: GroupFactory): Range\n{\n  if (isString(input))\n  {\n    return parseRangeFromString( <string>input, groups );\n  }\n  else if (isRangeDefinition(input))\n  {\n    let range: RangeDefinition = <RangeDefinition>input;\n    let min: Value = parseValue( range.min, groups );\n    let max: Value = parseValue( range.max, groups );\n\n    return new Range( min, max );\n  }\n\n  return null;\n}\n\nfunction parseRangeFromString(input: string, groups: GroupFactory): Range\n{\n  let matches: string[] = REGEX_RANGE.exec( input );\n\n  if (!matches) {\n    let fixed: Value = parseValueFromString(input, groups);\n\n    return new Range(fixed, fixed);\n  }\n\n  let minInput: string = matches[1];\n  let maxInput: string = matches[2];\n\n  let minParsed: ParseResult = parseInput( minInput );\n  let maxParsed: ParseResult = parseInput( maxInput );\n\n  let minUnit: string = minParsed.unit || maxParsed.unit;\n  let maxUnit: string = maxParsed.unit || minParsed.unit;\n\n  let min: Value = parseValueFromResult(minParsed, minUnit, groups);\n  let max: Value = parseValueFromResult(maxParsed, maxUnit, groups);\n\n  return new Range(min, max);\n}\n\nexport function parseValue(input: ValueInput, groups: GroupFactory): Value\n{\n  if (isString(input))\n  {\n    return parseValueFromString( <string>input, groups );\n  }\n  else if (isValueDefinition(input))\n  {\n    return parseValueFromValue( <ValueDefinition>input, groups );\n  }\n\n  return null;\n}\n\nfunction parseValueFromValue(input: ValueDefinition, groups: GroupFactory): Value\n{\n  let givenValue: number = isDefined( input.value ) ? input.value : 1;\n  let num: number = isDefined( input.num ) ? input.num : givenValue;\n  let den: number = isDefined( input.den ) ? input.den : 1;\n  let parsedValue: number = isDefined( input.value ) ? input.value : num / den;\n  let unit: string = input.unit || '';\n  let group: Group = groups( unit );\n\n  return new Value( parsedValue, num, den, unit, group );\n}\n\nfunction parseValueFromString(input: string, groups: GroupFactory): Value\n{\n  let parsed: ParseResult = parseInput( input );\n\n  return parseValueFromResult(parsed, parsed.unit, groups);\n}\n\nfunction parseValueFromResult(result: ParseResult, unit: string, groups: GroupFactory): Value\n{\n  let group: Group = groups( unit );\n\n  return new Value(result.value, result.valueNum, result.valueDen, unit, group);\n}\n\n/**\n * Possible Values:\n * 1tsp\n * 1 tsp\n * 1/2 tsp\n * 1 1/2 tsp\n * 1 - 2 tsp\n * 1 tsp, 1 cup\n * 2/3 - 1 c, 1 lb, 2.45 cats\n */\nexport function parseInput(input: string): ParseResult\n{\n  let matches: string[] = REGEX_PARSE.exec( input );\n  let whole: number = parseInt( matches[1] );\n  let hasWhole: boolean = isFinite( whole );\n  let sign: number = matches[1].charAt(0) === '-' ? -1 : 1;\n  let num: number = parseInt( matches[3] );\n  let den: number = parseInt( matches[5] );\n  let decimal: number = parseInt( matches[6] );\n  let unit: string = matches[7];\n\n  if ( !hasWhole && isFinite( decimal ) )\n  {\n    whole = 0;\n    hasWhole = true;\n  }\n\n  if ( !hasWhole && !unit )\n  {\n    return null;\n  }\n\n  let value: number = 1;\n  let valueDen: number = 1;\n  let valueNum: number = 1;\n\n  if ( hasWhole )\n  {\n    value = whole;\n    valueNum = whole;\n\n    if ( isFinite( den ) )\n    {\n      valueDen = den;\n\n      if ( isFinite( num ) )\n      {\n        value += ( num / den ) * sign;\n        valueNum *= den;\n        valueNum += num;\n      }\n      else\n      {\n        value /= den;\n      }\n    }\n    else if ( isFinite( decimal ) )\n    {\n      let remainder = parseFloat( '0.' + decimal );\n\n      value += remainder * sign;\n      valueNum += remainder;\n    }\n\n    valueNum *= sign;\n  }\n\n  return { value, valueNum, valueDen, num, den, unit };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Parse.ts","\nimport { Value } from './Value';\nimport { Range, RangeList } from './Range';\nimport { isDefined, isSingular, coalesce } from './Functions';\n\n\nexport enum OutputUnit {\n  NONE,\n  GIVEN,\n  SHORT,\n  LONG\n}\n\nexport enum OutputFormat {\n  GIVEN,\n  NUMBER,\n  MIXED,\n  FRACTION\n}\n\nexport interface OutputInput {\n  unit?: OutputUnit;\n  format?: OutputFormat;\n  repeatUnit?: boolean;\n  unitSpacer?: string;\n  rangeSpacer?: string;\n  fractionSpacer?: string;\n  mixedSpacer?: string;\n  delimiter?: string;\n  significant?: number;\n}\n\nexport class Output implements OutputInput\n{\n\n  public unit: OutputUnit = OutputUnit.GIVEN;\n  public format: OutputFormat = OutputFormat.GIVEN;\n  public repeatUnit: boolean = false;\n  public unitSpacer: string = '';\n  public rangeSpacer: string = ' - ';\n  public fractionSpacer: string = '/';\n  public mixedSpacer: string = ' ';\n  public delimiter: string = ', ';\n  public significant: number = 2;\n\n  public constructor(input?: OutputInput)\n  {\n    if (isDefined(input))\n    {\n      this.set( input );\n    }\n  }\n\n  public set(input: OutputInput): this\n  {\n    this.unit = coalesce( input.unit, this.unit );\n    this.format = coalesce( input.format, this.format );\n    this.repeatUnit = coalesce( input.repeatUnit, this.repeatUnit );\n    this.unitSpacer = coalesce( input.unitSpacer, this.unitSpacer );\n    this.rangeSpacer = coalesce( input.rangeSpacer, this.rangeSpacer );\n    this.fractionSpacer = coalesce( input.fractionSpacer, this.fractionSpacer );\n    this.mixedSpacer = coalesce( input.mixedSpacer, this.mixedSpacer );\n    this.delimiter = coalesce( input.delimiter, this.delimiter );\n    this.significant = coalesce( input.significant, this.significant );\n\n    return this;\n  }\n\n  public extend(input?: OutputInput): Output\n  {\n    let extended: Output = this;\n\n    if (isDefined(input))\n    {\n      if (input instanceof Output)\n      {\n        extended = input;\n      }\n      else\n      {\n        extended = new Output( this );\n        extended.set( input );\n      }\n    }\n\n    return extended;\n  }\n\n  public ranges(ranges: RangeList): string\n  {\n    let out = '';\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      if (i > 0)\n      {\n        out += this.delimiter;\n      }\n\n      out += this.range( ranges[ i ] );\n    }\n\n    return out;\n  }\n\n  public range(range: Range): string\n  {\n    let out = '';\n\n    if (range.isFixed)\n    {\n      out += this.value( range.min );\n    }\n    else\n    {\n      let minUnit: boolean = this.repeatUnit || range.min.unit !== range.max.unit;\n\n      out += this.value( range.min, minUnit );\n      out += this.rangeSpacer;\n      out += this.value( range.max );\n    }\n\n    return out;\n  }\n\n  public value(value: Value, showUnit: boolean = true): string\n  {\n    let out = '';\n\n    if (this.isFraction( value ))\n    {\n      if (this.isMixed( value ))\n      {\n        out += value.mixedWhole;\n        out += this.mixedSpacer;\n        out += value.mixedNum;\n        out += this.fractionSpacer;\n        out += value.den;\n      }\n      else\n      {\n        out += value.num;\n        out += this.fractionSpacer;\n        out += value.den;\n      }\n    }\n    else\n    {\n      let valueString: string = value.value + '';\n\n      let valueSignificant: string = value.value\n        .toFixed(this.significant)\n        .replace(/0*$/, '')\n        .replace(/\\.$/, '');\n\n      out += valueSignificant.length < valueString.length ? valueSignificant : valueString;\n    }\n\n    if (this.unit !== OutputUnit.NONE && showUnit)\n    {\n      let group = value.group;\n\n      out += this.unitSpacer;\n\n      if (this.isLongUnit( value ))\n      {\n        out += isSingular( value.value ) ? group.getSingularLong() : group.getPluralLong();\n      }\n      else if (this.isShortUnit( value ))\n      {\n        out += isSingular( value.value ) ? group.getSingularShort() : group.getPluralShort();\n      }\n      else\n      {\n        out += value.unit;\n      }\n    }\n\n    return out;\n  }\n\n  public isFraction(value: Value): boolean\n  {\n    return value.isFraction && this.format !== OutputFormat.NUMBER;\n  }\n\n  public isMixed(value: Value): boolean\n  {\n    return value.mixedWhole !== 0 && this.format === OutputFormat.MIXED;\n  }\n\n  public isShortUnit(value: Value)\n  {\n    return value.group && this.unit === OutputUnit.SHORT;\n  }\n\n  public isLongUnit(value: Value)\n  {\n    return value.group && this.unit === OutputUnit.LONG;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Output.ts","\nimport { isDefined, coalesce } from './Functions';\nimport { System } from './System';\n\nexport interface TransformInput {\n  common?: boolean;\n  system?: System;\n}\n\nexport class Transform implements TransformInput\n{\n\n  public common: boolean = true;\n  public system: System = System.GIVEN;\n\n  public constructor(input?: TransformInput)\n  {\n    if (isDefined(input))\n    {\n      this.set( input );\n    }\n  }\n\n  public set(input: TransformInput): this\n  {\n    this.common = coalesce( input.common, this.common );\n    this.system = coalesce( input.system, this.system );\n\n    return this;\n  }\n\n  public extend(input?: TransformInput): Transform\n  {\n    let extended: Transform = this;\n\n    if (isDefined(input))\n    {\n      if (input instanceof Transform)\n      {\n        extended = input;\n      }\n      else\n      {\n        extended = new Transform( this );\n        extended.set( input );\n      }\n    }\n\n    return extended;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Transform.ts","\nimport { Plurality } from './Plurality';\nimport { System } from './System';\nimport { Class } from './Class';\nimport { GroupDefinition, UnitDefinitionMap, Numbers } from './Types';\nimport { appendTo } from './Functions';\nimport { Transform } from './Transform';\n\n\nexport type GroupList = Group[];\n\nexport type GroupMap = { [key: string]: Group };\n\nexport type GroupFactory = (unit: string) => Group;\n\nexport class Group\n{\n\n  public system: System;\n  public common: boolean;\n  public unit: string;\n  public baseUnit: string;\n  public baseScale: number = 1;\n  public classScale: number = 0;\n  public preferredUnit: string;\n  public relativeUnit: string;\n  public relativeScale: number;\n  public units: UnitDefinitionMap;\n  public denominators: number[];\n  public dynamic: boolean = false;\n  public parent: Class;\n\n  private singularShort: string;\n  private singularLong: string;\n  private pluralShort: string;\n  private pluralLong: string;\n\n  public constructor(definition: GroupDefinition, parent: Class)\n  {\n    this.system = definition.system;\n    this.common = !!definition.common;\n    this.unit = definition.unit;\n    this.baseUnit = definition.baseUnit;\n    this.preferredUnit = definition.preferredUnit || definition.unit;\n    this.relativeUnit = definition.relativeUnit;\n    this.relativeScale = definition.relativeScale || 1;\n    this.units = definition.units;\n    this.denominators = definition.denominators;\n    this.parent = parent;\n\n    this.updateUnits();\n  }\n\n  public get isBase(): boolean\n  {\n    return this.unit === this.baseUnit;\n  }\n\n  public setDynamic(dynamic: boolean = true): this\n  {\n    this.dynamic = dynamic;\n\n    return this;\n  }\n\n  public addUnits(units: UnitDefinitionMap): this\n  {\n    for (let unit in units)\n    {\n      this.units[ unit ] = units[ unit ];\n    }\n\n    this.updateUnits();\n\n    return this;\n  }\n\n  public addDenominator(denominators: Numbers): this\n  {\n    appendTo( this.denominators, denominators );\n\n    return this;\n  }\n\n  public setDenominators(denominators: number[]): this\n  {\n    this.denominators = denominators;\n\n    return this;\n  }\n\n  public updateUnits(): this\n  {\n    this.singularShort = null;\n    this.singularLong = null;\n    this.pluralShort = null;\n    this.pluralLong = null;\n\n    for (let unit in this.units)\n    {\n      var plurality = this.units[ unit ];\n\n      if (plurality !== Plurality.PLURAL)\n      {\n        if (!this.singularShort || unit.length < this.singularShort.length)\n        {\n          this.singularShort = unit;\n        }\n\n        if (!this.singularLong || unit.length > this.singularLong.length)\n        {\n          this.singularLong = unit;\n        }\n      }\n\n      if (plurality !== Plurality.SINGULAR)\n      {\n        if (!this.pluralShort || unit.length < this.pluralShort.length)\n        {\n          this.pluralShort = unit;\n        }\n\n        if (!this.pluralLong || unit.length > this.pluralLong.length)\n        {\n          this.pluralLong = unit;\n        }\n      }\n    }\n\n    return this;\n  }\n\n  public getPluralLong(): string\n  {\n    return this.pluralLong;\n  }\n\n  public getPluralShort(): string\n  {\n    return this.pluralShort;\n  }\n\n  public getSingularLong(): string\n  {\n    return this.singularLong;\n  }\n\n  public getSingularShort(): string\n  {\n    return this.singularShort;\n  }\n\n  public matches(transform: Transform, reverse: boolean, callback: (group: Group, index: number) => any): void\n  {\n    if (this.parent)\n    {\n      let groups: GroupList = this.parent.groups;\n      let matched: number = 0;\n\n      let start = reverse ? groups.length - 1 : 0;\n      let stop = reverse ? -1 : groups.length;\n      let increment = reverse ? -1 : 1;\n\n      for (let i = start; i !== stop; i += increment)\n      {\n        let group: Group = groups[ i ];\n\n        if (matchesGroup( transform.system, group, this ) && (group.common || !transform.common))\n        {\n          callback( group, matched++ );\n        }\n      }\n    }\n  }\n\n}\n\nexport function matchesGroup(desired: System, group: Group, givenGroup?: Group): boolean\n{\n  switch (desired)\n  {\n    case System.METRIC:\n      return group.system === System.METRIC;\n    case System.IMPERIAL:\n      return group.system === System.IMPERIAL;\n    case System.NONE:\n      return false;\n    case System.ANY:\n      return true;\n    case System.GIVEN:\n      return givenGroup && group.baseUnit === givenGroup.baseUnit;\n  }\n\n  return false;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Group.ts","\nimport { GroupDefinition, StringMap, NumberMap, Converter, ConverterDoubleMap } from './Types';\nimport { Group, GroupMap, GroupList } from './Group';\n\n\nexport type ClassMap = { [unit: string]: Class };\n\nexport class Class\n{\n\n  public name: string;\n  public groupMap: GroupMap;\n  public groups: GroupList;\n  public bases: StringMap;\n  public converters: NumberMap;\n  public mapping: ConverterDoubleMap;\n\n  public constructor(name: string, groups?: GroupDefinition[])\n  {\n    this.name = name;\n    this.groupMap = {};\n    this.groups = [];\n    this.bases = {};\n    this.converters = {};\n    this.mapping = {};\n\n    if (groups)\n    {\n      this.addGroups(groups);\n    }\n  }\n\n  public addGroups(definitions: GroupDefinition[]): this\n  {\n    for (let i = 0; i < definitions.length; i++)\n    {\n      this.addGroup(definitions[i]);\n    }\n\n    return this;\n  }\n\n  public addGroup(definition: GroupDefinition): this\n  {\n    let group = new Group(definition, this);\n    let { relativeUnit, units } = group;\n\n    if (relativeUnit)\n    {\n      group.baseScale = group.relativeScale * this.converters[ relativeUnit ];\n      group.baseUnit = this.bases[ relativeUnit ];\n    }\n\n    for (let alias in units)\n    {\n      this.converters[ alias ] = group.baseScale;\n      this.bases[ alias ] = group.baseUnit;\n      this.groupMap[ alias ] = group;\n    }\n\n    this.groups.push( group );\n\n    return this;\n  }\n\n  private getFirstBase(): Group\n  {\n    let groups: GroupList = this.groups;\n\n    for (let i = 0; i < groups.length; i++)\n    {\n      let group: Group = groups[ i ];\n\n      if (group.unit === group.baseUnit)\n      {\n        return group;\n      }\n    }\n\n    return null;\n  }\n\n  public setClassScales(): this\n  {\n    let groups: GroupList = this.groups;\n    let first: Group = this.getFirstBase();\n\n    if (first)\n    {\n      for (let i = 0; i < groups.length; i++)\n      {\n        let group: Group = groups[ i ];\n\n        if (group.baseUnit === first.baseUnit)\n        {\n          group.classScale = group.baseScale;\n        }\n        else if (group.baseUnit in this.mapping)\n        {\n          group.classScale = this.mapping[ group.baseUnit ][ first.baseUnit ]( group.baseScale );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  public setBaseConversion(fromUnit: string, toUnit: string, converter: Converter): this\n  {\n    let mapping = this.mapping;\n    mapping[ fromUnit ] = mapping[ fromUnit ] || {};\n    mapping[ fromUnit ][ toUnit ] = converter;\n\n    return this;\n  }\n\n  public convert(value: number, from: Group, to: Group): number\n  {\n    if (from === to || !from || !to)\n    {\n      return value;\n    }\n\n    let converted: number = value * from.baseScale;\n\n    if (from.baseUnit !== to.baseUnit)\n    {\n      let converter: Converter = this.mapping[ from.baseUnit ][ to.baseUnit ];\n\n      converted = converter( converted );\n    }\n\n    return converted / to.baseScale;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Class.ts","\nimport { sign, isDefined, coalesce } from './Functions';\nimport { Range } from './Range';\n\n\nexport enum SortType {\n  MIN,\n  MAX,\n  AVERAGE\n}\n\nexport interface SortInput {\n  ascending?: boolean;\n  type?: SortType;\n  classes?: SortClassMap;\n}\n\nexport type SortClassMap = { [className: string]: number };\n\nexport type Sorter = (a: Range, b: Range) => number;\n\nexport class Sort implements SortInput\n{\n\n  public ascending: boolean = false;\n  public type: SortType = SortType.MAX;\n  public classes: SortClassMap = {};\n\n  public constructor(input?: SortInput)\n  {\n    if (isDefined(input))\n    {\n      this.set( input );\n    }\n  }\n\n  public set(input: SortInput): this\n  {\n    this.ascending = coalesce( input.ascending, this.ascending );\n    this.type = coalesce( input.type, this.type );\n\n    if (isDefined( input.classes ))\n    {\n      for (let className in input.classes)\n      {\n        this.classes[ className ] = input.classes[ className ];\n      }\n    }\n\n    return this;\n  }\n\n  public extend(input?: SortInput): Sort\n  {\n    let extended: Sort = this;\n\n    if (isDefined(input))\n    {\n      if (input instanceof Sort)\n      {\n        extended = input;\n      }\n      else\n      {\n        extended = new Sort( this );\n        extended.set( input );\n      }\n    }\n\n    return extended;\n  }\n\n  public getSorter(): Sorter\n  {\n    return (a: Range, b: Range) =>\n    {\n      let d: number = this.getClassComparison(a, b);\n\n      if (d === 0)\n      {\n        switch (this.type)\n        {\n          case SortType.MIN:\n            d = this.getMinComparison(a, b);\n            break;\n          case SortType.MAX:\n            d = this.getMaxComparison(a, b);\n            break;\n          case SortType.AVERAGE:\n            d = this.getAverageComparison(a, b);\n            break;\n        }\n      }\n\n      return this.ascending ? d : -d;\n    };\n  }\n\n  private getMinComparison(a: Range, b: Range): number\n  {\n    return sign( a.min.classScaled - b.min.classScaled );\n  }\n\n  private getMaxComparison(a: Range, b: Range): number\n  {\n    return sign( a.max.classScaled - b.max.classScaled );\n  }\n\n  private getAverageComparison(a: Range, b: Range): number\n  {\n    let avg: number = (a.min.classScaled + a.max.classScaled) * 0.5;\n    let bvg: number = (b.min.classScaled + b.max.classScaled) * 0.5;\n\n    return sign( avg - bvg );\n  }\n\n  private getClassComparison(a: Range, b: Range): number\n  {\n    let ag: number = a.min.group ? 1 : -1;\n    let bg: number = b.min.group ? 1 : -1;\n\n    if (ag !== bg)\n    {\n      return ag - bg;\n    }\n\n    let ac: number = this.classes[ a.min.group.parent.name ] || 0;\n    let bc: number = this.classes[ b.min.group.parent.name ] || 0;\n\n    return ac - bc;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Sort.ts","\nimport { Class, ClassMap } from './Class';\nimport { Output } from './Output';\nimport { Group } from './Group';\nimport { Transform } from './Transform';\nimport { Sort } from './Sort';\n\n\nexport let classMap: ClassMap = {};\nexport let classes: Class[] = [];\nexport let unitToClass: ClassMap = {};\nexport let globalOutput: Output = new Output();\nexport let globalTransform: Transform = new Transform();\nexport let globalSort: Sort = new Sort();\n\n\nexport function getGroupForUnit(unit: string): Group | undefined\n{\n  let normalizedUnit: string = (unit || '').toLowerCase();\n  let parent: Class = unitToClass[ normalizedUnit ];\n\n  return parent ? parent.groupMap[ normalizedUnit ] : null;\n}\n\nexport function addClass(parent: Class): void\n{\n  classMap[ parent.name ] = parent;\n  classes.push( parent );\n\n  for (let unit in parent.converters)\n  {\n    unitToClass[ unit ] = parent;\n  }\n}\n\nexport function addClasses(...classes: Class[]): void\n{\n  for (let i = 0; i < classes.length; i++)\n  {\n    addClass( classes[ i ] );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Global.ts","\nimport { parseRanges, parseValue } from './Parse';\nimport { getGroupForUnit, globalTransform, globalOutput, globalSort } from './Global';\nimport { RangesInput } from './Types';\nimport { Range, RangeList, RangeMutator } from './Range';\nimport { Group } from './Group';\n\nimport { Transform, TransformInput } from './Transform';\nimport { Output, OutputInput } from './Output';\nimport { Sort, SortInput } from './Sort';\nimport { Value } from './Value';\nimport { Class } from './Class';\n\n\n// TODO filter (out certain classes or groups)\n// TODO preferred () converts units to preferredUnits if available\n\nexport function uz(input: RangesInput)\n{\n  return new Base(input);\n}\n\nexport type BaseInput = Base | RangesInput;\n\nexport function parseBase(input: BaseInput): Base\n{\n  if (input instanceof Base)\n  {\n    return <Base>input;\n  }\n\n  return new Base( <RangesInput>input );\n}\n\nexport type ClassGrouping = {\n  groupless: RangeList,\n  classes: { [className: string]: { ranges: RangeList, parent: Class } }\n};\n\nexport class Base\n{\n\n  public input: RangesInput;\n  public ranges: RangeList;\n\n  public constructor(input: RangesInput, ranges?: RangeList )\n  {\n    this.input = input;\n    this.ranges = ranges || parseRanges( input, getGroupForUnit );\n  }\n\n  // 1c, 2.3m SCALE BY 2 = 2c, 4.6m\n  public scale(amount: number): Base\n  {\n    return this.mutate(r => r.mul( amount ));\n  }\n\n  // 1c, 3m SCALE TO 1/2c = 1/2c, 1.5m\n  public scaleTo(unitValue: string): Base\n  {\n    return this.scale( this.getScaleTo(unitValue) );\n  }\n\n  // 0c, 2tbsp, -4tbsp = 0c, 2tbsp\n  public positive(): Base\n  {\n    return this.mutate(r => r.positive());\n  }\n\n  // 0c, 2tbsp, -4tbsp = -4tbsp\n  public negative(): Base\n  {\n    return this.mutate(r => r.negative());\n  }\n\n  // 0c, 2tbsp = 2tbsp\n  public nonzero(): Base\n  {\n    return this.mutate(r => r.nonzero());\n  }\n\n  // 1 - 3c = 3c\n  public max(): Base\n  {\n    return this.mutate(r => r.maxd());\n  }\n\n  // 1 - 3c = 1c\n  public min(): Base\n  {\n    return this.mutate(r => r.mind());\n  }\n\n  // 1.5pt = 3c\n  public normalize(options?: TransformInput): Base\n  {\n    let transform: Transform = globalTransform.extend( options );\n\n    return this.mutate(r => r.normalize( transform ));\n  }\n\n  // 1c, 1pt = 1.5pt\n  public compact(options?: TransformInput): Base\n  {\n    let compacted: RangeList = [];\n    let transform: Transform = globalTransform.extend( options );\n    let { classes, groupless } = this.groupByClass();\n\n    for (let className in classes)\n    {\n      let entry = classes[ className ];\n      let ranges: RangeList = entry.ranges;\n      let parent: Class = entry.parent;\n      let minGroupChosen: Group = <Group>null;\n      let maxGroupChosen: Group = <Group>null;\n      let minSum: number = 0;\n      let maxSum: number = 0;\n\n      for (let i = 0; i < ranges.length; i++)\n      {\n        let range: Range = ranges[ i ];\n        let minGroup: Group = range.min.group;\n        let maxGroup: Group = range.max.group;\n\n        if (!minGroupChosen || ((minGroup.common || !transform.common) && minGroup.baseScale > minGroupChosen.baseScale))\n        {\n          minSum = parent.convert( minSum, minGroupChosen, minGroup );\n          minGroupChosen = minGroup;\n        }\n\n        if (!maxGroupChosen || ((maxGroup.common || !transform.common) && maxGroup.baseScale > maxGroupChosen.baseScale))\n        {\n          maxSum = parent.convert( maxSum, maxGroupChosen, maxGroup );\n          maxGroupChosen = maxGroup;\n        }\n\n        minSum += range.min.convertTo( minGroupChosen );\n        maxSum += range.max.convertTo( maxGroupChosen );\n      }\n\n      let min: Value = Value.fromNumberForGroup( minSum, minGroupChosen );\n      let max: Value = Value.fromNumberForGroup( maxSum, maxGroupChosen );\n\n      compacted.push( new Range( min, max ) );\n    }\n\n    if (groupless.length)\n    {\n      let minSum: Value = new Value(0, 0, 1, '', <Group>null);\n      let maxSum: Value = new Value(0, 0, 1, '', <Group>null);\n\n      for (let i = 0; i < groupless.length; i++)\n      {\n        minSum = minSum.add( groupless[ i ].min );\n        maxSum = maxSum.add( groupless[ i ].max );\n      }\n\n      compacted.push( new Range( minSum, maxSum ) );\n    }\n\n    return new Base( this.input, compacted );\n  }\n\n  // 1.5pt = 1c, 1pt\n  public expand(options?: TransformInput): Base\n  {\n    let transform: Transform = globalTransform.extend( options );\n    let compacted: Base = this.compact( transform );\n    let { ranges } = compacted;\n    let expanded: RangeList = [];\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n      let min: Value = range.min;\n      let minGroup: Group = min.group;\n\n      if (minGroup)\n      {\n        minGroup.matches(transform, true, (group) =>\n        {\n          if (min.value > 0)\n          {\n            let transformed = min.convertToValue(group);\n\n            if (group.isBase)\n            {\n              expanded.push( Range.fromFixed( transformed ) )\n            }\n            else if (transformed.value > 1)\n            {\n              let floored: Value = transformed.floored();\n              let scaled: number = group.baseScale / minGroup.baseScale;\n\n              min = min.sub( floored, scaled );\n              expanded.push( Range.fromFixed( floored ) );\n            }\n          }\n        });\n      }\n      else\n      {\n        expanded.push( range );\n      }\n    }\n\n    return new Base( this.input, expanded );\n  }\n\n  private groupByClass(): ClassGrouping\n  {\n    let ranges: RangeList = this.ranges;\n    let classes = {};\n    let groupless = [];\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n\n      if (range.min.group)\n      {\n        let parent: Class = range.min.group.parent;\n        let entry = classes[ parent.name ];\n\n        if (!entry)\n        {\n          entry = classes[ parent.name ] = {\n            parent: parent,\n            ranges: []\n          };\n        }\n\n        entry.ranges.push( range );\n      }\n      else\n      {\n        groupless.push( range );\n      }\n    }\n\n    return { classes, groupless };\n  }\n\n  public add(input: BaseInput, scale: number = 1): Base\n  {\n    return this.operateMatches(input, (a, b) =>\n    {\n      return a.add(b, scale);\n    });\n  }\n\n  public sub(input: BaseInput, scale: number = 1): Base\n  {\n    return this.operateMatches(input, (a, b) =>\n    {\n      return a.sub(b, scale);\n    });\n  }\n\n  private operateMatches(input: BaseInput, operate: (a: Range, b: Range) => any): Base\n  {\n    let ranges: RangeList = this.ranges;\n    let output: RangeList = [];\n\n    let other: Base = parseBase( input );\n    let otherRanges: RangeList = other.ranges;\n    let otherUsed: boolean[] = [];\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n\n      for (let k = 0; k < otherRanges.length; k++)\n      {\n        if (!otherUsed[ k ])\n        {\n          let otherRange: Range = otherRanges[ k ];\n\n          if (range.isMatch( otherRange ))\n          {\n            range = operate( range, otherRange );\n            otherUsed[ k ] = true;\n          }\n        }\n      }\n\n      output.push( range );\n    }\n\n    for (let k = 0; k < otherRanges.length; k++)\n    {\n      if (!otherUsed[ k ])\n      {\n        output.push( otherRanges[ k ] );\n      }\n    }\n\n    return new Base( this.input, output );\n  }\n\n  public transform(options?: TransformInput): Base\n  {\n    let transform: Transform = globalTransform.extend( options );\n\n    return this.mutate((r) =>\n    {\n      let min: Value = null;\n      let max: Value = null;\n\n      r.min.conversions(transform, false, (transformed) => {\n        if (!min || transformed.asString.length < min.asString.length) {\n          min = transformed;\n        }\n      });\n\n      r.max.conversions(transform, false, (transformed) => {\n        if (!max || transformed.asString.length < max.asString.length) {\n          max = transformed;\n        }\n      });\n\n      return new Range( min, max );\n    });\n  }\n\n  public getScaleTo(unitValue: string): number\n  {\n    let to: Value = parseValue( unitValue, getGroupForUnit );\n    let converted: Range = this.convert( to.unit );\n    let scale: number = to.value / converted.average;\n\n    return scale;\n  }\n\n  public mutate(mutator: RangeMutator): Base\n  {\n    let ranges: RangeList = [];\n    let source: RangeList = this.ranges;\n\n    for (let i = 0; i < source.length; i++)\n    {\n      let mutated: Range = mutator( source[ i ] ) ;\n\n      if (mutated)\n      {\n        ranges.push( mutated );\n      }\n    }\n\n    return new Base( this.input, ranges );\n  }\n\n  public output(options?: OutputInput): string\n  {\n    let output: Output = globalOutput.extend( options );\n\n    return output.ranges( this.ranges );\n  }\n\n  public convert(unit: string): Range\n  {\n    let group: Group = getGroupForUnit( unit );\n\n    if (!group)\n    {\n      return null;\n    }\n\n    let parent: Class = group.parent;\n    let ranges: RangeList = this.ranges;\n    let min: Value = new Value(0, 0, 1, group.unit, group);\n    let max: Value = new Value(0, 0, 1, group.unit, group);\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n      let rangeGroup: Group = range.min.group;\n\n      if (rangeGroup && rangeGroup.parent === parent)\n      {\n        let rangeScale: number = rangeGroup.baseScale / group.baseScale;\n\n        min = min.add(range.min, rangeScale);\n        max = max.add(range.max, rangeScale);\n      }\n    }\n\n    return new Range( min, max );\n  }\n\n  public sort(options?: SortInput): Base\n  {\n    let sort: Sort = globalSort.extend( options );\n    let ranges: RangeList = this.ranges.slice();\n\n    ranges.sort( sort.getSorter() );\n\n    return new Base( this.input, ranges );\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Base.ts","\n// Enums\nexport * from './Plurality';\nexport * from './System';\n\n// Functions\nexport * from './Functions';\nexport * from './Parse';\n\n// Types\nexport * from './Types';\n\n// Secondary\nexport * from './Output';\nexport * from './Transform';\n\n// Core\nexport * from './Group';\nexport * from './Class';\nexport * from './Value';\nexport * from './Range';\nexport * from './Base';\n\n// Global\nexport * from './Global';\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts"],"sourceRoot":""}