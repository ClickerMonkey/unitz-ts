{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 9b9d85174070f6fb47aa","webpack:///./src/Plurality.ts","webpack:///./src/System.ts","webpack:///./src/Functions.ts","webpack:///./src/Group.ts","webpack:///./src/Class.ts","webpack:///./src/Output.ts","webpack:///./src/Transform.ts","webpack:///./src/Sort.ts","webpack:///./src/Core.ts","webpack:///./src/Value.ts","webpack:///./src/Range.ts","webpack:///./src/Base.ts","webpack:///./src/Parse.ts","webpack:///./src/classes/Weight.ts","webpack:///./src/classes/Area.ts","webpack:///./src/classes/Time.ts","webpack:///./src/classes/Digital.ts","webpack:///./src/classes/Temperature.ts","webpack:///./src/classes/Angle.ts","webpack:///./src/classes/Volume.ts","webpack:///./src/classes/Length.ts","webpack:///./src/classes/index.ts","webpack:///./src/index.ts"],"names":[],"mappings":"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","file":"unitz.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Unitz\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Unitz\"] = factory();\n\telse\n\t\troot[\"Unitz\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 9b9d85174070f6fb47aa","\n\n/**\n * An enumeration which specifies whether a unit represents a singular value (1),\n * a plural value, or might represent either.\n */\nexport enum Plurality\n{\n\n  /**\n   * The unit is only a singular representation.\n   */\n  SINGULAR,\n\n  /**\n   * The unit is only a plural representation.\n   */\n  PLURAL,\n\n  /**\n   * The unit can be used as singular and plural.\n   */\n  EITHER\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Plurality.ts","\n\nexport enum System\n{\n  METRIC,\n  US,\n  NONE,\n  ANY,\n  GIVEN\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/System.ts","\n\n/**\n * The class which contains commonly used functions by the library. These\n * functions and variables exist in a class so they may be overridden if\n * desired.\n */\nexport class Functions\n{\n\n  /**\n   * The maximum distance a number can be from another to be considered\n   * equivalent. This is to compensate for floating point precision issues.\n   */\n  public static EPSILON: number = 0.00001;\n\n  /**\n   * Determines if the given number is zero.\n   *\n   * @param x The number to test.\n   * @return True if the number is zero, otherwise false.\n   * @see [[Functions.EPSILON]]\n   */\n  public static isZero(x: number): boolean\n  {\n    return this.abs( x ) < this.EPSILON;\n  }\n\n  /**\n   * Determines if the given number is equal to another.\n   *\n   * @param a The first number to compare.\n   * @param b The second number to compare.\n   * @return True if the two numbers are equal.\n   * @see [[Functions.EPSILON]]\n   */\n  public static isEqual(a: number, b: number): boolean\n  {\n    return this.abs( a - b ) < this.EPSILON;\n  }\n\n  /**\n   * Determines if the given number is a whole number (integer).\n   *\n   * @param x The number to test.\n   * @return True if the number is whole, otherwise false.\n   * @see [[Functions.EPSILON]]\n   */\n  public static isWhole(x: number): boolean\n  {\n    return this.abs( Math.floor( x ) - x ) < this.EPSILON;\n  }\n\n  /**\n   * Determines if the given number is singular. A singular number is 1 or -1.\n   *\n   * @param x The number to test.\n   * @return True if the number is singular, otherwise false.\n   * @see [[Functions.EPSILON]]\n   */\n  public static isSingular(x: any): boolean\n  {\n    return this.isNumber( x ) && this.abs( this.abs( x ) - 1 ) < this.EPSILON;\n  }\n\n  /**\n   * Determines if the given number is valid. A valid number is finite and not\n   * NaN or Infinity.\n   *\n   * @param x The number to test.\n   * @return True if the input is finite number.\n   */\n  public static isNumber(x: any): boolean\n  {\n    return isFinite(x);\n  }\n\n  /**\n   * Trims the given input if its a string.\n   *\n   * @param x The string to remove space from the beginning and end.\n   * @return A trimmed string.\n   */\n  public static trim(x: string): string\n  {\n    return x ? x.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '') : x;\n  }\n\n  /**\n   * Calculates the greatest common denominator between the two numbers. If\n   * either of the numbers are not whole (integers) then 1 is immediately\n   * returned.\n   *\n   * @param a The first number.\n   * @param b The second number.\n   * @return The greatest common denominator between the two numbers.\n   */\n  public static gcd(a: number, b: number): number\n  {\n    if (!this.isWhole(a) || !this.isWhole(b))\n    {\n      return 1;\n    }\n\n    let x: number = a < b ? a : b;\n    let y: number = a < b ? b : a;\n    x = this.abs(x);\n    y = this.abs(y);\n\n    while(y)\n    {\n      let t = y;\n      y = x % y;\n      x = t;\n    }\n\n    return x;\n  }\n\n  /**\n   * Determines the absolute value of the given number.\n   *\n   * @param x The number to return the positive version of.\n   * @return The absolute value of x.\n   */\n  public static abs(x: number): number\n  {\n    return x < 0 ? -x : x;\n  }\n\n  /**\n   * Determines the sign of the given number. One of three values will be\n   * returned: 1, 0, or -1.\n   *\n   * @param x The number to determine the sign of.\n   * @return The sign of the given number.\n   */\n  public static sign(x: number): number\n  {\n    return x < 0 ? -1 : (x > 0 ? 1 : 0);\n  }\n\n  /**\n   * Appends an element or array of elements to the end of the given array.\n   *\n   * @param array The array to append values to the end of.\n   * @param input The element or array of elements to append to the end.\n   * @return The reference to the `array` given.\n   */\n  public static appendTo<T>(array: T[], input: T | T[]): T[]\n  {\n    if (input instanceof Array)\n    {\n      array.push.apply( array, input );\n    }\n    else if (input)\n    {\n      array.push( input );\n    }\n\n    return array;\n  }\n\n  /**\n   * Determines whether the given input looks like a [[GroupDefinition]].\n   *\n   * @param input The variable to inspect.\n   * @return True if the variable appears to be a [[GroupDefinition]].\n   */\n  public static isGroupDefinition(input: any): boolean\n  {\n    return !!(input && input.system && input.unit && input.denominators && input.units);\n  }\n\n  /**\n   * Determines whether the given input looks like a [[ValueDefinition]].\n   *\n   * @param input The variable to inspect.\n   * @return True if the variable appears to be a [[ValueDefinition]].\n   */\n  public static isValueDefinition(input: any): boolean\n  {\n    return !!(input && (input.value || input.unit || input.num || input.den));\n  }\n\n  /**\n   * Determines whether the given input looks like a [[RangeDefinition]].\n   *\n   * @param input The variable to inspect.\n   * @return True if the variable appears to be a [[RangeDefinition]].\n   */\n  public static isRangeDefinition(input: any): boolean\n  {\n    return !!(input && input.min && input.max);\n  }\n\n  /**\n   * Determines whether the given input is an array.\n   *\n   * @param input The variable to test.\n   * @return True if the variable is an array, otherwise false.\n   */\n  public static isArray(input: any): boolean\n  {\n    return input instanceof Array;\n  }\n\n  /**\n   * Determines whether the given input is a string.\n   *\n   * @param input The variable to test.\n   * @return True if the variable is a string, otherwise false.\n   */\n  public static isString(input: any): boolean\n  {\n    return typeof(input) === 'string';\n  }\n\n  /**\n   * Determines whether the given input is defined.\n   *\n   * @param input The variable to test.\n   * @return True if the variable is defined, otherwise false.\n   */\n  public static isDefined(input: any): boolean\n  {\n    return typeof(input) !== 'undefined';\n  }\n\n  /**\n   * Returns the first argument which is defined.\n   *\n   * @param a The first argument to look at.\n   * @param b The second argument to look at.\n   * @return The first defined argument.\n   * @see [[Functions.isDefined]]\n   */\n  public static coalesce(a: any, b: any): any\n  {\n    return this.isDefined( a ) ? a : b;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Functions.ts","\nimport { Plurality } from './Plurality';\nimport { System } from './System';\nimport { Class } from './Class';\nimport { GroupDefinition, UnitDefinitionMap, Numbers } from './Types';\nimport { Functions as fn } from './Functions';\nimport { Transform } from './Transform';\n\n\n/**\n * An array of groups.\n */\nexport type GroupList = Group[];\n\n/**\n * An object of groups keyed by their units.\n */\nexport type GroupMap = { [key: string]: Group };\n\n/**\n * A function which takes a unit and returns a Group instance.\n */\nexport type GroupFactory = (unit: string) => Group;\n\n\n/**\n * A unit and its aliases as well as their plurality.\n *\n * A group is relative to a base group or is a base group itself. As unit\n * aliases are added to the group it determines the appropriate plural and\n * singular long and short versions given the unit aliases in this group.\n */\nexport class Group\n{\n\n  /**\n   * The System this group belongs in. One of [[System.METRIC]],\n   * [[System.US]], or [[System.ANY]].\n   */\n  public system: System;\n\n  /**\n   * Whether this group is considered common. A common group is one a\n   * developer has decided the user will be familiar with and would be okay\n   * seeing values in this unit.\n   */\n  public common: boolean;\n\n  /**\n   * The main unit for this group. This is the preferred unit if one is not\n   * specified in the definition.\n   */\n  public unit: string;\n\n  /**\n   * The unit of the base group. The base group is typically the smallest value\n   * and is also where the baseUnit matches unit.\n   */\n  public baseUnit: string;\n\n  /**\n   * The scale of this group relative to the base group. This is used for\n   * conversions of values with the same base group.\n   */\n  public baseScale: number = 1;\n\n  /**\n   * The scale of this group relative to the first base group added to the\n   * class. This is used to compare numbers of the same class across all bases.\n   */\n  public classScale: number = 0;\n\n  /**\n   * The unit the developer prefers for their users.\n   *\n   * @see [[Base.preferred]]\n   */\n  public preferredUnit: string;\n\n  /**\n   * The unit this group is relative to.\n   */\n  public relativeUnit: string;\n\n  /**\n   * This defines how to calculate the scale of the group by multiplying it by\n   * the group of `relativeUnit`.\n   */\n  public relativeScale: number;\n\n  /**\n   * A map of all valid units and whether they are singular, plural, or either.\n   */\n  public units: UnitDefinitionMap;\n\n  /**\n   * The list of valid denominators for this group. Values when converted to\n   * fractions look at this list to ensure that fractions are not produced that\n   * are not user friendly. For example, no one would say 5/23 a meter.\n   */\n  public denominators: number[];\n\n  /**\n   * Whether this group was dynamically created by user input having units\n   * not mapped to groups by the developer.\n   */\n  public dynamic: boolean = false;\n\n  /**\n   * The class this group belongs to.\n   */\n  public parent: Class;\n\n  /**\n   * The shortest unit in this group that is used for singular values.\n   */\n  public singularShort: string;\n\n  /**\n   * The longest unit in this group that is used for singular values.\n   */\n  public singularLong: string;\n\n  /**\n   * The longest unit in this group that is used for plural values.\n   */\n  public pluralShort: string;\n\n  /**\n   * The longest unit in this group that is used for plural values.\n   */\n  public pluralLong: string;\n\n\n  /**\n   * Creates a new instance of Group given a definition and the parent class.\n   *\n   * @param definition The definition of the group.\n   * @param parent The class which contains this group.\n   */\n  public constructor(definition: GroupDefinition, parent: Class)\n  {\n    this.system = definition.system;\n    this.common = !!definition.common;\n    this.unit = definition.unit;\n    this.baseUnit = definition.baseUnit;\n    this.preferredUnit = definition.preferredUnit || definition.unit;\n    this.relativeUnit = definition.relativeUnit;\n    this.relativeScale = definition.relativeScale || 1;\n    this.units = definition.units;\n    this.denominators = definition.denominators;\n    this.parent = parent;\n\n    this.updateUnits();\n  }\n\n  /**\n   * True if this group is a base group, otherwise false.\n   */\n  public get isBase(): boolean\n  {\n    return this.unit === this.baseUnit;\n  }\n\n  /**\n   * Sets the dynamic flag of this group.\n   *\n   * @param dynamic Whether this group is dynamic or not.\n   * @return The reference to this instance.\n   */\n  public setDynamic(dynamic: boolean = true): this\n  {\n    this.dynamic = dynamic;\n\n    return this;\n  }\n\n  /**\n   * Adds a denominator or array of denominators to this group.\n   *\n   * @param denominators A denominator or an array of denominators to add.\n   * @return The reference to this instance.\n   */\n  public addDenominator(denominators: Numbers): this\n  {\n    fn.appendTo( this.denominators, denominators );\n\n    return this;\n  }\n\n  /**\n   * Sets the denominators of this group.\n   *\n   * @param denominators The new denominators for this group.\n   * @return The reference to this instance.\n   * @see [[Group.denominators]]\n   */\n  public setDenominators(denominators: number[]): this\n  {\n    this.denominators = denominators;\n\n    return this;\n  }\n\n  /**\n   * Sets the common flag of this group.\n   *\n   * @param common Whether this group is common or not.\n   * @return The reference to this instance.\n   * @see [[Group.common]]\n   */\n  public setCommon(common: boolean = true): this\n  {\n    this.common = common;\n\n    return this;\n  }\n\n  /**\n   * Sets the preferred unit of this group.\n   *\n   * @param unit The preferred unit of this group.\n   * @return The reference to this instance.\n   * @see [[Group.preferredUnit]]\n   */\n  public setPreferred(unit: string): this\n  {\n    this.preferredUnit = unit;\n\n    return this;\n  }\n\n  /**\n   * Adds the given unit aliases to this group and the parent class.\n   *\n   * @param units The units to add to the group and class.\n   * @return The reference to this instance.\n   * @see [[Class.addGroupUnit]]\n   */\n  public addUnits(units: UnitDefinitionMap): this\n  {\n    let parent: Class = this.parent;\n\n    for (let unit in units)\n    {\n      this.units[ unit ] = units[ unit ];\n\n      parent.addGroupUnit( unit, this );\n    }\n\n    this.updateUnits();\n\n    return this;\n  }\n\n  /**\n   * Removes the given unit aliases from this group and the parent class.\n   *\n   * @param units The array of unit aliases to remove.\n   * @return The reference to this instance.\n   * @see [[Class.removeGroupUnit]]\n   */\n  public removeUnits(units: string[]): this\n  {\n    let parent: Class = this.parent;\n    let existing: UnitDefinitionMap = this.units;\n\n    for (let i = 0; i < units.length; i++)\n    {\n      let unit = units[ i ];\n\n      if (unit in existing)\n      {\n        delete existing[ unit ];\n\n        parent.removeGroupUnit( unit, this );\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Updates the singular and plural long and short form units for this group.\n   *\n   * @return The reference to this instance.\n   */\n  public updateUnits(): this\n  {\n    this.singularShort = null;\n    this.singularLong = null;\n    this.pluralShort = null;\n    this.pluralLong = null;\n\n    for (let unit in this.units)\n    {\n      var plurality = this.units[ unit ];\n\n      if (plurality !== Plurality.PLURAL)\n      {\n        if (!this.singularShort || unit.length < this.singularShort.length)\n        {\n          this.singularShort = unit;\n        }\n\n        if (!this.singularLong || unit.length > this.singularLong.length)\n        {\n          this.singularLong = unit;\n        }\n      }\n\n      if (plurality !== Plurality.SINGULAR)\n      {\n        if (!this.pluralShort || unit.length < this.pluralShort.length)\n        {\n          this.pluralShort = unit;\n        }\n\n        if (!this.pluralLong || unit.length > this.pluralLong.length)\n        {\n          this.pluralLong = unit;\n        }\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Invokes a callback for each group in the parent class that are visible\n   * based on the given transform relative to this group.\n   *\n   * @param transform The transform which decides what groups are visible.\n   * @param reverse If the groups of the class should be iterated in reverse.\n   * @param callback A function to invoke with all visible groups found and the\n   *  index of that group in the set of visible groups. If `false` is returned\n   *  by the function iteration of visible groups ceases.\n   * @param callback.group The current visible group.\n   * @param callback.index The index of the current visible group.\n   * @see [[Transform.isVisibleGroup]]\n   */\n  public matches(transform: Transform, reverse: boolean, callback: (group: Group, index: number) => any): void\n  {\n    if (this.parent)\n    {\n      this.parent.getVisibleGroups( transform, reverse, this, callback );\n    }\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Group.ts","\nimport { GroupDefinition, Converter, ConverterMap, ConverterDoubleMap } from './Types';\nimport { Group, GroupMap, GroupList } from './Group';\nimport { Transform } from './Transform';\nimport { RangeList } from './Range';\n\n/**\n * A map of classes is an object where the key is a unit and the value is a class.\n */\nexport type ClassMap = { [unit: string]: Class };\n\n/**\n * A group of ranges by class name and a list of ranges without classes.\n */\nexport type ClassGrouping = {\n  /** The list of groups which don't have classes **/\n  groupless: RangeList,\n  /** The object of entries keyed by class name. **/\n  classes: {\n    /** An entry keyed by the class naem **/\n    [className: string]: {\n      /** The class of the entry **/\n      parent: Class,\n      /** The list of ranges in the entry with the same class **/\n      ranges: RangeList\n    }\n  }\n}\n\n/**\n * A collection of groups and their units with the logic on how to convert\n * between groups with differing base units.\n *\n * A class is essentially something like \"Length\" where base units are \"inches\"\n * and \"millimeters\" and there are various other groups based off of these\n * base groups like \"feet\", \"centimeters\", and \"meters\".\n *\n * A class is responsible for being the sole place where conversion is done\n * between different groups in the same class.\n *\n * @see [[Class.convert]]\n */\nexport class Class\n{\n\n  /**\n   * The name of the class.\n   */\n  public name: string;\n\n  /**\n   * A map of groups by their units. This map contains the expected case of each\n   * unit as well as the lowercase version of the unit as long as it doesn't\n   * overwrite another group. Unit case may be important so it has priority.\n   */\n  public groupMap: GroupMap;\n\n  /**\n   * A list of the groups in this class.\n   */\n  public groups: GroupList;\n\n  /**\n   * A map of functions which convert one unit value to another unit value.\n   * It is used by invoking `converters[ fromUnit ][ toUnit ]( value )`.\n   *\n   * @see [[Class.setBaseConversion]]\n   * @see [[Class.convert]]\n   */\n  public converters: ConverterDoubleMap;\n\n  /**\n   * Creates a new instance of Class given the name of the class and optionally\n   * the groups of the class.\n   *\n   * @param name The unique name of the class.\n   * @param groups The optional list of groups to populate the class with.\n   */\n  public constructor(name: string, groups?: GroupDefinition[])\n  {\n    this.name = name;\n    this.groupMap = {};\n    this.groups = [];\n    this.converters = {};\n\n    if (groups)\n    {\n      this.addGroups(groups);\n    }\n  }\n\n  /**\n   * Adds the group definitions to this class.\n   *\n   * @param definitions The array of group definitions.\n   * @return The reference to this instance.\n   * @see [[Class.addGroup]]\n   */\n  public addGroups(definitions: GroupDefinition[]): this\n  {\n    for (let i = 0; i < definitions.length; i++)\n    {\n      this.addGroup(definitions[i]);\n    }\n\n    return this;\n  }\n\n  /**\n   * Adds a group definition to this class. If the group is relative to another\n   * group the [[Group.baseScale]] and [[Group.baseUnit]] are set to appropriate\n   * values.\n   *\n   * @param definition The group definition.\n   * @return The instance of the group created from the definition.\n   * @see [[Class.addGroupUnit]]\n   */\n  public addGroup(definition: GroupDefinition): Group\n  {\n    let group = new Group(definition, this);\n    let { relativeUnit, relativeScale, units } = group;\n\n    if (relativeUnit)\n    {\n      let relative: Group = this.groupMap[ relativeUnit ];\n\n      group.baseScale = relativeScale * relative.baseScale;\n      group.baseUnit = relative.baseUnit;\n    }\n\n    for (let alias in units)\n    {\n      this.addGroupUnit( alias, group );\n    }\n\n    this.groups.push( group );\n\n    return group;\n  }\n\n  /**\n   * Adds the unit to this class for the given group. If the lowercase version\n   * of the unit has not been mapped yet it will be mapped to the given group.\n   *\n   * @param unit The unit to map to the group.\n   * @param group The group which has the unit.\n   * @return The reference to this instance.\n   */\n  public addGroupUnit(unit: string, group: Group): this\n  {\n    let lower: string = unit.toLowerCase();\n\n    this.groupMap[ unit ] = group;\n\n    if (!this.groupMap[ lower ])\n    {\n      this.groupMap[ lower ] = group;\n    }\n\n    return this;\n  }\n\n  /**\n   * Removes the given unit associated to the given group from the class. If the\n   * group is not mapped to this unit then this has no effect.\n   *\n   * @param unit The unit to remove from this class.\n   * @param group The group which has the unit.\n   * @return The reference to this instance.\n   */\n  public removeGroupUnit(unit: string, group: Group): this\n  {\n    let lower: string = unit.toLowerCase();\n\n    if (this.groupMap[ unit ] === group)\n    {\n      delete this.groupMap[ unit ];\n    }\n\n    if (this.groupMap[ lower ] === group)\n    {\n      delete this.groupMap[ lower ];\n    }\n\n    return this;\n  }\n\n  /**\n   * Determines the first group in this class which is a base group.\n   *\n   * @see [[Group.isBase]]\n   */\n  private getFirstBase(): Group\n  {\n    let groups: GroupList = this.groups;\n\n    for (let i = 0; i < groups.length; i++)\n    {\n      let group: Group = groups[ i ];\n\n      if (group.isBase)\n      {\n        return group;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Updates the [[Group.classScale]] value in each group in this class so that\n   * there is a baseline for comparing one group to another no matter the base\n   * unit. For comparing in the same base, you can use [[Group.baseScale]].\n   *\n   * @return The reference to this instance.\n   */\n  public setClassScales(): this\n  {\n    let groups: GroupList = this.groups;\n    let first: Group = this.getFirstBase();\n\n    if (first)\n    {\n      for (let i = 0; i < groups.length; i++)\n      {\n        let group: Group = groups[ i ];\n\n        if (group.baseUnit === first.baseUnit)\n        {\n          group.classScale = group.baseScale;\n        }\n        else if (group.baseUnit in this.converters)\n        {\n          group.classScale = this.converters[ group.baseUnit ][ first.baseUnit ]( group.baseScale );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the conversion function between the two base units.\n   *\n   * @param fromUnit The base unit to convert from.\n   * @param toUnit The base unit to convert to.\n   * @param converter The function to pass the value to convert.\n   * @return The reference to this instance.\n   */\n  public setBaseConversion(fromUnit: string, toUnit: string, converter: Converter): this\n  {\n    let converters = this.converters;\n    converters[ fromUnit ] = converters[ fromUnit ] || {};\n    converters[ fromUnit ][ toUnit ] = converter;\n\n    return this;\n  }\n\n  /**\n   * Determines which groups in this class are visible according to the given\n   * transform. The groups can be iterated in reverse and can optionally take\n   * a related group into consideration (when the system is GIVEN, we want to\n   * return the groups with the same system).\n   *\n   * @param transform The transform which decides what groups are visible.\n   * @param reverse If the groups of this class should be iterated in reverse.\n   * @param relatedGroup A related group which may be used for visibility if the\n   *  [[Transform.system]] is [[System.GIVEN]].\n   * @param callback A function to invoke with all visible groups found and the\n   *  index of that group in the set of visible groups. If `false` is returned\n   *  by the function iteration of visible groups ceases.\n   * @param callback.group The current visible group.\n   * @param callback.index The index of the current visible group.\n   * @see [[Transform.isVisibleGroup]]\n   */\n  public getVisibleGroups(transform: Transform, reverse: boolean, relatedGroup: Group, callback: (group: Group, index: number) => any): void\n  {\n    let groups: GroupList = this.groups;\n    let matched: number = 0;\n\n    let start = reverse ? groups.length - 1 : 0;\n    let stop = reverse ? -1 : groups.length;\n    let increment = reverse ? -1 : 1;\n\n    for (let i = start; i !== stop; i += increment)\n    {\n      let group: Group = groups[ i ];\n\n      if (transform.isVisibleGroup( group, relatedGroup ))\n      {\n        let result: any = callback( group, matched++ );\n\n        if (result === false)\n        {\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * Converts the given number from a given group to a given group. If the two\n   * groups are the same or one or both of the groups are not provided then the\n   * `value` provided is returned. If the two groups have differing base units\n   * the [[Class.converters]] map is used to convert the `value` over to the\n   * proper base. If the [[Class.converters]] map is missing a base conversion\n   * zero is returned. This might happen if a group is passed to this function\n   * which does not belong to this class OR if the user has impromperly setup\n   * their own classes.\n   *\n   * @param value The number to convert.\n   * @param from The group of the number to convert from.\n   * @param to The group to convert to.\n   * @return The converted number or zero if a base conversion could not be found.\n   */\n  public convert(value: number, from: Group, to: Group): number\n  {\n    if (from === to || !from || !to)\n    {\n      return value;\n    }\n\n    let converted: number = value * from.baseScale;\n\n    if (from.baseUnit !== to.baseUnit)\n    {\n      let map: ConverterMap = this.converters[ from.baseUnit ];\n\n      if (!map || !map[ to.baseUnit ])\n      {\n        return 0;\n      }\n\n      let converter: Converter = map[ to.baseUnit ];\n\n      converted = converter( converted );\n    }\n\n    return converted / to.baseScale;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Class.ts","\nimport { Value } from './Value';\nimport { Range, RangeList } from './Range';\nimport { Functions as fn } from './Functions';\n\n\n/**\n * The enumeration which decides what unit to use when converting to a string.\n */\nexport enum OutputUnit\n{\n\n  /**\n   * This value will keep units from being displayed.\n   */\n  NONE,\n\n  /**\n   * This value will ensure the unit exactly as the user entered it is used in\n   * the output no matter whether the value's plurality matches the given\n   * unit's plurality.\n   *\n   * @see [[Value.unit]]\n   */\n  GIVEN,\n\n  /**\n   * This value will force the short versions of the unit to be used.\n   *\n   * @see [[Group.singularShort]]\n   * @see [[Group.pluralShort]]\n   */\n  SHORT,\n\n  /**\n   * This value will force the long versions of the unit to be used.\n   *\n   * @see [[Group.singularLong]]\n   * @see [[Group.pluralLong]]\n   */\n  LONG\n}\n\n/**\n * The enumeration which decides how a value will be converted to a string.\n */\nexport enum OutputFormat\n{\n\n  /**\n   * The format of the user input will be used if possible.\n   */\n  GIVEN,\n\n  /**\n   * All values will be displayed using their decimal representation.\n   */\n  NUMBER,\n\n  /**\n   * All values will be displayed as a mixed fraction if the value is a fraction.\n   * A mixed fraction has a whole number followed by a fraction where the\n   * numerator is smaller than the denominator.\n   *\n   * @see [[Value.isFraction]]\n   */\n  MIXED,\n\n  /**\n   * All values will be displayed as an improper fraction if the value is a\n   * fraction and the numerator is larger than the denoninator.\n   *\n   * @see [[Value.isFraction]]\n   */\n  IMPROPER\n}\n\n\n/**\n * Developer input which can be passed to an Output constructor or all the\n * various functions that use the [[Output]] object.\n *\n * @see [[Base.output]]\n * @see [[Range.output]]\n * @see [[Value.output]]\n */\nexport interface OutputInput\n{\n  /**\n   * @see [[Output.unit]]\n   */\n  unit?: OutputUnit;\n\n  /**\n   * @see [[Output.format]]\n   */\n  format?: OutputFormat;\n\n  /**\n   * @see [[Output.repeatUnit]]\n   */\n  repeatUnit?: boolean;\n\n  /**\n   * @see [[Output.unitSpacer]]\n   */\n  unitSpacer?: string;\n\n  /**\n   * @see [[Output.rangeSpacer]]\n   */\n  rangeSpacer?: string;\n\n  /**\n   * @see [[Output.fractionSpacer]]\n   */\n  fractionSpacer?: string;\n\n  /**\n   * @see [[Output.mixedSpacer]]\n   */\n  mixedSpacer?: string;\n\n  /**\n   * @see [[Output.delimiter]]\n   */\n  delimiter?: string;\n\n  /**\n   * @see [[Output.significant]]\n   */\n  significant?: number;\n}\n\n\n/**\n * The class which converts Unitz objects to strings.\n */\nexport class Output implements OutputInput\n{\n\n  /**\n   * The option that specifies which units are chosen.\n   */\n  public unit: OutputUnit = OutputUnit.GIVEN;\n\n  /**\n   * The option that specifies how values are displayed.\n   */\n  public format: OutputFormat = OutputFormat.GIVEN;\n\n  /**\n   * Whether or not a unit should be displayed for the minimum and maximum of a\n   * range when they have the same group.\n   */\n  public repeatUnit: boolean = false;\n\n  /**\n   * The spacing used between the value and the unit.\n   */\n  public unitSpacer: string = '';\n\n  /**\n   * The spacing used between the minimum and maximum values in a range.\n   */\n  public rangeSpacer: string = ' - ';\n\n  /**\n   * The spacing used to separate the numerator and denominator of a fraction.\n   */\n  public fractionSpacer: string = '/';\n\n  /**\n   * The spacing used to seperate a mixed number from the fraction.\n   */\n  public mixedSpacer: string = ' ';\n\n  /**\n   * The delimiter used to separate ranges.\n   */\n  public delimiter: string = ', ';\n\n  /**\n   * An option used to restrict numbers from displaying large decimal numbers.\n   * When this value is set to -1 numbers are displayed fully. If the value is\n   * set to zero all numbers will be truncated to the whole version.\n   */\n  public significant: number = -1;\n\n\n  /**\n   * Creates a new instance of Output with an optional set of options to\n   * override the default values.\n   *\n   * @param input The options to apply to the new instance.\n   */\n  public constructor(input?: OutputInput)\n  {\n    if (fn.isDefined(input))\n    {\n      this.set( input );\n    }\n  }\n\n  /**\n   * Overrides values in this instance with ones specified in input.\n   *\n   * @param input The values to override.\n   * @return The reference to this instance.\n   */\n  public set(input: OutputInput): this\n  {\n    this.unit = fn.coalesce( input.unit, this.unit );\n    this.format = fn.coalesce( input.format, this.format );\n    this.repeatUnit = fn.coalesce( input.repeatUnit, this.repeatUnit );\n    this.unitSpacer = fn.coalesce( input.unitSpacer, this.unitSpacer );\n    this.rangeSpacer = fn.coalesce( input.rangeSpacer, this.rangeSpacer );\n    this.fractionSpacer = fn.coalesce( input.fractionSpacer, this.fractionSpacer );\n    this.mixedSpacer = fn.coalesce( input.mixedSpacer, this.mixedSpacer );\n    this.delimiter = fn.coalesce( input.delimiter, this.delimiter );\n    this.significant = fn.coalesce( input.significant, this.significant );\n\n    return this;\n  }\n\n  /**\n   * Returns an output instance which matches the desired options. If no options\n   * are specified the reference to this instance is returned. If the options\n   * are already an instance of Output its returned. If options are specified\n   * a new instance is created with the options of this instance, and the given\n   * options applied with [[Output.set]].\n   *\n   * @param input The options desired.\n   * @return An instance of this class which matches the desired options.\n   */\n  public extend(input?: OutputInput): Output\n  {\n    let extended: Output = this;\n\n    if (fn.isDefined(input))\n    {\n      if (input instanceof Output)\n      {\n        extended = input;\n      }\n      else\n      {\n        extended = new Output( this );\n        extended.set( input );\n      }\n    }\n\n    return extended;\n  }\n\n  /**\n   * Converts the list of ranges to a string. If a range is not valid it is\n   * skipped.\n   *\n   * @param ranges The list of ranges to convert.\n   * @return The string representation of the input.\n   */\n  public ranges(ranges: RangeList): string\n  {\n    let out = '';\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n\n      if (range.isValid)\n      {\n        if (out.length)\n        {\n          out += this.delimiter;\n        }\n\n        out += this.range( range );\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Converts the range to a string.\n   *\n   * @param ranges The range to convert.\n   * @return The string representation of the input.\n   */\n  public range(range: Range): string\n  {\n    let out = '';\n\n    if (!range.isValid)\n    {\n      // nothing\n    }\n    else if (range.isFixed)\n    {\n      out += this.value( range.min );\n    }\n    else\n    {\n      let minUnit: boolean = this.repeatUnit || range.min.unit !== range.max.unit;\n\n      out += this.value( range.min, minUnit );\n      out += this.rangeSpacer;\n      out += this.value( range.max );\n    }\n\n    return out;\n  }\n\n  /**\n   * Converts the value to the string optionally showing or hiding the unit.\n   *\n   * @param value The value to convert.\n   * @param showUnit Whether or not the unit should be added to the string.\n   * @return The string representation of the input.\n   */\n  public value(value: Value, showUnit: boolean = true): string\n  {\n    let out = '';\n\n    if (!value.isValid)\n    {\n\n    }\n    else if (this.isFraction( value ))\n    {\n      if (this.isMixed( value ))\n      {\n        out += value.mixedWhole;\n        out += this.mixedSpacer;\n        out += value.mixedNum;\n        out += this.fractionSpacer;\n        out += value.den;\n      }\n      else\n      {\n        out += value.num;\n        out += this.fractionSpacer;\n        out += value.den;\n      }\n    }\n    else\n    {\n      out += this.number( value.value );\n    }\n\n    if (showUnit && this.unit !== OutputUnit.NONE && value.isValid)\n    {\n      let group = value.group;\n\n      out += this.unitSpacer;\n\n      if (this.isLongUnit( value ))\n      {\n        out += fn.isSingular( value.value ) ? group.singularLong : group.pluralLong;\n      }\n      else if (this.isShortUnit( value ) || (group && group.dynamic))\n      {\n        out += fn.isSingular( value.value ) ? group.singularShort : group.pluralShort;\n      }\n      else\n      {\n        out += value.unit;\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Converts the number to a string.\n   *\n   * @param x The number to convert.\n   * @return The string representation of the input.\n   */\n  public number(x: number): string\n  {\n    let valueString: string = x + '';\n\n    if (this.significant >= 0 && valueString !== '0')\n    {\n      let valueSignificant: string = x\n        .toFixed(this.significant)\n        .replace(/0*$/, '')\n        .replace(/\\.$/, '');\n\n      return valueSignificant.length < valueString.length ? valueSignificant : valueString;\n    }\n\n    return valueString;\n  }\n\n  /**\n   * Determines whether the value should be displayed as a fraction.\n   *\n   * @param value The value to look at.\n   * @return True if the value should be displayed as a fraction, otherwise false.\n   */\n  public isFraction(value: Value): boolean\n  {\n    return value.isFraction && this.format !== OutputFormat.NUMBER;\n  }\n\n  /**\n   * Determines whether the value should be displayed as a number.\n   *\n   * @param value The value to look at.\n   * @return True if the value should be displayed as a number, otherwise false.\n   */\n  public isNumber(value: Value): boolean\n  {\n    return value.isValid && !this.isFraction( value );\n  }\n\n  /**\n   * Determines whether the value should be displayed as a mixed fraction. This\n   * assumes [[Output.isFraction]] was already checked and returned true.\n   *\n   * @param value The value to look at.\n   * @return True if the value should be displayed as a mixed fraction, otherwise false.\n   */\n  public isMixed(value: Value): boolean\n  {\n    return value.mixedWhole !== 0 && this.format !== OutputFormat.IMPROPER;\n  }\n\n  /**\n   * Determines whether the short unit should be displayed.\n   *\n   * @param value The value to look at.\n   * @return True if the short unit should be displayed, otherwise false.\n   */\n  public isShortUnit(value: Value)\n  {\n    return value.group && this.unit === OutputUnit.SHORT;\n  }\n\n  /**\n   * Determines whether the long unit should be displayed.\n   *\n   * @param value The value to look at.\n   * @return True if the short unit should be displayed, otherwise false.\n   */\n  public isLongUnit(value: Value)\n  {\n    return value.group && this.unit === OutputUnit.LONG;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Output.ts","\nimport { Functions as fn } from './Functions';\nimport { System } from './System';\nimport { Group } from './Group';\nimport { Class } from './Class';\nimport { Range } from './Range';\n\n\nexport interface TransformInput {\n  common?: boolean;\n  system?: System;\n  min?: number;\n  max?: number;\n  groupless?: boolean;\n  convertWithMax?: boolean;\n  onlyUnits?: string[];\n  notUnits?: string[];\n  onlyClasses?: string[];\n  notClasses?: string[];\n}\n\nexport class Transform implements TransformInput\n{\n\n  public common: boolean = true;\n  public system: System = System.GIVEN;\n  public min: number = -Number.MAX_VALUE;\n  public max: number = Number.MAX_VALUE;\n  public convertWithMax: boolean = true;\n  public groupless: boolean = true;\n  public onlyUnits: string[];\n  public notUnits: string[];\n  public onlyClasses: string[];\n  public notClasses: string[];\n\n  public constructor(input?: TransformInput)\n  {\n    if (fn.isDefined(input))\n    {\n      this.set( input );\n    }\n  }\n\n  public set(input: TransformInput): this\n  {\n    this.common = fn.coalesce( input.common, this.common );\n    this.system = fn.coalesce( input.system, this.system );\n    this.min = fn.coalesce( input.min, this.min );\n    this.max = fn.coalesce( input.max, this.max );\n    this.groupless = fn.coalesce( input.groupless, this.groupless );\n    this.convertWithMax = fn.coalesce( input.convertWithMax, this.convertWithMax );\n    this.onlyUnits = fn.coalesce( input.onlyUnits, this.onlyUnits );\n    this.notUnits = fn.coalesce( input.notUnits, this.notUnits );\n    this.onlyClasses = fn.coalesce( input.onlyClasses, this.onlyClasses );\n    this.notClasses = fn.coalesce( input.notClasses, this.notClasses );\n\n    return this;\n  }\n\n  public extend(input?: TransformInput): Transform\n  {\n    let extended: Transform = this;\n\n    if (fn.isDefined(input))\n    {\n      if (input instanceof Transform)\n      {\n        extended = input;\n      }\n      else\n      {\n        extended = new Transform( this );\n        extended.set( input );\n      }\n    }\n\n    return extended;\n  }\n\n  public isValidRange(range: Range): boolean\n  {\n    let group: Group = this.convertWithMax ? range.max.group : range.min.group;\n\n    if (range.max.value < this.min)\n    {\n      return false;\n    }\n\n    if (range.min.value > this.max)\n    {\n      return false;\n    }\n\n    return this.isVisibleGroup(group);\n  }\n\n  public isVisibleGroup(group: Group, givenGroup?: Group): boolean\n  {\n    if (!group)\n    {\n      return this.groupless;\n    }\n\n    return this.isCommonMatch( group ) &&\n      this.isSystemMatch( group, givenGroup ) &&\n      this.isUnitMatch( group ) &&\n      this.isClassMatch( group.parent );\n  }\n\n  public isCommonMatch(group: Group): boolean\n  {\n    return !this.common || group.common;\n  }\n\n  public isSystemMatch(group: Group, givenGroup?: Group): boolean\n  {\n    switch (this.system)\n    {\n      case System.METRIC:\n        return group.system === System.METRIC || group.system === System.ANY;\n      case System.US:\n        return group.system === System.US || group.system === System.ANY;\n      case System.NONE:\n        return false;\n      case System.ANY:\n        return true;\n      case System.GIVEN:\n        return !givenGroup || group.baseUnit === givenGroup.baseUnit;\n    }\n\n    return false;\n  }\n\n  public isClassMatch(parent: Class): boolean\n  {\n    if (this.onlyClasses)\n    {\n      return this.onlyClasses.indexOf( parent.name ) !== -1;\n    }\n\n    if (this.notClasses)\n    {\n      return this.notClasses.indexOf( parent.name ) === -1;\n    }\n\n    return true;\n  }\n\n  public isUnitMatch(group: Group): boolean\n  {\n    if (this.onlyUnits)\n    {\n      return this.onlyUnits.indexOf( group.unit ) !== -1;\n    }\n\n    if (this.notUnits)\n    {\n      return this.notUnits.indexOf( group.unit ) === -1;\n    }\n\n    return true;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Transform.ts","\nimport { Functions as fn } from './Functions';\nimport { Range } from './Range';\n\n\nexport enum SortType {\n  MIN,\n  MAX,\n  AVERAGE\n}\n\nexport interface SortInput {\n  ascending?: boolean;\n  type?: SortType;\n  classes?: SortClassMap;\n}\n\nexport type SortClassMap = { [className: string]: number };\n\nexport type Sorter = (a: Range, b: Range) => number;\n\nexport class Sort implements SortInput\n{\n\n  public ascending: boolean = false;\n  public type: SortType = SortType.MAX;\n  public classes: SortClassMap = {};\n\n  public constructor(input?: SortInput)\n  {\n    if (fn.isDefined(input))\n    {\n      this.set( input );\n    }\n  }\n\n  public set(input: SortInput): this\n  {\n    this.ascending = fn.coalesce( input.ascending, this.ascending );\n    this.type = fn.coalesce( input.type, this.type );\n\n    if (fn.isDefined( input.classes ))\n    {\n      for (let className in input.classes)\n      {\n        this.classes[ className ] = input.classes[ className ];\n      }\n    }\n\n    return this;\n  }\n\n  public extend(input?: SortInput): Sort\n  {\n    let extended: Sort = this;\n\n    if (fn.isDefined(input))\n    {\n      if (input instanceof Sort)\n      {\n        extended = input;\n      }\n      else\n      {\n        extended = new Sort( this );\n        extended.set( input );\n      }\n    }\n\n    return extended;\n  }\n\n  public getSorter(): Sorter\n  {\n    return (a: Range, b: Range) =>\n    {\n      let d: number = this.getClassComparison(a, b);\n\n      if (d === 0)\n      {\n        switch (this.type)\n        {\n          case SortType.MIN:\n            d = this.getMinComparison(a, b);\n            break;\n          case SortType.MAX:\n            d = this.getMaxComparison(a, b);\n            break;\n          case SortType.AVERAGE:\n            d = this.getAverageComparison(a, b);\n            break;\n        }\n      }\n\n      return this.ascending ? d : -d;\n    };\n  }\n\n  private getMinComparison(a: Range, b: Range): number\n  {\n    return fn.sign( a.min.classScaled - b.min.classScaled );\n  }\n\n  private getMaxComparison(a: Range, b: Range): number\n  {\n    return fn.sign( a.max.classScaled - b.max.classScaled );\n  }\n\n  private getAverageComparison(a: Range, b: Range): number\n  {\n    let avg: number = (a.min.classScaled + a.max.classScaled) * 0.5;\n    let bvg: number = (b.min.classScaled + b.max.classScaled) * 0.5;\n\n    return fn.sign( avg - bvg );\n  }\n\n  private getClassComparison(a: Range, b: Range): number\n  {\n    let ag: number = a.min.group ? 1 : -1;\n    let bg: number = b.min.group ? 1 : -1;\n\n    if (ag !== bg)\n    {\n      return ag - bg;\n    }\n\n    let ac: number = this.classes[ a.min.group.parent.name ] || 0;\n    let bc: number = this.classes[ b.min.group.parent.name ] || 0;\n\n    return ac - bc;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Sort.ts","\nimport { Plurality } from './Plurality';\nimport { System } from './System';\nimport { Class, ClassMap } from './Class';\nimport { Output } from './Output';\nimport { Group, GroupMap, GroupList } from './Group';\nimport { Transform } from './Transform';\nimport { Value } from './Value';\nimport { Sort } from './Sort';\n\n\n/**\n * The global class which keeps track of all unit mappings and global options.\n *\n * This class is also responsible for creating dynamic classes and groups based\n * on approximation when a desired unit is not defined by the developer.\n */\nexport class Core\n{\n\n  /**\n   * The map of defined classes by their name.\n   */\n  public static classMap: ClassMap = {};\n\n  /**\n   * An array of the defined classes.\n   */\n  public static classes: Class[] = [];\n\n  /**\n   * A map of groups by their acceptable units.\n   */\n  public static unitToGroup: GroupMap = {};\n\n  /**\n   * A list of dynamically created groups based on units specified by a user\n   * which are not defined by the developer.\n   */\n  public static dynamicGroups: GroupList = [];\n\n  /**\n   * A map of the dynamically created groups by a key determined by\n   * [[Core.getDynamicMatch]].\n   */\n  public static dynamicMatches: GroupMap = {};\n\n  /**\n   * Dynamic groups are mapped together (by default) by looking at the first few\n   * characters.\n   *\n   * @see [[Core.getDynamicMatch]]\n   */\n  public static dynamicMatchLength: number = 3;\n\n\n  /**\n   * The global options used for outputting [[Base]], [[Range]], and [[Value]]s\n   * which may be overridden by specifying any number of options.\n   *\n   * @see [[Base.output]]\n   * @see [[Range.output]]\n   * @see [[Value.output]]\n   */\n  public static globalOutput: Output = new Output();\n\n  /**\n   * The global transform options used for transforming a [[Base]] instance\n   * by specifying what sort of units/groups are visible to the user.\n   *\n   * @see [[Base.normalize]]\n   * @see [[Base.compact]]\n   * @see [[Base.expand]]\n   * @see [[Base.conversions]]\n   * @see [[Base.filter]]\n   */\n  public static globalTransform: Transform = new Transform();\n\n  /**\n   * The global sort options used for ordering ranges in a [[Base]] instance.\n   *\n   * @see [[Base.sort]]\n   */\n  public static globalSort: Sort = new Sort();\n\n\n  /**\n   * Returns a [[Group]] instance mapped by the given unit. If no unit is given\n   * `null` is returned. If the unit isn't mapped to a group a dynamic group\n   * match is looked at and if none are found and `createDynamic` is true a new\n   * dynamic group is created.\n   *\n   * @param unit The unit of the group to get.\n   * @param createDynamic If creating a dynamic group should be created if an\n   *  existing group could not be found.\n   * @return The group matched to the unit or null if none was found.\n   * @see [[Core.getDynamicMatch]]\n   * @see [[Core.addDynamicUnit]]\n   * @see [[Core.newDynamicGroup]]\n   */\n  public static getGroup(unit: string, createDynamic: boolean = true): Group\n  {\n    if (!unit)\n    {\n      return null;\n    }\n\n    let exactGroup: Group = Core.unitToGroup[ unit ];\n\n    if (exactGroup)\n    {\n      return exactGroup;\n    }\n\n    let normalizedUnit: string = unit.toLowerCase();\n    let normalizedGroup: Group = Core.unitToGroup[ normalizedUnit ];\n\n    if (normalizedGroup)\n    {\n      return normalizedGroup;\n    }\n\n    if (!createDynamic)\n    {\n      return null;\n    }\n\n    let dynamicUnit: string = Core.getDynamicMatch( unit );\n    let dynamicGroup: Group = Core.dynamicMatches[ dynamicUnit ];\n\n    if (dynamicGroup)\n    {\n      return Core.addDynamicUnit( unit, dynamicGroup );\n    }\n\n    return Core.newDynamicGroup( unit );\n  }\n\n  /**\n   * Sets the given unit as the preferred unit for the group it belongs to. If a\n   * group is not found then this has no affect.\n   *\n   * @param unit The unit to mark as the preferred unit.\n   * @see [[Core.getGroup]]\n   */\n  public static setPreferred(unit: string): void\n  {\n    let group: Group = this.getGroup( unit, false );\n\n    if (group)\n    {\n      group.setPreferred( unit );\n    }\n  }\n\n  /**\n   * Sets whether the group associated with the given unit is common. A common\n   * group is one a user is familiar with and would be okay seeing values\n   * represented in. If a group is not found then this has no affect.\n   *\n   * @param unit The unit of a group to set the common flag.\n   * @param common Whether the associated group should be common.\n   * @see [[Core.getGroup]]\n   */\n  public static setCommon(unit: string, common: boolean = true): void\n  {\n    let group: Group = this.getGroup( unit, false );\n\n    if (group)\n    {\n      group.setCommon( common );\n    }\n  }\n\n  /**\n   * Sets the denominators for the group associated to the given unit.\n   * Denominators are useful for calculating a fraction from a value.\n   *\n   * @param unit The unit of a group to set the denominators of.\n   * @param denominators The new denominators for the group.\n   * @see [[Core.getGroup]]\n   */\n  public static setDenominators(unit: string, denominators: number[]): void\n  {\n    let group: Group = this.getGroup( unit, false );\n\n    if (group)\n    {\n      group.setDenominators( denominators );\n    }\n  }\n\n  /**\n   * Adds the given class and all groups and units to the global state. If there\n   * are units mapped to other groups they are overwritten by the units in the\n   * given class.\n   *\n   * @param parent The class to add to the global state.\n   */\n  public static addClass(parent: Class): void\n  {\n    this.classMap[ parent.name ] = parent;\n    this.classes.push( parent );\n\n    let groups: GroupMap = parent.groupMap;\n\n    for (let unit in groups)\n    {\n      this.unitToGroup[ unit ] = groups[ unit ];\n    }\n  }\n\n  /**\n   * Adds an array of classes to the global state.\n   *\n   * @see [[Core.addClass]]\n   */\n  public static addClasses(...classes: Class[]): void\n  {\n    for (let i = 0; i < classes.length; i++)\n    {\n      this.addClass( classes[ i ] );\n    }\n  }\n\n  /**\n   * Adds the unit to the given dynamic group. This function also updates the\n   * plurality of all the units currently in the group.\n   *\n   * @param unit The unit to add to the given group.\n   * @param group The dynamically created group.\n   * @return The instance of the given group.\n   */\n  public static addDynamicUnit(unit: string, group: Group): Group\n  {\n    group.units[ unit ] = Plurality.EITHER;\n\n    let unitCount: number = 0;\n\n    for (let groupUnit in group.units)\n    {\n      if (groupUnit)\n      {\n        unitCount++;\n      }\n    }\n\n    if (unitCount > 1)\n    {\n      let longest: string;\n\n      for (let groupUnit in group.units)\n      {\n        group.units[ groupUnit ] = Plurality.SINGULAR;\n\n        if (!longest || groupUnit.length > longest.length)\n        {\n          longest = groupUnit;\n        }\n      }\n\n      if (longest)\n      {\n        group.units[ longest ] = Plurality.PLURAL;\n      }\n    }\n\n    group.updateUnits();\n\n    this.unitToGroup[ unit ] = group;\n    this.unitToGroup[ unit.toLowerCase() ] = group;\n\n    this.dynamicMatches[ this.getDynamicMatch( unit ) ] = group;\n\n    return group;\n  }\n\n  /**\n   * Creates a dynamic class & group based on the given unit and adds it to the\n   * global state. By default the group is marked with [[System.ANY]], is\n   * common, and has the valid denominators 2, 3, 4, 5, 6, 8, 10.\n   *\n   * @param unit The initial unit of the group to use as the name of the class\n   *  and the base unit of the group.\n   * @return An instance of a new Group with a new parent Class.\n   */\n  public static newDynamicGroup(unit: string): Group\n  {\n    let parent: Class = new Class(unit);\n\n    let group: Group = parent.addGroup({\n      system: System.ANY,\n      unit: unit,\n      common: true,\n      baseUnit: unit,\n      denominators: [2, 3, 4, 5, 6, 8, 10],\n      units: {}\n    });\n\n    group.setDynamic();\n\n    this.addDynamicUnit( unit, group );\n    this.dynamicGroups.push( group );\n\n    return group;\n  }\n\n  /**\n   * The function which takes a unit and generates a string which should be used\n   * to mark similarly spelled units under the same dynamic group.\n   *\n   * @param unit The unit to build a key from.\n   * @return The key which identifies the dynamic group.\n   */\n  public static getDynamicMatch(unit: string): string\n  {\n    return unit.substring( 0, this.dynamicMatchLength ).toLowerCase();\n  }\n\n  /**\n   * The function which takes to values and determines which one is more\n   * \"normal\" or \"human friendly\".\n   *\n   * @param fromValue The most normal value found so far.\n   * @param toValue The value to compare to.\n   * @param transform The transformation rules to guide the function to choose\n   *  the more normal value.\n   * @param forOutput The output options to guide the function to choose the\n   *  more normal value.\n   * @return True if `toValue` appears more normal than `fromValue`.\n   */\n  // @ts-ignore\n  public static isMoreNormal(fromValue: Value, toValue: Value, transform: Transform, forOutput: Output): boolean\n  {\n    let fromString: string = forOutput.value( fromValue );\n    let toString: string = forOutput.value( toValue );\n\n    return toString.length <= fromString.length;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Core.ts","\nimport { Functions as fn } from './Functions';\nimport { Transform } from './Transform';\nimport { Output, OutputInput } from './Output';\nimport { Group } from './Group';\nimport { Core } from './Core';\n\n\n// TODO perUnit & perGroup (or: rateUnit & rateGroup)\n\nexport type ValueMap = { [unit: string]: Value };\n\nexport class Value\n{\n\n  public static INVALID: Value = new Value(Number.NaN, Number.NaN, 1, '', null);\n\n  public readonly value: number;\n  public readonly num: number;\n  public readonly den: number;\n  public readonly group: Group;\n  public unit: string;\n\n  public constructor(value: number, num: number, den: number, unit: string, group: Group)\n  {\n    let divisor: number = fn.gcd(num, den);\n    this.value = value;\n    this.num = num / divisor;\n    this.den = den / divisor;\n    this.unit = unit;\n    this.group = group;\n  }\n\n  public get isValid(): boolean\n  {\n    return isFinite(this.value);\n  }\n\n  public get isFraction(): boolean\n  {\n    return this.den !== 1;\n  }\n\n  public get isDecimal(): boolean\n  {\n    return this.den === 1;\n  }\n\n  public get isZero(): boolean\n  {\n    return fn.isZero( this.value );\n  }\n\n  public get isSingular(): boolean\n  {\n    return fn.isSingular( this.value );\n  }\n\n  public get scaled(): number\n  {\n    return this.group ? this.value * this.group.baseScale : this.value;\n  }\n\n  public get classScaled(): number\n  {\n    return this.group ? this.value * this.group.classScale : this.value;\n  }\n\n  public get actual(): number\n  {\n    return this.num / this.den;\n  }\n\n  public get mixedWhole(): number\n  {\n    return this.den !== 1 ? Math.floor(this.num / this.den) : 0;\n  }\n\n  public get mixedNum(): number\n  {\n    return this.den !== 1 ? this.num % this.den : this.num;\n  }\n\n  public get floor(): number\n  {\n    return Math.floor(this.value);\n  }\n\n  public get ceil(): number\n  {\n    return Math.ceil(this.value);\n  }\n\n  public get truncate(): number\n  {\n    return this.value < 0 ? this.ceil : this.floor;\n  }\n\n  public get remainder(): number\n  {\n    return this.value - this.floor;\n  }\n\n  public get error(): number\n  {\n    return this.actual - this.value;\n  }\n\n  public get distance(): number\n  {\n    return fn.abs(this.error);\n  }\n\n  public preferred(): Value\n  {\n    return this.group ? new Value(this.value, this.num, this.den, this.group.preferredUnit, this.group) : this;\n  }\n\n  public copy(): Value\n  {\n    return new Value(this.value, this.num, this.den, this.unit, this.group);\n  }\n\n  public zero(): Value\n  {\n    return new Value(0, 0, 1, this.unit, this.group);\n  }\n\n  public truncated(): Value\n  {\n    return new Value(this.truncate, this.truncate, 1, this.unit, this.group);\n  }\n\n  public fractioned(): Value\n  {\n    if (this.isFraction)\n    {\n      return this;\n    }\n\n    if (this.group)\n    {\n      return Value.fromNumberWithDenominators(this.value, this.group.denominators, this.unit, this.group);\n    }\n\n    return this;\n  }\n\n  public numbered(): Value\n  {\n    if (this.isFraction)\n    {\n      return new Value(this.value, this.value, 1, this.unit, this.group);\n    }\n\n    return this;\n  }\n\n  public convertTo(to: Group): number\n  {\n    let group: Group = this.group;\n\n    return group ? group.parent.convert( this.value, group, to ) : this.value;\n  }\n\n  public convertToValue(group: Group): Value\n  {\n    return Value.fromNumberForGroup( this.convertTo( group ), group );\n  }\n\n  public conversions(transform: Transform, reverse: boolean, callback: (transformed: Value, index: number) => void): void\n  {\n    if (this.group)\n    {\n      this.group.matches(transform, reverse, (group, index) =>\n      {\n        callback( this.convertToValue( group ), index );\n      });\n    }\n  }\n\n  public normalize(transform: Transform, forOutput: Output): Value\n  {\n    let closest: Value;\n\n    this.conversions(transform, false, (convert) =>\n    {\n      let acceptable: boolean = !forOutput.isNumber( convert );\n\n      if (!acceptable)\n      {\n        let number: string = forOutput.number( convert.value );\n\n        acceptable = number !== '0';\n      }\n\n      if (acceptable)\n      {\n        if (!closest || Core.isMoreNormal(closest, convert, transform, forOutput))\n        {\n          closest = convert;\n        }\n      }\n    });\n\n    return closest || this;\n  }\n\n  public add(addend: Value, scale: number = 1): Value\n  {\n    let num = this.num * addend.den + addend.num * this.den * scale;\n    let den = this.den * addend.den;\n    let result = this.value + addend.value * scale;\n\n    return new Value(result, num, den, this.unit, this.group);\n  }\n\n  public sub(subtrahend: Value, scale: number = 1): Value\n  {\n    let num = this.num * subtrahend.den - subtrahend.num * this.den * scale;\n    let den = this.den * subtrahend.den;\n    let result = this.value - subtrahend.value * scale;\n\n    return new Value(result, num, den, this.unit, this.group);\n  }\n\n  public mul(scale: number): Value\n  {\n    return new Value(this.value * scale, this.num * scale, this.den, this.unit, this.group);\n  }\n\n  /**\n   * Converts this range to a string with the given output options taking into\n   * account the global options.\n   *\n   * @param options The options to override the global output options.\n   * @return The string representation of this instance.\n   * @see [[Output]]\n   */\n  public output(options?: OutputInput): string\n  {\n    let output: Output = Core.globalOutput.extend( options );\n\n    return output.value( this );\n  }\n\n  public static fromNumber(value: number, unit: string = '', group: Group = null): Value\n  {\n    return new Value(value, value, 1, unit, group);\n  }\n\n  public static fromNumberWithRange(value: number, unit: string = '', group: Group = null, minDen: number = 1, maxDen: number = 100): Value\n  {\n    let closestDenominator: number = 0;\n    let closestDistance: number = -1;\n\n    for (let i = minDen; i <= maxDen; i++)\n    {\n      let den = i;\n      let num = Math.floor( den * value );\n      let actual = num / den;\n      let distance = fn.abs(value - actual);\n\n      if (closestDistance === -1 || distance < closestDistance)\n      {\n        closestDistance = distance;\n        closestDenominator = den;\n      }\n    }\n\n    if (closestDistance > fn.EPSILON)\n    {\n      return new Value(value, value, 1, unit, group);\n    }\n\n    if (closestDenominator === 0)\n    {\n      closestDenominator = 1;\n    }\n\n    return new Value(value, Math.floor(value * closestDenominator), closestDenominator, unit, group);\n  }\n\n  public static fromNumberForGroup(value: number, group: Group): Value\n  {\n    return this.fromNumberWithDenominators( value, group.denominators, group.preferredUnit, group );\n  }\n\n  public static fromNumberWithDenominators(value: number, denominators: number[], unit: string = '', group: Group = null): Value\n  {\n    let closestDenominator: number = 0;\n    let closestDistance: number = -1;\n\n    for (let i = 0; i < denominators.length; i++)\n    {\n      let den = denominators[ i ];\n      let num = Math.floor( den * value );\n      let actual = num / den;\n      let distance = fn.abs(value - actual);\n\n      if (closestDistance === -1 || distance < closestDistance)\n      {\n        closestDistance = distance;\n        closestDenominator = den;\n      }\n    }\n\n    if (closestDistance > fn.EPSILON)\n    {\n      return new Value(value, value, 1, unit, group);\n    }\n\n    if (closestDenominator === 0)\n    {\n      closestDenominator = 1;\n    }\n\n    return new Value(value, Math.floor(value * closestDenominator), closestDenominator, unit, group);\n  }\n\n  public static fromFraction(num: number, den: number, unit: string = '', group: Group = null): Value\n  {\n    return new Value(num / den, num, den, unit, group);\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Value.ts","\nimport { Value } from './Value';\nimport { Transform } from './Transform';\nimport { Output, OutputInput } from './Output';\nimport { Core } from './Core';\n\n\n/**\n * An array of ranges.\n */\nexport type RangeList = Range[];\n\n/**\n * A function which takes a range and might return a range based on the given.\n */\nexport type RangeMutator = (range: Range) => Range;\n\n\n/**\n * A pair of minimum and maximum values. A range can be fixed which means the\n * minimum and maximum are equivalent - in which case the range behaves like\n * a [[Value]].\n */\nexport class Range\n{\n\n  /**\n   * A range instance which contains invalid values.\n   */\n  public static INVALID: Range = new Range( Value.INVALID, Value.INVALID );\n\n\n  /**\n   * The minimum value in the range.\n   */\n  public readonly min: Value;\n\n  /**\n   * The maximum value in the range.\n   */\n  public readonly max: Value;\n\n\n  /**\n   * Creates a new instance of Range given the minimum and maximum values.\n   *\n   * @param min The minimum value for the range.\n   * @param max The maximum value for the range.\n   */\n  public constructor(min: Value, max: Value)\n  {\n    this.min = min.value < max.value ? min : max;\n    this.max = max.value > min.value ? max : min;\n  }\n\n  /**\n   * True if the min and max are both valid.\n   */\n  public get isValid(): boolean\n  {\n    return this.min.isValid && this.max.isValid;\n  }\n\n  /**\n   * True if the min or max are a fraction.\n   */\n  public get isFraction(): boolean\n  {\n    return this.min.isFraction || this.max.isFraction;\n  }\n\n  /**\n   * True if the min and max are decimal.\n   */\n  public get isDecimal(): boolean\n  {\n    return this.min.isDecimal && this.max.isDecimal;\n  }\n\n  /**\n   * True if the min and max are not the same value.\n   */\n  public get isRange(): boolean\n  {\n    return this.min.value !== this.max.value;\n  }\n\n  /**\n   * True if the min and max are the same value.\n   */\n  public get isFixed(): boolean\n  {\n    return this.min.value === this.max.value;\n  }\n\n  /**\n   * True if the min and max are both equal to zero.\n   */\n  public get isZero(): boolean\n  {\n    return this.min.isZero && this.max.isZero;\n  }\n\n  /**\n   * True if the min and max are both singular (1 or -1).\n   */\n  public get isSingular(): boolean\n  {\n    return this.min.isSingular && this.max.isSingular;\n  }\n\n  /**\n   * The average number between the min and max.\n   */\n  public get average(): number\n  {\n    return (this.min.value + this.max.value) * 0.5;\n  }\n\n  /**\n   * The minimum value of this range.\n   */\n  public get value(): number\n  {\n    return this.min.value;\n  }\n\n  /**\n   * The minimum value of this range.\n   */\n  public get minimum(): number\n  {\n    return this.min.value;\n  }\n\n  /**\n   * The maximum value of this range.\n   */\n  public get maximum(): number\n  {\n    return this.max.value;\n  }\n\n  /**\n   * The unit which identifies the group of the minimum value or `null` if the\n   * minimum value does not have a group.\n   */\n  public get unit(): string\n  {\n    return this.min.group ? this.min.group.unit : null;\n  }\n\n  /**\n   * Determines if the given range matches this range enough to provide a\n   * mathematical operation between the two ranges.\n   *\n   * @param range The range to test.\n   * @return True if the groups of the given range match this range.\n   */\n  public isMatch(range: Range): boolean\n  {\n    return this.min.group === range.min.group &&\n      this.max.group === range.max.group;\n  }\n\n  /**\n   * @return A range which has the min and max converted to their preferred units.\n   * @see [[Value.preferred]]\n   */\n  public preferred(): Range\n  {\n    let min: Value = this.min.preferred();\n    let max: Value = this.max.preferred();\n\n    return new Range( min, max );\n  }\n\n  public positive(): Range\n  {\n    let minNegative: boolean = this.min.value < 0;\n    let maxNegative: boolean = this.max.value < 0;\n\n    if (maxNegative)\n    {\n      return null;\n    }\n\n    let min: Value = minNegative ? this.min.zero() : this.min.copy();\n    let max: Value = this.max.copy();\n\n    return new Range( min, max );\n  }\n\n  public negative(): Range\n  {\n    let minPositive: boolean = this.min.value >= 0;\n    let maxPositive: boolean = this.max.value >= 0;\n\n    if (minPositive)\n    {\n      return null;\n    }\n\n    let min: Value = this.min.copy();\n    let max: Value = maxPositive ? this.max.zero() : this.max.copy();\n\n    return new Range( min, max );\n  }\n\n  public nonzero(): Range\n  {\n    let minZero: boolean = this.min.value === 0;\n    let maxZero: boolean = this.max.value === 0;\n\n    if (minZero && maxZero)\n    {\n      return null;\n    }\n\n    let min: Value = this.min.copy();\n    let max: Value = this.max.copy();\n\n    return new Range( min, max );\n  }\n\n  public maxd(): Range\n  {\n    let fixed: Value = this.max.copy();\n\n    return new Range(fixed, fixed);\n  }\n\n  public mind(): Range\n  {\n    let fixed: Value = this.min.copy();\n\n    return new Range(fixed, fixed);\n  }\n\n  public normalize(transform: Transform, forOutput: Output): Range\n  {\n    let min: Value = this.min.normalize( transform, forOutput );\n    let max: Value = this.max.normalize( transform, forOutput );\n\n    return new Range(min, max)\n  }\n\n  public add(addend: Range, scale: number = 1): Range\n  {\n    let min: Value = this.min.add(addend.min, scale);\n    let max: Value = this.max.add(addend.max, scale);\n\n    return new Range(min, max);\n  }\n\n  public sub(subtrahend: Range, scale: number = 1): Range\n  {\n    let min: Value = this.min.sub(subtrahend.min, scale);\n    let max: Value = this.max.sub(subtrahend.max, scale);\n\n    return new Range(min, max);\n  }\n\n  public mul(scale: number): Range\n  {\n    let min: Value = this.min.mul(scale);\n    let max: Value = this.max.mul(scale);\n\n    return new Range(min, max);\n  }\n\n  public fractioned(): Range\n  {\n    if (this.min.isFraction && this.max.isFraction)\n    {\n      return this;\n    }\n\n    let min: Value = this.min.fractioned();\n    let max: Value = this.max.fractioned();\n\n    return new Range(min, max);\n  }\n\n  public numbered(): Range\n  {\n    if (!this.min.isFraction && !this.max.isFraction)\n    {\n      return this;\n    }\n\n    let min: Value = this.min.numbered();\n    let max: Value = this.max.numbered();\n\n    return new Range(min, max);\n  }\n\n  /**\n   * Converts this range to a string with the given output options taking into\n   * account the global options.\n   *\n   * @param options The options to override the global output options.\n   * @return The string representation of this instance.\n   * @see [[Output]]\n   */\n  public output(options?: OutputInput): string\n  {\n    let output: Output = Core.globalOutput.extend( options );\n\n    return output.range( this );\n  }\n\n  public static fromFixed(fixed: Value): Range\n  {\n    return new Range(fixed, fixed);\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Range.ts","\nimport { Functions as fn } from './Functions';\nimport { Core } from './Core';\nimport { Parse } from './Parse';\nimport { RangesInput, BaseInput } from './Types';\nimport { Range, RangeList, RangeMutator } from './Range';\nimport { Group } from './Group';\nimport { Transform, TransformInput } from './Transform';\nimport { Output, OutputInput } from './Output';\nimport { Sort, SortInput } from './Sort';\nimport { Value } from './Value';\nimport { Class, ClassGrouping } from './Class';\n\n\n/**\n * Takes user input and returns a new instance of [Base].\n */\nexport function uz(input: RangesInput)\n{\n  return new Base(input);\n}\n\n/**\n * The main class which contains a list of ranges and the user input.\n */\nexport class Base\n{\n\n  /**\n   * The input parsed to generate this instance or the input passed from the\n   * parent instance when an operation was performed on it.\n   */\n  public input: RangesInput;\n\n  /**\n   * The list of ranges in this instance.\n   */\n  public ranges: RangeList;\n\n  /**\n   * Creates a new instance of Base given some user input to parse or an\n   * existing list of ranges to use instead.\n   *\n   * @param input The input to parse if ranges is not provided.\n   * @param ranges The already parsed ranges to use for this instance.\n   */\n  public constructor(input: RangesInput, ranges?: RangeList )\n  {\n    this.input = input;\n    this.ranges = ranges || Parse.ranges( input, Core.getGroup );\n  }\n\n  /**\n   * Scales the ranges in this instance by the given factor and returns a\n   * new instance.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1c, 2.3m').scale(2); // '2c, 4.6m'\n   * ```\n   *\n   * @param amount The factor to scale the ranges in this instance by.\n   * @return A new instance.\n   * @see [[Range.mul]]\n   * @see [[Base.mutate]]\n   */\n  public scale(amount: number): Base\n  {\n    return this.mutate(r => r.mul( amount ));\n  }\n\n  // 1c, 3m SCALE TO 1/2c = 1/2c, 1.5m\n\n  /**\n   * Scales the ranges in this instance up to some value with a unit and returns\n   * a new instance. Because this instance might contain ranges, a rangeDelta\n   * can be specified to instruct on which value (min or max) to use when\n   * calculating how much to scale by.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1m, 2 - 3c').scaleTo('6c'); // '2m, 4 - 6c'\n   * uz('1m, 2 - 3c').scaleTo('6c', 0); // '3m, 6 - 9c'\n   * uz('1m, 2 - 3c').scaleTo('6c', 0.5); // '2.4m, 4.8 - 6c'\n   * ```\n   *\n   * @param unitValue A value & unit pair to scale the ranges in this instance to.\n   * @param rangeDelta When this instance contains ranges this value instructs\n   *  how the scale factor is calculated. A value of 0 means it looks at the\n   *  minimum, 1 is the maximum, and 0.5 is the average.\n   * @return A new instance.\n   * @see [[Base.getScaleTo]]\n   * @see [[Base.scale]]\n   */\n  public scaleTo(unitValue: string, rangeDelta: number = 1.0): Base\n  {\n    return this.scale( this.getScaleTo(unitValue, rangeDelta) );\n  }\n\n  /**\n   * Changes the units used on each of the ranges in this instance to the\n   * preferred unit for each group.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('5 kilos').preferred(); // '5 kg'\n   * ```\n   *\n   * @return A new instance.\n   * @see [[Core.setPreferred]]\n   * @see [[Range.preferred]]\n   * @see [[Base.mutate]]\n   */\n  public preferred(): Base\n  {\n    return this.mutate(r => r.preferred());\n  }\n\n  /**\n   * Drops negative ranges and modifies partially negative ranges so that all\n   * values are greater than or equal to zero.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('0c, 2tbsp, -4tbsp').positive(); // '0c, 2tbsp'\n   * uz('-2 - 3 in').positive(); // '0 - 3in'\n   * ```\n   *\n   * @return A new instance.\n   * @see [[Range.positive]]\n   * @see [[Base.mutate]]\n   */\n  public positive(): Base\n  {\n    return this.mutate(r => r.positive());\n  }\n\n  /**\n   * Drops positive ranges and modifies partially positive ranges so that all\n   * values are less than zero.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('0c, 2tbsp, -4tbsp').negative(); // '-4tbsp'\n   * uz('-2 - 3 in').negative(); // '-2 - 0in'\n   * ```\n   *\n   * @return A new instance.\n   * @see [[Range.negative]]\n   * @see [[Base.mutate]]\n   */\n  public negative(): Base\n  {\n    return this.mutate(r => r.negative());\n  }\n\n  /**\n   * Drops ranges that are equal to zero.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('0c, 2tbsp').negative(); // '2tbsp'\n   * ```\n   *\n   * @return A new instance.\n   * @see [[Range.nonzero]]\n   * @see [[Base.mutate]]\n   */\n  public nonzero(): Base\n  {\n    return this.mutate(r => r.nonzero());\n  }\n\n  /**\n   * Converts each range to fractions if a denominator for the specified units\n   * yields a fraction close enough to the original value.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1/2 cup').fractions(); // '1/2 cup'\n   * uz('0.3cm').fractions(); // '3/10 cm'\n   * uz('0.33 decades').fractions(); // '0.33 decades' closest is 3/10 but that's not close enough\n   * ```\n   *\n   * @return A new instance.\n   * @see [[Range.fractioned]]\n   * @see [[Base.mutate]]\n   */\n  public fractions(): Base\n  {\n    return this.mutate(r => r.fractioned());\n  }\n\n  /**\n   * Converts each range to numbers if they are fractions.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1/2 cup').fractions(); // '0.5 cup'\n   * uz('0.3cm').fractions(); // '0.3 cm'\n   * ```\n   *\n   * @return A new instance.\n   * @see [[Range.numbered]]\n   * @see [[Base.mutate]]\n   */\n  public numbers(): Base\n  {\n    return this.mutate(r => r.numbered());\n  }\n\n  /**\n   * Flattens any ranges to their maximum values.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1 - 3c, 5m').max(); // '3c, 5m'\n   * ```\n   *\n   * @return A new instance or this if this instance has no ranges.\n   * @see [[Range.maxd]]\n   * @see [[Base.mutate]]\n   */\n  public max(): Base\n  {\n    return this.hasRanges ? this.mutate(r => r.maxd()) : this;\n  }\n\n  /**\n   * Flattens any ranges to their minimum values.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1 - 3c, 5m').max(); // '1c, 5m'\n   * ```\n   *\n   * @return A new instance or this if this instance has no ranges.\n   * @see [[Range.mind]]\n   * @see [[Base.mutate]]\n   */\n  public min(): Base\n  {\n    return this.hasRanges ? this.mutate(r => r.mind()) : this;\n  }\n\n  /**\n   * Converts each range to units that best represent the value.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1.5pt, 12in, 3.14159rad').normalize(); // '3c, 1ft, 180deg'\n   * ```\n   *\n   * @param options Options to control which units and values are acceptable.\n   * @param forOutput The output options that should be used to determine which\n   *  value & unit is best.\n   * @return A new instance.\n   * @see [[Transform]]\n   * @see [[Output]]\n   * @see [[Core.isMoreNormal]]\n   * @see [[Core.globalTransform]]\n   * @see [[Core.globalOutput]]\n   * @see [[Range.normalize]]\n   * @see [[Base.mutate]]\n   */\n  public normalize(options?: TransformInput, forOutput?: OutputInput): Base\n  {\n    let output: Output = Core.globalOutput.extend( forOutput );\n    let transform: Transform = Core.globalTransform.extend( options );\n\n    return this.mutate(r => r.normalize( transform, output ));\n  }\n\n  /**\n   * Joins all ranges of the same classes together and uses the largest unit\n   * to represent the sum for the class.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1c, 1pt').compact(); // '1.5pt'\n   * ```\n   *\n   * @param options Options to control which units and values are acceptable.\n   * @return A new instance.\n   * @see [[Transform]]\n   * @see [[Core.globalTransform]]\n   */\n  public compact(options?: TransformInput): Base\n  {\n    let compacted: RangeList = [];\n    let transform: Transform = Core.globalTransform.extend( options );\n    let { classes, groupless } = this.groupByClass();\n\n    for (let className in classes)\n    {\n      let entry = classes[ className ];\n      let ranges: RangeList = entry.ranges;\n      let parent: Class = entry.parent;\n      let minGroupChosen: Group = <Group>null;\n      let maxGroupChosen: Group = <Group>null;\n      let minSum: number = 0;\n      let maxSum: number = 0;\n\n      // If the transformation options ignores this class, skip it.\n      if (!transform.isClassMatch( parent ))\n      {\n        continue;\n      }\n\n      // Determine the smallest visible group we can use.\n      parent.getVisibleGroups( transform, false, null, (group) =>\n      {\n        minGroupChosen = maxGroupChosen = group;\n        return false;\n      });\n\n      // If we can't find one, then no groups are valid. Skip them.\n      if (!minGroupChosen)\n      {\n        continue;\n      }\n\n      // For each range, sum up the minimums and maximums while also determining\n      // the largest min & max that should be used to represent the sums.\n      for (let i = 0; i < ranges.length; i++)\n      {\n        let range: Range = ranges[ i ];\n        let minGroup: Group = range.min.group;\n        let maxGroup: Group = range.max.group;\n\n        if (minGroup.classScale > minGroupChosen.classScale && transform.isVisibleGroup( minGroup ))\n        {\n          if (i !== 0)\n          {\n            minSum = parent.convert( minSum, minGroupChosen, minGroup );\n          }\n          minGroupChosen = minGroup;\n        }\n\n        if (maxGroup.classScale > maxGroupChosen.classScale && transform.isVisibleGroup( maxGroup ))\n        {\n          if (i !== 0)\n          {\n            maxSum = parent.convert( maxSum, maxGroupChosen, maxGroup );\n          }\n          maxGroupChosen = maxGroup;\n        }\n\n        minSum += range.min.convertTo( minGroupChosen );\n        maxSum += range.max.convertTo( maxGroupChosen );\n      }\n\n      let min: Value = Value.fromNumberForGroup( minSum, minGroupChosen );\n      let max: Value = Value.fromNumberForGroup( maxSum, maxGroupChosen );\n\n      compacted.push( new Range( min, max ) );\n    }\n\n    // If the transform options permit groupless results and there are ranges\n    // without groups - sum them all.\n    if (transform.groupless && groupless.length)\n    {\n      let minSum: Value = new Value(0, 0, 1, '', <Group>null);\n      let maxSum: Value = new Value(0, 0, 1, '', <Group>null);\n\n      for (let i = 0; i < groupless.length; i++)\n      {\n        minSum = minSum.add( groupless[ i ].min );\n        maxSum = maxSum.add( groupless[ i ].max );\n      }\n\n      compacted.push( new Range( minSum, maxSum ) );\n    }\n\n    return new Base( this.input, compacted );\n  }\n\n  /**\n   * Joins all ranges of the same classes together and then separates them\n   * into whole number ranges for better readability.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1.5pt').expand(); // '1pt, 1c'\n   * uz('53in').expand(); // '4ft, 5in'\n   * uz('2ft, 29in').expand(); // '4ft, 5in'\n   * uz('6543mm').expand(); // '6 m, 54 cm, 3 mm'\n   * ```\n   *\n   * @param options Options to control which units and values are acceptable.\n   * @return A new instance.\n   * @see [[Transform]]\n   * @see [[Core.globalTransform]]\n   */\n  public expand(options?: TransformInput): Base\n  {\n    let transform: Transform = Core.globalTransform.extend( options );\n    let compacted: Base = this.compact( transform );\n    let { ranges } = compacted;\n    let expanded: RangeList = [];\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n      let value: Value = transform.convertWithMax ? range.max : range.min;\n      let valueGroup: Group = value.group;\n      let valueSign: number = fn.sign( value.value );\n\n      if (valueGroup)\n      {\n        valueGroup.matches(transform, true, (group) =>\n        {\n          if (!fn.isZero( value.value ))\n          {\n            let transformed = value.convertToValue(group);\n\n            if (group.isBase)\n            {\n              value = value.zero();\n\n              expanded.push( Range.fromFixed( transformed ) )\n            }\n            else if (fn.abs( transformed.value ) >= 1 && fn.sign( transformed.value) === valueSign)\n            {\n              let truncated: Value = transformed.truncated();\n\n              value = value.sub( truncated.convertToValue( valueGroup ) );\n\n              expanded.push( Range.fromFixed( truncated ) );\n            }\n          }\n        });\n      }\n      else\n      {\n        expanded.push( range );\n      }\n    }\n\n    return new Base( this.input, expanded );\n  }\n\n  /**\n   * Adds the ranges of this instance and the given input together. When the\n   * ranges use the same units they are added together, otherwise they are\n   * added to the end of the range list.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1pt').add('2pt, 1c'); // '3pt, 1c'\n   * uz('1pt').add('2pt, 1c', 2); // '5pt, 2c'\n   * ```\n   *\n   * @param input An instance or input which can be parsed into an instance.\n   * @param scale A number to multiple the input by when adding it to this instance.\n   * @return A new instance.\n   * @see [[Base.operate]]\n   * @see [[Range.add]]\n   * @see [[Range.mul]]\n   */\n  public add(input: BaseInput, scale: number = 1): Base\n  {\n    return this.operate(input, (a, b) => a.add(b, scale), (a) => a.mul( scale ));\n  }\n\n  /**\n   * Subtracts the given input from the ranges of this instance. When the ranges\n   * use the same units they are subtracted, otherwise they are added to the\n   * end of the range list and negated.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('3pt').sub('2pt, 1c'); // '1pt, -1c'\n   * uz('1pt').add('2pt, 1c', 2); // '-3pt, -2c'\n   * ```\n   *\n   * @param input An instance or input which can be parsed into an instance.\n   * @param scale A number to multiple the input by when subtracting it from this instance.\n   * @return A new instance.\n   * @see [[Base.operate]]\n   * @see [[Range.sub]]\n   * @see [[Range.mul]]\n   */\n  public sub(input: BaseInput, scale: number = 1): Base\n  {\n    return this.operate(input, (a, b) => a.sub(b, scale), (a) => a.mul( -scale ));\n  }\n\n  /**\n   * Subtracts the given input from the ranges of this instance. When the ranges\n   * use the same units they are subtracted, otherwise they are added to the\n   * end of the range list and negated.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('3pt').sub('2pt, 1c'); // '1pt, -1c'\n   * uz('1pt').add('2pt, 1c', 2); // '-3pt, -2c'\n   * ```\n   *\n   * @param input An instance or input which can be parsed into an instance.\n   * @param operate A function to call when matching ranges are found and an\n   *  operation should be performed between them. The range returned by this\n   *  function ends up in the result.\n   * @param operate.a The first range to operate on.\n   * @param operate.b The second range to operate on.\n   * @param remainder A function to call on a range that did not have a match\n   *  in this instance where the range returned is added to the result.\n   * @param remainder.a The remaining range to operate on.\n   * @return A new instance.\n   * @see [[Range.isMatch]]\n   */\n  public operate(input: BaseInput,\n    operate: (a: Range, b: Range) => Range,\n    remainder: (a: Range) => Range): Base\n  {\n    let ranges: RangeList = this.ranges;\n    let output: RangeList = [];\n\n    let other: Base = Parse.base( input );\n    let otherRanges: RangeList = other.ranges;\n    let otherUsed: boolean[] = [];\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n\n      for (let k = 0; k < otherRanges.length; k++)\n      {\n        if (!otherUsed[ k ])\n        {\n          let otherRange: Range = otherRanges[ k ];\n\n          if (range.isMatch( otherRange ))\n          {\n            range = operate( range, otherRange );\n            otherUsed[ k ] = true;\n          }\n        }\n      }\n\n      output.push( range );\n    }\n\n    for (let k = 0; k < otherRanges.length; k++)\n    {\n      if (!otherUsed[ k ])\n      {\n        output.push( remainder( otherRanges[ k ] ) );\n      }\n    }\n\n    return new Base( this.input, output );\n  }\n\n  /**\n   * Joins all ranges of the same classes together and then calculates all\n   * equivalent ranges for each range for each valid group according to the\n   * given options.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1.5pt').conversions(); // '3/16gal, 3/4qt, 1 1/2pt, 3c, 24floz, 48tbsp, 144tsp'\n   * uz('20celsius, 45deg'); // '68F, 20celsius, 45deg, 0.785rad'\n   * ```\n   *\n   * @param options Options to control which units and values are acceptable.\n   * @return A new instance.\n   * @see [[Transform]]\n   * @see [[Core.globalTransform]]\n   * @see [[Value.conversions]]\n   */\n  public conversions(options?: TransformInput): Base\n  {\n    let transform: Transform = Core.globalTransform.extend( options );\n    let compacted: Base = this.compact( options );\n    let ranges: RangeList = compacted.ranges;\n    let output: RangeList = [];\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n      let convert: Value = transform.convertWithMax ? range.max : range.min;\n\n      convert.conversions(transform, false, (transformed) =>\n      {\n        let min: Value = transform.convertWithMax ? range.min.convertToValue( transformed.group ) : transformed;\n        let max: Value = transform.convertWithMax ? transformed : range.max.convertToValue( transformed.group );\n\n        if (min.value <= transform.max && max.value >= transform.min)\n        {\n          output.push( new Range( min, max ) );\n        }\n      });\n    }\n\n    return new Base( this.input, output );\n  }\n\n  /**\n   * Executes the given function on each range in this instance and if the\n   * function returns a valid range its added to the result.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1.5pt').mutate(r => r.mul(2)); // '3pt'\n   * ```\n   *\n   * @param mutator The function which may return a range.\n   * @return A new instance.\n   */\n  public mutate(mutator: RangeMutator): Base\n  {\n    let ranges: RangeList = [];\n    let source: RangeList = this.ranges;\n\n    for (let i = 0; i < source.length; i++)\n    {\n      let mutated: Range = mutator( source[ i ] ) ;\n\n      if (mutated && mutated.isValid)\n      {\n        ranges.push( mutated );\n      }\n    }\n\n    return new Base( this.input, ranges );\n  }\n\n  /**\n   * Removes the ranges from this instance that aren't valid according to the\n   * transform options provided taking into account the global options.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1in, 2m').filter({system: Unitz.System.METRIC}); // '2m'\n   * ```\n   *\n   * @param options Options to control which units and values are acceptable.\n   * @return A new instance.\n   * @see [[Transform]]\n   * @see [[Core.globalTransform]]\n   * @see [[Transform.isValidRange]]\n   */\n  public filter(options?: TransformInput): Base\n  {\n    let transform: Transform = Core.globalTransform.extend( options );\n    let ranges: RangeList = this.ranges;\n    let filtered: RangeList = [];\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n\n      if (transform.isValidRange( range ))\n      {\n        filtered.push( range );\n      }\n    }\n\n    return new Base( this.input, filtered );\n  }\n\n  /**\n   * Sorts the ranges in this instance based on the options provided taking into\n   * account the global options.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1in, 3ft, 1.3yd, 1m').sort(); // 1.3yd, 1m, 3ft, 1in\n   * uz('1in, 3ft, 1.3yd, 1m').sort({ascending: true}); // 1in, 3ft, 1m, 1.3yd\n   * uz('1-3cups, 2-2.5cups, 4in').sort({\n   *  type: Unitz.SortType.MIN,\n   *  classes: {\n   *   Volume: 1,\n   *   Length: 2\n   *  }\n   * }); // 4in, 2 - 2.5cups, 1 - 3cups\n   * ```\n   *\n   * @param options Options to control how sorting is done.\n   * @return A new instance.\n   * @see [[Sort]]\n   * @see [[Core.globalSort]]\n   */\n  public sort(options?: SortInput): Base\n  {\n    let sort: Sort = Core.globalSort.extend( options );\n    let ranges: RangeList = this.ranges.slice();\n\n    ranges.sort( sort.getSorter() );\n\n    return new Base( this.input, ranges );\n  }\n\n  /**\n   * Returns the ranges in this instance grouped by their class. All groupless\n   * ranges are added to their own list.\n   */\n  public groupByClass(): ClassGrouping\n  {\n    let ranges: RangeList = this.ranges;\n    let classes = {};\n    let groupless = [];\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n\n      if (range.min.group)\n      {\n        let parent: Class = range.min.group.parent;\n        let entry = classes[ parent.name ];\n\n        if (!entry)\n        {\n          entry = classes[ parent.name ] = {\n            parent: parent,\n            ranges: []\n          };\n        }\n\n        entry.ranges.push( range );\n      }\n      else\n      {\n        groupless.push( range );\n      }\n    }\n\n    return { classes, groupless };\n  }\n\n  /**\n   * Calculates what this instance would need to be scaled by so that the given\n   * value & unit pair is equal to the sum of ranges in this instance of the\n   * same class. If there are no ranges with the same class then zero is\n   * returned. If the sum of ranges with the same class results in an actual\n   * range (where min != max) then you can specify how to pick a value from the\n   * range with rangeDetla. A value of 0 uses the min, 1 uses the max, and 0.5\n   * uses the average between them.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1m, 2 - 3c').getScaleTo('6c'); // 2\n   * uz('1m, 2 - 3c').getScaleTo('6c', 0); // 3\n   * uz('1m, 2 - 3c').getScaleTo('6c', 0.5); // 2.4\n   * uz('1m, 2 - 3c').getScaleTo('45deg'); // 0\n   * ```\n\n   * @param unitValue A value & unit pair to scale the ranges in this instance to.\n   * @param rangeDelta When this instance contains ranges this value instructs\n   *  how the scale factor is calculated. A value of 0 means it looks at the\n   *  minimum, 1 is the maximum, and 0.5 is the average.\n   * @return A value to scale by or zero if this instance cannot match the input.\n   * @see [[Base.convert]]\n   * @see [[Parse.value]]\n   */\n  public getScaleTo(unitValue: string, rangeDelta: number = 1.0): number\n  {\n    let to: Value = Parse.value( unitValue, Core.getGroup );\n\n    if (!to.isValid)\n    {\n      return 0;\n    }\n\n    let converted: Range = this.convert( to.unit );\n\n    if (!converted || !converted.isValid)\n    {\n      return 0;\n    }\n\n    let convertedValue: number = (converted.maximum - converted.minimum) * rangeDelta + converted.minimum;\n    let scale: number = to.value / convertedValue;\n\n    return scale;\n  }\n\n  /**\n   * Converts the ranges in this instance to a string with the given output\n   * options taking into account the global options.\n   *\n   * @param options The options to override the global output options.\n   * @return The string representation of this instance.\n   * @see [[Output]]\n   */\n  public output(options?: OutputInput): string\n  {\n    let output: Output = Core.globalOutput.extend( options );\n\n    return output.ranges( this.ranges );\n  }\n\n  /**\n   * Converts the appropriate ranges in this instance into the desired unit\n   * and returns their converted sum. If the given unit does not map to a group\n   * then null is returned. If there are no ranges in this instance in the same\n   * class then the range returned is equivalent to zero.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1in, 1m, 1ft').convert('cm'); // '133.02 cm'\n   * ```\n   *\n   * @param unit The unit to calculate the sum of.\n   * @return A new range which is the sum of ranges in the same class converted\n   *  to the desired unit.\n   * @see [[Core.getGroup]]\n   * @see [[Range.isZero]]\n   */\n  public convert(unit: string): Range\n  {\n    let group: Group = Core.getGroup( unit );\n\n    if (!group)\n    {\n      return null;\n    }\n\n    let parent: Class = group.parent;\n    let ranges: RangeList = this.ranges;\n    let min: Value = new Value(0, 0, 1, unit, group);\n    let max: Value = new Value(0, 0, 1, unit, group);\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n      let rangeGroup: Group = range.min.group;\n\n      if (rangeGroup && rangeGroup.parent === parent)\n      {\n        min = min.add( range.min.convertToValue( group ) );\n        max = max.add( range.max.convertToValue( group ) );\n      }\n    }\n\n    return new Range( min, max );\n  }\n\n  /**\n   * Iterates over each range in this instance in order or reversed and passes\n   * each one to the given iterate function. If the iterate function returns\n   * false the iteration will stop.\n   *\n   * @param iterate The function to invoke with each range and it's index.\n   * @param iterate.range The current range being iterated.\n   * @param iterate.index The index of the current range in this instance.\n   * @param reverse Whether the iteration should be done forward or backward.\n   * @return The reference to this instance.\n   */\n  public each(iterate: (range: Range, index: number) => any, reverse: boolean = false): this\n  {\n    let ranges: RangeList = this.ranges;\n    let start = reverse ? ranges.length - 1 : 0;\n    let end = reverse ? -1 : ranges.length;\n    let move = reverse ? -1 : 1;\n\n    for (let i = start; i !== end; i += move)\n    {\n      if (iterate( ranges[ i ], i ) === false)\n      {\n        break;\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Returns an array of the classes represented in this instance. If there are\n   * no classes in this instance then an empty array is returned.\n   *\n   * @return An array of the classes in this instance.\n   */\n  public classes(): Class[]\n  {\n    let ranges: RangeList = this.ranges;\n    let classMap = {};\n    let classes: Class[] = [];\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n      let group: Group = range.min.group;\n\n      if (group)\n      {\n        classMap[ group.parent.name ] = group.parent;\n      }\n    }\n\n    for (let className in classMap)\n    {\n      classes.push( classMap[ className ] );\n    }\n\n    return classes;\n  }\n\n  /**\n   * Returns whether this instance has actual ranges. An actual range is where\n   * the minimum and maximum values differ.\n   *\n   * @see [[Range.isRange]]\n   */\n  public get hasRanges(): boolean\n  {\n    let ranges: RangeList = this.ranges;\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      if (ranges[ i ].isRange)\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Returns whether this instance only has valid ranges. If any of the ranges\n   * in this instance are not valid false is returned, otherwise true.\n   *\n   * @see [[Range.isValid]]\n   */\n  public get isValid(): boolean\n  {\n    let ranges: RangeList = this.ranges;\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      if (!ranges[ i ].isValid)\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Base.ts","\nimport { Functions as fn } from './Functions';\nimport { BaseInput, RangeInput, RangesInput, RangeDefinition, ValueInput, ValueDefinition, ParseResult } from './Types';\nimport { Group, GroupFactory } from './Group';\nimport { Range, RangeList } from './Range';\nimport { Value } from './Value';\nimport { Base } from './Base';\n\n\n/**\n * The class which takes user input and parses it to specific structures.\n */\nexport class Parse\n{\n\n  /**\n   * The regular expression used to split up a string into multiple ranges.\n   */\n  public static REGEX_LIST: RegExp = /\\s*,\\s*/;\n\n  /**\n   * The regular expression used to split up a range string to determine the min\n   * and maximum values.\n   */\n  public static REGEX_RANGE: RegExp = /\\s*(-?[^-]+)-(.+)/;\n\n  /**\n   * The regular expression used to parse a value number or fraction and\n   * possible unit from a string.\n   */\n  public static REGEX_PARSE: RegExp = /^\\s*(-?\\d*)(\\s+(\\d+))?(\\s*\\/\\s*(\\d+)|\\.(\\d+)|)\\s*(.*)\\s*$/i;\n\n  /**\n   * Parses user input into a [[Base]] instance.\n   *\n   * @param input The input to parse into a Base.\n   * @return The instance parsed from the input.\n   */\n  public static base(input: BaseInput): Base\n  {\n    if (input instanceof Base)\n    {\n      return <Base>input;\n    }\n\n    return new Base( <RangesInput>input );\n  }\n\n  /**\n   * Parses user input into a an array of [[Range]]s.\n   *\n   * @param input The input to parse.\n   * @param groups A function which converts a unit to a [[Group]] instance.\n   * @return The instances parsed from the input.\n   */\n  public static ranges(input: RangesInput, groups: GroupFactory): RangeList\n  {\n    if (fn.isArray(input))\n    {\n      return this.rangesFromArray( <RangeInput[]>input, groups );\n    }\n    else if (fn.isString(input))\n    {\n      return this.rangesFromString( <string>input, groups );\n    }\n    else if (fn.isRangeDefinition(input))\n    {\n      return this.rangesFromArray( [ <RangeDefinition>input ], groups );\n    }\n    else if (fn.isValueDefinition(input))\n    {\n      return this.rangesFromArray( [ <ValueDefinition>input ], groups );\n    }\n\n    return [];\n  }\n\n  /**\n   * Parses user input into a an array of [[Range]]s.\n   *\n   * @param input The input to parse.\n   * @param groups A function which converts a unit to a [[Group]] instance.\n   * @return The instances parsed from the input.\n   */\n  public static rangesFromArray(input: RangeInput[], groups: GroupFactory): RangeList\n  {\n    let ranges = [];\n\n    for (let i = 0; i < input.length; i++)\n    {\n      let range: Range = this.range( input[ i ], groups );\n\n      ranges.push( range );\n    }\n\n    return ranges;\n  }\n\n  /**\n   * Parses user input into a an array of [[Range]]s.\n   *\n   * @param input The input to parse.\n   * @param groups A function which converts a unit to a [[Group]] instance.\n   * @return The instances parsed from the input.\n   */\n  public static rangesFromString(input: string, groups: GroupFactory): RangeList\n  {\n    let ranges: string[] = input.split( this.REGEX_LIST );\n\n    return this.rangesFromArray( ranges, groups );\n  }\n\n  /**\n   * Parses user input into a [[Range]].\n   *\n   * @param input The input to parse.\n   * @param groups A function which converts a unit to a [[Group]] instance.\n   * @return The instance parsed from the input.\n   */\n  public static range(input: RangeInput, groups: GroupFactory): Range\n  {\n    if (fn.isString(input))\n    {\n      return this.rangeFromString( <string>input, groups );\n    }\n    else if (fn.isRangeDefinition(input))\n    {\n      let range: RangeDefinition = <RangeDefinition>input;\n      let min: Value = this.value( range.min, groups );\n      let max: Value = this.value( range.max, groups );\n\n      return new Range( min, max );\n    }\n\n    return Range.INVALID;\n  }\n\n  /**\n   * Parses user input into a [[Range]].\n   *\n   * @param input The input to parse.\n   * @param groups A function which converts a unit to a [[Group]] instance.\n   * @return The instance parsed from the input.\n   */\n  public static rangeFromString(input: string, groups: GroupFactory): Range\n  {\n    let matches: string[] = this.REGEX_RANGE.exec( input );\n\n    if (!matches)\n    {\n      let fixed: Value = this.valueFromString(input, groups);\n\n      return new Range(fixed, fixed);\n    }\n\n    let minInput: string = matches[1];\n    let maxInput: string = matches[2];\n\n    let minParsed: ParseResult = this.input( minInput );\n    let maxParsed: ParseResult = this.input( maxInput );\n\n    if (!minParsed || !maxParsed)\n    {\n      return Range.INVALID;\n    }\n\n    let minUnit: string = minParsed.unit || maxParsed.unit;\n    let maxUnit: string = maxParsed.unit || minParsed.unit;\n\n    let min: Value = this.valueFromResult(minParsed, minUnit, groups);\n    let max: Value = this.valueFromResult(maxParsed, maxUnit, groups);\n\n    return new Range( min, max );\n  }\n\n  /**\n   * Parses user input into a [[Value]].\n   *\n   * @param input The input to parse.\n   * @param groups A function which converts a unit to a [[Group]] instance.\n   * @return The instance parsed from the input.\n   */\n  public static value(input: ValueInput, groups: GroupFactory): Value\n  {\n    if (fn.isString(input))\n    {\n      return this.valueFromString( <string>input, groups );\n    }\n    else if (fn.isValueDefinition(input))\n    {\n      return this.valueFromValue( <ValueDefinition>input, groups );\n    }\n\n    return Value.INVALID;\n  }\n\n  /**\n   * Parses user input into a [[Value]].\n   *\n   * @param input The input to parse.\n   * @param groups A function which converts a unit to a [[Group]] instance.\n   * @return The instance parsed from the input.\n   */\n  public static valueFromValue(input: ValueDefinition, groups: GroupFactory): Value\n  {\n    let givenValue: number = fn.isDefined( input.value ) ? input.value : 1;\n    let num: number = fn.isDefined( input.num ) ? input.num : givenValue;\n    let den: number = fn.isDefined( input.den ) ? input.den : 1;\n    let parsedValue: number = fn.isDefined( input.value ) ? input.value : num / den;\n    let unit: string = input.unit || '';\n    let group: Group = groups( unit );\n\n    return new Value( parsedValue, num, den, unit, group );\n  }\n\n  /**\n   * Parses user input into a [[Value]].\n   *\n   * @param input The input to parse.\n   * @param groups A function which converts a unit to a [[Group]] instance.\n   * @return The instance parsed from the input.\n   */\n  public static valueFromString(input: string, groups: GroupFactory): Value\n  {\n    let parsed: ParseResult = this.input( input );\n\n    return parsed ? this.valueFromResult(parsed, parsed.unit, groups) : Value.INVALID;\n  }\n\n  /**\n   * Parses user input into a [[Value]].\n   *\n   * @param result The already parsed input.\n   * @param unit The unit parsed from the input.\n   * @param groups A function which converts a unit to a [[Group]] instance.\n   * @return The instance parsed from the input.\n   */\n  public static valueFromResult(result: ParseResult, unit: string, groups: GroupFactory): Value\n  {\n    let group: Group = groups( unit );\n\n    return new Value(result.value, result.valueNum, result.valueDen, unit, group);\n  }\n\n  /**\n   * Possible Values:\n   * 1tsp\n   * 1 tsp\n   * 1/2 tsp\n   * 1 1/2 tsp\n   * 1 - 2 tsp\n   * 1 tsp, 1 cup\n   * 2/3 - 1 c, 1 lb, 2.45 cats\n   */\n\n\n  /**\n   * Parses user input into a [[ParseResult]]. If the input is not valid null\n   * is returned.\n   *\n   * *Examples:*\n   * - 1tsp\n   * - 1 tsp\n   * - 1/2 tsp\n   * - 1 1/2 tsp\n   * - -2 cups\n   * - 2.35\"\n   *\n   * @param input The string to parse a value and unit from.\n   * @return The result of the parsing.\n   */\n  public static input(input: string): ParseResult\n  {\n    let matches: string[] = this.REGEX_PARSE.exec( input );\n    let whole: number = parseInt( matches[1] );\n    let hasWhole: boolean = isFinite( whole );\n    let sign: number = matches[1].charAt(0) === '-' ? -1 : 1;\n    let num: number = parseInt( matches[3] );\n    let den: number = parseInt( matches[5] );\n    let decimal: string = matches[6];\n    let hasDecimal: boolean = isFinite( parseFloat( decimal ) );\n    let unit: string = fn.trim( matches[7] ).replace( /\\.$/, '' );\n\n    if ( !hasWhole && hasDecimal )\n    {\n      whole = 0;\n      hasWhole = true;\n    }\n\n    if ( !hasWhole && !unit )\n    {\n      return null;\n    }\n\n    let value: number = 1;\n    let valueDen: number = 1;\n    let valueNum: number = 1;\n\n    if ( hasWhole )\n    {\n      value = whole;\n      valueNum = whole;\n\n      if ( isFinite( den ) )\n      {\n        valueDen = den;\n\n        if ( isFinite( num ) )\n        {\n          value += ( num / den ) * sign;\n          valueNum *= den;\n          valueNum += num;\n        }\n        else\n        {\n          value /= den;\n        }\n      }\n      else if ( hasDecimal )\n      {\n        let remainder = parseFloat( '0.' + decimal );\n\n        value += remainder * sign;\n        valueNum += remainder;\n      }\n\n      valueNum *= sign;\n    }\n\n    return { value, valueNum, valueDen, num, den, unit };\n  }\n\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Parse.ts","\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n\n\n/**\n * The Weight clas which contains the following groups.\n *\n * - milligram\n * - gram\n * - kilogram\n * - ounce\n * - pound\n * - ton\n */\nexport let Weight = new Class('Weight')\n  .setBaseConversion('mg', 'oz', (x) => x * 0.000035274)\n\n  .setBaseConversion('oz', 'mg', (x) => x * 28349.5)\n\n  .addGroups([\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'mg',\n      baseUnit: 'mg',\n      denominators: [2, 10],\n      units: {\n        'mg': Plurality.EITHER,\n        'milligram': Plurality.SINGULAR,\n        'milligrams': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'g',\n      relativeUnit: 'mg',\n      relativeScale: 1000,\n      denominators: [2, 10, 1000],\n      units: {\n        'g': Plurality.EITHER,\n        'gram': Plurality.SINGULAR,\n        'grams': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'kg',\n      relativeUnit: 'g',\n      relativeScale: 1000,\n      denominators: [2, 10, 1000],\n      units: {\n        'kg': Plurality.EITHER,\n        'kilo': Plurality.SINGULAR,\n        'kilos': Plurality.PLURAL,\n        'kilogram': Plurality.SINGULAR,\n        'kilograms': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'oz',\n      baseUnit: 'oz',\n      denominators: [2, 3, 4, 16],\n      units: {\n        'oz': Plurality.EITHER,\n        'ounce': Plurality.SINGULAR,\n        'ounces': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'lb',\n      relativeUnit: 'oz',\n      relativeScale: 16,\n      denominators: [2, 3, 4, 16],\n      units: {\n        'lb': Plurality.EITHER,\n        'lbs': Plurality.PLURAL,\n        'pound': Plurality.SINGULAR,\n        'pounds': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'ton',\n      relativeUnit: 'lb',\n      relativeScale: 2000,\n      denominators: [2, 3, 4, 10],\n      units: {\n        'ton': Plurality.EITHER,\n        'tons': Plurality.PLURAL,\n        'tonnes': Plurality.PLURAL\n      }\n    }\n  ])\n  .setClassScales();\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Weight.ts","\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n\n\n/**\n * The Area class which contains the following groups:\n *\n * - square inch\n * - square foot\n * - square yard\n * - acre\n * - square mile\n * - square millimeter\n * - square centimeter\n * - square meter\n * - square kilometer\n */\nexport let Area = new Class('Area')\n  .setBaseConversion('sqin', 'sqmm', (x) => x * 645.16)\n\n  .setBaseConversion('sqmm', 'sqin', (x) => x * 0.00155)\n\n  .addGroups([\n    {\n      system: System.US,\n      common: true,\n      unit: 'sqin',\n      baseUnit: 'sqin',\n      denominators: [2, 4, 8, 16],\n      units: {\n        'sqin': Plurality.EITHER,\n        'sq. in': Plurality.EITHER,\n        'sq in': Plurality.EITHER,\n        'in2': Plurality.EITHER,\n        'in^2': Plurality.EITHER,\n        'in\\xb2': Plurality.EITHER,\n        'inch2': Plurality.SINGULAR,\n        'inch^2': Plurality.SINGULAR,\n        'inch\\xb2': Plurality.SINGULAR,\n        'inches2': Plurality.PLURAL,\n        'inches^2': Plurality.PLURAL,\n        'inches\\xb2': Plurality.PLURAL,\n        'square in': Plurality.EITHER,\n        'square inch': Plurality.SINGULAR,\n        'square inches': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'sqft',\n      relativeUnit: 'sqin',\n      relativeScale: 12 * 12,\n      denominators: [2, 4, 8, 16],\n      units: {\n        'sqft': Plurality.EITHER,\n        'sq. ft': Plurality.EITHER,\n        'sq ft': Plurality.EITHER,\n        'ft2': Plurality.EITHER,\n        'ft^2': Plurality.EITHER,\n        'ft\\xb2': Plurality.EITHER,\n        'foot2': Plurality.SINGULAR,\n        'foot^2': Plurality.SINGULAR,\n        'foot\\xb2': Plurality.SINGULAR,\n        'feet2': Plurality.PLURAL,\n        'feet^2': Plurality.PLURAL,\n        'feet\\xb2': Plurality.PLURAL,\n        'square ft': Plurality.EITHER,\n        'square foot': Plurality.SINGULAR,\n        'square feet': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      unit: 'sqyd',\n      relativeUnit: 'sqft',\n      relativeScale: 3 * 3,\n      denominators: [2, 3, 4, 8, 9, 16],\n      units: {\n        'sqyd': Plurality.EITHER,\n        'sq. yd': Plurality.EITHER,\n        'sq yd': Plurality.EITHER,\n        'yd2': Plurality.EITHER,\n        'yd^2': Plurality.EITHER,\n        'yd\\xb2': Plurality.EITHER,\n        'yard2': Plurality.SINGULAR,\n        'yard^2': Plurality.SINGULAR,\n        'yard\\xb2': Plurality.SINGULAR,\n        'yards2': Plurality.PLURAL,\n        'yards^2': Plurality.PLURAL,\n        'yards\\xb2': Plurality.PLURAL,\n        'square yard': Plurality.SINGULAR,\n        'square yards': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'acre',\n      relativeUnit: 'sqyd',\n      relativeScale: 4840,\n      denominators: [2, 3, 4, 8, 10],\n      units: {\n        'acre': Plurality.EITHER,\n        'acres': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'sqmi',\n      relativeUnit: 'acre',\n      relativeScale: 640,\n      denominators: [2, 3, 4, 8, 10],\n      units: {\n        'sqmi': Plurality.EITHER,\n        'sq. mi': Plurality.EITHER,\n        'sq mi': Plurality.EITHER,\n        'mi2': Plurality.EITHER,\n        'mi^2': Plurality.EITHER,\n        'mi\\xb2': Plurality.EITHER,\n        'mile2': Plurality.SINGULAR,\n        'mile^2': Plurality.SINGULAR,\n        'mile\\xb2': Plurality.SINGULAR,\n        'miles2': Plurality.PLURAL,\n        'miles^2': Plurality.PLURAL,\n        'miles\\xb2': Plurality.PLURAL,\n        'square mi': Plurality.EITHER,\n        'square mile': Plurality.SINGULAR,\n        'square miles': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'sqmm',\n      baseUnit: 'sqmm',\n      denominators: [2, 4, 8, 16],\n      units: {\n        'sqmm': Plurality.EITHER,\n        'sq. mm': Plurality.EITHER,\n        'sq mm': Plurality.EITHER,\n        'mm2': Plurality.EITHER,\n        'mm^2': Plurality.EITHER,\n        'mm\\xb2': Plurality.EITHER,\n        'millimeter2': Plurality.SINGULAR,\n        'millimeter^2': Plurality.SINGULAR,\n        'millimeter\\xb2': Plurality.SINGULAR,\n        'millimeters2': Plurality.PLURAL,\n        'millimeters^2': Plurality.PLURAL,\n        'millimeters\\xb2': Plurality.PLURAL,\n        'square mm': Plurality.EITHER,\n        'square millimeter': Plurality.SINGULAR,\n        'square millimeters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'sqcm',\n      relativeUnit: 'sqmm',\n      relativeScale: 100,\n      denominators: [2, 4, 8, 16],\n      units: {\n        'sqcm': Plurality.EITHER,\n        'sq. cm': Plurality.EITHER,\n        'sq cm': Plurality.EITHER,\n        'cm2': Plurality.EITHER,\n        'cm^2': Plurality.EITHER,\n        'cm\\xb2': Plurality.EITHER,\n        'centimeter2': Plurality.SINGULAR,\n        'centimeter^2': Plurality.SINGULAR,\n        'centimeter\\xb2': Plurality.SINGULAR,\n        'centimeters2': Plurality.PLURAL,\n        'centimeters^2': Plurality.PLURAL,\n        'centimeters\\xb2': Plurality.PLURAL,\n        'square cm': Plurality.EITHER,\n        'square centimeter': Plurality.SINGULAR,\n        'square centimeters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'sqm',\n      relativeUnit: 'sqcm',\n      relativeScale: 10000,\n      denominators: [2, 4, 8, 16],\n      units: {\n        'sqm': Plurality.EITHER,\n        'sq. m': Plurality.EITHER,\n        'sq m': Plurality.EITHER,\n        'm2': Plurality.EITHER,\n        'm^2': Plurality.EITHER,\n        'm\\xb2': Plurality.EITHER,\n        'meter2': Plurality.SINGULAR,\n        'meter^2': Plurality.SINGULAR,\n        'meter\\xb2': Plurality.SINGULAR,\n        'meters2': Plurality.PLURAL,\n        'meters^2': Plurality.PLURAL,\n        'meters\\xb2': Plurality.PLURAL,\n        'square m': Plurality.EITHER,\n        'square meter': Plurality.SINGULAR,\n        'square meters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'sqkm',\n      relativeUnit: 'sqm',\n      relativeScale: 1000000,\n      denominators: [2, 4, 8, 16],\n      units: {\n        'sqkm': Plurality.EITHER,\n        'sq. km': Plurality.EITHER,\n        'sq km': Plurality.EITHER,\n        'km2': Plurality.EITHER,\n        'km^2': Plurality.EITHER,\n        'km\\xb2': Plurality.EITHER,\n        'kilometer2': Plurality.SINGULAR,\n        'kilometer^2': Plurality.SINGULAR,\n        'kilometer\\xb2': Plurality.SINGULAR,\n        'kilometers2': Plurality.PLURAL,\n        'kilometers^2': Plurality.PLURAL,\n        'kilometers\\xb2': Plurality.PLURAL,\n        'square km': Plurality.EITHER,\n        'square kilometer': Plurality.SINGULAR,\n        'square kilometers': Plurality.PLURAL\n      }\n    }\n  ])\n  .setClassScales()\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Area.ts","\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n\n\n/**\n * The Time class which contains the following groups.\n *\n * - nanosecond\n * - microsecond\n * - millisecond\n * - second\n * - hour\n * - day\n * - week\n * - year\n * - score\n * - decade\n * - centry\n * - millennium\n */\nexport let Time = new Class('Time')\n  .addGroups([\n    {\n      system: System.ANY,\n      unit: 'ns',\n      baseUnit: 'ns',\n      denominators: [10, 100],\n      units: {\n        'ns': Plurality.EITHER,\n        'nanosecond': Plurality.SINGULAR,\n        'nanoseconds': Plurality.PLURAL,\n        'nano': Plurality.SINGULAR,\n        'nanos': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      unit: 'us',\n      relativeUnit: 'ns',\n      relativeScale: 1000,\n      denominators: [10, 100, 1000],\n      units: {\n        'us': Plurality.EITHER,\n        'microsecond': Plurality.SINGULAR,\n        'microseconds': Plurality.PLURAL,\n        'micro': Plurality.SINGULAR,\n        'micros': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'ms',\n      relativeUnit: 'us',\n      relativeScale: 1000,\n      denominators: [10, 100, 1000],\n      units: {\n        'ms': Plurality.EITHER,\n        'millisecond': Plurality.SINGULAR,\n        'milliseconds': Plurality.PLURAL,\n        'milli': Plurality.SINGULAR,\n        'millis': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 's',\n      relativeUnit: 'ms',\n      relativeScale: 1000,\n      denominators: [10, 100, 1000],\n      units: {\n        's': Plurality.EITHER,\n        'second': Plurality.SINGULAR,\n        'seconds': Plurality.PLURAL,\n        'sec': Plurality.SINGULAR,\n        'secs': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'min',\n      relativeUnit: 's',\n      relativeScale: 60,\n      denominators: [2, 3, 4, 60],\n      units: {\n        'min': Plurality.EITHER,\n        'minute': Plurality.SINGULAR,\n        'minutes': Plurality.PLURAL,\n        'mins': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'hr',\n      relativeUnit: 'min',\n      relativeScale: 60,\n      denominators: [2, 3, 4, 60],\n      units: {\n        'hr': Plurality.EITHER,\n        'hour': Plurality.SINGULAR,\n        'hours': Plurality.PLURAL,\n        'hrs': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'day',\n      relativeUnit: 'hr',\n      relativeScale: 24,\n      denominators: [2, 3, 4, 6, 24],\n      units: {\n        'day': Plurality.EITHER,\n        'days': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'wk',\n      relativeUnit: 'day',\n      relativeScale: 7,\n      denominators: [7],\n      units: {\n        'wk': Plurality.EITHER,\n        'week': Plurality.SINGULAR,\n        'weeks': Plurality.PLURAL,\n        'wks': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'yr',\n      relativeUnit: 'day',\n      relativeScale: 365.2425,\n      denominators: [2, 3, 4, 6, 12, 52],\n      units: {\n        'yr': Plurality.EITHER,\n        'year': Plurality.SINGULAR,\n        'years': Plurality.PLURAL,\n        'yrs': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'score',\n      relativeUnit: 'yr',\n      relativeScale: 20,\n      denominators: [20],\n      units: {\n        'score': Plurality.EITHER\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'decade',\n      relativeUnit: 'yr',\n      relativeScale: 10,\n      denominators: [10],\n      units: {\n        'decade': Plurality.EITHER,\n        'decades': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      unit: 'biennium',\n      relativeUnit: 'yr',\n      relativeScale: 2,\n      denominators: [],\n      units: {\n        'biennium': Plurality.EITHER,\n        'bienniums': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      unit: 'triennium',\n      relativeUnit: 'yr',\n      relativeScale: 3,\n      denominators: [],\n      units: {\n        'triennium': Plurality.EITHER,\n        'trienniums': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      unit: 'quadrennium',\n      relativeUnit: 'yr',\n      relativeScale: 4,\n      denominators: [],\n      units: {\n        'quadrennium': Plurality.EITHER,\n        'quadrenniums': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      unit: 'lustrum',\n      relativeUnit: 'yr',\n      relativeScale: 5,\n      denominators: [],\n      units: {\n        'lustrum': Plurality.EITHER,\n        'lustrums': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'decade',\n      relativeUnit: 'yr',\n      relativeScale: 10,\n      denominators: [2, 10],\n      units: {\n        'decade': Plurality.EITHER,\n        'decades': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'century',\n      relativeUnit: 'yr',\n      relativeScale: 100,\n      denominators: [2, 10],\n      units: {\n        'century': Plurality.EITHER,\n        'centurys': Plurality.PLURAL,\n        'centuries': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'millennium',\n      relativeUnit: 'yr',\n      relativeScale: 1000,\n      denominators: [2, 3, 4],\n      units: {\n        'millennium': Plurality.EITHER,\n        'millenniums': Plurality.PLURAL,\n        'millennia': Plurality.PLURAL,\n        'millennias': Plurality.PLURAL\n      }\n    }\n  ])\n  .setClassScales();\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Time.ts","\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n\n\n/**\n * The Digital class which contains the following groups:\n *\n * - bit\n * - nibble\n * - byte\n * - kilo/mego/giga/tera/peta/exa/zetta/yotta byte\n * - kibi/mebi/gibi/tebi/pebi/exbi/zebi/yobi byte\n * - kilo/mego/giga/tera/peta/exa/zetta/yotta bit\n * - ki/mi/gi/ti/pi/ez/zi/yi bit\n */\nexport let Digital = new Class('Digital')\n  .addGroups([\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'b',\n      baseUnit: 'b',\n      denominators: [],\n      units: {\n        'b': Plurality.EITHER,\n        'bit': Plurality.SINGULAR,\n        'bits': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      unit: 'nibble',\n      relativeUnit: 'b',\n      relativeScale: 4,\n      denominators: [],\n      units: {\n        'nibble': Plurality.EITHER,\n        'nibbles': Plurality.PLURAL,\n        'nybble': Plurality.EITHER,\n        'nyble': Plurality.EITHER,\n        'half-byte': Plurality.EITHER,\n        'half byte': Plurality.EITHER,\n        'tetrade': Plurality.EITHER,\n        'semi-octet': Plurality.EITHER,\n        'quadbit': Plurality.EITHER,\n        'quartet': Plurality.EITHER\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'B',\n      relativeUnit: 'b',\n      relativeScale: 8,\n      denominators: [2, 8],\n      units: {\n        'B': Plurality.EITHER,\n        'byte': Plurality.SINGULAR,\n        'bytes': Plurality.PLURAL\n      }\n    }\n  ])\n\naddDigitalUnits(\n  Digital,\n  'B',\n  1000,\n  [2, 4, 5, 10],\n  'byte', 'bytes',\n  [\n    ['kB', 'kilo'],\n    ['mB', 'mega'],\n    ['gB', 'giga'],\n    ['tB', 'tera'],\n    ['pB', 'peta'],\n    ['eB', 'exa'],\n    ['zB', 'zetta'],\n    ['yB', 'yotta']\n  ]\n);\n\naddDigitalUnits(\n  Digital,\n  'B',\n  1024,\n  [2, 4, 8, 16],\n  'byte', 'bytes',\n  [\n    ['KB', 'kibi'],\n    ['MB', 'mebi'],\n    ['GB', 'gibi'],\n    ['TB', 'tebi'],\n    ['PB', 'pebi'],\n    ['EB', 'exbi'],\n    ['ZB', 'zebi'],\n    ['YB', 'yobi']\n  ]\n);\n\naddDigitalUnits(\n  Digital,\n  'b',\n  1000,\n  [2, 4, 5, 10],\n  'bit', 'bits',\n  [\n    ['kb', 'kilo', 'kbit'],\n    ['mb', 'mega', 'mbit'],\n    ['gb', 'giga', 'gbit'],\n    ['tb', 'tera', 'tbit'],\n    ['pb', 'peta', 'pbit'],\n    ['eb', 'exa', 'ebit'],\n    ['zb', 'zetta', 'zbit'],\n    ['yb', 'yotta', 'ybit']\n  ]\n);\n\naddDigitalUnits(\n  Digital,\n  'b',\n  1024,\n  [2, 4, 8, 16],\n  'bit', 'bits',\n  [\n    ['kibit', 'kibi'],\n    ['mibit', 'mebi'],\n    ['gibit', 'gibi'],\n    ['tibit', 'tebi'],\n    ['pibit', 'pebi'],\n    ['eibit', 'exbi'],\n    ['zibit', 'zebi'],\n    ['yibit', 'yobi']\n  ]\n);\n\nDigital.setClassScales();\n\n\nfunction addDigitalUnits(parent: Class, relativeTo: string, relativeScales: number, denominators: number[], suffixSingular: string, suffixPlural: string, unitAndPrefixes: string[][])\n{\n  for (let i = 0; i < unitAndPrefixes.length; i++)\n  {\n    let [unit, prefix, extra] = unitAndPrefixes[ i ];\n\n    let units = {};\n    units[ unit ] = Plurality.EITHER;\n    units[ prefix + suffixSingular ] = Plurality.SINGULAR;\n    units[ prefix + suffixPlural ] = Plurality.PLURAL;\n\n    if (extra)\n    {\n      units[ extra ] = Plurality.EITHER;\n    }\n\n    parent.addGroup({\n      system: System.ANY,\n      common: true,\n      unit: unit,\n      relativeUnit: relativeTo,\n      relativeScale: relativeScales,\n      denominators: denominators,\n      units: units\n    });\n\n    relativeTo = unit;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Digital.ts","\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n\n\nlet _C_: string = '\\xb0C';\n\n/**\n * The Temperature class which contains the following groups.\n *\n * - celsius\n * - kelvin\n * - fahrenheit\n */\nexport let Temperature = new Class('Temperature')\n  .setBaseConversion('F', _C_, x => ((x - 32) * 5 / 9))\n  .setBaseConversion('F', 'K', x => ((x + 459.67) * 5 / 9))\n\n  .setBaseConversion(_C_, 'F', x => ((x * 9 / 5) + 32))\n  .setBaseConversion(_C_, 'K', x => (x + 273.15))\n\n  .setBaseConversion('K', _C_, x => (x - 273.15))\n  .setBaseConversion('K', 'F', x => ((x * 9 / 5) - 459.67))\n\n  .addGroups([\n    {\n      system: System.US,\n      common: true,\n      unit: 'F',\n      baseUnit: 'F',\n      denominators: [],\n      units: {\n        'F': Plurality.EITHER,\n        '\\xb0F': Plurality.EITHER,\n        'Fahrenheit': Plurality.EITHER\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: _C_,\n      baseUnit: _C_,\n      denominators: [],\n      units: {\n        '\\xb0C': Plurality.EITHER,\n        'Celsius': Plurality.EITHER\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'K',\n      baseUnit: 'K',\n      denominators: [],\n      units: {\n        'K': Plurality.EITHER,\n        'kelvin': Plurality.SINGULAR,\n        'kelvins': Plurality.PLURAL\n      }\n    }\n  ])\n  .setClassScales()\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Temperature.ts","\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n\nlet RAD2DEG = 180 / Math.PI;\nlet DEG2RAD = Math.PI / 180;\n\n/**\n * The Angle class which contains the following groups.\n *\n * - degree\n * - radian\n */\nexport let Angle = new Class('Angle')\n  .setBaseConversion('deg', 'rad', (x) => x * DEG2RAD)\n\n  .setBaseConversion('rad', 'deg', (x) => x * RAD2DEG)\n\n  .addGroups([\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'deg',\n      baseUnit: 'deg',\n      denominators: [],\n      units: {\n        'deg': Plurality.EITHER,\n        '\\xb0': Plurality.EITHER,\n        'degrees': Plurality.PLURAL,\n        'degree': Plurality.SINGULAR\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'rad',\n      baseUnit: 'rad',\n      denominators: [],\n      units: {\n        'rad': Plurality.EITHER,\n        'radians': Plurality.PLURAL,\n        'radian': Plurality.SINGULAR\n      }\n    }\n  ])\n  .setClassScales()\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Angle.ts","\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n\n\n/**\n * The Volume clas which contains the following groups.\n *\n * - teaspoon\n * - tablespoon\n * - fluid ounce\n * - cup\n * - pint\n * - quart\n * - gallon\n * - milliliter\n * - centiliter\n * - decaliter\n * - kiloliter\n * - cubic millimeter\n * - cubic centimeter\n * - cubic meter\n * - cubic kilometer\n * - cubic inch\n * - cubic foot\n * - cubic yard\n */\nexport let Volume = new Class('Volume')\n  .setBaseConversion('tsp', 'ml', (x) => x * 4.92892)\n  .setBaseConversion('tsp', 'mm3', (x) => x * 4928.92)\n  .setBaseConversion('tsp', 'in3', (x) => x * 0.300781)\n\n  .setBaseConversion('ml', 'tsp', (x) => x * 0.202884)\n  .setBaseConversion('ml', 'mm3', (x) => x * 1000)\n  .setBaseConversion('ml', 'in3', (x) => x * 0.0610237)\n\n  .setBaseConversion('mm3', 'tsp', (x) => x * 0.000202884)\n  .setBaseConversion('mm3', 'ml', (x) => x * 0.001)\n  .setBaseConversion('mm3', 'in3', (x) => x * 0.0000610237)\n\n  .setBaseConversion('in3', 'tsp', (x) => x * 3.32468)\n  .setBaseConversion('in3', 'ml', (x) => x * 16.3871)\n  .setBaseConversion('in3', 'mm3', (x) => x * 16387.1)\n\n  .addGroups([\n    {\n      system: System.US,\n      common: true,\n      unit: 'tsp',\n      baseUnit: 'tsp',\n      denominators: [2, 3, 4],\n      units: {\n        'tsp': Plurality.EITHER,\n        'ts': Plurality.EITHER,\n        'tsps': Plurality.PLURAL,\n        'teaspoon': Plurality.SINGULAR,\n        'teaspoons': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'tbsp',\n      relativeUnit: 'tsp',\n      relativeScale: 3,\n      denominators: [2, 3, 4],\n      units: {\n        'tbsp': Plurality.EITHER,\n        'tbsps': Plurality.PLURAL,\n        'tablespoon': Plurality.SINGULAR,\n        'tablespoons': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'floz',\n      relativeUnit: 'tsp',\n      relativeScale: 6,\n      denominators: [2, 3, 6],\n      units: {\n        // 'oz': Plurality.EITHER,\n        // 'ounce': Plurality.SINGULAR,\n        // 'ounces': Plurality.PLURAL,\n        'floz': Plurality.EITHER,\n        'fl-oz': Plurality.EITHER,\n        'fl oz': Plurality.EITHER,\n        'fluid ounce': Plurality.SINGULAR,\n        'fluid ounces': Plurality.PLURAL,\n        'fl. oz': Plurality.EITHER,\n        'oz. fl': Plurality.EITHER,\n        'oz fl': Plurality.EITHER\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'c',\n      relativeUnit: 'floz',\n      relativeScale: 8,\n      denominators: [2, 3, 4],\n      units: {\n        'c': Plurality.EITHER,\n        'cup': Plurality.SINGULAR,\n        'cups': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'pt',\n      relativeUnit: 'c',\n      relativeScale: 2,\n      denominators: [2, 4, 8],\n      units: {\n        'pt': Plurality.EITHER,\n        'pint': Plurality.SINGULAR,\n        'pints': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'qt',\n      relativeUnit: 'c',\n      relativeScale: 4,\n      denominators: [2, 4, 8],\n      units: {\n        'qt': Plurality.EITHER,\n        'quart': Plurality.SINGULAR,\n        'quarts': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'gal',\n      relativeUnit: 'qt',\n      relativeScale: 4,\n      denominators: [2, 4, 8, 16],\n      units: {\n        'gal': Plurality.EITHER,\n        'gallon': Plurality.SINGULAR,\n        'gallons': Plurality.PLURAL,\n        'gals': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'ml',\n      baseUnit: 'ml',\n      denominators: [2, 10],\n      units: {\n        'ml': Plurality.EITHER,\n        'millilitre': Plurality.SINGULAR,\n        'millilitres': Plurality.PLURAL,\n        'milliliter': Plurality.SINGULAR,\n        'milliliters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'cl',\n      relativeUnit: 'ml',\n      relativeScale: 10,\n      denominators: [10],\n      units: {\n        'cl': Plurality.EITHER,\n        'centilitre': Plurality.SINGULAR,\n        'centilitres': Plurality.PLURAL,\n        'centiliter': Plurality.SINGULAR,\n        'centiliters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'l',\n      relativeUnit: 'ml',\n      relativeScale: 1000,\n      denominators: [2, 3, 4, 10],\n      units: {\n        'l': Plurality.EITHER,\n        'litre': Plurality.SINGULAR,\n        'litres': Plurality.PLURAL,\n        'liter': Plurality.SINGULAR,\n        'liters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'dl',\n      relativeUnit: 'l',\n      relativeScale: 10,\n      denominators: [10, 100],\n      units: {\n        'dl': Plurality.EITHER,\n        'decalitre': Plurality.SINGULAR,\n        'decalitres': Plurality.PLURAL,\n        'decaliter': Plurality.SINGULAR,\n        'decaliters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'kl',\n      relativeUnit: 'l',\n      relativeScale: 1000,\n      denominators: [10, 100],\n      units: {\n        'kl': Plurality.EITHER,\n        'kilolitre': Plurality.SINGULAR,\n        'kilolitres': Plurality.PLURAL,\n        'kiloliter': Plurality.SINGULAR,\n        'kiloliters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'mm3',\n      baseUnit: 'mm3',\n      denominators: [2, 4, 8],\n      units: {\n        'mm3': Plurality.EITHER,\n        'mm^3': Plurality.EITHER,\n        'mm\\xb3': Plurality.EITHER,\n        'millimeter3': Plurality.SINGULAR,\n        'millimeter^3': Plurality.SINGULAR,\n        'millimeter\\xb3': Plurality.SINGULAR,\n        'millimeters3': Plurality.PLURAL,\n        'millimeters^3': Plurality.PLURAL,\n        'millimeters\\xb3': Plurality.PLURAL,\n        'cubic mm': Plurality.EITHER,\n        'cubic millimeter': Plurality.SINGULAR,\n        'cubic millimeters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'cm3',\n      relativeUnit: 'mm3',\n      relativeScale: 1000,\n      denominators: [2, 4, 8],\n      units: {\n        'cm3': Plurality.EITHER,\n        'cm^3': Plurality.EITHER,\n        'cm\\xb3': Plurality.EITHER,\n        'centimeter3': Plurality.SINGULAR,\n        'centimeter^3': Plurality.SINGULAR,\n        'centimeter\\xb3': Plurality.SINGULAR,\n        'centimeters3': Plurality.PLURAL,\n        'centimeters^3': Plurality.PLURAL,\n        'centimeters\\xb3': Plurality.PLURAL,\n        'cubic cm': Plurality.EITHER,\n        'cubic centimeter': Plurality.SINGULAR,\n        'cubic centimeters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'm3',\n      relativeUnit: 'cm3',\n      relativeScale: 1000000,\n      denominators: [2, 4, 8],\n      units: {\n        'm3': Plurality.EITHER,\n        'm^3': Plurality.EITHER,\n        'm\\xb3': Plurality.EITHER,\n        'meter3': Plurality.SINGULAR,\n        'meter^3': Plurality.SINGULAR,\n        'meter\\xb3': Plurality.SINGULAR,\n        'meters3': Plurality.PLURAL,\n        'meters^3': Plurality.PLURAL,\n        'meters\\xb3': Plurality.PLURAL,\n        'cubic m': Plurality.EITHER,\n        'cubic meter': Plurality.SINGULAR,\n        'cubic meters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'km3',\n      relativeUnit: 'm3',\n      relativeScale: 1000000000,\n      denominators: [2, 4, 8],\n      units: {\n        'km3': Plurality.EITHER,\n        'km^3': Plurality.EITHER,\n        'km\\xb3': Plurality.EITHER,\n        'kilometer3': Plurality.SINGULAR,\n        'kilometer^3': Plurality.SINGULAR,\n        'kilometer\\xb3': Plurality.SINGULAR,\n        'kilometers3': Plurality.PLURAL,\n        'kilometers^3': Plurality.PLURAL,\n        'kilometers\\xb3': Plurality.PLURAL,\n        'cubic km': Plurality.EITHER,\n        'cubic kilometer': Plurality.SINGULAR,\n        'cubic kilometers': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      unit: 'in3',\n      baseUnit: 'in3',\n      denominators: [2, 4, 8],\n      units: {\n        'in3': Plurality.EITHER,\n        'in^3': Plurality.EITHER,\n        'in\\xb3': Plurality.EITHER,\n        'inch3': Plurality.SINGULAR,\n        'inch^3': Plurality.SINGULAR,\n        'inch\\xb3': Plurality.SINGULAR,\n        'inches3': Plurality.PLURAL,\n        'inches^3': Plurality.PLURAL,\n        'inches\\xb3': Plurality.PLURAL,\n        'cubic in': Plurality.EITHER,\n        'cubic inch': Plurality.SINGULAR,\n        'cubic inches': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'ft3',\n      relativeUnit: 'in3',\n      relativeScale: 1728,\n      denominators: [2, 4, 8],\n      units: {\n        'ft3': Plurality.EITHER,\n        'ft^3': Plurality.EITHER,\n        'ft\\xb3': Plurality.EITHER,\n        'foot3': Plurality.SINGULAR,\n        'foot^3': Plurality.SINGULAR,\n        'foot\\xb3': Plurality.SINGULAR,\n        'feet3': Plurality.PLURAL,\n        'feet^3': Plurality.PLURAL,\n        'feet\\xb3': Plurality.PLURAL,\n        'cubic ft': Plurality.EITHER,\n        'cubic foot': Plurality.SINGULAR,\n        'cubic feet': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'yd3',\n      relativeUnit: 'ft3',\n      relativeScale: 27,\n      denominators: [2, 4, 8],\n      units: {\n        'yd3': Plurality.EITHER,\n        'yd^3': Plurality.EITHER,\n        'yd\\xb3': Plurality.EITHER,\n        'yard3': Plurality.SINGULAR,\n        'yard^3': Plurality.SINGULAR,\n        'yard\\xb3': Plurality.SINGULAR,\n        'yards3': Plurality.PLURAL,\n        'yards^3': Plurality.PLURAL,\n        'yards\\xb3': Plurality.PLURAL,\n        'cubic yd': Plurality.EITHER,\n        'cubic yard': Plurality.SINGULAR,\n        'cubic yards': Plurality.PLURAL\n      }\n    }\n  ])\n  .setClassScales()\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Volume.ts","\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n\n\n/**\n * The Length class which contains the following groups.\n *\n * - inch\n * - foot\n * - yard\n * - mile\n * - league\n * - millimeter\n * - centimeter\n * - decimeter\n * - meter\n * - kilometer\n */\nexport let Length = new Class('Length')\n  .setBaseConversion('in', 'mm', (x) => x * 25.4)\n\n  .setBaseConversion('mm', 'in', (x) => x * 0.039370)\n\n  .addGroups([\n    {\n      system: System.US,\n      common: true,\n      unit: 'in',\n      baseUnit: 'in',\n      denominators: [2, 4, 8, 16, 32],\n      units: {\n        'in': Plurality.EITHER,\n        'inch': Plurality.SINGULAR,\n        'inches': Plurality.PLURAL,\n        '\"': Plurality.EITHER\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'ft',\n      relativeUnit: 'in',\n      relativeScale: 12,\n      denominators: [2],\n      units: {\n        'ft': Plurality.EITHER,\n        'foot': Plurality.SINGULAR,\n        'feet': Plurality.PLURAL,\n        '\\'': Plurality.EITHER\n      }\n    },\n    {\n      system: System.US,\n      unit: 'yd',\n      relativeUnit: 'ft',\n      relativeScale: 3,\n      denominators: [],\n      units: {\n        'yd': Plurality.EITHER,\n        'yard': Plurality.SINGULAR,\n        'yards': Plurality.PLURAL,\n        'yds': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'mi',\n      relativeUnit: 'ft',\n      relativeScale: 5280,\n      denominators: [2, 3, 4, 10],\n      units: {\n        'mi': Plurality.EITHER,\n        'mile': Plurality.SINGULAR,\n        'miles': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      unit: 'league',\n      relativeUnit: 'mi',\n      relativeScale: 3,\n      denominators: [2, 3, 4, 5, 6, 7, 8, 9, 10],\n      units: {\n        'league': Plurality.EITHER,\n        'leagues': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'mm',\n      baseUnit: 'mm',\n      denominators: [10],\n      units: {\n        'mm': Plurality.EITHER,\n        'millimeter': Plurality.SINGULAR,\n        'millimeters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'cm',\n      relativeUnit: 'mm',\n      relativeScale: 10,\n      denominators: [2, 4, 10],\n      units: {\n        'cm': Plurality.EITHER,\n        'centimeter': Plurality.SINGULAR,\n        'centimeters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'dc',\n      relativeUnit: 'cm',\n      relativeScale: 10,\n      denominators: [10],\n      units: {\n        'dc': Plurality.EITHER,\n        'decimeter': Plurality.SINGULAR,\n        'decimeters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'm',\n      relativeUnit: 'cm',\n      relativeScale: 100,\n      denominators: [2, 3, 4, 5, 10],\n      units: {\n        'm': Plurality.EITHER,\n        'meter': Plurality.SINGULAR,\n        'meters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'km',\n      relativeUnit: 'm',\n      relativeScale: 1000,\n      denominators: [2, 3, 4, 5, 6, 7, 8, 9, 10],\n      units: {\n        'km': Plurality.EITHER,\n        'kilometer': Plurality.SINGULAR,\n        'kilometers': Plurality.PLURAL\n      }\n    }\n  ])\n  .setClassScales()\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Length.ts","\nimport { Core } from '../Core';\nimport { Weight } from './Weight';\nimport { Area } from './Area';\nimport { Time } from './Time';\nimport { Digital } from './Digital';\nimport { Temperature } from './Temperature';\nimport { Angle } from './Angle';\nimport { Volume } from './Volume';\nimport { Length } from './Length';\n\n/**\n * Adds all classes that come with Unitz to [Core].\n */\nexport function addDefaults()\n{\n  Core.addClasses(\n    Weight,\n    Area,\n    Time,\n    Digital,\n    Temperature,\n    Angle,\n    Volume,\n    Length\n  );\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/index.ts","\n// Enums\nexport * from './Plurality';\nexport * from './System';\n\n// Functions\nexport * from './Functions';\nexport * from './Parse';\n\n// Types\nexport * from './Types';\n\n// Secondary\nexport * from './Output';\nexport * from './Transform';\nexport * from './Sort';\n\n// Core\nexport * from './Core';\nexport * from './Group';\nexport * from './Class';\nexport * from './Value';\nexport * from './Range';\nexport * from './Base';\n\n// Classes\nexport * from './classes/';\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.ts"],"sourceRoot":""}