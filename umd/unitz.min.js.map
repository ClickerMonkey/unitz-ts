{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///unitz.min.js","webpack:///webpack/bootstrap 90df97b891c542e94d19","webpack:///./src/Base.ts","webpack:///./src/Translations.ts","webpack:///./src/classes/Digital.ts","webpack:///./src/Plurality.ts","webpack:///./src/System.ts","webpack:///./src/Functions.ts","webpack:///./src/Output.ts","webpack:///./src/Group.ts","webpack:///./src/Class.ts","webpack:///./src/Sort.ts","webpack:///./src/Transform.ts","webpack:///./src/Core.ts","webpack:///./src/Value.ts","webpack:///./src/Range.ts","webpack:///./src/Rates.ts","webpack:///./src/Parse.ts","webpack:///./src/classes/Angle.ts","webpack:///./src/classes/Area.ts","webpack:///./src/classes/Length.ts","webpack:///./src/classes/Temperature.ts","webpack:///./src/classes/Time.ts","webpack:///./src/classes/Volume.ts","webpack:///./src/classes/Weight.ts","webpack:///./src/Classes.ts"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","uz","input","Base_Base","newRegexTranslator","regex","handler","vars","x","matches","match","addDigitalUnits","parent","relativeTo","relativeScales","denominators","suffixSingular","suffixPlural","unitAndPrefixes","length","_a","unit","prefix","extra","units","Plurality","EITHER","SINGULAR","PLURAL","addGroup","system","System","ANY","common","relativeUnit","relativeScale","value","OutputUnit","Functions","isZero","abs","EPSILON","isEqual","a","b","isWhole","Math","floor","isSingular","isNumber","isFinite","trim","replace","gcd","y","t","sign","appendTo","array","Array","push","apply","isGroupDefinition","isValueDefinition","num","den","isRangeDefinition","min","max","isArray","isString","isDefined","coalesce","Group_Group","Group","definition","baseScale","classScale","dynamic","baseUnit","preferredUnit","updateUnits","setDynamic","addDenominator","setDenominators","setCommon","setPreferred","addUnits","addGroupUnit","removeUnits","existing","removeGroupUnit","singularShort","singularLong","pluralShort","pluralLong","plurality","transform","reverse","callback","getVisibleGroups","Class_Class","Class","groups","groupMap","converters","addGroups","definitions","group","relative","alias","lower","toLowerCase","getFirstBase","isBase","setClassScales","first","setBaseConversion","fromUnit","toUnit","converter","relatedGroup","matched","start","stop","increment","isVisibleGroup","convert","from","to","invalid","converted","map","OutputFormat","SortType","Output_Output","Output","GIVEN","format","repeatUnit","unitSpacer","rangeSpacer","fractionSpacer","mixedSpacer","rateSpacer","delimiter","significant","set","extend","extended","ranges","out","range","isValid","isFixed","minUnit","showUnit","isFraction","isMixed","mixedWhole","mixedNum","number","NONE","rateGroup","rate","isLongUnit","isShortUnit","valueString","valueSignificant","toFixed","NUMBER","IMPROPER","SHORT","LONG","Transform_Transform","Transform","Number","MAX_VALUE","convertWithMax","convertUnit","convertRate","groupless","onlyUnits","notUnits","onlyClasses","notClasses","isValidRange","givenGroup","isCommonMatch","isSystemMatch","isUnitMatch","isClassMatch","METRIC","US","indexOf","Sort_Sort","Sort","ascending","type","MAX","classes","className","getSorter","_this","getClassComparison","MIN","getMinComparison","getMaxComparison","AVERAGE","getAverageComparison","classScaled","avg","bvg","ag","bg","Core_Core","Core","getGroup","createDynamic","exactGroup","unitToGroup","normalizedUnit","normalizedGroup","dynamicUnit","getDynamicMatch","dynamicGroup","dynamicMatches","addDynamicUnit","newDynamicGroup","addClass","classMap","addClasses","_i","arguments","unitCount","groupUnit","longest","dynamicGroups","substring","dynamicMatchLength","isMoreNormal","fromValue","toValue","forOutput","fromString","toString","globalOutput","globalTransform","globalSort","Value_Value","Value","divisor","ceil","calculated","error","getRateScale","isMatch","other","groupOther","rateOther","preferred","copy","zero","truncated","truncate","fractioned","fromNumberWithDenominators","numbered","convertTo","rateScale","convertToValue","fromNumberForGroup","conversions","unitGroup","index","normalize","closest","acceptable","add","addend","scale","totalScale","sub","subtrahend","mul","output","options","fromNumber","fromNumberWithRange","minDen","maxDen","closestDenominator","closestDistance","actual","distance","fromFraction","INVALID","NaN","Range_Range","Range","isDecimal","isRate","isExactMatch","positive","minNegative","negative","minPositive","maxPositive","nonzero","minZero","maxZero","maxd","fixed","mind","fromFixed","Base","Parse_Parse","amount","mutate","r","scaleTo","unitValue","rangeDelta","getScaleTo","fractions","numbers","hasRanges","compact","slice","compacted","sort","k","splice","sum","expand","expanded","valueGroup","valueSign","valueRate","transformed","operate","remainder","base","otherRanges","otherUsed","otherRange","mutator","source","mutated","filter","filtered","convertedValue","maximum","minimum","unitParsed","each","iterate","end","move","test","isRange","expected","passed","tester","Translations_Translations","Translations","addDefaults","Quantity","NumberWords","FractionOfNumber","AndFraction","QuantityValue","translator","registered","translate","wordName","remaining","one","two","three","four","five","six","seven","eight","nine","ten","eleven","twelve","dozen","thirteen","fouteen","fifteen","sixteen","seventeen","eighteen","nineteen","twenty","thirty","fourty","fifty","sixty","seventy","eighty","ninety","parsed","valueFromString","fractionName","fraction","half","third","fourth","fifth","sixth","seventh","eighth","nineth","tenth","quantityInput","quantity","alternativeInput","Rates","names","Parse","rangesFromArray","rangesFromString","split","REGEX_LIST","rangeFromString","REGEX_RANGE","exec","minInput","maxInput","minParsed","maxParsed","maxUnit","minRate","maxRate","valueFromResult","valueFromValue","givenValue","parsedValue","translated","result","rateUnit","valueNum","valueDen","REGEX_PARSE","whole","parseInt","hasWhole","charAt","decimal","hasDecimal","parseFloat","REGEX_UNIT","RAD2DEG","PI","DEG2RAD","Angle","deg","°","degrees","degree","rad","radians","radian","Area","sqin","sq. in","sq in","in2","in^2","in²","inch2","inch^2","inch²","inches2","inches^2","inches²","square in","square inch","square inches","sqft","sq. ft","sq ft","ft2","ft^2","ft²","foot2","foot^2","foot²","feet2","feet^2","feet²","square ft","square foot","square feet","sqyd","sq. yd","sq yd","yd2","yd^2","yd²","yard2","yard^2","yard²","yards2","yards^2","yards²","square yd","square yard","square yards","acre","acres","sqmi","sq. mi","sq mi","mi2","mi^2","mi²","mile2","mile^2","mile²","miles2","miles^2","miles²","square mi","square mile","square miles","sqmm","sq. mm","sq mm","mm2","mm^2","mm²","millimeter2","millimeter^2","millimeter²","millimeters2","millimeters^2","millimeters²","square mm","square millimeter","square millimeters","sqcm","sq. cm","sq cm","cm2","cm^2","cm²","centimeter2","centimeter^2","centimeter²","centimeters2","centimeters^2","centimeters²","square cm","square centimeter","square centimeters","sqm","sq. m","sq m","m2","m^2","m²","meter2","meter^2","meter²","meters2","meters^2","meters²","square m","square meter","square meters","sqkm","sq. km","sq km","km2","km^2","km²","kilometer2","kilometer^2","kilometer²","kilometers2","kilometers^2","kilometers²","square km","square kilometer","square kilometers","Digital","bit","bits","nibble","nibbles","nybble","nyble","half-byte","half byte","tetrade","semi-octet","quadbit","quartet","B","byte","bytes","Length","in","inch","inches","\"","ft","foot","feet","'","yd","yard","yards","yds","mi","mile","miles","league","leagues","mm","millimeter","millimeters","millimetre","millimetres","cm","centimeter","centimeters","centimetre","centimetres","dc","decimeter","decimeters","decimetre","decimetres","meter","meters","metre","metres","km","kms","kilometer","kilometers","kilometre","kilometres","nm","nmi","nautical mi","nautical mile","nautical miles","Temperature","F","°F","Fahrenheit","°C","Celsius","K","kelvin","kelvins","Time","ns","nanosecond","nanoseconds","nano","nanos","us","microsecond","microseconds","micro","micros","ms","millisecond","milliseconds","milli","millis","second","seconds","sec","secs","minute","minutes","mins","hr","hour","hours","hrs","day","days","wk","week","weeks","wks","yr","year","years","yrs","score","biennium","bienniums","triennium","trienniums","quadrennium","quadrenniums","lustrum","lustrums","decade","decades","century","centurys","centuries","millennium","millenniums","millennia","millennias","Volume","tsp","ts","tsps","teaspoon","teaspoons","tbsp","tbsps","tablespoon","tablespoons","floz","fl-oz","fl oz","fluid ounce","fluid ounces","fl. oz","oz. fl","oz fl","cup","cups","pt","pint","pints","qt","quart","quarts","gal","gallon","gallons","gals","ml","millilitre","millilitres","milliliter","milliliters","cl","centilitre","centilitres","centiliter","centiliters","litre","litres","liter","liters","dl","decalitre","decalitres","decaliter","decaliters","kl","kilolitre","kilolitres","kiloliter","kiloliters","mm3","mm^3","mm³","millimeter3","millimeter^3","millimeter³","millimeters3","millimeters^3","millimeters³","cubic mm","cubic millimeter","cubic millimeters","cm3","cm^3","cm³","centimeter3","centimeter^3","centimeter³","centimeters3","centimeters^3","centimeters³","cubic cm","cubic centimeter","cubic centimeters","m3","m^3","m³","meter3","meter^3","meter³","meters3","meters^3","meters³","cubic m","cubic meter","cubic meters","km3","km^3","km³","kilometer3","kilometer^3","kilometer³","kilometers3","kilometers^3","kilometers³","cubic km","cubic kilometer","cubic kilometers","in3","in^3","in³","inch3","inch^3","inch³","inches3","inches^3","inches³","cubic in","cubic inch","cubic inches","ft3","ft^3","ft³","foot3","foot^3","foot³","feet3","feet^3","feet³","cubic ft","cubic foot","cubic feet","yd3","yd^3","yd³","yard3","yard^3","yard³","yards3","yards^3","yards³","cubic yd","cubic yard","cubic yards","Weight","mg","milligram","milligrams","g","gram","grams","kg","kilo","kilos","kilogram","kilograms","oz","ounce","ounces","lb","lbs","pound","pounds","ton","tonne","tons","tonnes","Classes_Classes","Classes"],"mappings":"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","file":"unitz.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Unitz\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Unitz\"] = factory();\n\telse\n\t\troot[\"Unitz\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Unitz\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Unitz\"] = factory();\n\telse\n\t\troot[\"Unitz\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(1);\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n\n// CONCATENATED MODULE: ./src/Plurality.ts\n\r\n/**\r\n * An enumeration which specifies whether a unit represents a singular value (1),\r\n * a plural value, or might represent either.\r\n */\r\nvar Plurality;\r\n(function (Plurality) {\r\n    /**\r\n     * The unit is only a singular representation.\r\n     */\r\n    Plurality[Plurality[\"SINGULAR\"] = 0] = \"SINGULAR\";\r\n    /**\r\n     * The unit is only a plural representation.\r\n     */\r\n    Plurality[Plurality[\"PLURAL\"] = 1] = \"PLURAL\";\r\n    /**\r\n     * The unit can be used as singular and plural.\r\n     */\r\n    Plurality[Plurality[\"EITHER\"] = 2] = \"EITHER\";\r\n})(Plurality = Plurality || (Plurality = {}));\r\n\n// CONCATENATED MODULE: ./src/System.ts\n\r\n/**\r\n * An enumeration which specifies what system of measurement a unit belongs to\r\n * or specifies which system a user desires for output or conversions.\r\n *\r\n * @see [[Group]]\r\n * @see [[Transform]]\r\n */\r\nvar System;\r\n(function (System) {\r\n    /**\r\n     * The Metrix System of Measurement.\r\n     */\r\n    System[System[\"METRIC\"] = 0] = \"METRIC\";\r\n    /**\r\n     * The US \"traditional systems of weights and measures\". Also known as\r\n     * \"Standard\", \"Customary\", or, erroneously: \"Imperial\", or \"English\".\r\n     */\r\n    System[System[\"US\"] = 1] = \"US\";\r\n    /**\r\n     * A value for groups when the unit does not belong to a system.\r\n     */\r\n    System[System[\"NONE\"] = 2] = \"NONE\";\r\n    /**\r\n     * A value for transforms which specify that the user or developer are looking\r\n     * to get results in any system.\r\n     */\r\n    System[System[\"ANY\"] = 3] = \"ANY\";\r\n    /**\r\n     * A value for transforms which specify that the user or developer are looking\r\n     * to get results in the same system that is already being used for a range.\r\n     * If a current system cannot be determined then any system is returned.\r\n     */\r\n    System[System[\"GIVEN\"] = 4] = \"GIVEN\";\r\n})(System = System || (System = {}));\r\n\n// CONCATENATED MODULE: ./src/Functions.ts\n\r\n/**\r\n * The class which contains commonly used functions by the library. These\r\n * functions and variables exist in a class so they may be overridden if\r\n * desired.\r\n */\r\nvar Functions = (function () {\r\n    function Functions() {\r\n    }\r\n    /**\r\n     * Determines if the given number is zero.\r\n     *\r\n     * @param x The number to test.\r\n     * @return True if the number is zero, otherwise false.\r\n     * @see [[Functions.EPSILON]]\r\n     */\r\n    Functions.isZero = function (x) {\r\n        return this.abs(x) < this.EPSILON;\r\n    };\r\n    /**\r\n     * Determines if the given number is equal to another.\r\n     *\r\n     * @param a The first number to compare.\r\n     * @param b The second number to compare.\r\n     * @return True if the two numbers are equal.\r\n     * @see [[Functions.EPSILON]]\r\n     */\r\n    Functions.isEqual = function (a, b) {\r\n        return this.abs(a - b) < this.EPSILON;\r\n    };\r\n    /**\r\n     * Determines if the given number is a whole number (integer).\r\n     *\r\n     * @param x The number to test.\r\n     * @return True if the number is whole, otherwise false.\r\n     * @see [[Functions.EPSILON]]\r\n     */\r\n    Functions.isWhole = function (x) {\r\n        return this.abs(Math.floor(x) - x) < this.EPSILON;\r\n    };\r\n    /**\r\n     * Determines if the given number is singular. A singular number is 1 or -1.\r\n     *\r\n     * @param x The number to test.\r\n     * @return True if the number is singular, otherwise false.\r\n     * @see [[Functions.EPSILON]]\r\n     */\r\n    Functions.isSingular = function (x) {\r\n        return this.isNumber(x) && this.abs(this.abs(x) - 1) < this.EPSILON;\r\n    };\r\n    /**\r\n     * Determines if the given number is valid. A valid number is finite and not\r\n     * NaN or Infinity.\r\n     *\r\n     * @param x The number to test.\r\n     * @return True if the input is finite number.\r\n     */\r\n    Functions.isNumber = function (x) {\r\n        return isFinite(x);\r\n    };\r\n    /**\r\n     * Trims the given input if its a string.\r\n     *\r\n     * @param x The string to remove space from the beginning and end.\r\n     * @return A trimmed string.\r\n     */\r\n    Functions.trim = function (x) {\r\n        return x ? x.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '') : x;\r\n    };\r\n    /**\r\n     * Calculates the greatest common denominator between the two numbers. If\r\n     * either of the numbers are not whole (integers) then 1 is immediately\r\n     * returned.\r\n     *\r\n     * @param a The first number.\r\n     * @param b The second number.\r\n     * @return The greatest common denominator between the two numbers.\r\n     */\r\n    Functions.gcd = function (a, b) {\r\n        if (!this.isWhole(a) || !this.isWhole(b)) {\r\n            return 1;\r\n        }\r\n        var x = a < b ? a : b;\r\n        var y = a < b ? b : a;\r\n        x = this.abs(x);\r\n        y = this.abs(y);\r\n        while (y) {\r\n            var t = y;\r\n            y = x % y;\r\n            x = t;\r\n        }\r\n        return x;\r\n    };\r\n    /**\r\n     * Determines the absolute value of the given number.\r\n     *\r\n     * @param x The number to return the positive version of.\r\n     * @return The absolute value of x.\r\n     */\r\n    Functions.abs = function (x) {\r\n        return x < 0 ? -x : x;\r\n    };\r\n    /**\r\n     * Determines the sign of the given number. One of three values will be\r\n     * returned: 1, 0, or -1.\r\n     *\r\n     * @param x The number to determine the sign of.\r\n     * @return The sign of the given number.\r\n     */\r\n    Functions.sign = function (x) {\r\n        return x < 0 ? -1 : (x > 0 ? 1 : 0);\r\n    };\r\n    /**\r\n     * Appends an element or array of elements to the end of the given array.\r\n     *\r\n     * @param array The array to append values to the end of.\r\n     * @param input The element or array of elements to append to the end.\r\n     * @return The reference to the `array` given.\r\n     */\r\n    Functions.appendTo = function (array, input) {\r\n        if (input instanceof Array) {\r\n            array.push.apply(array, input);\r\n        }\r\n        else if (input) {\r\n            array.push(input);\r\n        }\r\n        return array;\r\n    };\r\n    /**\r\n     * Determines whether the given input looks like a [[GroupDefinition]].\r\n     *\r\n     * @param input The variable to inspect.\r\n     * @return True if the variable appears to be a [[GroupDefinition]].\r\n     */\r\n    Functions.isGroupDefinition = function (input) {\r\n        return !!(input && input.system && input.unit && input.denominators && input.units);\r\n    };\r\n    /**\r\n     * Determines whether the given input looks like a [[ValueDefinition]].\r\n     *\r\n     * @param input The variable to inspect.\r\n     * @return True if the variable appears to be a [[ValueDefinition]].\r\n     */\r\n    Functions.isValueDefinition = function (input) {\r\n        return !!(input && (input.value || input.unit || input.num || input.den));\r\n    };\r\n    /**\r\n     * Determines whether the given input looks like a [[RangeDefinition]].\r\n     *\r\n     * @param input The variable to inspect.\r\n     * @return True if the variable appears to be a [[RangeDefinition]].\r\n     */\r\n    Functions.isRangeDefinition = function (input) {\r\n        return !!(input && input.min && input.max);\r\n    };\r\n    /**\r\n     * Determines whether the given input is an array.\r\n     *\r\n     * @param input The variable to test.\r\n     * @return True if the variable is an array, otherwise false.\r\n     */\r\n    Functions.isArray = function (input) {\r\n        return input instanceof Array;\r\n    };\r\n    /**\r\n     * Determines whether the given input is a string.\r\n     *\r\n     * @param input The variable to test.\r\n     * @return True if the variable is a string, otherwise false.\r\n     */\r\n    Functions.isString = function (input) {\r\n        return typeof (input) === 'string';\r\n    };\r\n    /**\r\n     * Determines whether the given input is defined.\r\n     *\r\n     * @param input The variable to test.\r\n     * @return True if the variable is defined, otherwise false.\r\n     */\r\n    Functions.isDefined = function (input) {\r\n        return typeof (input) !== 'undefined';\r\n    };\r\n    /**\r\n     * Returns the first argument which is defined.\r\n     *\r\n     * @param a The first argument to look at.\r\n     * @param b The second argument to look at.\r\n     * @return The first defined argument.\r\n     * @see [[Functions.isDefined]]\r\n     */\r\n    Functions.coalesce = function (a, b) {\r\n        return this.isDefined(a) ? a : b;\r\n    };\r\n    /**\r\n     * The maximum distance a number can be from another to be considered\r\n     * equivalent. This is to compensate for floating point precision issues.\r\n     */\r\n    Functions.EPSILON = 0.00001;\r\n    return Functions;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Group.ts\n\r\n\r\n\r\n/**\r\n * A unit and its aliases as well as their plurality.\r\n *\r\n * A group is relative to a base group or is a base group itself. As unit\r\n * aliases are added to the group it determines the appropriate plural and\r\n * singular long and short versions given the unit aliases in this group.\r\n */\r\nvar Group_Group = (function () {\r\n    /**\r\n     * Creates a new instance of Group given a definition and the parent class.\r\n     *\r\n     * @param definition The definition of the group.\r\n     * @param parent The class which contains this group.\r\n     */\r\n    function Group(definition, parent) {\r\n        /**\r\n         * The scale of this group relative to the base group. This is used for\r\n         * conversions of values with the same base group.\r\n         */\r\n        this.baseScale = 1;\r\n        /**\r\n         * The scale of this group relative to the first base group added to the\r\n         * class. This is used to compare numbers of the same class across all bases.\r\n         */\r\n        this.classScale = 0;\r\n        /**\r\n         * Whether this group was dynamically created by user input having units\r\n         * not mapped to groups by the developer.\r\n         */\r\n        this.dynamic = false;\r\n        this.system = definition.system;\r\n        this.common = !!definition.common;\r\n        this.unit = definition.unit;\r\n        this.baseUnit = definition.baseUnit;\r\n        this.preferredUnit = definition.preferredUnit || definition.unit;\r\n        this.relativeUnit = definition.relativeUnit;\r\n        this.relativeScale = definition.relativeScale || 1;\r\n        this.units = definition.units;\r\n        this.denominators = definition.denominators;\r\n        this.parent = parent;\r\n        this.updateUnits();\r\n    }\r\n    Object.defineProperty(Group.prototype, \"isBase\", {\r\n        /**\r\n         * True if this group is a base group, otherwise false.\r\n         */\r\n        get: function () {\r\n            return this.unit === this.baseUnit;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets the dynamic flag of this group.\r\n     *\r\n     * @param dynamic Whether this group is dynamic or not.\r\n     * @return The reference to this instance.\r\n     */\r\n    Group.prototype.setDynamic = function (dynamic) {\r\n        if (dynamic === void 0) { dynamic = true; }\r\n        this.dynamic = dynamic;\r\n        return this;\r\n    };\r\n    /**\r\n     * Adds a denominator or array of denominators to this group.\r\n     *\r\n     * @param denominators A denominator or an array of denominators to add.\r\n     * @return The reference to this instance.\r\n     */\r\n    Group.prototype.addDenominator = function (denominators) {\r\n        Functions.appendTo(this.denominators, denominators);\r\n        return this;\r\n    };\r\n    /**\r\n     * Sets the denominators of this group.\r\n     *\r\n     * @param denominators The new denominators for this group.\r\n     * @return The reference to this instance.\r\n     * @see [[Group.denominators]]\r\n     */\r\n    Group.prototype.setDenominators = function (denominators) {\r\n        this.denominators = denominators;\r\n        return this;\r\n    };\r\n    /**\r\n     * Sets the common flag of this group.\r\n     *\r\n     * @param common Whether this group is common or not.\r\n     * @return The reference to this instance.\r\n     * @see [[Group.common]]\r\n     */\r\n    Group.prototype.setCommon = function (common) {\r\n        if (common === void 0) { common = true; }\r\n        this.common = common;\r\n        return this;\r\n    };\r\n    /**\r\n     * Sets the preferred unit of this group.\r\n     *\r\n     * @param unit The preferred unit of this group.\r\n     * @return The reference to this instance.\r\n     * @see [[Group.preferredUnit]]\r\n     */\r\n    Group.prototype.setPreferred = function (unit) {\r\n        this.preferredUnit = unit;\r\n        return this;\r\n    };\r\n    /**\r\n     * Adds the given unit aliases to this group and the parent class.\r\n     *\r\n     * @param units The units to add to the group and class.\r\n     * @return The reference to this instance.\r\n     * @see [[Class.addGroupUnit]]\r\n     */\r\n    Group.prototype.addUnits = function (units) {\r\n        var parent = this.parent;\r\n        for (var unit in units) {\r\n            this.units[unit] = units[unit];\r\n            parent.addGroupUnit(unit, this);\r\n        }\r\n        this.updateUnits();\r\n        return this;\r\n    };\r\n    /**\r\n     * Removes the given unit aliases from this group and the parent class.\r\n     *\r\n     * @param units The array of unit aliases to remove.\r\n     * @return The reference to this instance.\r\n     * @see [[Class.removeGroupUnit]]\r\n     */\r\n    Group.prototype.removeUnits = function (units) {\r\n        var parent = this.parent;\r\n        var existing = this.units;\r\n        for (var i = 0; i < units.length; i++) {\r\n            var unit = units[i];\r\n            if (unit in existing) {\r\n                delete existing[unit];\r\n                parent.removeGroupUnit(unit, this);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Updates the singular and plural long and short form units for this group.\r\n     *\r\n     * @return The reference to this instance.\r\n     */\r\n    Group.prototype.updateUnits = function () {\r\n        this.singularShort = null;\r\n        this.singularLong = null;\r\n        this.pluralShort = null;\r\n        this.pluralLong = null;\r\n        for (var unit in this.units) {\r\n            var plurality = this.units[unit];\r\n            if (plurality !== Plurality.PLURAL) {\r\n                if (!this.singularShort || unit.length < this.singularShort.length) {\r\n                    this.singularShort = unit;\r\n                }\r\n                if (!this.singularLong || unit.length > this.singularLong.length) {\r\n                    this.singularLong = unit;\r\n                }\r\n            }\r\n            if (plurality !== Plurality.SINGULAR) {\r\n                if (!this.pluralShort || unit.length < this.pluralShort.length) {\r\n                    this.pluralShort = unit;\r\n                }\r\n                if (!this.pluralLong || unit.length > this.pluralLong.length) {\r\n                    this.pluralLong = unit;\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Invokes a callback for each group in the parent class that are visible\r\n     * based on the given transform relative to this group.\r\n     *\r\n     * @param transform The transform which decides what groups are visible.\r\n     * @param reverse If the groups of the class should be iterated in reverse.\r\n     * @param callback A function to invoke with all visible groups found and the\r\n     *  index of that group in the set of visible groups. If `false` is returned\r\n     *  by the function iteration of visible groups ceases.\r\n     * @param callback.group The current visible group.\r\n     * @param callback.index The index of the current visible group.\r\n     * @see [[Transform.isVisibleGroup]]\r\n     */\r\n    Group.prototype.matches = function (transform, reverse, callback) {\r\n        if (this.parent) {\r\n            this.parent.getVisibleGroups(transform, reverse, this, callback);\r\n        }\r\n    };\r\n    return Group;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Class.ts\n\r\n\r\n/**\r\n * A collection of groups and their units with the logic on how to convert\r\n * between groups with differing base units.\r\n *\r\n * A class is essentially something like \"Length\" where base units are \"inches\"\r\n * and \"millimeters\" and there are various other groups based off of these\r\n * base groups like \"feet\", \"centimeters\", and \"meters\".\r\n *\r\n * A class is responsible for being the sole place where conversion is done\r\n * between different groups in the same class.\r\n *\r\n * @see [[Class.convert]]\r\n */\r\nvar Class_Class = (function () {\r\n    /**\r\n     * Creates a new instance of Class given the name of the class and optionally\r\n     * the groups of the class.\r\n     *\r\n     * @param name The unique name of the class.\r\n     * @param groups The optional list of groups to populate the class with.\r\n     */\r\n    function Class(name, groups) {\r\n        this.name = name;\r\n        this.groupMap = {};\r\n        this.groups = [];\r\n        this.converters = {};\r\n        if (groups) {\r\n            this.addGroups(groups);\r\n        }\r\n    }\r\n    /**\r\n     * Adds the group definitions to this class.\r\n     *\r\n     * @param definitions The array of group definitions.\r\n     * @return The reference to this instance.\r\n     * @see [[Class.addGroup]]\r\n     */\r\n    Class.prototype.addGroups = function (definitions) {\r\n        for (var i = 0; i < definitions.length; i++) {\r\n            this.addGroup(definitions[i]);\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Adds a group definition to this class. If the group is relative to another\r\n     * group the [[Group.baseScale]] and [[Group.baseUnit]] are set to appropriate\r\n     * values.\r\n     *\r\n     * @param definition The group definition.\r\n     * @return The instance of the group created from the definition.\r\n     * @see [[Class.addGroupUnit]]\r\n     */\r\n    Class.prototype.addGroup = function (definition) {\r\n        var group = new Group_Group(definition, this);\r\n        var relativeUnit = group.relativeUnit, relativeScale = group.relativeScale, units = group.units;\r\n        if (relativeUnit) {\r\n            var relative = this.groupMap[relativeUnit];\r\n            group.baseScale = relativeScale * relative.baseScale;\r\n            group.baseUnit = relative.baseUnit;\r\n        }\r\n        for (var alias in units) {\r\n            this.addGroupUnit(alias, group);\r\n        }\r\n        this.groups.push(group);\r\n        return group;\r\n    };\r\n    /**\r\n     * Adds the unit to this class for the given group. If the lowercase version\r\n     * of the unit has not been mapped yet it will be mapped to the given group.\r\n     *\r\n     * @param unit The unit to map to the group.\r\n     * @param group The group which has the unit.\r\n     * @return The reference to this instance.\r\n     */\r\n    Class.prototype.addGroupUnit = function (unit, group) {\r\n        var lower = unit.toLowerCase();\r\n        this.groupMap[unit] = group;\r\n        if (!this.groupMap[lower]) {\r\n            this.groupMap[lower] = group;\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Removes the given unit associated to the given group from the class. If the\r\n     * group is not mapped to this unit then this has no effect.\r\n     *\r\n     * @param unit The unit to remove from this class.\r\n     * @param group The group which has the unit.\r\n     * @return The reference to this instance.\r\n     */\r\n    Class.prototype.removeGroupUnit = function (unit, group) {\r\n        var lower = unit.toLowerCase();\r\n        if (this.groupMap[unit] === group) {\r\n            delete this.groupMap[unit];\r\n        }\r\n        if (this.groupMap[lower] === group) {\r\n            delete this.groupMap[lower];\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Determines the first group in this class which is a base group.\r\n     *\r\n     * @see [[Group.isBase]]\r\n     */\r\n    Class.prototype.getFirstBase = function () {\r\n        var groups = this.groups;\r\n        for (var i = 0; i < groups.length; i++) {\r\n            var group = groups[i];\r\n            if (group.isBase) {\r\n                return group;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Updates the [[Group.classScale]] value in each group in this class so that\r\n     * there is a baseline for comparing one group to another no matter the base\r\n     * unit. For comparing in the same base, you can use [[Group.baseScale]].\r\n     *\r\n     * @return The reference to this instance.\r\n     */\r\n    Class.prototype.setClassScales = function () {\r\n        var groups = this.groups;\r\n        var first = this.getFirstBase();\r\n        if (first) {\r\n            for (var i = 0; i < groups.length; i++) {\r\n                var group = groups[i];\r\n                if (group.baseUnit === first.baseUnit) {\r\n                    group.classScale = group.baseScale;\r\n                }\r\n                else if (group.baseUnit in this.converters) {\r\n                    group.classScale = this.converters[group.baseUnit][first.baseUnit](group.baseScale);\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Sets the conversion function between the two base units.\r\n     *\r\n     * @param fromUnit The base unit to convert from.\r\n     * @param toUnit The base unit to convert to.\r\n     * @param converter The function to pass the value to convert.\r\n     * @return The reference to this instance.\r\n     */\r\n    Class.prototype.setBaseConversion = function (fromUnit, toUnit, converter) {\r\n        var converters = this.converters;\r\n        converters[fromUnit] = converters[fromUnit] || {};\r\n        converters[fromUnit][toUnit] = converter;\r\n        return this;\r\n    };\r\n    /**\r\n     * Determines which groups in this class are visible according to the given\r\n     * transform. The groups can be iterated in reverse and can optionally take\r\n     * a related group into consideration (when the system is GIVEN, we want to\r\n     * return the groups with the same system).\r\n     *\r\n     * @param transform The transform which decides what groups are visible.\r\n     * @param reverse If the groups of this class should be iterated in reverse.\r\n     * @param relatedGroup A related group which may be used for visibility if the\r\n     *  [[Transform.system]] is [[System.GIVEN]].\r\n     * @param callback A function to invoke with all visible groups found and the\r\n     *  index of that group in the set of visible groups. If `false` is returned\r\n     *  by the function iteration of visible groups ceases.\r\n     * @param callback.group The current visible group.\r\n     * @param callback.index The index of the current visible group.\r\n     * @see [[Transform.isVisibleGroup]]\r\n     */\r\n    Class.prototype.getVisibleGroups = function (transform, reverse, relatedGroup, callback) {\r\n        var groups = this.groups;\r\n        var matched = 0;\r\n        var start = reverse ? groups.length - 1 : 0;\r\n        var stop = reverse ? -1 : groups.length;\r\n        var increment = reverse ? -1 : 1;\r\n        for (var i = start; i !== stop; i += increment) {\r\n            var group = groups[i];\r\n            if (transform.isVisibleGroup(group, relatedGroup)) {\r\n                var result = callback(group, matched++);\r\n                if (result === false) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Converts the given number from a given group to a given group. If the two\r\n     * groups are the same or one or both of the groups are not provided then the\r\n     * `value` provided is returned. If the two groups have differing base units\r\n     * the [[Class.converters]] map is used to convert the `value` over to the\r\n     * proper base. If the [[Class.converters]] map is missing a base conversion\r\n     * zero is returned. This might happen if a group is passed to this function\r\n     * which does not belong to this class OR if the user has impromperly setup\r\n     * their own classes.\r\n     *\r\n     * @param value The number to convert.\r\n     * @param from The group of the number to convert from.\r\n     * @param to The group to convert to.\r\n     * @param invalid The value to return if a conversion between the two groups\r\n     *  could not be made.\r\n     * @return The converted number or zero if a base conversion could not be found.\r\n     */\r\n    Class.prototype.convert = function (value, from, to, invalid) {\r\n        if (invalid === void 0) { invalid = 0; }\r\n        if (from === to || !from || !to) {\r\n            return value;\r\n        }\r\n        var converted = value * from.baseScale;\r\n        if (from.baseUnit !== to.baseUnit) {\r\n            var map = this.converters[from.baseUnit];\r\n            if (!map || !map[to.baseUnit]) {\r\n                return invalid;\r\n            }\r\n            var converter = map[to.baseUnit];\r\n            converted = converter(converted);\r\n        }\r\n        return converted / to.baseScale;\r\n    };\r\n    return Class;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Output.ts\n\r\n\r\n/**\r\n * The enumeration which decides what unit to use when converting to a string.\r\n */\r\nvar OutputUnit;\r\n(function (OutputUnit) {\r\n    /**\r\n     * This value will keep units from being displayed.\r\n     */\r\n    OutputUnit[OutputUnit[\"NONE\"] = 0] = \"NONE\";\r\n    /**\r\n     * This value will ensure the unit exactly as the user entered it is used in\r\n     * the output no matter whether the value's plurality matches the given\r\n     * unit's plurality.\r\n     *\r\n     * @see [[Value.unit]]\r\n     */\r\n    OutputUnit[OutputUnit[\"GIVEN\"] = 1] = \"GIVEN\";\r\n    /**\r\n     * This value will force the short versions of the unit to be used.\r\n     *\r\n     * @see [[Group.singularShort]]\r\n     * @see [[Group.pluralShort]]\r\n     */\r\n    OutputUnit[OutputUnit[\"SHORT\"] = 2] = \"SHORT\";\r\n    /**\r\n     * This value will force the long versions of the unit to be used.\r\n     *\r\n     * @see [[Group.singularLong]]\r\n     * @see [[Group.pluralLong]]\r\n     */\r\n    OutputUnit[OutputUnit[\"LONG\"] = 3] = \"LONG\";\r\n})(OutputUnit = OutputUnit || (OutputUnit = {}));\r\n/**\r\n * The enumeration which decides how a value will be converted to a string.\r\n */\r\nvar OutputFormat;\r\n(function (OutputFormat) {\r\n    /**\r\n     * The format of the user input will be used if possible.\r\n     */\r\n    OutputFormat[OutputFormat[\"GIVEN\"] = 0] = \"GIVEN\";\r\n    /**\r\n     * All values will be displayed using their decimal representation.\r\n     */\r\n    OutputFormat[OutputFormat[\"NUMBER\"] = 1] = \"NUMBER\";\r\n    /**\r\n     * All values will be displayed as a mixed fraction if the value is a fraction.\r\n     * A mixed fraction has a whole number followed by a fraction where the\r\n     * numerator is smaller than the denominator.\r\n     *\r\n     * @see [[Value.isFraction]]\r\n     */\r\n    OutputFormat[OutputFormat[\"MIXED\"] = 2] = \"MIXED\";\r\n    /**\r\n     * All values will be displayed as an improper fraction if the value is a\r\n     * fraction and the numerator is larger than the denoninator.\r\n     *\r\n     * @see [[Value.isFraction]]\r\n     */\r\n    OutputFormat[OutputFormat[\"IMPROPER\"] = 3] = \"IMPROPER\";\r\n})(OutputFormat = OutputFormat || (OutputFormat = {}));\r\n/**\r\n * The class which converts Unitz objects to strings.\r\n */\r\nvar Output_Output = (function () {\r\n    /**\r\n     * Creates a new instance of Output with an optional set of options to\r\n     * override the default values.\r\n     *\r\n     * @param input The options to apply to the new instance.\r\n     */\r\n    function Output(input) {\r\n        /**\r\n         * The option that specifies which units are chosen.\r\n         */\r\n        this.unit = OutputUnit.GIVEN;\r\n        /**\r\n         * The option that specifies how values are displayed.\r\n         */\r\n        this.format = OutputFormat.GIVEN;\r\n        /**\r\n         * Whether or not a unit should be displayed for the minimum and maximum of a\r\n         * range when they have the same group.\r\n         */\r\n        this.repeatUnit = false;\r\n        /**\r\n         * The spacing used between the value and the unit.\r\n         */\r\n        this.unitSpacer = '';\r\n        /**\r\n         * The spacing used between the minimum and maximum values in a range.\r\n         */\r\n        this.rangeSpacer = ' - ';\r\n        /**\r\n         * The spacing used to separate the numerator and denominator of a fraction.\r\n         */\r\n        this.fractionSpacer = '/';\r\n        /**\r\n         * The spacing used to seperate a mixed number from the fraction.\r\n         */\r\n        this.mixedSpacer = ' ';\r\n        /**\r\n         * The spacing used to separate a unit and the rate unit.\r\n         */\r\n        this.rateSpacer = '/';\r\n        /**\r\n         * The delimiter used to separate ranges.\r\n         */\r\n        this.delimiter = ', ';\r\n        /**\r\n         * An option used to restrict numbers from displaying large decimal numbers.\r\n         * When this value is set to -1 numbers are displayed fully. If the value is\r\n         * set to zero all numbers will be truncated to the whole version.\r\n         */\r\n        this.significant = -1;\r\n        if (Functions.isDefined(input)) {\r\n            this.set(input);\r\n        }\r\n    }\r\n    /**\r\n     * Overrides values in this instance with ones specified in input.\r\n     *\r\n     * @param input The values to override.\r\n     * @return The reference to this instance.\r\n     */\r\n    Output.prototype.set = function (input) {\r\n        this.unit = Functions.coalesce(input.unit, this.unit);\r\n        this.format = Functions.coalesce(input.format, this.format);\r\n        this.repeatUnit = Functions.coalesce(input.repeatUnit, this.repeatUnit);\r\n        this.unitSpacer = Functions.coalesce(input.unitSpacer, this.unitSpacer);\r\n        this.rangeSpacer = Functions.coalesce(input.rangeSpacer, this.rangeSpacer);\r\n        this.fractionSpacer = Functions.coalesce(input.fractionSpacer, this.fractionSpacer);\r\n        this.mixedSpacer = Functions.coalesce(input.mixedSpacer, this.mixedSpacer);\r\n        this.rateSpacer = Functions.coalesce(input.rateSpacer, this.rateSpacer);\r\n        this.delimiter = Functions.coalesce(input.delimiter, this.delimiter);\r\n        this.significant = Functions.coalesce(input.significant, this.significant);\r\n        return this;\r\n    };\r\n    /**\r\n     * Returns an Output instance which matches the desired options. If no options\r\n     * are specified the reference to this instance is returned. If the options\r\n     * are already an instance of Output its returned. If options are specified\r\n     * a new instance is created with the options of this instance, and the given\r\n     * options applied with [[Output.set]].\r\n     *\r\n     * @param input The options desired.\r\n     * @return An instance of this class which matches the desired options.\r\n     */\r\n    Output.prototype.extend = function (input) {\r\n        var extended = this;\r\n        if (Functions.isDefined(input)) {\r\n            if (input instanceof Output) {\r\n                extended = input;\r\n            }\r\n            else {\r\n                extended = new Output(this);\r\n                extended.set(input);\r\n            }\r\n        }\r\n        return extended;\r\n    };\r\n    /**\r\n     * Converts the list of ranges to a string. If a range is not valid it is\r\n     * skipped.\r\n     *\r\n     * @param ranges The list of ranges to convert.\r\n     * @return The string representation of the input.\r\n     */\r\n    Output.prototype.ranges = function (ranges) {\r\n        var out = '';\r\n        for (var i = 0; i < ranges.length; i++) {\r\n            var range = ranges[i];\r\n            if (range.isValid) {\r\n                if (out.length) {\r\n                    out += this.delimiter;\r\n                }\r\n                out += this.range(range);\r\n            }\r\n        }\r\n        return out;\r\n    };\r\n    /**\r\n     * Converts the range to a string.\r\n     *\r\n     * @param ranges The range to convert.\r\n     * @return The string representation of the input.\r\n     */\r\n    Output.prototype.range = function (range) {\r\n        var out = '';\r\n        if (!range.isValid) {\r\n            // nothing\r\n        }\r\n        else if (range.isFixed) {\r\n            out += this.value(range.min);\r\n        }\r\n        else {\r\n            var minUnit = this.repeatUnit || range.min.unit !== range.max.unit;\r\n            out += this.value(range.min, minUnit);\r\n            out += this.rangeSpacer;\r\n            out += this.value(range.max);\r\n        }\r\n        return out;\r\n    };\r\n    /**\r\n     * Converts the value to the string optionally showing or hiding the unit.\r\n     *\r\n     * @param value The value to convert.\r\n     * @param showUnit Whether or not the unit should be added to the string.\r\n     * @return The string representation of the input.\r\n     */\r\n    Output.prototype.value = function (value, showUnit) {\r\n        if (showUnit === void 0) { showUnit = true; }\r\n        var out = '';\r\n        if (!value.isValid) {\r\n        }\r\n        else if (this.isFraction(value)) {\r\n            if (this.isMixed(value)) {\r\n                out += value.mixedWhole;\r\n                out += this.mixedSpacer;\r\n                out += value.mixedNum;\r\n                out += this.fractionSpacer;\r\n                out += value.den;\r\n            }\r\n            else {\r\n                out += value.num;\r\n                out += this.fractionSpacer;\r\n                out += value.den;\r\n            }\r\n        }\r\n        else {\r\n            out += this.number(value.value);\r\n        }\r\n        if (showUnit && this.unit !== OutputUnit.NONE && value.isValid) {\r\n            out += this.unitSpacer;\r\n            out += this.units(value);\r\n        }\r\n        return out;\r\n    };\r\n    /**\r\n     * Generates a full unit string including the rate unit if it exists.\r\n     *\r\n     * @param value The value to generate a unit for.\r\n     * @return The units string representation.\r\n     */\r\n    Output.prototype.units = function (value) {\r\n        var out = '';\r\n        out += this.group(value.value, value.unit, value.group);\r\n        if (value.rateGroup) {\r\n            out += this.rateSpacer;\r\n            out += this.group(value.value, value.rate, value.rateGroup);\r\n        }\r\n        return out;\r\n    };\r\n    /**\r\n     * Generates a unit string given the value, the current unit, and its group.\r\n     *\r\n     * @param value The value to generate a unit for.\r\n     * @param unit The unit to potentially use.\r\n     * @param group The group of the unit.\r\n     * @return The unit determined based on the options.\r\n     */\r\n    Output.prototype.group = function (value, unit, group) {\r\n        if (this.isLongUnit(group)) {\r\n            return Functions.isSingular(value) ? group.singularLong : group.pluralLong;\r\n        }\r\n        else if (this.isShortUnit(group) || (group && group.dynamic)) {\r\n            return Functions.isSingular(value) ? group.singularShort : group.pluralShort;\r\n        }\r\n        return unit;\r\n    };\r\n    /**\r\n     * Converts the number to a string.\r\n     *\r\n     * @param x The number to convert.\r\n     * @return The string representation of the input.\r\n     */\r\n    Output.prototype.number = function (x) {\r\n        var valueString = x + '';\r\n        if (this.significant >= 0 && valueString !== '0') {\r\n            var valueSignificant = x\r\n                .toFixed(this.significant)\r\n                .replace(/0*$/, '')\r\n                .replace(/\\.$/, '');\r\n            return valueSignificant.length < valueString.length ? valueSignificant : valueString;\r\n        }\r\n        return valueString;\r\n    };\r\n    /**\r\n     * Determines whether the value should be displayed as a fraction.\r\n     *\r\n     * @param value The value to look at.\r\n     * @return True if the value should be displayed as a fraction, otherwise false.\r\n     */\r\n    Output.prototype.isFraction = function (value) {\r\n        return value.isFraction && this.format !== OutputFormat.NUMBER;\r\n    };\r\n    /**\r\n     * Determines whether the value should be displayed as a number.\r\n     *\r\n     * @param value The value to look at.\r\n     * @return True if the value should be displayed as a number, otherwise false.\r\n     */\r\n    Output.prototype.isNumber = function (value) {\r\n        return value.isValid && !this.isFraction(value);\r\n    };\r\n    /**\r\n     * Determines whether the value should be displayed as a mixed fraction. This\r\n     * assumes [[Output.isFraction]] was already checked and returned true.\r\n     *\r\n     * @param value The value to look at.\r\n     * @return True if the value should be displayed as a mixed fraction, otherwise false.\r\n     */\r\n    Output.prototype.isMixed = function (value) {\r\n        return value.mixedWhole !== 0 && this.format !== OutputFormat.IMPROPER;\r\n    };\r\n    /**\r\n     * Determines whether the short unit should be displayed.\r\n     *\r\n     * @param group The group of the unit.\r\n     * @return True if the short unit should be displayed, otherwise false.\r\n     */\r\n    Output.prototype.isShortUnit = function (group) {\r\n        return group && this.unit === OutputUnit.SHORT;\r\n    };\r\n    /**\r\n     * Determines whether the long unit should be displayed.\r\n     *\r\n     * @param group The group of the unit.\r\n     * @return True if the short unit should be displayed, otherwise false.\r\n     */\r\n    Output.prototype.isLongUnit = function (group) {\r\n        return group && this.unit === OutputUnit.LONG;\r\n    };\r\n    return Output;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Transform.ts\n\r\n\r\n\r\n/**\r\n * THe class which controls which units and values are acceptable when\r\n * transforming a set of ranges.\r\n *\r\n * @see [[Base.normalize]]\r\n * @see [[Base.compact]]\r\n * @see [[Base.expand]]\r\n * @see [[Base.conversions]]\r\n * @see [[Base.filter]]\r\n */\r\nvar Transform_Transform = (function () {\r\n    /**\r\n     * Creates a new instance of Transform with an optional set of options to\r\n     * override the default values.\r\n     *\r\n     * @param input The options to apply to the new instance.\r\n     */\r\n    function Transform(input) {\r\n        /**\r\n         * The option which determines whether only common or any group are valid.\r\n         * To only include common units this value must be `true` and to include\r\n         * common and uncommon this value must be `false`.\r\n         */\r\n        this.common = true;\r\n        /**\r\n         * The desired system for the transformation.\r\n         */\r\n        this.system = System.GIVEN;\r\n        /**\r\n         * The mimimum allowed value for the transformation.\r\n         */\r\n        this.min = -Number.MAX_VALUE;\r\n        /**\r\n         * The maximum allowed value for the transformation.\r\n         */\r\n        this.max = Number.MAX_VALUE;\r\n        /**\r\n         * Whether the minimum or maximum value of a range is used when producing\r\n         * conversions.\r\n         */\r\n        this.convertWithMax = true;\r\n        /**\r\n         * Whether conversions should convert the main unit.\r\n         */\r\n        this.convertUnit = true;\r\n        /**\r\n         * Whether conversions should convert the rate unit.\r\n         */\r\n        this.convertRate = false;\r\n        /**\r\n         * Whether ranges without units are considered valid for the transformation.\r\n         */\r\n        this.groupless = true;\r\n        if (Functions.isDefined(input)) {\r\n            this.set(input);\r\n        }\r\n    }\r\n    /**\r\n     * Overrides values in this instance with ones specified in input.\r\n     *\r\n     * @param input The values to override.\r\n     * @return The reference to this instance.\r\n     */\r\n    Transform.prototype.set = function (input) {\r\n        this.common = Functions.coalesce(input.common, this.common);\r\n        this.system = Functions.coalesce(input.system, this.system);\r\n        this.min = Functions.coalesce(input.min, this.min);\r\n        this.max = Functions.coalesce(input.max, this.max);\r\n        this.groupless = Functions.coalesce(input.groupless, this.groupless);\r\n        this.convertWithMax = Functions.coalesce(input.convertWithMax, this.convertWithMax);\r\n        this.convertUnit = Functions.coalesce(input.convertUnit, this.convertUnit);\r\n        this.convertRate = Functions.coalesce(input.convertRate, this.convertRate);\r\n        this.onlyUnits = Functions.coalesce(input.onlyUnits, this.onlyUnits);\r\n        this.notUnits = Functions.coalesce(input.notUnits, this.notUnits);\r\n        this.onlyClasses = Functions.coalesce(input.onlyClasses, this.onlyClasses);\r\n        this.notClasses = Functions.coalesce(input.notClasses, this.notClasses);\r\n        return this;\r\n    };\r\n    /**\r\n     * Returns a Transform instance which matches the desired options. If no\r\n     * options are specified the reference to this instance is returned. If the\r\n     * options are already an instance of Transform its returned. If options are\r\n     * specified a new instance is created with the options of this instance, and\r\n     * the given options applied with [[Transform.set]].\r\n     *\r\n     * @param input The options desired.\r\n     * @return An instance of this class which matches the desired options.\r\n     */\r\n    Transform.prototype.extend = function (input) {\r\n        var extended = this;\r\n        if (Functions.isDefined(input)) {\r\n            if (input instanceof Transform) {\r\n                extended = input;\r\n            }\r\n            else {\r\n                extended = new Transform(this);\r\n                extended.set(input);\r\n            }\r\n        }\r\n        return extended;\r\n    };\r\n    /**\r\n     * Determines whether the given range is valid according to this instance.\r\n     *\r\n     * @param range The range to test.\r\n     * @return True if the range matches this transform, otherwise false.\r\n     */\r\n    Transform.prototype.isValidRange = function (range) {\r\n        if (range.max.value < this.min) {\r\n            return false;\r\n        }\r\n        if (range.min.value > this.max) {\r\n            return false;\r\n        }\r\n        var group = this.convertWithMax ? range.max.group : range.min.group;\r\n        return this.isVisibleGroup(group);\r\n    };\r\n    /**\r\n     * Determines whether the given group (and optionally a current group) is\r\n     * valid or visible according to this instance.\r\n     *\r\n     * @param group The group to test.\r\n     * @param givenGroup The current group if available.\r\n     * @return True if the group matches this transform, otherwise false.\r\n     */\r\n    Transform.prototype.isVisibleGroup = function (group, givenGroup) {\r\n        if (!group) {\r\n            return this.groupless;\r\n        }\r\n        return this.isCommonMatch(group) &&\r\n            this.isSystemMatch(group, givenGroup) &&\r\n            this.isUnitMatch(group) &&\r\n            this.isClassMatch(group.parent);\r\n    };\r\n    /**\r\n     * Determines whether the given group matches the common option on this\r\n     * instance.\r\n     *\r\n     * @param group The group to test.\r\n     * @return True if the group matches the common option, otherwise false.\r\n     */\r\n    Transform.prototype.isCommonMatch = function (group) {\r\n        return !this.common || group.common;\r\n    };\r\n    /**\r\n     * Determines whether the given group (and optionally a current group)\r\n     * matches the system option on this instance.\r\n     *\r\n     * @param group The group to test.\r\n     * @param givenGroup The current group if available.\r\n     * @return True if the group matches ths system option, otherwise false.\r\n     */\r\n    Transform.prototype.isSystemMatch = function (group, givenGroup) {\r\n        switch (this.system) {\r\n            case System.METRIC:\r\n                return group.system === System.METRIC || group.system === System.ANY;\r\n            case System.US:\r\n                return group.system === System.US || group.system === System.ANY;\r\n            case System.NONE:\r\n                return false;\r\n            case System.ANY:\r\n                return true;\r\n            case System.GIVEN:\r\n                return !givenGroup || group.baseUnit === givenGroup.baseUnit;\r\n        }\r\n        return false;\r\n    };\r\n    /**\r\n     * Determines whether the given class matches the classes options on this\r\n     * instance.\r\n     *\r\n     * @param parent The class to test.\r\n     * @return True if the class matches the classes options, otherwise false.\r\n     */\r\n    Transform.prototype.isClassMatch = function (parent) {\r\n        if (this.onlyClasses) {\r\n            return this.onlyClasses.indexOf(parent.name) !== -1;\r\n        }\r\n        if (this.notClasses) {\r\n            return this.notClasses.indexOf(parent.name) === -1;\r\n        }\r\n        return true;\r\n    };\r\n    /**\r\n     * Determines whether the given group matches the unit options on this\r\n     * instance.\r\n     *\r\n     * @param group The group to test.\r\n     * @return True if the group matches the unit options, otherwise false.\r\n     */\r\n    Transform.prototype.isUnitMatch = function (group) {\r\n        if (this.onlyUnits) {\r\n            return this.onlyUnits.indexOf(group.unit) !== -1;\r\n        }\r\n        if (this.notUnits) {\r\n            return this.notUnits.indexOf(group.unit) === -1;\r\n        }\r\n        return true;\r\n    };\r\n    return Transform;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Sort.ts\n\r\n\r\n/**\r\n * The enumeration which decides what value in a range should be used when\r\n * sorting between ranges with differing minimum and maximum values.\r\n */\r\nvar SortType;\r\n(function (SortType) {\r\n    /**\r\n     * This value will use the minimum of the ranges to sort by.\r\n     */\r\n    SortType[SortType[\"MIN\"] = 0] = \"MIN\";\r\n    /**\r\n     * This value will use the maximum of the ranges to sort by.\r\n     */\r\n    SortType[SortType[\"MAX\"] = 1] = \"MAX\";\r\n    /**\r\n     * This value will use the average of the ranges to sort by.\r\n     */\r\n    SortType[SortType[\"AVERAGE\"] = 2] = \"AVERAGE\";\r\n})(SortType = SortType || (SortType = {}));\r\n/**\r\n * The class which determines how to sort ranges.\r\n */\r\nvar Sort_Sort = (function () {\r\n    /**\r\n     * Creates a new instance of Sort with an optional set of options to override\r\n     * the default values.\r\n     *\r\n     * @param input The options to apply to the new instance.\r\n     */\r\n    function Sort(input) {\r\n        /**\r\n         * If the ranges should be in ascending order (small values followed by large\r\n         * values). The default value is in descending order.\r\n         */\r\n        this.ascending = false;\r\n        /**\r\n         * How ranges should be compared when the minimum and maximum values differ.\r\n         */\r\n        this.type = SortType.MAX;\r\n        /**\r\n         * This object describes how ranges of different classes should be sorted by\r\n         * given each class a priority. If a class is not defined here the priority\r\n         * assumed is zero.\r\n         */\r\n        this.classes = {};\r\n        if (Functions.isDefined(input)) {\r\n            this.set(input);\r\n        }\r\n    }\r\n    /**\r\n     * Overrides values in this instance ith ones specified in the input. If class\r\n     * sorting options are specified they are merged into this instance as opposed\r\n     * to a complete overwrite.\r\n     *\r\n     * @param input The values to override.\r\n     * @return The reference to this instance.\r\n     */\r\n    Sort.prototype.set = function (input) {\r\n        this.ascending = Functions.coalesce(input.ascending, this.ascending);\r\n        this.type = Functions.coalesce(input.type, this.type);\r\n        if (Functions.isDefined(input.classes)) {\r\n            for (var className in input.classes) {\r\n                this.classes[className] = input.classes[className];\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Returns a Sort instance which matches the desired options. If no options\r\n     * are specified the reference to this instance is returned. If the options\r\n     * are already an instance of Sort its returned. If options are specified\r\n     * a new instance is created with the options of this instance, and the given\r\n     * options applied with [[Sort.set]].\r\n     *\r\n     * @param input The options desired.\r\n     * @return An instance of this class which matches the desired options.\r\n     */\r\n    Sort.prototype.extend = function (input) {\r\n        var extended = this;\r\n        if (Functions.isDefined(input)) {\r\n            if (input instanceof Sort) {\r\n                extended = input;\r\n            }\r\n            else {\r\n                extended = new Sort(this);\r\n                extended.set(input);\r\n            }\r\n        }\r\n        return extended;\r\n    };\r\n    /**\r\n     * Returns a function which can sort ranges based on the options in this\r\n     * instance. Comparison is first done by class, and followed by type.\r\n     */\r\n    Sort.prototype.getSorter = function () {\r\n        var _this = this;\r\n        return function (a, b) {\r\n            var d = _this.getClassComparison(a, b);\r\n            if (d === 0) {\r\n                switch (_this.type) {\r\n                    case SortType.MIN:\r\n                        d = _this.getMinComparison(a, b);\r\n                        break;\r\n                    case SortType.MAX:\r\n                        d = _this.getMaxComparison(a, b);\r\n                        break;\r\n                    case SortType.AVERAGE:\r\n                        d = _this.getAverageComparison(a, b);\r\n                        break;\r\n                }\r\n            }\r\n            return _this.ascending ? d : -d;\r\n        };\r\n    };\r\n    /**\r\n     * A sort function between two ranges which look at the range minimums.\r\n     *\r\n     * @param a The first range.\r\n     * @param b The second range.\r\n     * @see [[Sorter]]\r\n     */\r\n    Sort.prototype.getMinComparison = function (a, b) {\r\n        return Functions.sign(a.min.classScaled - b.min.classScaled);\r\n    };\r\n    /**\r\n     * A sort function between two ranges which look at the range maximums.\r\n     *\r\n     * @param a The first range.\r\n     * @param b The second range.\r\n     * @see [[Sorter]]\r\n     */\r\n    Sort.prototype.getMaxComparison = function (a, b) {\r\n        return Functions.sign(a.max.classScaled - b.max.classScaled);\r\n    };\r\n    /**\r\n     * A sort function between two ranges which look at the range averages.\r\n     *\r\n     * @param a The first range.\r\n     * @param b The second range.\r\n     * @see [[Sorter]]\r\n     */\r\n    Sort.prototype.getAverageComparison = function (a, b) {\r\n        var avg = (a.min.classScaled + a.max.classScaled) * 0.5;\r\n        var bvg = (b.min.classScaled + b.max.classScaled) * 0.5;\r\n        return Functions.sign(avg - bvg);\r\n    };\r\n    /**\r\n     * A sort function between two ranges which look at the range classes.\r\n     *\r\n     * @param a The first range.\r\n     * @param b The second range.\r\n     * @see [[Sorter]]\r\n     */\r\n    Sort.prototype.getClassComparison = function (a, b) {\r\n        var ag = a.min.group ? 1 : -1;\r\n        var bg = b.min.group ? 1 : -1;\r\n        if (ag !== bg) {\r\n            return ag - bg;\r\n        }\r\n        var ac = this.classes[a.min.group.parent.name] || 0;\r\n        var bc = this.classes[b.min.group.parent.name] || 0;\r\n        return ac - bc;\r\n    };\r\n    return Sort;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Core.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * The global class which keeps track of all unit mappings and global options.\r\n *\r\n * This class is also responsible for creating dynamic classes and groups based\r\n * on approximation when a desired unit is not defined by the developer.\r\n */\r\nvar Core_Core = (function () {\r\n    function Core() {\r\n    }\r\n    /**\r\n     * Returns a [[Group]] instance mapped by the given unit. If no unit is given\r\n     * `null` is returned. If the unit isn't mapped to a group a dynamic group\r\n     * match is looked at and if none are found and `createDynamic` is true a new\r\n     * dynamic group is created.\r\n     *\r\n     * @param unit The unit of the group to get.\r\n     * @param createDynamic If creating a dynamic group should be created if an\r\n     *  existing group could not be found.\r\n     * @return The group matched to the unit or null if none was found.\r\n     * @see [[Core.getDynamicMatch]]\r\n     * @see [[Core.addDynamicUnit]]\r\n     * @see [[Core.newDynamicGroup]]\r\n     */\r\n    Core.getGroup = function (unit, createDynamic) {\r\n        if (createDynamic === void 0) { createDynamic = true; }\r\n        if (!unit) {\r\n            return null;\r\n        }\r\n        var exactGroup = Core.unitToGroup[unit];\r\n        if (exactGroup) {\r\n            return exactGroup;\r\n        }\r\n        var normalizedUnit = unit.toLowerCase();\r\n        var normalizedGroup = Core.unitToGroup[normalizedUnit];\r\n        if (normalizedGroup) {\r\n            return normalizedGroup;\r\n        }\r\n        if (!createDynamic) {\r\n            return null;\r\n        }\r\n        var dynamicUnit = Core.getDynamicMatch(unit);\r\n        var dynamicGroup = Core.dynamicMatches[dynamicUnit];\r\n        if (dynamicGroup) {\r\n            return Core.addDynamicUnit(unit, dynamicGroup);\r\n        }\r\n        return Core.newDynamicGroup(unit);\r\n    };\r\n    /**\r\n     * Sets the given unit as the preferred unit for the group it belongs to. If a\r\n     * group is not found then this has no affect.\r\n     *\r\n     * @param unit The unit to mark as the preferred unit.\r\n     * @see [[Core.getGroup]]\r\n     */\r\n    Core.setPreferred = function (unit) {\r\n        var group = this.getGroup(unit, false);\r\n        if (group) {\r\n            group.setPreferred(unit);\r\n        }\r\n    };\r\n    /**\r\n     * Sets whether the group associated with the given unit is common. A common\r\n     * group is one a user is familiar with and would be okay seeing values\r\n     * represented in. If a group is not found then this has no affect.\r\n     *\r\n     * @param unit The unit of a group to set the common flag.\r\n     * @param common Whether the associated group should be common.\r\n     * @see [[Core.getGroup]]\r\n     */\r\n    Core.setCommon = function (unit, common) {\r\n        if (common === void 0) { common = true; }\r\n        var group = this.getGroup(unit, false);\r\n        if (group) {\r\n            group.setCommon(common);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the denominators for the group associated to the given unit.\r\n     * Denominators are useful for calculating a fraction from a value.\r\n     *\r\n     * @param unit The unit of a group to set the denominators of.\r\n     * @param denominators The new denominators for the group.\r\n     * @see [[Core.getGroup]]\r\n     */\r\n    Core.setDenominators = function (unit, denominators) {\r\n        var group = this.getGroup(unit, false);\r\n        if (group) {\r\n            group.setDenominators(denominators);\r\n        }\r\n    };\r\n    /**\r\n     * Adds the given class and all groups and units to the global state. If there\r\n     * are units mapped to other groups they are overwritten by the units in the\r\n     * given class.\r\n     *\r\n     * @param parent The class to add to the global state.\r\n     */\r\n    Core.addClass = function (parent) {\r\n        this.classMap[parent.name] = parent;\r\n        this.classes.push(parent);\r\n        var groups = parent.groupMap;\r\n        for (var unit in groups) {\r\n            this.unitToGroup[unit] = groups[unit];\r\n        }\r\n    };\r\n    /**\r\n     * Adds an array of classes to the global state.\r\n     *\r\n     * @see [[Core.addClass]]\r\n     */\r\n    Core.addClasses = function () {\r\n        var classes = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            classes[_i] = arguments[_i];\r\n        }\r\n        for (var i = 0; i < classes.length; i++) {\r\n            this.addClass(classes[i]);\r\n        }\r\n    };\r\n    /**\r\n     * Adds the unit to the given dynamic group. This function also updates the\r\n     * plurality of all the units currently in the group.\r\n     *\r\n     * @param unit The unit to add to the given group.\r\n     * @param group The dynamically created group.\r\n     * @return The instance of the given group.\r\n     */\r\n    Core.addDynamicUnit = function (unit, group) {\r\n        group.units[unit] = Plurality.EITHER;\r\n        var unitCount = 0;\r\n        for (var groupUnit in group.units) {\r\n            if (groupUnit) {\r\n                unitCount++;\r\n            }\r\n        }\r\n        if (unitCount > 1) {\r\n            var longest = void 0;\r\n            for (var groupUnit in group.units) {\r\n                group.units[groupUnit] = Plurality.SINGULAR;\r\n                if (!longest || groupUnit.length > longest.length) {\r\n                    longest = groupUnit;\r\n                }\r\n            }\r\n            if (longest) {\r\n                group.units[longest] = Plurality.PLURAL;\r\n            }\r\n        }\r\n        group.updateUnits();\r\n        this.unitToGroup[unit] = group;\r\n        this.unitToGroup[unit.toLowerCase()] = group;\r\n        this.dynamicMatches[this.getDynamicMatch(unit)] = group;\r\n        return group;\r\n    };\r\n    /**\r\n     * Creates a dynamic class & group based on the given unit and adds it to the\r\n     * global state. By default the group is marked with [[System.ANY]], is\r\n     * common, and has the valid denominators 2, 3, 4, 5, 6, 8, 10.\r\n     *\r\n     * @param unit The initial unit of the group to use as the name of the class\r\n     *  and the base unit of the group.\r\n     * @return An instance of a new Group with a new parent Class.\r\n     */\r\n    Core.newDynamicGroup = function (unit) {\r\n        var parent = new Class_Class(unit);\r\n        var group = parent.addGroup({\r\n            system: System.ANY,\r\n            unit: unit,\r\n            common: true,\r\n            baseUnit: unit,\r\n            denominators: [2, 3, 4, 5, 6, 8, 10],\r\n            units: {}\r\n        });\r\n        group.setDynamic();\r\n        this.addDynamicUnit(unit, group);\r\n        this.dynamicGroups.push(group);\r\n        return group;\r\n    };\r\n    /**\r\n     * The function which takes a unit and generates a string which should be used\r\n     * to mark similarly spelled units under the same dynamic group.\r\n     *\r\n     * @param unit The unit to build a key from.\r\n     * @return The key which identifies the dynamic group.\r\n     */\r\n    Core.getDynamicMatch = function (unit) {\r\n        return unit.substring(0, this.dynamicMatchLength).toLowerCase();\r\n    };\r\n    /**\r\n     * The function which takes to values and determines which one is more\r\n     * \"normal\" or \"human friendly\".\r\n     *\r\n     * @param fromValue The most normal value found so far.\r\n     * @param toValue The value to compare to.\r\n     * @param transform The transformation rules to guide the function to choose\r\n     *  the more normal value.\r\n     * @param forOutput The output options to guide the function to choose the\r\n     *  more normal value.\r\n     * @return True if `toValue` appears more normal than `fromValue`.\r\n     */\r\n    // @ts-ignore\r\n    Core.isMoreNormal = function (fromValue, toValue, transform, forOutput) {\r\n        var fromString = forOutput.value(fromValue);\r\n        var toString = forOutput.value(toValue);\r\n        return toString.length <= fromString.length;\r\n    };\r\n    /**\r\n     * The map of defined classes by their name.\r\n     */\r\n    Core.classMap = {};\r\n    /**\r\n     * An array of the defined classes.\r\n     */\r\n    Core.classes = [];\r\n    /**\r\n     * A map of groups by their acceptable units.\r\n     */\r\n    Core.unitToGroup = {};\r\n    /**\r\n     * A list of dynamically created groups based on units specified by a user\r\n     * which are not defined by the developer.\r\n     */\r\n    Core.dynamicGroups = [];\r\n    /**\r\n     * A map of the dynamically created groups by a key determined by\r\n     * [[Core.getDynamicMatch]].\r\n     */\r\n    Core.dynamicMatches = {};\r\n    /**\r\n     * Dynamic groups are mapped together (by default) by looking at the first few\r\n     * characters.\r\n     *\r\n     * @see [[Core.getDynamicMatch]]\r\n     */\r\n    Core.dynamicMatchLength = 3;\r\n    /**\r\n     * The global options used for outputting [[Base]], [[Range]], and [[Value]]s\r\n     * which may be overridden by specifying any number of options.\r\n     *\r\n     * @see [[Base.output]]\r\n     * @see [[Range.output]]\r\n     * @see [[Value.output]]\r\n     */\r\n    Core.globalOutput = new Output_Output();\r\n    /**\r\n     * The global transform options used for transforming a [[Base]] instance\r\n     * by specifying what sort of units/groups are visible to the user.\r\n     *\r\n     * @see [[Base.normalize]]\r\n     * @see [[Base.compact]]\r\n     * @see [[Base.expand]]\r\n     * @see [[Base.conversions]]\r\n     * @see [[Base.filter]]\r\n     */\r\n    Core.globalTransform = new Transform_Transform();\r\n    /**\r\n     * The global sort options used for ordering ranges in a [[Base]] instance.\r\n     *\r\n     * @see [[Base.sort]]\r\n     */\r\n    Core.globalSort = new Sort_Sort();\r\n    return Core;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Value.ts\n\r\n\r\n\r\n/**\r\n * A class which contains a parsed number or fraction.\r\n */\r\nvar Value_Value = (function () {\r\n    /**\r\n     * Creates a new instance of Value given the value, possible numerator and\r\n     * denominator, and the unit and it's group.\r\n     *\r\n     * @param value [[Value.value]]\r\n     * @param num [[Value.num]]\r\n     * @param den [[Value.den]]\r\n     * @param unit [[Value.unit]]\r\n     * @param group [[Value.group]]\r\n     */\r\n    function Value(value, num, den, unit, group, rate, rateGroup) {\r\n        var divisor = Functions.gcd(num, den);\r\n        this.value = value;\r\n        this.num = num / divisor;\r\n        this.den = den / divisor;\r\n        this.unit = unit;\r\n        this.group = group;\r\n        this.rate = rate;\r\n        this.rateGroup = rateGroup;\r\n    }\r\n    Object.defineProperty(Value.prototype, \"isValid\", {\r\n        /**\r\n         * Returns true if this value was successfully parsed from some input.\r\n         */\r\n        get: function () {\r\n            return isFinite(this.value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"isFraction\", {\r\n        /**\r\n         * Returns true if this value is a fraction with a numerator and denoninator.\r\n         */\r\n        get: function () {\r\n            return this.den !== 1;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"isDecimal\", {\r\n        /**\r\n         * Returns true if this value is a number and not a fraction.\r\n         */\r\n        get: function () {\r\n            return this.den === 1;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"isZero\", {\r\n        /**\r\n         * Returns true if this value is zero.\r\n         */\r\n        get: function () {\r\n            return Functions.isZero(this.value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"isSingular\", {\r\n        /**\r\n         * Returns true if this value is singular.\r\n         *\r\n         * @see [[Functions.isSingular]]\r\n         */\r\n        get: function () {\r\n            return Functions.isSingular(this.value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"isRate\", {\r\n        /**\r\n         * Returns true if this value is a rate.\r\n         */\r\n        get: function () {\r\n            return !!this.rate;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"scaled\", {\r\n        /**\r\n         * Returns the number of this value relative to the base unit.\r\n         */\r\n        get: function () {\r\n            return this.group ? this.value * this.group.baseScale : this.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"classScaled\", {\r\n        /**\r\n         * Returns the number of this value relative to the first base unit of it's\r\n         * class.\r\n         */\r\n        get: function () {\r\n            return this.group ? this.value * this.group.classScale : this.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"calculated\", {\r\n        /**\r\n         * Returns the number which represents the fraction in the value. There may\r\n         * be a difference between this value and the number when the fraction is\r\n         * calculated from the denominators of the group.\r\n         */\r\n        get: function () {\r\n            return this.num / this.den;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"mixedWhole\", {\r\n        /**\r\n         * Returns the whole number for the mixed fraction of this value. If this\r\n         * value is not a fraction 0 is returned.\r\n         */\r\n        get: function () {\r\n            return this.den !== 1 ? Math.floor(this.num / this.den) : 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"mixedNum\", {\r\n        /**\r\n         * Returns the numerator for the mixed fraction of this value. If this value\r\n         * is not a fraction then the numerator is returned.\r\n         */\r\n        get: function () {\r\n            return this.den !== 1 ? this.num % this.den : this.num;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"floor\", {\r\n        /**\r\n         * Returns the floor of the number in this value.\r\n         */\r\n        get: function () {\r\n            return Math.floor(this.value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"ceil\", {\r\n        /**\r\n         * Returns the ceiling of the number in this value.\r\n         */\r\n        get: function () {\r\n            return Math.ceil(this.value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"truncate\", {\r\n        /**\r\n         * Returns the truncated number in this value taking into account it's sign.\r\n         */\r\n        get: function () {\r\n            return this.value < 0 ? this.ceil : this.floor;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"remainder\", {\r\n        /**\r\n         * Returns the fractional part of the number in this value.\r\n         */\r\n        get: function () {\r\n            return this.value - this.floor;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"error\", {\r\n        /**\r\n         * Returns the signed distance the number of this value is from the fraction\r\n         * numerator and denominator determined. If this value is not a fraction then\r\n         * this should return zero.\r\n         */\r\n        get: function () {\r\n            return this.calculated - this.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"distance\", {\r\n        /**\r\n         * Returns the absolute distance the number of this value is from the fraction\r\n         * numerator and denominator determined. If this value is not a fraction then\r\n         * this should return zero.\r\n         */\r\n        get: function () {\r\n            return Functions.abs(this.error);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Calculates the scale necessary to switch this value from the current rate\r\n     * to the provided rate.\r\n     *\r\n     * @param rate The rate group.\r\n     * @return The calculated scale.\r\n     */\r\n    Value.prototype.getRateScale = function (rate) {\r\n        return rate ? rate.parent.convert(1, rate, this.rateGroup, 1) : 1;\r\n    };\r\n    /**\r\n     * Determines whether the given value is compatible with this value to perform\r\n     * operations with.\r\n     *\r\n     * @param other The value to test against.\r\n     * @return True if the given value has compatible unit and rate groups.\r\n     */\r\n    Value.prototype.isMatch = function (other) {\r\n        var group = this.group;\r\n        var groupOther = other.group;\r\n        var groupMatch = groupOther === group || (groupOther && group && groupOther.parent === group.parent);\r\n        if (!groupMatch) {\r\n            return false;\r\n        }\r\n        var rate = this.rateGroup;\r\n        var rateOther = other.rateGroup;\r\n        var rateMatch = rateOther === rate || (rateOther && rate && rateOther.parent === rate.parent);\r\n        return rateMatch;\r\n    };\r\n    /**\r\n     * Returns a version of this value with the preferred unit.\r\n     *\r\n     * @return A new value or the reference to this instance if it's groupless.\r\n     * @see [[Group.preferredUnit]]\r\n     */\r\n    Value.prototype.preferred = function () {\r\n        return this.group ? new Value(this.value, this.num, this.den, this.group.preferredUnit, this.group, this.rateGroup ? this.rateGroup.preferredUnit : this.rate, this.rateGroup) : this;\r\n    };\r\n    /**\r\n     * Returns a copy of this value.\r\n     *\r\n     * @return A new value.\r\n     */\r\n    Value.prototype.copy = function () {\r\n        return new Value(this.value, this.num, this.den, this.unit, this.group, this.rate, this.rateGroup);\r\n    };\r\n    /**\r\n     * Returns a value equivalent to zero with the unt and group of this instance.\r\n     *\r\n     * @return A new value.\r\n     */\r\n    Value.prototype.zero = function () {\r\n        return new Value(0, 0, 1, this.unit, this.group, this.rate, this.rateGroup);\r\n    };\r\n    /**\r\n     * Returns the truncated version of this value. That's a value where the\r\n     * number is a whole number.\r\n     *\r\n     * @return A new value.\r\n     */\r\n    Value.prototype.truncated = function () {\r\n        return new Value(this.truncate, this.truncate, 1, this.unit, this.group, this.rate, this.rateGroup);\r\n    };\r\n    /**\r\n     * Returns a version of this value as a fraction.\r\n     *\r\n     * @return A new value or the reference to this instance if it's a fraction.\r\n     */\r\n    Value.prototype.fractioned = function () {\r\n        if (this.isFraction) {\r\n            return this;\r\n        }\r\n        if (this.group) {\r\n            return Value.fromNumberWithDenominators(this.value, this.group.denominators, this.unit, this.group, this.rate, this.rateGroup);\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Returns a version of this value as a number.\r\n     *\r\n     * @return A new value or the reference to this instance if it's a number.\r\n     */\r\n    Value.prototype.numbered = function () {\r\n        if (this.isFraction) {\r\n            return new Value(this.value, this.value, 1, this.unit, this.group, this.rate, this.rateGroup);\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Converts this value to the given group and returns the result.\r\n     *\r\n     * @param to The group to convert to.\r\n     * @param rate The group for the rate.\r\n     * @return The converted value or the number of this value if there's no group.\r\n     */\r\n    Value.prototype.convertTo = function (to, rate) {\r\n        if (rate === void 0) { rate = null; }\r\n        var group = this.group;\r\n        var rateScale = this.getRateScale(rate);\r\n        var value = this.value * rateScale;\r\n        return group ? group.parent.convert(value, group, to) : value;\r\n    };\r\n    /**\r\n     * Converts this value to the given group and returns a new value. The new\r\n     * value will attempted to be converted to a fraction.\r\n     *\r\n     * @param group The group to convert to.\r\n     * @param rate The group for the rate.\r\n     * @return A new value.\r\n     */\r\n    Value.prototype.convertToValue = function (group, rate) {\r\n        if (rate === void 0) { rate = null; }\r\n        return Value.fromNumberForGroup(this.convertTo(group, rate), group, rate || this.rateGroup);\r\n    };\r\n    /**\r\n     * Determines the available conversions of this value for all groups\r\n     * that are valid for the given transform.\r\n     *\r\n     * @param transform Transform which controls the units and values acceptable.\r\n     * @param reverse Whether to iterate from largest units to smallest units\r\n     *  (`true`), or from smallest to largest (`false`).\r\n     * @param callback The function to invoke for each valid conversion.\r\n     * @param callback.transformed The conversion calculated.\r\n     * @param callback.index The index of the conversion during iteration.\r\n     * @see [[Group.matches]]\r\n     */\r\n    Value.prototype.conversions = function (transform, reverse, callback) {\r\n        var _this = this;\r\n        var unitGroup = this.group;\r\n        var rateGroup = this.rateGroup;\r\n        var convertUnit = unitGroup && transform.convertUnit;\r\n        var convertRate = rateGroup && transform.convertRate;\r\n        var index = 0;\r\n        if (convertUnit && convertRate) {\r\n            rateGroup.matches(transform, reverse, function (rate) {\r\n                unitGroup.matches(transform, reverse, function (group) {\r\n                    callback(_this.convertToValue(group, rate), index++);\r\n                });\r\n            });\r\n        }\r\n        else if (convertUnit) {\r\n            unitGroup.matches(transform, reverse, function (group) {\r\n                callback(_this.convertToValue(group), index++);\r\n            });\r\n        }\r\n        else if (convertRate) {\r\n            rateGroup.matches(transform, reverse, function (rate) {\r\n                callback(_this.convertToValue(unitGroup, rate), index++);\r\n            });\r\n        }\r\n    };\r\n    /**\r\n     * Returns a value based on this value with the unit that best represents the\r\n     * value. What is best is typically related to the magnitude of the value.\r\n     * Really small and really large values are harder for people to comprehend so\r\n     * the unit which results in the most normal looking value is determined.\r\n     *\r\n     * @param transform Transform which controls the units and values acceptable.\r\n     * @param forOutput The output that may be used so the most normal looking\r\n     *  value can be determined.\r\n     * @return The most normal value found.\r\n     * @see [[Value.conversions]]\r\n     * @see [[Core.isMoreNormal]]\r\n     */\r\n    Value.prototype.normalize = function (transform, forOutput) {\r\n        var closest;\r\n        this.conversions(transform, false, function (convert) {\r\n            var acceptable = !forOutput.isNumber(convert);\r\n            if (!acceptable) {\r\n                var number = forOutput.number(convert.value);\r\n                acceptable = number !== '0';\r\n            }\r\n            if (acceptable) {\r\n                if (!closest || Core_Core.isMoreNormal(closest, convert, transform, forOutput)) {\r\n                    closest = convert;\r\n                }\r\n            }\r\n        });\r\n        return closest || this;\r\n    };\r\n    /**\r\n     * Calculates the sum of this value and the given addend scaled by some\r\n     * factor. This is equivalent to `result = this + (addend * scale)`.\r\n     *\r\n     * @param addend The value to add to this.\r\n     * @param scale The factor to scale the addend by before adding it to this.\r\n     * @return A new instance.\r\n     */\r\n    Value.prototype.add = function (addend, scale) {\r\n        if (scale === void 0) { scale = 1; }\r\n        var rateScale = this.getRateScale(addend.rateGroup);\r\n        var totalScale = rateScale * scale;\r\n        var num = this.num * addend.den + addend.num * this.den * totalScale;\r\n        var den = this.den * addend.den;\r\n        var result = this.value + addend.value * totalScale;\r\n        return new Value(result, num, den, this.unit, this.group, this.rate, this.rateGroup);\r\n    };\r\n    /**\r\n     * Calculates the difference between this value and the subtrahend scaled by\r\n     * some factor. This is equivalent to `result = this - (subtrahend * scale)`.\r\n     *\r\n     * @param subtrahend The value to subtract from this.\r\n     * @param scale The factor to scale the subtrahend by before subtraction.\r\n     * @return A new instance.\r\n     */\r\n    Value.prototype.sub = function (subtrahend, scale) {\r\n        if (scale === void 0) { scale = 1; }\r\n        var rateScale = this.getRateScale(subtrahend.rateGroup);\r\n        var totalScale = rateScale * scale;\r\n        var num = this.num * subtrahend.den - subtrahend.num * this.den * totalScale;\r\n        var den = this.den * subtrahend.den;\r\n        var result = this.value - subtrahend.value * totalScale;\r\n        return new Value(result, num, den, this.unit, this.group, this.rate, this.rateGroup);\r\n    };\r\n    /**\r\n     * Calculates a new value by multiplying this by a given factor. This is\r\n     * equivalent to `result = this * scale`.\r\n     *\r\n     * @param scale The factor to scale this instance by.\r\n     * @return A new instance.\r\n     */\r\n    Value.prototype.scale = function (scale) {\r\n        return new Value(this.value * scale, this.num * scale, this.den, this.unit, this.group, this.rate, this.rateGroup);\r\n    };\r\n    /**\r\n     * Calculates a new value by multiplying this by a given value. This is\r\n     * equivalent to `result = this * scale`.\r\n     *\r\n     * @param scale The value to scale this instance by.\r\n     * @return A new instance.\r\n     */\r\n    Value.prototype.mul = function (scale) {\r\n        var rateScale = this.getRateScale(scale.rateGroup);\r\n        var num = this.num * scale.num * rateScale;\r\n        var den = this.den * scale.den;\r\n        var result = this.value * scale.value * rateScale;\r\n        return new Value(result, num, den, this.unit, this.group, this.rate, this.rateGroup);\r\n    };\r\n    /**\r\n     * Converts this value to a string with the given output options taking into\r\n     * account the global options.\r\n     *\r\n     * @param options The options to override the global output options.\r\n     * @return The string representation of this instance.\r\n     * @see [[Output]]\r\n     */\r\n    Value.prototype.output = function (options) {\r\n        var output = Core_Core.globalOutput.extend(options);\r\n        return output.value(this);\r\n    };\r\n    /**\r\n     * Returns the units of this value as a string based on the global output\r\n     * options.\r\n     *\r\n     * @param options The options to override the global output options.\r\n     * @return The string representation of the units of this value.\r\n     * @see [[Output]]\r\n     */\r\n    Value.prototype.units = function (options) {\r\n        var output = Core_Core.globalOutput.extend(options);\r\n        return output.units(this);\r\n    };\r\n    /**\r\n     * Returns a Value instance which is a number with the optional unit and group.\r\n     *\r\n     * @param value The number.\r\n     * @param unit The unit, if any, of the number.\r\n     * @param group The group which matches the unit.\r\n     * @return A new instance.\r\n     */\r\n    Value.fromNumber = function (value, unit, group, rate, rateGroup) {\r\n        if (unit === void 0) { unit = ''; }\r\n        if (group === void 0) { group = null; }\r\n        if (rate === void 0) { rate = ''; }\r\n        if (rateGroup === void 0) { rateGroup = null; }\r\n        return new Value(value, value, 1, unit, group, rate, rateGroup);\r\n    };\r\n    /**\r\n     * Returns a Value instance which tries to be a fraction given a range of\r\n     * denominators. If the number is already whole or a fraction close\r\n     * enough to the number cannot be found a value which is a number is returned.\r\n     *\r\n     * @param value The number to try to find a fraction for.\r\n     * @param unit The unit, if any, of the number.\r\n     * @param group The group which matches the unit.\r\n     * @param minDen The starting denominator to inclusively try.\r\n     * @param maxDen The last denominator to inclusively try.\r\n     * @return A new instance.\r\n     */\r\n    Value.fromNumberWithRange = function (value, unit, group, minDen, maxDen, rate, rateGroup) {\r\n        if (unit === void 0) { unit = ''; }\r\n        if (group === void 0) { group = null; }\r\n        if (minDen === void 0) { minDen = 1; }\r\n        if (maxDen === void 0) { maxDen = 100; }\r\n        if (rate === void 0) { rate = ''; }\r\n        if (rateGroup === void 0) { rateGroup = null; }\r\n        var closestDenominator = 0;\r\n        var closestDistance = -1;\r\n        for (var i = minDen; i <= maxDen; i++) {\r\n            var den = i;\r\n            var num = Math.floor(den * value);\r\n            var actual = num / den;\r\n            var distance = Functions.abs(value - actual);\r\n            if (closestDistance === -1 || distance < closestDistance) {\r\n                closestDistance = distance;\r\n                closestDenominator = den;\r\n            }\r\n        }\r\n        if (closestDistance > Functions.EPSILON) {\r\n            return new Value(value, value, 1, unit, group, rate, rateGroup);\r\n        }\r\n        if (closestDenominator === 0) {\r\n            closestDenominator = 1;\r\n        }\r\n        return new Value(value, Math.floor(value * closestDenominator), closestDenominator, unit, group, rate, rateGroup);\r\n    };\r\n    /**\r\n     * Returns a Value instance which tries to be a fraction based on the\r\n     * denominators of the group. If a valid fraction could not be found then the\r\n     * instance returned will be a number value. Since a unit is not passed here,\r\n     * the preferred unit of the group is used as the unit of the value.\r\n     *\r\n     * @param value The number to try to find a fraction for.\r\n     * @param group The group for the unit and also the denominators to try.\r\n     * @param rateGroup The group for the rate.\r\n     * @return A new instance.\r\n     */\r\n    Value.fromNumberForGroup = function (value, group, rateGroup) {\r\n        return this.fromNumberWithDenominators(value, group.denominators, group.preferredUnit, group, rateGroup ? rateGroup.preferredUnit : '', rateGroup);\r\n    };\r\n    /**\r\n     * Returns a Value instance which tries to be a fraction based on the\r\n     * denominators of the group. If a valid fraction could not be found then the\r\n     * instance returned will be a number value.\r\n     *\r\n     * @param value The number to try to find a fraction for.\r\n     * @param denominators The array of denominators to try.\r\n     * @param unit The unit, if any, of the number.\r\n     * @param group The group which matches the unit.\r\n     * @return A new instance.\r\n     */\r\n    Value.fromNumberWithDenominators = function (value, denominators, unit, group, rate, rateGroup) {\r\n        if (unit === void 0) { unit = ''; }\r\n        if (group === void 0) { group = null; }\r\n        if (rate === void 0) { rate = ''; }\r\n        if (rateGroup === void 0) { rateGroup = null; }\r\n        var closestDenominator = 0;\r\n        var closestDistance = -1;\r\n        for (var i = 0; i < denominators.length; i++) {\r\n            var den = denominators[i];\r\n            var num = Math.floor(den * value);\r\n            var actual = num / den;\r\n            var distance = Functions.abs(value - actual);\r\n            if (closestDistance === -1 || distance < closestDistance) {\r\n                closestDistance = distance;\r\n                closestDenominator = den;\r\n            }\r\n        }\r\n        if (closestDistance > Functions.EPSILON) {\r\n            return new Value(value, value, 1, unit, group, rate, rateGroup);\r\n        }\r\n        if (closestDenominator === 0) {\r\n            closestDenominator = 1;\r\n        }\r\n        return new Value(value, Math.floor(value * closestDenominator), closestDenominator, unit, group, rate, rateGroup);\r\n    };\r\n    /**\r\n     * Returns a Value instance for a given fraction specified by a numerator and\r\n     * denominator.\r\n     *\r\n     * @param num The numerator of the fraction.\r\n     * @param den The denominator of the fraction.\r\n     * @param unit The unit, if any, of the fraction.\r\n     * @param group The group which matches the unit.\r\n     * @return A new instance.\r\n     */\r\n    Value.fromFraction = function (num, den, unit, group, rate, rateGroup) {\r\n        if (unit === void 0) { unit = ''; }\r\n        if (group === void 0) { group = null; }\r\n        if (rate === void 0) { rate = ''; }\r\n        if (rateGroup === void 0) { rateGroup = null; }\r\n        return new Value(num / den, num, den, unit, group, rate, rateGroup);\r\n    };\r\n    /**\r\n     * A value instance which contains invalid numbers.\r\n     */\r\n    Value.INVALID = new Value(Number.NaN, Number.NaN, 1, '', null, '', null);\r\n    return Value;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Range.ts\n\r\n\r\n\r\n\r\n/**\r\n * A pair of minimum and maximum values. A range can be fixed which means the\r\n * minimum and maximum are equivalent - in which case the range behaves like\r\n * a [[Value]].\r\n */\r\nvar Range_Range = (function () {\r\n    /**\r\n     * Creates a new instance of Range given the minimum and maximum values.\r\n     *\r\n     * @param min The minimum value for the range.\r\n     * @param max The maximum value for the range.\r\n     */\r\n    function Range(min, max) {\r\n        this.min = min.value < max.value ? min : max;\r\n        this.max = max.value > min.value ? max : min;\r\n    }\r\n    Object.defineProperty(Range.prototype, \"isValid\", {\r\n        /**\r\n         * True if the min and max are both valid.\r\n         */\r\n        get: function () {\r\n            return this.min.isValid && this.max.isValid;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"isFraction\", {\r\n        /**\r\n         * True if the min or max are a fraction.\r\n         */\r\n        get: function () {\r\n            return this.min.isFraction || this.max.isFraction;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"isDecimal\", {\r\n        /**\r\n         * True if the min and max are decimal.\r\n         */\r\n        get: function () {\r\n            return this.min.isDecimal && this.max.isDecimal;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"isRange\", {\r\n        /**\r\n         * True if the min and max are not the same value.\r\n         */\r\n        get: function () {\r\n            return this.min.value !== this.max.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"isFixed\", {\r\n        /**\r\n         * True if the min and max are the same value.\r\n         */\r\n        get: function () {\r\n            return this.min.value === this.max.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"isZero\", {\r\n        /**\r\n         * True if the min and max are both equal to zero.\r\n         */\r\n        get: function () {\r\n            return this.min.isZero && this.max.isZero;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"isSingular\", {\r\n        /**\r\n         * True if the min and max are both singular (1 or -1).\r\n         */\r\n        get: function () {\r\n            return this.min.isSingular && this.max.isSingular;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"isRate\", {\r\n        /**\r\n         * True if one of min and max are rates.\r\n         */\r\n        get: function () {\r\n            return this.min.isRate && this.max.isRate;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"average\", {\r\n        /**\r\n         * The average number between the min and max.\r\n         */\r\n        get: function () {\r\n            return (this.min.value + this.max.value) * 0.5;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"value\", {\r\n        /**\r\n         * The minimum value of this range.\r\n         */\r\n        get: function () {\r\n            return this.min.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"minimum\", {\r\n        /**\r\n         * The minimum value of this range.\r\n         */\r\n        get: function () {\r\n            return this.min.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"maximum\", {\r\n        /**\r\n         * The maximum value of this range.\r\n         */\r\n        get: function () {\r\n            return this.max.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"unit\", {\r\n        /**\r\n         * The unit which identifies the group of the minimum value or `null` if the\r\n         * minimum value does not have a group.\r\n         */\r\n        get: function () {\r\n            return this.min.group ? this.min.group.unit : null;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Determines if the given range matches this range enough to allow a\r\n     * simple mathematical operation between the two ranges.\r\n     *\r\n     * @param range The range to test.\r\n     * @return True if the groups of the given range match this range.\r\n     */\r\n    Range.prototype.isExactMatch = function (range) {\r\n        return this.min.group === range.min.group &&\r\n            this.max.group === range.max.group &&\r\n            this.min.rateGroup === range.min.rateGroup &&\r\n            this.max.rateGroup === range.max.rateGroup;\r\n    };\r\n    /**\r\n     * Determines if the given range matches this range enough to allow a\r\n     * complex mathematical operation between the two ranges.\r\n     *\r\n     * @param min The minimum of the range to test.\r\n     * @param max The maximum of the range to test.\r\n     * @return True if the min and max have compatible values.\r\n     */\r\n    Range.prototype.isMatch = function (min, max) {\r\n        return this.min.isMatch(min) && this.max.isMatch(max);\r\n    };\r\n    /**\r\n     * @return A range which has the min and max converted to their preferred units.\r\n     * @see [[Value.preferred]]\r\n     */\r\n    Range.prototype.preferred = function () {\r\n        var min = this.min.preferred();\r\n        var max = this.max.preferred();\r\n        return new Range(min, max);\r\n    };\r\n    /**\r\n     * @return A range which has only positive values. If the range is entirely\r\n     *  negative then `null` is returned.\r\n     */\r\n    Range.prototype.positive = function () {\r\n        var minNegative = this.min.value < 0;\r\n        var maxNegative = this.max.value < 0;\r\n        if (maxNegative) {\r\n            return null;\r\n        }\r\n        var min = minNegative ? this.min.zero() : this.min.copy();\r\n        var max = this.max.copy();\r\n        return new Range(min, max);\r\n    };\r\n    /**\r\n     * @return A range which has only negative values. If the range is entirely\r\n     *  positive then `null` is returned.\r\n     */\r\n    Range.prototype.negative = function () {\r\n        var minPositive = this.min.value >= 0;\r\n        var maxPositive = this.max.value >= 0;\r\n        if (minPositive) {\r\n            return null;\r\n        }\r\n        var min = this.min.copy();\r\n        var max = maxPositive ? this.max.zero() : this.max.copy();\r\n        return new Range(min, max);\r\n    };\r\n    /**\r\n     * @return A range which has a non-zero min and max. If both are equial to\r\n     *  zero then `null` is returned.\r\n     */\r\n    Range.prototype.nonzero = function () {\r\n        var minZero = Functions.isZero(this.min.value);\r\n        var maxZero = Functions.isZero(this.max.value);\r\n        if (minZero && maxZero) {\r\n            return null;\r\n        }\r\n        var min = this.min.copy();\r\n        var max = this.max.copy();\r\n        return new Range(min, max);\r\n    };\r\n    /**\r\n     * @return A range with only the maximum value from this range.\r\n     */\r\n    Range.prototype.maxd = function () {\r\n        var fixed = this.max.copy();\r\n        return new Range(fixed, fixed);\r\n    };\r\n    /**\r\n     * @return A range with only the minimum value from this range.\r\n     */\r\n    Range.prototype.mind = function () {\r\n        var fixed = this.min.copy();\r\n        return new Range(fixed, fixed);\r\n    };\r\n    /**\r\n     * Creates a range with with units that best represent the values. This may\r\n     * cause the minimum and maximum values to have different units.\r\n     *\r\n     * @param transform Options to control which units and values are acceptable.\r\n     * @param forOutput The output options that should be used to determine which\r\n     *  value & unit is best.\r\n     * @return A new range.\r\n     * @see [[Value.normalize]]\r\n     */\r\n    Range.prototype.normalize = function (transform, forOutput) {\r\n        var min = this.min.normalize(transform, forOutput);\r\n        var max = this.max.normalize(transform, forOutput);\r\n        return new Range(min, max);\r\n    };\r\n    /**\r\n     * Adds this range and a given range (optionally scaled by a factor) together.\r\n     *\r\n     * @param addend The range to add to this instance.\r\n     * @param scale The factor to multiply the addend by when added it to this\r\n     *  instance.\r\n     * @return a new range.\r\n     * @see [[Value.add]]\r\n     */\r\n    Range.prototype.add = function (addend, scale) {\r\n        if (scale === void 0) { scale = 1; }\r\n        var min = this.min.add(addend.min, scale);\r\n        var max = this.max.add(addend.max, scale);\r\n        return new Range(min, max);\r\n    };\r\n    /**\r\n     * Subtracts a given range (optionally scaled by a factor) from this range.\r\n     *\r\n     * @param subtrahend The range to remove from this instance.\r\n     * @param scale The factor to multiply the subtrahend by when subtracting it\r\n     *  from this instance.\r\n     * @return A new range.\r\n     * @see [[Value.sub]]\r\n     */\r\n    Range.prototype.sub = function (subtrahend, scale) {\r\n        if (scale === void 0) { scale = 1; }\r\n        var min = this.min.sub(subtrahend.min, scale);\r\n        var max = this.max.sub(subtrahend.max, scale);\r\n        return new Range(min, max);\r\n    };\r\n    /**\r\n     * Multiplies this range by a scalar factor.\r\n     *\r\n     * @param scale The amount to multiply the range by.\r\n     * @return A new range.\r\n     * @see [[Value.scale]]\r\n     */\r\n    Range.prototype.scale = function (scale) {\r\n        var min = this.min.scale(scale);\r\n        var max = this.max.scale(scale);\r\n        return new Range(min, max);\r\n    };\r\n    /**\r\n     * Multiplies this range by a scale value.\r\n     *\r\n     * @param scale The amount to multiply the range by.\r\n     * @return A new range.\r\n     * @see [[Value.mul]]\r\n     */\r\n    Range.prototype.mul = function (scale) {\r\n        var min = this.min.mul(scale);\r\n        var max = this.max.mul(scale);\r\n        return new Range(min, max);\r\n    };\r\n    /**\r\n     * Returns a range which is coerced into being represented by fractions if a\r\n     * valid fraction can be determined from the units valid denominators.\r\n     *\r\n     * @return A new range if the minimum and maximum are not fractions, otherwise\r\n     *  the reference to this range is returned.\r\n     * @see [[Value.fractioned]]\r\n     */\r\n    Range.prototype.fractioned = function () {\r\n        if (this.min.isFraction && this.max.isFraction) {\r\n            return this;\r\n        }\r\n        var min = this.min.fractioned();\r\n        var max = this.max.fractioned();\r\n        return new Range(min, max);\r\n    };\r\n    /**\r\n     * Returns a range which has any fraction values converted to numbers.\r\n     *\r\n     * @return A new range if the mimimum or maximum are fractions, otherwise the\r\n     *  the reference to this range is returned.\r\n     * @see [[Value.numbered]]\r\n     */\r\n    Range.prototype.numbered = function () {\r\n        if (!this.min.isFraction && !this.max.isFraction) {\r\n            return this;\r\n        }\r\n        var min = this.min.numbered();\r\n        var max = this.max.numbered();\r\n        return new Range(min, max);\r\n    };\r\n    /**\r\n     * Converts this range to a string with the given output options taking into\r\n     * account the global options.\r\n     *\r\n     * @param options The options to override the global output options.\r\n     * @return The string representation of this instance.\r\n     * @see [[Output]]\r\n     */\r\n    Range.prototype.output = function (options) {\r\n        var output = Core_Core.globalOutput.extend(options);\r\n        return output.range(this);\r\n    };\r\n    /**\r\n     * Creates a fixed range from a given value. A fixed range behaves essentially\r\n     * as a value since the minimum and maximum are equivalent.\r\n     *\r\n     * @param fixed The value to be used as the min and max of the range.\r\n     * @return A new fixed range.\r\n     */\r\n    Range.fromFixed = function (fixed) {\r\n        return new Range(fixed, fixed);\r\n    };\r\n    /**\r\n     * A range instance which contains invalid values.\r\n     */\r\n    Range.INVALID = new Range(Value_Value.INVALID, Value_Value.INVALID);\r\n    return Range;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Base.ts\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Takes user input and returns a new instance of [Base].\r\n */\r\nfunction uz(input) {\r\n    return new Base_Base(input);\r\n}\r\n/**\r\n * The main class which contains a list of ranges and the user input.\r\n */\r\nvar Base_Base = (function () {\r\n    /**\r\n     * Creates a new instance of Base given some user input to parse or an\r\n     * existing list of ranges to use instead.\r\n     *\r\n     * @param input The input to parse if ranges is not provided.\r\n     * @param ranges The already parsed ranges to use for this instance.\r\n     */\r\n    function Base(input, ranges) {\r\n        this.input = input;\r\n        this.ranges = ranges || Parse_Parse.ranges(input);\r\n    }\r\n    /**\r\n     * Scales the ranges in this instance by the given factor and returns a\r\n     * new instance.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('1c, 2.3m').scale(2); // '2c, 4.6m'\r\n     * ```\r\n     *\r\n     * @param amount The factor to scale the ranges in this instance by.\r\n     * @return A new instance.\r\n     * @see [[Range.scale]]\r\n     * @see [[Base.mutate]]\r\n     */\r\n    Base.prototype.scale = function (amount) {\r\n        return this.mutate(function (r) { return r.scale(amount); });\r\n    };\r\n    /**\r\n     * Scales the ranges in this instance by the given value and returns a\r\n     * new instance.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('1c, 3/5m').scale(Value.fromFraction(2, 3)); // '2/3c, 6/15m'\r\n     * ```\r\n     *\r\n     * @param amount The value to scale the ranges in this instance by.\r\n     * @return A new instance.\r\n     * @see [[Range.mul]]\r\n     * @see [[Base.mutate]]\r\n     */\r\n    Base.prototype.mul = function (amount) {\r\n        return this.mutate(function (r) { return r.mul(amount); });\r\n    };\r\n    // 1c, 3m SCALE TO 1/2c = 1/2c, 1.5m\r\n    /**\r\n     * Scales the ranges in this instance up to some value with a unit and returns\r\n     * a new instance. Because this instance might contain ranges, a rangeDelta\r\n     * can be specified to instruct on which value (min or max) to use when\r\n     * calculating how much to scale by.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('1m, 2 - 3c').scaleTo('6c'); // '2m, 4 - 6c'\r\n     * uz('1m, 2 - 3c').scaleTo('6c', 0); // '3m, 6 - 9c'\r\n     * uz('1m, 2 - 3c').scaleTo('6c', 0.5); // '2.4m, 4.8 - 6c'\r\n     * ```\r\n     *\r\n     * @param unitValue A value & unit pair to scale the ranges in this instance to.\r\n     * @param rangeDelta When this instance contains ranges this value instructs\r\n     *  how the scale factor is calculated. A value of 0 means it looks at the\r\n     *  minimum, 1 is the maximum, and 0.5 is the average.\r\n     * @return A new instance.\r\n     * @see [[Base.getScaleTo]]\r\n     * @see [[Base.scale]]\r\n     */\r\n    Base.prototype.scaleTo = function (unitValue, rangeDelta) {\r\n        if (rangeDelta === void 0) { rangeDelta = 1.0; }\r\n        return this.scale(this.getScaleTo(unitValue, rangeDelta));\r\n    };\r\n    /**\r\n     * Changes the units used on each of the ranges in this instance to the\r\n     * preferred unit for each group.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('5 kilos').preferred(); // '5 kg'\r\n     * ```\r\n     *\r\n     * @return A new instance.\r\n     * @see [[Core.setPreferred]]\r\n     * @see [[Range.preferred]]\r\n     * @see [[Base.mutate]]\r\n     */\r\n    Base.prototype.preferred = function () {\r\n        return this.mutate(function (r) { return r.preferred(); });\r\n    };\r\n    /**\r\n     * Drops negative ranges and modifies partially negative ranges so that all\r\n     * values are greater than or equal to zero.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('0c, 2tbsp, -4tbsp').positive(); // '0c, 2tbsp'\r\n     * uz('-2 - 3 in').positive(); // '0 - 3in'\r\n     * ```\r\n     *\r\n     * @return A new instance.\r\n     * @see [[Range.positive]]\r\n     * @see [[Base.mutate]]\r\n     */\r\n    Base.prototype.positive = function () {\r\n        return this.mutate(function (r) { return r.positive(); });\r\n    };\r\n    /**\r\n     * Drops positive ranges and modifies partially positive ranges so that all\r\n     * values are less than zero.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('0c, 2tbsp, -4tbsp').negative(); // '-4tbsp'\r\n     * uz('-2 - 3 in').negative(); // '-2 - 0in'\r\n     * ```\r\n     *\r\n     * @return A new instance.\r\n     * @see [[Range.negative]]\r\n     * @see [[Base.mutate]]\r\n     */\r\n    Base.prototype.negative = function () {\r\n        return this.mutate(function (r) { return r.negative(); });\r\n    };\r\n    /**\r\n     * Drops ranges that are equal to zero.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('0c, 2tbsp').negative(); // '2tbsp'\r\n     * ```\r\n     *\r\n     * @return A new instance.\r\n     * @see [[Range.nonzero]]\r\n     * @see [[Base.mutate]]\r\n     */\r\n    Base.prototype.nonzero = function () {\r\n        return this.mutate(function (r) { return r.nonzero(); });\r\n    };\r\n    /**\r\n     * Converts each range to fractions if a denominator for the specified units\r\n     * yields a fraction close enough to the original value.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('1/2 cup').fractions(); // '1/2 cup'\r\n     * uz('0.3cm').fractions(); // '3/10 cm'\r\n     * uz('0.33 decades').fractions(); // '0.33 decades' closest is 3/10 but that's not close enough\r\n     * ```\r\n     *\r\n     * @return A new instance.\r\n     * @see [[Range.fractioned]]\r\n     * @see [[Base.mutate]]\r\n     */\r\n    Base.prototype.fractions = function () {\r\n        return this.mutate(function (r) { return r.fractioned(); });\r\n    };\r\n    /**\r\n     * Converts each range to numbers if they are fractions.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('1/2 cup').fractions(); // '0.5 cup'\r\n     * uz('0.3cm').fractions(); // '0.3 cm'\r\n     * ```\r\n     *\r\n     * @return A new instance.\r\n     * @see [[Range.numbered]]\r\n     * @see [[Base.mutate]]\r\n     */\r\n    Base.prototype.numbers = function () {\r\n        return this.mutate(function (r) { return r.numbered(); });\r\n    };\r\n    /**\r\n     * Flattens any ranges to their maximum values.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('1 - 3c, 5m').max(); // '3c, 5m'\r\n     * ```\r\n     *\r\n     * @return A new instance or this if this instance has no ranges.\r\n     * @see [[Range.maxd]]\r\n     * @see [[Base.mutate]]\r\n     */\r\n    Base.prototype.max = function () {\r\n        return this.hasRanges ? this.mutate(function (r) { return r.maxd(); }) : this;\r\n    };\r\n    /**\r\n     * Flattens any ranges to their minimum values.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('1 - 3c, 5m').max(); // '1c, 5m'\r\n     * ```\r\n     *\r\n     * @return A new instance or this if this instance has no ranges.\r\n     * @see [[Range.mind]]\r\n     * @see [[Base.mutate]]\r\n     */\r\n    Base.prototype.min = function () {\r\n        return this.hasRanges ? this.mutate(function (r) { return r.mind(); }) : this;\r\n    };\r\n    /**\r\n     * Converts each range to units that best represent the value.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('1.5pt, 12in, 3.14159rad').normalize(); // '3c, 1ft, 180deg'\r\n     * ```\r\n     *\r\n     * @param options Options to control which units and values are acceptable.\r\n     * @param forOutput The output options that should be used to determine which\r\n     *  value & unit is best.\r\n     * @return A new instance.\r\n     * @see [[Transform]]\r\n     * @see [[Output]]\r\n     * @see [[Core.isMoreNormal]]\r\n     * @see [[Core.globalTransform]]\r\n     * @see [[Core.globalOutput]]\r\n     * @see [[Range.normalize]]\r\n     * @see [[Base.mutate]]\r\n     */\r\n    Base.prototype.normalize = function (options, forOutput) {\r\n        var output = Core_Core.globalOutput.extend(forOutput);\r\n        var transform = Core_Core.globalTransform.extend(options);\r\n        return this.mutate(function (r) { return r.normalize(transform, output); });\r\n    };\r\n    /**\r\n     * Joins all ranges of the same classes together and uses the largest unit\r\n     * to represent the sum for the class.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('1c, 1pt').compact(); // '1.5pt'\r\n     * ```\r\n     *\r\n     * @param options Options to control which units and values are acceptable.\r\n     * @return A new instance.\r\n     * @see [[Transform]]\r\n     * @see [[Core.globalTransform]]\r\n     */\r\n    Base.prototype.compact = function (options) {\r\n        var ranges = this.ranges.slice();\r\n        var compacted = [];\r\n        var transform = Core_Core.globalTransform.extend(options);\r\n        // Largest ranges first\r\n        ranges.sort(function (a, b) {\r\n            return b.max.classScaled - a.max.classScaled;\r\n        });\r\n        for (var i = 0; i < ranges.length; i++) {\r\n            var a = ranges[i];\r\n            var min = a.min;\r\n            var max = a.max;\r\n            for (var k = ranges.length - 1; k > i; k--) {\r\n                var b = ranges[k];\r\n                if (a.isMatch(b.min, b.max)) {\r\n                    min = min.add(b.min.convertToValue(min.group, min.rateGroup));\r\n                    max = max.add(b.max.convertToValue(max.group, max.rateGroup));\r\n                    ranges.splice(k, 1);\r\n                }\r\n            }\r\n            var sum = new Range_Range(min, max);\r\n            if (transform.isValidRange(sum)) {\r\n                compacted.push(sum);\r\n            }\r\n        }\r\n        return new Base(this.input, compacted);\r\n    };\r\n    /**\r\n     * Joins all ranges of the same classes together and then separates them\r\n     * into whole number ranges for better readability.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('1.5pt').expand(); // '1pt, 1c'\r\n     * uz('53in').expand(); // '4ft, 5in'\r\n     * uz('2ft, 29in').expand(); // '4ft, 5in'\r\n     * uz('6543mm').expand(); // '6 m, 54 cm, 3 mm'\r\n     * ```\r\n     *\r\n     * @param options Options to control which units and values are acceptable.\r\n     * @return A new instance.\r\n     * @see [[Transform]]\r\n     * @see [[Core.globalTransform]]\r\n     */\r\n    Base.prototype.expand = function (options) {\r\n        var transform = Core_Core.globalTransform.extend(options);\r\n        var compacted = this.compact(transform);\r\n        var ranges = compacted.ranges;\r\n        var expanded = [];\r\n        var _loop_1 = function (i) {\r\n            var range = ranges[i];\r\n            var value = transform.convertWithMax ? range.max : range.min;\r\n            var valueGroup = value.group;\r\n            var valueSign = Functions.sign(value.value);\r\n            var valueRate = value.rateGroup;\r\n            if (valueGroup) {\r\n                valueGroup.matches(transform, true, function (group) {\r\n                    if (!Functions.isZero(value.value)) {\r\n                        var transformed = value.convertToValue(group, valueRate);\r\n                        if (group.isBase) {\r\n                            value = value.zero();\r\n                            expanded.push(Range_Range.fromFixed(transformed));\r\n                        }\r\n                        else if (Functions.abs(transformed.value) >= 1 && Functions.sign(transformed.value) === valueSign) {\r\n                            var truncated = transformed.truncated();\r\n                            value = value.sub(truncated.convertToValue(valueGroup, valueRate));\r\n                            expanded.push(Range_Range.fromFixed(truncated));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                expanded.push(range);\r\n            }\r\n        };\r\n        for (var i = 0; i < ranges.length; i++) {\r\n            _loop_1(i);\r\n        }\r\n        return new Base(this.input, expanded);\r\n    };\r\n    /**\r\n     * Adds the ranges of this instance and the given input together. When the\r\n     * ranges use the same units they are added together, otherwise they are\r\n     * added to the end of the range list.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('1pt').add('2pt, 1c'); // '3pt, 1c'\r\n     * uz('1pt').add('2pt, 1c', 2); // '5pt, 2c'\r\n     * ```\r\n     *\r\n     * @param input An instance or input which can be parsed into an instance.\r\n     * @param scale A number to multiple the input by when adding it to this instance.\r\n     * @return A new instance.\r\n     * @see [[Base.operate]]\r\n     * @see [[Range.add]]\r\n     * @see [[Range.scale]]\r\n     */\r\n    Base.prototype.add = function (input, scale) {\r\n        if (scale === void 0) { scale = 1; }\r\n        return this.operate(input, function (a, b) { return a.add(b, scale); }, function (a) { return a.scale(scale); });\r\n    };\r\n    /**\r\n     * Subtracts the given input from the ranges of this instance. When the ranges\r\n     * use the same units they are subtracted, otherwise they are added to the\r\n     * end of the range list and negated.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('3pt').sub('2pt, 1c'); // '1pt, -1c'\r\n     * uz('1pt').add('2pt, 1c', 2); // '-3pt, -2c'\r\n     * ```\r\n     *\r\n     * @param input An instance or input which can be parsed into an instance.\r\n     * @param scale A number to multiple the input by when subtracting it from this instance.\r\n     * @return A new instance.\r\n     * @see [[Base.operate]]\r\n     * @see [[Range.sub]]\r\n     * @see [[Range.scale]]\r\n     */\r\n    Base.prototype.sub = function (input, scale) {\r\n        if (scale === void 0) { scale = 1; }\r\n        return this.operate(input, function (a, b) { return a.sub(b, scale); }, function (a) { return a.scale(-scale); });\r\n    };\r\n    /**\r\n     * Subtracts the given input from the ranges of this instance. When the ranges\r\n     * use the same units they are subtracted, otherwise they are added to the\r\n     * end of the range list and negated.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('3pt').sub('2pt, 1c'); // '1pt, -1c'\r\n     * uz('1pt').add('2pt, 1c', 2); // '-3pt, -2c'\r\n     * ```\r\n     *\r\n     * @param input An instance or input which can be parsed into an instance.\r\n     * @param operate A function to call when matching ranges are found and an\r\n     *  operation should be performed between them. The range returned by this\r\n     *  function ends up in the result.\r\n     * @param operate.a The first range to operate on.\r\n     * @param operate.b The second range to operate on.\r\n     * @param remainder A function to call on a range that did not have a match\r\n     *  in this instance where the range returned is added to the result.\r\n     * @param remainder.a The remaining range to operate on.\r\n     * @return A new instance.\r\n     * @see [[Range.isExactMatch]]\r\n     */\r\n    Base.prototype.operate = function (input, operate, remainder) {\r\n        var ranges = this.ranges;\r\n        var output = [];\r\n        var other = Parse_Parse.base(input);\r\n        var otherRanges = other.ranges;\r\n        var otherUsed = [];\r\n        for (var i = 0; i < ranges.length; i++) {\r\n            var range = ranges[i];\r\n            for (var k = 0; k < otherRanges.length; k++) {\r\n                if (!otherUsed[k]) {\r\n                    var otherRange = otherRanges[k];\r\n                    if (range.isExactMatch(otherRange)) {\r\n                        range = operate(range, otherRange);\r\n                        otherUsed[k] = true;\r\n                    }\r\n                }\r\n            }\r\n            output.push(range);\r\n        }\r\n        for (var k = 0; k < otherRanges.length; k++) {\r\n            if (!otherUsed[k]) {\r\n                output.push(remainder(otherRanges[k]));\r\n            }\r\n        }\r\n        return new Base(this.input, output);\r\n    };\r\n    /**\r\n     * Joins all ranges of the same classes together and then calculates all\r\n     * equivalent ranges for each range for each valid group according to the\r\n     * given options.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('1.5pt').conversions(); // '3/16gal, 3/4qt, 1 1/2pt, 3c, 24floz, 48tbsp, 144tsp'\r\n     * uz('20celsius, 45deg'); // '68F, 20celsius, 45deg, 0.785rad'\r\n     * ```\r\n     *\r\n     * @param options Options to control which units and values are acceptable.\r\n     * @return A new instance.\r\n     * @see [[Transform]]\r\n     * @see [[Core.globalTransform]]\r\n     * @see [[Value.conversions]]\r\n     */\r\n    Base.prototype.conversions = function (options) {\r\n        var transform = Core_Core.globalTransform.extend(options);\r\n        var compacted = this.compact(options);\r\n        var ranges = compacted.ranges;\r\n        var output = [];\r\n        var _loop_2 = function (i) {\r\n            var range = ranges[i];\r\n            var convert = transform.convertWithMax ? range.max : range.min;\r\n            convert.conversions(transform, false, function (transformed) {\r\n                var min = transform.convertWithMax ? range.min.convertToValue(transformed.group, transformed.rateGroup) : transformed;\r\n                var max = transform.convertWithMax ? transformed : range.max.convertToValue(transformed.group, transformed.rateGroup);\r\n                if (min.value <= transform.max && max.value >= transform.min) {\r\n                    output.push(new Range_Range(min, max));\r\n                }\r\n            });\r\n        };\r\n        for (var i = 0; i < ranges.length; i++) {\r\n            _loop_2(i);\r\n        }\r\n        return new Base(this.input, output);\r\n    };\r\n    /**\r\n     * Executes the given function on each range in this instance and if the\r\n     * function returns a valid range its added to the result.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('1.5pt').mutate(r => r.scale(2)); // '3pt'\r\n     * ```\r\n     *\r\n     * @param mutator The function which may return a range.\r\n     * @return A new instance.\r\n     */\r\n    Base.prototype.mutate = function (mutator) {\r\n        var ranges = [];\r\n        var source = this.ranges;\r\n        for (var i = 0; i < source.length; i++) {\r\n            var mutated = mutator(source[i]);\r\n            if (mutated && mutated.isValid) {\r\n                ranges.push(mutated);\r\n            }\r\n        }\r\n        return new Base(this.input, ranges);\r\n    };\r\n    /**\r\n     * Removes the ranges from this instance that aren't valid according to the\r\n     * transform options provided taking into account the global options.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('1in, 2m').filter({system: Unitz.System.METRIC}); // '2m'\r\n     * ```\r\n     *\r\n     * @param options Options to control which units and values are acceptable.\r\n     * @return A new instance.\r\n     * @see [[Transform]]\r\n     * @see [[Core.globalTransform]]\r\n     * @see [[Transform.isValidRange]]\r\n     */\r\n    Base.prototype.filter = function (options) {\r\n        var transform = Core_Core.globalTransform.extend(options);\r\n        var ranges = this.ranges;\r\n        var filtered = [];\r\n        for (var i = 0; i < ranges.length; i++) {\r\n            var range = ranges[i];\r\n            if (transform.isValidRange(range)) {\r\n                filtered.push(range);\r\n            }\r\n        }\r\n        return new Base(this.input, filtered);\r\n    };\r\n    /**\r\n     * Sorts the ranges in this instance based on the options provided taking into\r\n     * account the global options.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('1in, 3ft, 1.3yd, 1m').sort(); // 1.3yd, 1m, 3ft, 1in\r\n     * uz('1in, 3ft, 1.3yd, 1m').sort({ascending: true}); // 1in, 3ft, 1m, 1.3yd\r\n     * uz('1-3cups, 2-2.5cups, 4in').sort({\r\n     *  type: Unitz.SortType.MIN,\r\n     *  classes: {\r\n     *   Volume: 1,\r\n     *   Length: 2\r\n     *  }\r\n     * }); // 4in, 2 - 2.5cups, 1 - 3cups\r\n     * ```\r\n     *\r\n     * @param options Options to control how sorting is done.\r\n     * @return A new instance.\r\n     * @see [[Sort]]\r\n     * @see [[Core.globalSort]]\r\n     */\r\n    Base.prototype.sort = function (options) {\r\n        var sort = Core_Core.globalSort.extend(options);\r\n        var ranges = this.ranges.slice();\r\n        ranges.sort(sort.getSorter());\r\n        return new Base(this.input, ranges);\r\n    };\r\n    /**\r\n     * Calculates what this instance would need to be scaled by so that the given\r\n     * value & unit pair is equal to the sum of ranges in this instance of the\r\n     * same class. If there are no ranges with the same class then zero is\r\n     * returned. If the sum of ranges with the same class results in an actual\r\n     * range (where min != max) then you can specify how to pick a value from the\r\n     * range with rangeDetla. A value of 0 uses the min, 1 uses the max, and 0.5\r\n     * uses the average between them.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('1m, 2 - 3c').getScaleTo('6c'); // 2\r\n     * uz('1m, 2 - 3c').getScaleTo('6c', 0); // 3\r\n     * uz('1m, 2 - 3c').getScaleTo('6c', 0.5); // 2.4\r\n     * uz('1m, 2 - 3c').getScaleTo('45deg'); // 0\r\n     * ```\r\n  \n     * @param unitValue A value & unit pair to scale the ranges in this instance to.\r\n     * @param rangeDelta When this instance contains ranges this value instructs\r\n     *  how the scale factor is calculated. A value of 0 means it looks at the\r\n     *  minimum, 1 is the maximum, and 0.5 is the average.\r\n     * @return A value to scale by or zero if this instance cannot match the input.\r\n     * @see [[Base.convert]]\r\n     * @see [[Parse.value]]\r\n     */\r\n    Base.prototype.getScaleTo = function (unitValue, rangeDelta) {\r\n        if (rangeDelta === void 0) { rangeDelta = 1.0; }\r\n        var to = Parse_Parse.value(unitValue);\r\n        if (!to.isValid) {\r\n            return 0;\r\n        }\r\n        var converted = this.convert(to.units());\r\n        if (!converted || !converted.isValid) {\r\n            return 0;\r\n        }\r\n        var convertedValue = (converted.maximum - converted.minimum) * rangeDelta + converted.minimum;\r\n        var scale = to.value / convertedValue;\r\n        return scale;\r\n    };\r\n    /**\r\n     * Converts the ranges in this instance to a string with the given output\r\n     * options taking into account the global options.\r\n     *\r\n     * @param options The options to override the global output options.\r\n     * @return The string representation of this instance.\r\n     * @see [[Output]]\r\n     */\r\n    Base.prototype.output = function (options) {\r\n        var output = Core_Core.globalOutput.extend(options);\r\n        return output.ranges(this.ranges);\r\n    };\r\n    /**\r\n     * Converts the appropriate ranges in this instance into the desired unit\r\n     * and returns their converted sum. If the given unit does not map to a group\r\n     * then null is returned. If there are no ranges in this instance in the same\r\n     * class then the range returned is equivalent to zero.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('1in, 1m, 1ft').convert('cm'); // '133.02 cm'\r\n     * uz('60 mph').convert('miles per minute'); // '1 miles/minute'\r\n     * ```\r\n     *\r\n     * @param unit The unit to calculate the sum of.\r\n     * @return A new range which is the sum of ranges in the same class converted\r\n     *  to the desired unit.\r\n     * @see [[Core.getGroup]]\r\n     * @see [[Range.isZero]]\r\n     */\r\n    Base.prototype.convert = function (unit) {\r\n        var unitParsed = Parse_Parse.unit(unit);\r\n        var group = Core_Core.getGroup(unitParsed.unit);\r\n        var rateGroup = Core_Core.getGroup(unitParsed.rate);\r\n        if (!group) {\r\n            return null;\r\n        }\r\n        var ranges = this.ranges;\r\n        var min = new Value_Value(0, 0, 1, unit, group, unitParsed.rate, rateGroup);\r\n        var max = new Value_Value(0, 0, 1, unit, group, unitParsed.rate, rateGroup);\r\n        for (var i = 0; i < ranges.length; i++) {\r\n            var range = ranges[i];\r\n            if (range.isMatch(min, max)) {\r\n                min = min.add(range.min.convertToValue(group, rateGroup));\r\n                max = max.add(range.max.convertToValue(group, rateGroup));\r\n            }\r\n        }\r\n        return new Range_Range(min, max);\r\n    };\r\n    /**\r\n     * Alias for [[Base.convert]].\r\n     */\r\n    Base.prototype.to = function (unit) {\r\n        return this.convert(unit);\r\n    };\r\n    /**\r\n     * Iterates over each range in this instance in order or reversed and passes\r\n     * each one to the given iterate function. If the iterate function returns\r\n     * false the iteration will stop.\r\n     *\r\n     * @param iterate The function to invoke with each range and it's index.\r\n     * @param iterate.range The current range being iterated.\r\n     * @param iterate.index The index of the current range in this instance.\r\n     * @param reverse Whether the iteration should be done forward or backward.\r\n     * @return The reference to this instance.\r\n     */\r\n    Base.prototype.each = function (iterate, reverse) {\r\n        if (reverse === void 0) { reverse = false; }\r\n        var ranges = this.ranges;\r\n        var start = reverse ? ranges.length - 1 : 0;\r\n        var end = reverse ? -1 : ranges.length;\r\n        var move = reverse ? -1 : 1;\r\n        for (var i = start; i !== end; i += move) {\r\n            if (iterate(ranges[i], i) === false) {\r\n                break;\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Returns an array of the classes represented in this instance. If there are\r\n     * no classes in this instance then an empty array is returned.\r\n     *\r\n     * @return An array of the classes in this instance.\r\n     */\r\n    Base.prototype.classes = function () {\r\n        var ranges = this.ranges;\r\n        var classMap = {};\r\n        var classes = [];\r\n        for (var i = 0; i < ranges.length; i++) {\r\n            var range = ranges[i];\r\n            var group = range.min.group;\r\n            if (group) {\r\n                classMap[group.parent.name] = group.parent;\r\n            }\r\n        }\r\n        for (var className in classMap) {\r\n            classes.push(classMap[className]);\r\n        }\r\n        return classes;\r\n    };\r\n    Object.defineProperty(Base.prototype, \"hasRanges\", {\r\n        /**\r\n         * Returns whether this instance has actual ranges. An actual range is where\r\n         * the minimum and maximum values differ.\r\n         *\r\n         * @see [[Range.isRange]]\r\n         */\r\n        get: function () {\r\n            return this.test(false, false, function (r) { return r.isRange; });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Base.prototype, \"hasRates\", {\r\n        /**\r\n         * Returns whether this instance has values or ranges that are rates.\r\n         *\r\n         * @see [[Range.isRate]]\r\n         */\r\n        get: function () {\r\n            return this.test(false, false, function (r) { return r.isRate; });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Base.prototype, \"isValid\", {\r\n        /**\r\n         * Returns whether this instance only has valid ranges. If any of the ranges\r\n         * in this instance are not valid false is returned, otherwise true.\r\n         *\r\n         * @see [[Range.isValid]]\r\n         */\r\n        get: function () {\r\n            return this.test(true, true, function (r) { return r.isValid; });\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Performs a test on the ranges in this instance and returns whether the\r\n     * ranges passed the test. If the `tester` function returns something\r\n     * different than `expected` then the function ends early with `!passed`.\r\n     * If all tests pass then `passed` is returned.\r\n     *\r\n     * @param expected The expected result of the tester.\r\n     * @param passed The value to return if all ranges pass the test.\r\n     * @param tester The function to test a range.\r\n     * @return Return `passed` if all ranges return `expected` from `tester`.\r\n     */\r\n    Base.prototype.test = function (expected, passed, tester) {\r\n        var ranges = this.ranges;\r\n        for (var i = 0; i < ranges.length; i++) {\r\n            if (tester(ranges[i]) != expected) {\r\n                return !passed;\r\n            }\r\n        }\r\n        return passed;\r\n    };\r\n    Object.defineProperty(Base.prototype, \"length\", {\r\n        /**\r\n         * Returns the number of ranges in this instance.\r\n         */\r\n        get: function () {\r\n            return this.ranges.length;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Base.prototype, \"isFixed\", {\r\n        /**\r\n         * Returns true if this instance has a single fixed value.\r\n         *\r\n         * @see [[Range.isFixed]]\r\n         */\r\n        get: function () {\r\n            return this.ranges.length === 1 && this.ranges[0].isFixed;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Base.prototype, \"isRange\", {\r\n        /**\r\n         * Returns true if this instance has a single range.\r\n         *\r\n         * @see [[Range.isRange]]\r\n         */\r\n        get: function () {\r\n            return this.ranges.length === 1 && this.ranges[0].isRange;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Base.prototype, \"isRate\", {\r\n        /**\r\n         * Returns true if this instance has a single rate.\r\n         *\r\n         * @see [[Range.isRate]]\r\n         */\r\n        get: function () {\r\n            return this.ranges.length === 1 && this.ranges[0].isRate;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Base;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Translations.ts\n\r\n\r\n\r\n\r\n/**\r\n * Creates a [[Translator]] which matches against a regular expression and when\r\n * the user input matches the regular expression another handler function is\r\n * called to translate the input. Optionally a constant value can be passed\r\n * to this function and down to the translator.\r\n *\r\n * @param regex The regular expression to match against user input.\r\n * @param handler The function to call if the input matched the expression.\r\n * @param vars The constant value to pass to the [[RegexTranslator]].\r\n * @return A [[Translator]] function.\r\n */\r\nfunction newRegexTranslator(regex, handler, vars) {\r\n    return function (x) {\r\n        var matches = x.match(regex);\r\n        if (matches) {\r\n            x = handler(matches, vars);\r\n        }\r\n        return x;\r\n    };\r\n}\r\n/**\r\n * The class which holds [[Translator]]s to manipulate user input into something\r\n * more understandable to the [[Parse]] class.\r\n */\r\nvar Translations_Translations = (function () {\r\n    function Translations() {\r\n    }\r\n    /**\r\n     * Adds all translators in the library to be available when parsing.\r\n     */\r\n    Translations.addDefaults = function () {\r\n        this.add(this.Quantity);\r\n        this.add(this.NumberWords);\r\n        this.add(this.FractionOfNumber);\r\n        this.add(this.AndFraction);\r\n        this.add(this.QuantityValue);\r\n    };\r\n    /**\r\n     * Adds the given translator to the list of registered translators. This\r\n     * translator will be called last.\r\n     *\r\n     * @param translator The function which translates user input.\r\n  \n     */\r\n    Translations.add = function (translator) {\r\n        this.registered.push(translator);\r\n    };\r\n    /**\r\n     * Translates the user input based on the registered translators and returns\r\n     * the final string ready to be parsed.\r\n     *\r\n     * @param input The input to translate.\r\n     * @return The translated string.\r\n     */\r\n    Translations.translate = function (input) {\r\n        var registered = this.registered;\r\n        for (var i = 0; i < registered.length; i++) {\r\n            input = registered[i](input);\r\n        }\r\n        return input;\r\n    };\r\n    /**\r\n     * An array of translators that have been registered.\r\n     *\r\n     * @see [[Translations.add]]\r\n     */\r\n    Translations.registered = [];\r\n    /**\r\n     * A translator which takes a word which represents a number and converts it\r\n     * the respective number.\r\n     *\r\n     * *Examples:*\r\n     * - one [unit]\r\n     * - dozen [unit]\r\n     * - an eleven [unit]\r\n     */\r\n    Translations.NumberWords = newRegexTranslator(/^(an?\\s+|)(one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve|dozen|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen|twenty|thirty|fourty|fifty|sixty|seventy|eighty|ninety)\\s+(.*)/i, function (matches, vars) {\r\n        var wordName = matches[2];\r\n        var remaining = matches[3];\r\n        return vars[wordName] + ' ' + remaining;\r\n    }, {\r\n        one: '1',\r\n        two: '2',\r\n        three: '3',\r\n        four: '4',\r\n        five: '5',\r\n        six: '6',\r\n        seven: '7',\r\n        eight: '8',\r\n        nine: '9',\r\n        ten: '10',\r\n        eleven: '11',\r\n        twelve: '12',\r\n        dozen: '12',\r\n        thirteen: '13',\r\n        fouteen: '14',\r\n        fifteen: '15',\r\n        sixteen: '16',\r\n        seventeen: '17',\r\n        eighteen: '18',\r\n        nineteen: '19',\r\n        twenty: '20',\r\n        thirty: '30',\r\n        fourty: '40',\r\n        fifty: '50',\r\n        sixty: '60',\r\n        seventy: '70',\r\n        eighty: '80',\r\n        ninety: '90'\r\n    });\r\n    /**\r\n     * A translator which takes a word which represents a fraction and multiplies\r\n     * it by the following value.\r\n     *\r\n     * *Examples:*\r\n     * - a third of an acre\r\n     * - half a dozen eggs\r\n     * - a seventh of a mile\r\n     */\r\n    Translations.FractionOfNumber = newRegexTranslator(/^(an?\\s+|one|)(half|third|fourth|fifth|sixth|seventh|eighth|nineth|tenth)\\s+(a\\s+|an\\s+|of\\s+an?\\s+|of\\s+)(.*)/i, function (matches, vars) {\r\n        var remaining = matches[4];\r\n        var parsed = Parse_Parse.valueFromString(remaining);\r\n        var fractionName = matches[2].toLowerCase();\r\n        var fraction = vars[fractionName];\r\n        return parsed.mul(fraction).output(Core_Core.globalOutput);\r\n    }, {\r\n        half: Value_Value.fromFraction(1, 2),\r\n        third: Value_Value.fromFraction(1, 3),\r\n        fourth: Value_Value.fromFraction(1, 4),\r\n        fifth: Value_Value.fromFraction(1, 5),\r\n        sixth: Value_Value.fromFraction(1, 6),\r\n        seventh: Value_Value.fromFraction(1, 7),\r\n        eighth: Value_Value.fromFraction(1, 8),\r\n        nineth: Value_Value.fromFraction(1, 9),\r\n        tenth: Value_Value.fromFraction(1, 10)\r\n    });\r\n    /**\r\n     * A translator which takes a word which represents a fraction and multiplies\r\n     * it by the following value.\r\n     *\r\n     * *Examples:*\r\n     * - 23 and a half eggs\r\n     * - one and a half acres\r\n     * - 23 and a third\r\n     * - 12 and one fourth\r\n     */\r\n    Translations.AndFraction = newRegexTranslator(/^(.*)\\s+and\\s+(an?|one)\\s+(half|third|fourth|fifth|sixth|seventh|eighth|nineth|tenth)\\s*(.*)/i, function (matches, vars) {\r\n        var prefix = matches[1];\r\n        var units = matches[4];\r\n        var value = Parse_Parse.valueFromString(prefix + units);\r\n        var fractionName = matches[3].toLowerCase();\r\n        var fraction = vars[fractionName];\r\n        return value.add(fraction).output(Core_Core.globalOutput);\r\n    }, {\r\n        half: Value_Value.fromFraction(1, 2),\r\n        third: Value_Value.fromFraction(1, 3),\r\n        fourth: Value_Value.fromFraction(1, 4),\r\n        fifth: Value_Value.fromFraction(1, 5),\r\n        sixth: Value_Value.fromFraction(1, 6),\r\n        seventh: Value_Value.fromFraction(1, 7),\r\n        eighth: Value_Value.fromFraction(1, 8),\r\n        nineth: Value_Value.fromFraction(1, 9),\r\n        tenth: Value_Value.fromFraction(1, 10)\r\n    });\r\n    /**\r\n     * A translator which takes the amount in parenthesis and moves it out.\r\n     *\r\n     * *Examples:*\r\n     * - (one and a half) acre\r\n     * - (12) tacos\r\n     */\r\n    Translations.Quantity = newRegexTranslator(/^\\((.*)\\)(.*)$/, function (matches) {\r\n        var quantity = matches[1];\r\n        var unit = matches[2];\r\n        return quantity + unit;\r\n    });\r\n    /**\r\n     * A translator which takes the amount in parenthesis and moves it out.\r\n     *\r\n     * *Examples:*\r\n     * - 1 (6 ounce)\r\n     * - 5 (3 liter)\r\n     */\r\n    Translations.QuantityValue = newRegexTranslator(/^\\s*((-?\\d*)(\\s+(\\d+))?(\\s*\\/\\s*(\\d+)|\\.(\\d+)|))\\s*\\(\\s*((-?\\d*)(\\s+(\\d+))?(\\s*\\/\\s*(\\d+)|\\.(\\d+)|)\\s*(.*))\\s*\\)\\s*$/i, function (matches) {\r\n        var quantityInput = matches[1];\r\n        var quantity = Parse_Parse.valueFromString(quantityInput);\r\n        var alternativeInput = matches[8];\r\n        var alternative = Parse_Parse.valueFromString(alternativeInput);\r\n        return alternative.mul(quantity).output(Core_Core.globalOutput);\r\n    });\r\n    return Translations;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Rates.ts\n\r\n/**\r\n * The class which holds [[Rate]]s mapped by their abbreviations.\r\n */\r\nvar Rates = (function () {\r\n    function Rates() {\r\n    }\r\n    /**\r\n     * Adds all rates in the library to be available when parsing.\r\n     */\r\n    Rates.addDefaults = function () {\r\n        this.add('miles', 'hour', ['mph']);\r\n        this.add('nautical miles', 'hour', ['knot']);\r\n        this.add('kilometers', 'hour', ['kph', 'kmph', 'km. hr.', 'k.p.h.', 'k.m.p.h.', 'km:h']);\r\n    };\r\n    /**\r\n     * Adds one or many rates given the unit, rate, and all abbreviations.\r\n     *\r\n     * @param unit The unit.\r\n     * @param rate The rate unit.\r\n     * @param names The list of abbreviations for this rate.\r\n     */\r\n    Rates.add = function (unit, rate, names) {\r\n        for (var i = 0; i < names.length; i++) {\r\n            this.registered[names[i].toLowerCase()] = { unit: unit, rate: rate };\r\n        }\r\n    };\r\n    /**\r\n     * Gets the rate for the given input or `undefined` if none exists.\r\n     *\r\n     * @param input The input to find a rate for.\r\n     * @return The rate mapped by the input, otherwise `undefined`.\r\n     */\r\n    Rates.get = function (input) {\r\n        return this.registered[input.toLowerCase()];\r\n    };\r\n    /**\r\n     * An object of rates mapped by their abbreviation.\r\n     *\r\n     * @see [[Rates.add]]\r\n     */\r\n    Rates.registered = {};\r\n    return Rates;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Parse.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * The class which takes user input and parses it to specific structures.\r\n */\r\nvar Parse_Parse = (function () {\r\n    function Parse() {\r\n    }\r\n    /**\r\n     * Parses user input into a [[Base]] instance.\r\n     *\r\n     * @param input The input to parse into a Base.\r\n     * @return The instance parsed from the input.\r\n     */\r\n    Parse.base = function (input) {\r\n        if (input instanceof Base_Base) {\r\n            return input;\r\n        }\r\n        return new Base_Base(input);\r\n    };\r\n    /**\r\n     * Parses user input into a an array of [[Range]]s.\r\n     *\r\n     * @param input The input to parse.\r\n     * @return The instances parsed from the input.\r\n     */\r\n    Parse.ranges = function (input) {\r\n        if (Functions.isArray(input)) {\r\n            return this.rangesFromArray(input);\r\n        }\r\n        else if (Functions.isString(input)) {\r\n            return this.rangesFromString(input);\r\n        }\r\n        else if (Functions.isRangeDefinition(input)) {\r\n            return this.rangesFromArray([input]);\r\n        }\r\n        else if (Functions.isValueDefinition(input)) {\r\n            return this.rangesFromArray([input]);\r\n        }\r\n        return [];\r\n    };\r\n    /**\r\n     * Parses user input into a an array of [[Range]]s.\r\n     *\r\n     * @param input The input to parse.\r\n     * @return The instances parsed from the input.\r\n     */\r\n    Parse.rangesFromArray = function (input) {\r\n        var ranges = [];\r\n        for (var i = 0; i < input.length; i++) {\r\n            var range = this.range(input[i]);\r\n            ranges.push(range);\r\n        }\r\n        return ranges;\r\n    };\r\n    /**\r\n     * Parses user input into a an array of [[Range]]s.\r\n     *\r\n     * @param input The input to parse.\r\n     * @return The instances parsed from the input.\r\n     */\r\n    Parse.rangesFromString = function (input) {\r\n        var ranges = input.split(this.REGEX_LIST);\r\n        return this.rangesFromArray(ranges);\r\n    };\r\n    /**\r\n     * Parses user input into a [[Range]].\r\n     *\r\n     * @param input The input to parse.\r\n     * @return The instance parsed from the input.\r\n     */\r\n    Parse.range = function (input) {\r\n        if (Functions.isString(input)) {\r\n            return this.rangeFromString(input);\r\n        }\r\n        else if (Functions.isRangeDefinition(input)) {\r\n            var range = input;\r\n            var min = this.value(range.min);\r\n            var max = this.value(range.max);\r\n            return new Range_Range(min, max);\r\n        }\r\n        return Range_Range.INVALID;\r\n    };\r\n    /**\r\n     * Parses user input into a [[Range]].\r\n     *\r\n     * @param input The input to parse.\r\n     * @return The instance parsed from the input.\r\n     */\r\n    Parse.rangeFromString = function (input) {\r\n        var matches = this.REGEX_RANGE.exec(input);\r\n        if (!matches) {\r\n            var fixed = this.valueFromString(input);\r\n            return new Range_Range(fixed, fixed);\r\n        }\r\n        var minInput = matches[1];\r\n        var maxInput = matches[2];\r\n        var minParsed = this.input(minInput);\r\n        var maxParsed = this.input(maxInput);\r\n        if (!minParsed || !maxParsed) {\r\n            return Range_Range.INVALID;\r\n        }\r\n        var minUnit = minParsed.unit || maxParsed.unit;\r\n        var maxUnit = maxParsed.unit || minParsed.unit;\r\n        var minRate = minParsed.rate || maxParsed.rate;\r\n        var maxRate = maxParsed.rate || minParsed.rate;\r\n        var min = this.valueFromResult(minParsed, minUnit, minRate);\r\n        var max = this.valueFromResult(maxParsed, maxUnit, maxRate);\r\n        return new Range_Range(min, max);\r\n    };\r\n    /**\r\n     * Parses user input into a [[Value]].\r\n     *\r\n     * @param input The input to parse.\r\n     * @return The instance parsed from the input.\r\n     */\r\n    Parse.value = function (input) {\r\n        if (Functions.isString(input)) {\r\n            return this.valueFromString(input);\r\n        }\r\n        else if (Functions.isValueDefinition(input)) {\r\n            return this.valueFromValue(input);\r\n        }\r\n        return Value_Value.INVALID;\r\n    };\r\n    /**\r\n     * Parses user input into a [[Value]].\r\n     *\r\n     * @param input The input to parse.\r\n     * @return The instance parsed from the input.\r\n     */\r\n    Parse.valueFromValue = function (input) {\r\n        var givenValue = Functions.isDefined(input.value) ? input.value : 1;\r\n        var num = Functions.isDefined(input.num) ? input.num : givenValue;\r\n        var den = Functions.isDefined(input.den) ? input.den : 1;\r\n        var parsedValue = Functions.isDefined(input.value) ? input.value : num / den;\r\n        var unit = input.unit || '';\r\n        var rate = input.rate || '';\r\n        var group = Core_Core.getGroup(unit);\r\n        var rateGroup = Core_Core.getGroup(rate);\r\n        return new Value_Value(parsedValue, num, den, unit, group, rate, rateGroup);\r\n    };\r\n    /**\r\n     * Parses user input into a [[Value]].\r\n     *\r\n     * @param input The input to parse.\r\n     * @return The instance parsed from the input.\r\n     */\r\n    Parse.valueFromString = function (input) {\r\n        var translated = Translations_Translations.translate(input);\r\n        var parsed = this.input(translated);\r\n        return parsed ? this.valueFromResult(parsed, parsed.unit, parsed.rate) : Value_Value.INVALID;\r\n    };\r\n    /**\r\n     * Parses user input into a [[Value]].\r\n     *\r\n     * @param result The already parsed input.\r\n     * @param unit The unit parsed from the input.\r\n     * @return The instance parsed from the input.\r\n     */\r\n    Parse.valueFromResult = function (result, unit, rateUnit) {\r\n        var group = Core_Core.getGroup(unit);\r\n        var rateGroup = Core_Core.getGroup(rateUnit);\r\n        return new Value_Value(result.value, result.valueNum, result.valueDen, unit, group, rateUnit, rateGroup);\r\n    };\r\n    /**\r\n     * Parses user input into a [[ParseResult]]. If the input is not valid null\r\n     * is returned.\r\n     *\r\n     * *Examples:*\r\n     * - 1tsp\r\n     * - 1 tsp\r\n     * - 1/2 tsp\r\n     * - 1 1/2 tsp\r\n     * - -2 cups\r\n     * - 2.35\"\r\n     *\r\n     * @param input The string to parse a value and unit from.\r\n     * @return The result of the parsing.\r\n     */\r\n    Parse.input = function (input) {\r\n        var matches = this.REGEX_PARSE.exec(input);\r\n        var whole = parseInt(matches[1]);\r\n        var hasWhole = isFinite(whole);\r\n        var sign = matches[1].charAt(0) === '-' ? -1 : 1;\r\n        var num = parseInt(matches[3]);\r\n        var den = parseInt(matches[5]);\r\n        var decimal = matches[6];\r\n        var hasDecimal = isFinite(parseFloat(decimal));\r\n        var _a = this.unit(Functions.trim(matches[7])), unit = _a.unit, rate = _a.rate;\r\n        if (!hasWhole && hasDecimal) {\r\n            whole = 0;\r\n            hasWhole = true;\r\n        }\r\n        if (!hasWhole && !unit) {\r\n            return null;\r\n        }\r\n        var value = 1;\r\n        var valueDen = 1;\r\n        var valueNum = 1;\r\n        if (hasWhole) {\r\n            value = whole;\r\n            valueNum = whole;\r\n            if (isFinite(den)) {\r\n                valueDen = den;\r\n                if (isFinite(num)) {\r\n                    value += (num / den) * sign;\r\n                    valueNum *= den;\r\n                    valueNum += num;\r\n                }\r\n                else {\r\n                    value /= den;\r\n                }\r\n            }\r\n            else if (hasDecimal) {\r\n                var remainder = parseFloat('0.' + decimal);\r\n                value += remainder * sign;\r\n                valueNum += remainder;\r\n            }\r\n            valueNum *= sign;\r\n        }\r\n        return { value: value, valueNum: valueNum, valueDen: valueDen, num: num, den: den, unit: unit, rate: rate };\r\n    };\r\n    /**\r\n     * Parses unit input into a [[Rate]].\r\n     *\r\n     * *Examples:*\r\n     * - m/s\r\n     * - miles per hour\r\n     * - mph\r\n     *\r\n     * @param input The string to parse a unit from.\r\n     * @return The result of the parsing.\r\n     */\r\n    Parse.unit = function (input) {\r\n        var rate = Rates.get(input);\r\n        if (!rate) {\r\n            var units = input.split(this.REGEX_UNIT);\r\n            rate = {\r\n                unit: units[0] ? Functions.trim(units[0]).replace(/\\.$/, '') : '',\r\n                rate: units[2] ? Functions.trim(units[2]).replace(/\\.$/, '') : ''\r\n            };\r\n        }\r\n        return rate;\r\n    };\r\n    /**\r\n     * The regular expression used to split up a string into multiple ranges.\r\n     */\r\n    Parse.REGEX_LIST = /\\s*,\\s*/;\r\n    /**\r\n     * The regular expression used to split up a range string to determine the min\r\n     * and maximum values.\r\n     */\r\n    Parse.REGEX_RANGE = /\\s*(-?[^-]+)-(.+)/;\r\n    /**\r\n     * The regular expression used to parse a value number or fraction and\r\n     * possible unit from a string.\r\n     */\r\n    Parse.REGEX_PARSE = /^\\s*(-?\\d*)(\\s+(\\d+))?(\\s*\\/\\s*(\\d+)|\\.(\\d+)|)\\s*(.*)\\s*$/i;\r\n    /**\r\n     * The regular expression used to split up a unit from a rateUnit.\r\n     */\r\n    Parse.REGEX_UNIT = /\\s*(\\/|\\s+per\\s+)\\s*/i;\r\n    return Parse;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/classes/Angle.ts\n\r\n\r\n\r\n\r\nvar RAD2DEG = 180 / Math.PI;\r\nvar DEG2RAD = Math.PI / 180;\r\n/**\r\n * @hidden\r\n */\r\nvar Angle = new Class_Class('Angle')\r\n    .setBaseConversion('deg', 'rad', function (x) { return x * DEG2RAD; })\r\n    .setBaseConversion('rad', 'deg', function (x) { return x * RAD2DEG; })\r\n    .addGroups([\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'deg',\r\n        baseUnit: 'deg',\r\n        denominators: [],\r\n        units: {\r\n            'deg': Plurality.EITHER,\r\n            '\\xb0': Plurality.EITHER,\r\n            'degrees': Plurality.PLURAL,\r\n            'degree': Plurality.SINGULAR\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'rad',\r\n        baseUnit: 'rad',\r\n        denominators: [],\r\n        units: {\r\n            'rad': Plurality.EITHER,\r\n            'radians': Plurality.PLURAL,\r\n            'radian': Plurality.SINGULAR\r\n        }\r\n    }\r\n])\r\n    .setClassScales();\r\n\n// CONCATENATED MODULE: ./src/classes/Area.ts\n\r\n\r\n\r\n\r\n/**\r\n * @hidden\r\n */\r\nvar Area = new Class_Class('Area')\r\n    .setBaseConversion('sqin', 'sqmm', function (x) { return x * 645.16; })\r\n    .setBaseConversion('sqmm', 'sqin', function (x) { return x * 0.00155; })\r\n    .addGroups([\r\n    {\r\n        system: System.US,\r\n        common: true,\r\n        unit: 'sqin',\r\n        baseUnit: 'sqin',\r\n        denominators: [2, 4, 8, 16],\r\n        units: {\r\n            'sqin': Plurality.EITHER,\r\n            'sq. in': Plurality.EITHER,\r\n            'sq in': Plurality.EITHER,\r\n            'in2': Plurality.EITHER,\r\n            'in^2': Plurality.EITHER,\r\n            'in\\xb2': Plurality.EITHER,\r\n            'inch2': Plurality.SINGULAR,\r\n            'inch^2': Plurality.SINGULAR,\r\n            'inch\\xb2': Plurality.SINGULAR,\r\n            'inches2': Plurality.PLURAL,\r\n            'inches^2': Plurality.PLURAL,\r\n            'inches\\xb2': Plurality.PLURAL,\r\n            'square in': Plurality.EITHER,\r\n            'square inch': Plurality.SINGULAR,\r\n            'square inches': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.US,\r\n        common: true,\r\n        unit: 'sqft',\r\n        relativeUnit: 'sqin',\r\n        relativeScale: 12 * 12,\r\n        denominators: [2, 4, 8, 16],\r\n        units: {\r\n            'sqft': Plurality.EITHER,\r\n            'sq. ft': Plurality.EITHER,\r\n            'sq ft': Plurality.EITHER,\r\n            'ft2': Plurality.EITHER,\r\n            'ft^2': Plurality.EITHER,\r\n            'ft\\xb2': Plurality.EITHER,\r\n            'foot2': Plurality.SINGULAR,\r\n            'foot^2': Plurality.SINGULAR,\r\n            'foot\\xb2': Plurality.SINGULAR,\r\n            'feet2': Plurality.PLURAL,\r\n            'feet^2': Plurality.PLURAL,\r\n            'feet\\xb2': Plurality.PLURAL,\r\n            'square ft': Plurality.EITHER,\r\n            'square foot': Plurality.SINGULAR,\r\n            'square feet': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.US,\r\n        unit: 'sqyd',\r\n        relativeUnit: 'sqft',\r\n        relativeScale: 3 * 3,\r\n        denominators: [2, 3, 4, 8, 9, 16],\r\n        units: {\r\n            'sqyd': Plurality.EITHER,\r\n            'sq. yd': Plurality.EITHER,\r\n            'sq yd': Plurality.EITHER,\r\n            'yd2': Plurality.EITHER,\r\n            'yd^2': Plurality.EITHER,\r\n            'yd\\xb2': Plurality.EITHER,\r\n            'yard2': Plurality.SINGULAR,\r\n            'yard^2': Plurality.SINGULAR,\r\n            'yard\\xb2': Plurality.SINGULAR,\r\n            'yards2': Plurality.PLURAL,\r\n            'yards^2': Plurality.PLURAL,\r\n            'yards\\xb2': Plurality.PLURAL,\r\n            'square yd': Plurality.EITHER,\r\n            'square yard': Plurality.SINGULAR,\r\n            'square yards': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.US,\r\n        common: true,\r\n        unit: 'acre',\r\n        relativeUnit: 'sqyd',\r\n        relativeScale: 4840,\r\n        denominators: [2, 3, 4, 8, 10],\r\n        units: {\r\n            'acre': Plurality.EITHER,\r\n            'acres': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.US,\r\n        common: true,\r\n        unit: 'sqmi',\r\n        relativeUnit: 'acre',\r\n        relativeScale: 640,\r\n        denominators: [2, 3, 4, 8, 10],\r\n        units: {\r\n            'sqmi': Plurality.EITHER,\r\n            'sq. mi': Plurality.EITHER,\r\n            'sq mi': Plurality.EITHER,\r\n            'mi2': Plurality.EITHER,\r\n            'mi^2': Plurality.EITHER,\r\n            'mi\\xb2': Plurality.EITHER,\r\n            'mile2': Plurality.SINGULAR,\r\n            'mile^2': Plurality.SINGULAR,\r\n            'mile\\xb2': Plurality.SINGULAR,\r\n            'miles2': Plurality.PLURAL,\r\n            'miles^2': Plurality.PLURAL,\r\n            'miles\\xb2': Plurality.PLURAL,\r\n            'square mi': Plurality.EITHER,\r\n            'square mile': Plurality.SINGULAR,\r\n            'square miles': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'sqmm',\r\n        baseUnit: 'sqmm',\r\n        denominators: [2, 4, 8, 16],\r\n        units: {\r\n            'sqmm': Plurality.EITHER,\r\n            'sq. mm': Plurality.EITHER,\r\n            'sq mm': Plurality.EITHER,\r\n            'mm2': Plurality.EITHER,\r\n            'mm^2': Plurality.EITHER,\r\n            'mm\\xb2': Plurality.EITHER,\r\n            'millimeter2': Plurality.SINGULAR,\r\n            'millimeter^2': Plurality.SINGULAR,\r\n            'millimeter\\xb2': Plurality.SINGULAR,\r\n            'millimeters2': Plurality.PLURAL,\r\n            'millimeters^2': Plurality.PLURAL,\r\n            'millimeters\\xb2': Plurality.PLURAL,\r\n            'square mm': Plurality.EITHER,\r\n            'square millimeter': Plurality.SINGULAR,\r\n            'square millimeters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'sqcm',\r\n        relativeUnit: 'sqmm',\r\n        relativeScale: 100,\r\n        denominators: [2, 4, 8, 16],\r\n        units: {\r\n            'sqcm': Plurality.EITHER,\r\n            'sq. cm': Plurality.EITHER,\r\n            'sq cm': Plurality.EITHER,\r\n            'cm2': Plurality.EITHER,\r\n            'cm^2': Plurality.EITHER,\r\n            'cm\\xb2': Plurality.EITHER,\r\n            'centimeter2': Plurality.SINGULAR,\r\n            'centimeter^2': Plurality.SINGULAR,\r\n            'centimeter\\xb2': Plurality.SINGULAR,\r\n            'centimeters2': Plurality.PLURAL,\r\n            'centimeters^2': Plurality.PLURAL,\r\n            'centimeters\\xb2': Plurality.PLURAL,\r\n            'square cm': Plurality.EITHER,\r\n            'square centimeter': Plurality.SINGULAR,\r\n            'square centimeters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'sqm',\r\n        relativeUnit: 'sqcm',\r\n        relativeScale: 10000,\r\n        denominators: [2, 4, 8, 16],\r\n        units: {\r\n            'sqm': Plurality.EITHER,\r\n            'sq. m': Plurality.EITHER,\r\n            'sq m': Plurality.EITHER,\r\n            'm2': Plurality.EITHER,\r\n            'm^2': Plurality.EITHER,\r\n            'm\\xb2': Plurality.EITHER,\r\n            'meter2': Plurality.SINGULAR,\r\n            'meter^2': Plurality.SINGULAR,\r\n            'meter\\xb2': Plurality.SINGULAR,\r\n            'meters2': Plurality.PLURAL,\r\n            'meters^2': Plurality.PLURAL,\r\n            'meters\\xb2': Plurality.PLURAL,\r\n            'square m': Plurality.EITHER,\r\n            'square meter': Plurality.SINGULAR,\r\n            'square meters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'sqkm',\r\n        relativeUnit: 'sqm',\r\n        relativeScale: 1000000,\r\n        denominators: [2, 4, 8, 16],\r\n        units: {\r\n            'sqkm': Plurality.EITHER,\r\n            'sq. km': Plurality.EITHER,\r\n            'sq km': Plurality.EITHER,\r\n            'km2': Plurality.EITHER,\r\n            'km^2': Plurality.EITHER,\r\n            'km\\xb2': Plurality.EITHER,\r\n            'kilometer2': Plurality.SINGULAR,\r\n            'kilometer^2': Plurality.SINGULAR,\r\n            'kilometer\\xb2': Plurality.SINGULAR,\r\n            'kilometers2': Plurality.PLURAL,\r\n            'kilometers^2': Plurality.PLURAL,\r\n            'kilometers\\xb2': Plurality.PLURAL,\r\n            'square km': Plurality.EITHER,\r\n            'square kilometer': Plurality.SINGULAR,\r\n            'square kilometers': Plurality.PLURAL\r\n        }\r\n    }\r\n])\r\n    .setClassScales();\r\n\n// CONCATENATED MODULE: ./src/classes/Digital.ts\n\r\n\r\n\r\n\r\n/**\r\n * @hidden\r\n */\r\nvar Digital = new Class_Class('Digital')\r\n    .addGroups([\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'b',\r\n        baseUnit: 'b',\r\n        denominators: [],\r\n        units: {\r\n            'b': Plurality.EITHER,\r\n            'bit': Plurality.SINGULAR,\r\n            'bits': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        unit: 'nibble',\r\n        relativeUnit: 'b',\r\n        relativeScale: 4,\r\n        denominators: [],\r\n        units: {\r\n            'nibble': Plurality.EITHER,\r\n            'nibbles': Plurality.PLURAL,\r\n            'nybble': Plurality.EITHER,\r\n            'nyble': Plurality.EITHER,\r\n            'half-byte': Plurality.EITHER,\r\n            'half byte': Plurality.EITHER,\r\n            'tetrade': Plurality.EITHER,\r\n            'semi-octet': Plurality.EITHER,\r\n            'quadbit': Plurality.EITHER,\r\n            'quartet': Plurality.EITHER\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'B',\r\n        relativeUnit: 'b',\r\n        relativeScale: 8,\r\n        denominators: [2, 8],\r\n        units: {\r\n            'B': Plurality.EITHER,\r\n            'byte': Plurality.SINGULAR,\r\n            'bytes': Plurality.PLURAL\r\n        }\r\n    }\r\n]);\r\naddDigitalUnits(Digital, 'B', 1000, [2, 4, 5, 10], 'byte', 'bytes', [\r\n    ['kB', 'kilo'],\r\n    ['mB', 'mega'],\r\n    ['gB', 'giga'],\r\n    ['tB', 'tera'],\r\n    ['pB', 'peta'],\r\n    ['eB', 'exa'],\r\n    ['zB', 'zetta'],\r\n    ['yB', 'yotta']\r\n]);\r\naddDigitalUnits(Digital, 'B', 1024, [2, 4, 8, 16], 'byte', 'bytes', [\r\n    ['KB', 'kibi'],\r\n    ['MB', 'mebi'],\r\n    ['GB', 'gibi'],\r\n    ['TB', 'tebi'],\r\n    ['PB', 'pebi'],\r\n    ['EB', 'exbi'],\r\n    ['ZB', 'zebi'],\r\n    ['YB', 'yobi']\r\n]);\r\naddDigitalUnits(Digital, 'b', 1000, [2, 4, 5, 10], 'bit', 'bits', [\r\n    ['kb', 'kilo', 'kbit'],\r\n    ['mb', 'mega', 'mbit'],\r\n    ['gb', 'giga', 'gbit'],\r\n    ['tb', 'tera', 'tbit'],\r\n    ['pb', 'peta', 'pbit'],\r\n    ['eb', 'exa', 'ebit'],\r\n    ['zb', 'zetta', 'zbit'],\r\n    ['yb', 'yotta', 'ybit']\r\n]);\r\naddDigitalUnits(Digital, 'b', 1024, [2, 4, 8, 16], 'bit', 'bits', [\r\n    ['kibit', 'kibi'],\r\n    ['mibit', 'mebi'],\r\n    ['gibit', 'gibi'],\r\n    ['tibit', 'tebi'],\r\n    ['pibit', 'pebi'],\r\n    ['eibit', 'exbi'],\r\n    ['zibit', 'zebi'],\r\n    ['yibit', 'yobi']\r\n]);\r\nDigital.setClassScales();\r\nfunction addDigitalUnits(parent, relativeTo, relativeScales, denominators, suffixSingular, suffixPlural, unitAndPrefixes) {\r\n    for (var i = 0; i < unitAndPrefixes.length; i++) {\r\n        var _a = unitAndPrefixes[i], unit = _a[0], prefix = _a[1], extra = _a[2];\r\n        var units = {};\r\n        units[unit] = Plurality.EITHER;\r\n        units[prefix + suffixSingular] = Plurality.SINGULAR;\r\n        units[prefix + suffixPlural] = Plurality.PLURAL;\r\n        if (extra) {\r\n            units[extra] = Plurality.EITHER;\r\n        }\r\n        parent.addGroup({\r\n            system: System.ANY,\r\n            common: true,\r\n            unit: unit,\r\n            relativeUnit: relativeTo,\r\n            relativeScale: relativeScales,\r\n            denominators: denominators,\r\n            units: units\r\n        });\r\n        relativeTo = unit;\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/classes/Length.ts\n\r\n\r\n\r\n\r\n/**\r\n * @hidden\r\n */\r\nvar Length = new Class_Class('Length')\r\n    .setBaseConversion('in', 'mm', function (x) { return x * 25.4; })\r\n    .setBaseConversion('mm', 'in', function (x) { return x * 0.039370; })\r\n    .addGroups([\r\n    {\r\n        system: System.US,\r\n        common: true,\r\n        unit: 'in',\r\n        baseUnit: 'in',\r\n        denominators: [2, 4, 8, 16, 32],\r\n        units: {\r\n            'in': Plurality.EITHER,\r\n            'inch': Plurality.SINGULAR,\r\n            'inches': Plurality.PLURAL,\r\n            '\"': Plurality.EITHER\r\n        }\r\n    },\r\n    {\r\n        system: System.US,\r\n        common: true,\r\n        unit: 'ft',\r\n        relativeUnit: 'in',\r\n        relativeScale: 12,\r\n        denominators: [2],\r\n        units: {\r\n            'ft': Plurality.EITHER,\r\n            'foot': Plurality.SINGULAR,\r\n            'feet': Plurality.PLURAL,\r\n            '\\'': Plurality.EITHER\r\n        }\r\n    },\r\n    {\r\n        system: System.US,\r\n        unit: 'yd',\r\n        relativeUnit: 'ft',\r\n        relativeScale: 3,\r\n        denominators: [],\r\n        units: {\r\n            'yd': Plurality.EITHER,\r\n            'yard': Plurality.SINGULAR,\r\n            'yards': Plurality.PLURAL,\r\n            'yds': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.US,\r\n        common: true,\r\n        unit: 'mi',\r\n        relativeUnit: 'ft',\r\n        relativeScale: 5280,\r\n        denominators: [2, 3, 4, 10],\r\n        units: {\r\n            'mi': Plurality.EITHER,\r\n            'mile': Plurality.SINGULAR,\r\n            'miles': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.US,\r\n        unit: 'league',\r\n        relativeUnit: 'mi',\r\n        relativeScale: 3,\r\n        denominators: [2, 3, 4, 5, 6, 7, 8, 9, 10],\r\n        units: {\r\n            'league': Plurality.EITHER,\r\n            'leagues': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'mm',\r\n        baseUnit: 'mm',\r\n        denominators: [10],\r\n        units: {\r\n            'mm': Plurality.EITHER,\r\n            'millimeter': Plurality.SINGULAR,\r\n            'millimeters': Plurality.PLURAL,\r\n            'millimetre': Plurality.SINGULAR,\r\n            'millimetres': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'cm',\r\n        relativeUnit: 'mm',\r\n        relativeScale: 10,\r\n        denominators: [2, 4, 10],\r\n        units: {\r\n            'cm': Plurality.EITHER,\r\n            'centimeter': Plurality.SINGULAR,\r\n            'centimeters': Plurality.PLURAL,\r\n            'centimetre': Plurality.SINGULAR,\r\n            'centimetres': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        unit: 'dc',\r\n        relativeUnit: 'cm',\r\n        relativeScale: 10,\r\n        denominators: [10],\r\n        units: {\r\n            'dc': Plurality.EITHER,\r\n            'decimeter': Plurality.SINGULAR,\r\n            'decimeters': Plurality.PLURAL,\r\n            'decimetre': Plurality.SINGULAR,\r\n            'decimetres': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'm',\r\n        relativeUnit: 'cm',\r\n        relativeScale: 100,\r\n        denominators: [2, 3, 4, 5, 10],\r\n        units: {\r\n            'm': Plurality.EITHER,\r\n            'meter': Plurality.SINGULAR,\r\n            'meters': Plurality.PLURAL,\r\n            'metre': Plurality.SINGULAR,\r\n            'metres': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'km',\r\n        relativeUnit: 'm',\r\n        relativeScale: 1000,\r\n        denominators: [2, 3, 4, 5, 6, 7, 8, 9, 10],\r\n        units: {\r\n            'km': Plurality.EITHER,\r\n            'kms': Plurality.PLURAL,\r\n            'kilometer': Plurality.SINGULAR,\r\n            'kilometers': Plurality.PLURAL,\r\n            'kilometre': Plurality.SINGULAR,\r\n            'kilometres': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        unit: 'nm',\r\n        relativeUnit: 'm',\r\n        relativeScale: 1852,\r\n        denominators: [2, 3, 4, 5, 10],\r\n        units: {\r\n            'nm': Plurality.EITHER,\r\n            'nmi': Plurality.EITHER,\r\n            'nautical mi': Plurality.EITHER,\r\n            'nautical mile': Plurality.SINGULAR,\r\n            'nautical miles': Plurality.PLURAL\r\n        }\r\n    }\r\n])\r\n    .setClassScales();\r\n\n// CONCATENATED MODULE: ./src/classes/Temperature.ts\n\r\n\r\n\r\n\r\nvar _C_ = '\\xb0C';\r\n/**\r\n * @hidden\r\n */\r\nvar Temperature = new Class_Class('Temperature')\r\n    .setBaseConversion('F', _C_, function (x) { return ((x - 32) * 5 / 9); })\r\n    .setBaseConversion('F', 'K', function (x) { return ((x + 459.67) * 5 / 9); })\r\n    .setBaseConversion(_C_, 'F', function (x) { return ((x * 9 / 5) + 32); })\r\n    .setBaseConversion(_C_, 'K', function (x) { return (x + 273.15); })\r\n    .setBaseConversion('K', _C_, function (x) { return (x - 273.15); })\r\n    .setBaseConversion('K', 'F', function (x) { return ((x * 9 / 5) - 459.67); })\r\n    .addGroups([\r\n    {\r\n        system: System.US,\r\n        common: true,\r\n        unit: 'F',\r\n        baseUnit: 'F',\r\n        denominators: [],\r\n        units: {\r\n            'F': Plurality.EITHER,\r\n            '\\xb0F': Plurality.EITHER,\r\n            'Fahrenheit': Plurality.EITHER\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: _C_,\r\n        baseUnit: _C_,\r\n        denominators: [],\r\n        units: {\r\n            '\\xb0C': Plurality.EITHER,\r\n            'Celsius': Plurality.EITHER\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        unit: 'K',\r\n        baseUnit: 'K',\r\n        denominators: [],\r\n        units: {\r\n            'K': Plurality.EITHER,\r\n            'kelvin': Plurality.SINGULAR,\r\n            'kelvins': Plurality.PLURAL\r\n        }\r\n    }\r\n])\r\n    .setClassScales();\r\n\n// CONCATENATED MODULE: ./src/classes/Time.ts\n\r\n\r\n\r\n\r\n/**\r\n * @hidden\r\n */\r\nvar Time = new Class_Class('Time')\r\n    .addGroups([\r\n    {\r\n        system: System.ANY,\r\n        unit: 'ns',\r\n        baseUnit: 'ns',\r\n        denominators: [10, 100],\r\n        units: {\r\n            'ns': Plurality.EITHER,\r\n            'nanosecond': Plurality.SINGULAR,\r\n            'nanoseconds': Plurality.PLURAL,\r\n            'nano': Plurality.SINGULAR,\r\n            'nanos': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        unit: 'us',\r\n        relativeUnit: 'ns',\r\n        relativeScale: 1000,\r\n        denominators: [10, 100, 1000],\r\n        units: {\r\n            'us': Plurality.EITHER,\r\n            'microsecond': Plurality.SINGULAR,\r\n            'microseconds': Plurality.PLURAL,\r\n            'micro': Plurality.SINGULAR,\r\n            'micros': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'ms',\r\n        relativeUnit: 'us',\r\n        relativeScale: 1000,\r\n        denominators: [10, 100, 1000],\r\n        units: {\r\n            'ms': Plurality.EITHER,\r\n            'millisecond': Plurality.SINGULAR,\r\n            'milliseconds': Plurality.PLURAL,\r\n            'milli': Plurality.SINGULAR,\r\n            'millis': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 's',\r\n        relativeUnit: 'ms',\r\n        relativeScale: 1000,\r\n        denominators: [10, 100, 1000],\r\n        units: {\r\n            's': Plurality.EITHER,\r\n            'second': Plurality.SINGULAR,\r\n            'seconds': Plurality.PLURAL,\r\n            'sec': Plurality.SINGULAR,\r\n            'secs': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'min',\r\n        relativeUnit: 's',\r\n        relativeScale: 60,\r\n        denominators: [2, 3, 4, 60],\r\n        units: {\r\n            'min': Plurality.EITHER,\r\n            'minute': Plurality.SINGULAR,\r\n            'minutes': Plurality.PLURAL,\r\n            'mins': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'hr',\r\n        relativeUnit: 'min',\r\n        relativeScale: 60,\r\n        denominators: [2, 3, 4, 60],\r\n        units: {\r\n            'hr': Plurality.EITHER,\r\n            'hour': Plurality.SINGULAR,\r\n            'hours': Plurality.PLURAL,\r\n            'hrs': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'day',\r\n        relativeUnit: 'hr',\r\n        relativeScale: 24,\r\n        denominators: [2, 3, 4, 6, 24],\r\n        units: {\r\n            'day': Plurality.EITHER,\r\n            'days': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'wk',\r\n        relativeUnit: 'day',\r\n        relativeScale: 7,\r\n        denominators: [7],\r\n        units: {\r\n            'wk': Plurality.EITHER,\r\n            'week': Plurality.SINGULAR,\r\n            'weeks': Plurality.PLURAL,\r\n            'wks': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'yr',\r\n        relativeUnit: 'day',\r\n        relativeScale: 365.2425,\r\n        denominators: [2, 3, 4, 6, 12, 52],\r\n        units: {\r\n            'yr': Plurality.EITHER,\r\n            'year': Plurality.SINGULAR,\r\n            'years': Plurality.PLURAL,\r\n            'yrs': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'score',\r\n        relativeUnit: 'yr',\r\n        relativeScale: 20,\r\n        denominators: [20],\r\n        units: {\r\n            'score': Plurality.EITHER\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        unit: 'biennium',\r\n        relativeUnit: 'yr',\r\n        relativeScale: 2,\r\n        denominators: [],\r\n        units: {\r\n            'biennium': Plurality.EITHER,\r\n            'bienniums': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        unit: 'triennium',\r\n        relativeUnit: 'yr',\r\n        relativeScale: 3,\r\n        denominators: [],\r\n        units: {\r\n            'triennium': Plurality.EITHER,\r\n            'trienniums': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        unit: 'quadrennium',\r\n        relativeUnit: 'yr',\r\n        relativeScale: 4,\r\n        denominators: [],\r\n        units: {\r\n            'quadrennium': Plurality.EITHER,\r\n            'quadrenniums': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        unit: 'lustrum',\r\n        relativeUnit: 'yr',\r\n        relativeScale: 5,\r\n        denominators: [],\r\n        units: {\r\n            'lustrum': Plurality.EITHER,\r\n            'lustrums': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'decade',\r\n        relativeUnit: 'yr',\r\n        relativeScale: 10,\r\n        denominators: [2, 10],\r\n        units: {\r\n            'decade': Plurality.EITHER,\r\n            'decades': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'century',\r\n        relativeUnit: 'yr',\r\n        relativeScale: 100,\r\n        denominators: [2, 10],\r\n        units: {\r\n            'century': Plurality.EITHER,\r\n            'centurys': Plurality.PLURAL,\r\n            'centuries': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'millennium',\r\n        relativeUnit: 'yr',\r\n        relativeScale: 1000,\r\n        denominators: [2, 3, 4],\r\n        units: {\r\n            'millennium': Plurality.EITHER,\r\n            'millenniums': Plurality.PLURAL,\r\n            'millennia': Plurality.PLURAL,\r\n            'millennias': Plurality.PLURAL\r\n        }\r\n    }\r\n])\r\n    .setClassScales();\r\n\n// CONCATENATED MODULE: ./src/classes/Volume.ts\n\r\n\r\n\r\n\r\n/**\r\n * @hidden\r\n */\r\nvar Volume = new Class_Class('Volume')\r\n    .setBaseConversion('tsp', 'ml', function (x) { return x * 4.92892; })\r\n    .setBaseConversion('tsp', 'mm3', function (x) { return x * 4928.92; })\r\n    .setBaseConversion('tsp', 'in3', function (x) { return x * 0.300781; })\r\n    .setBaseConversion('ml', 'tsp', function (x) { return x * 0.202884; })\r\n    .setBaseConversion('ml', 'mm3', function (x) { return x * 1000; })\r\n    .setBaseConversion('ml', 'in3', function (x) { return x * 0.0610237; })\r\n    .setBaseConversion('mm3', 'tsp', function (x) { return x * 0.000202884; })\r\n    .setBaseConversion('mm3', 'ml', function (x) { return x * 0.001; })\r\n    .setBaseConversion('mm3', 'in3', function (x) { return x * 0.0000610237; })\r\n    .setBaseConversion('in3', 'tsp', function (x) { return x * 3.32468; })\r\n    .setBaseConversion('in3', 'ml', function (x) { return x * 16.3871; })\r\n    .setBaseConversion('in3', 'mm3', function (x) { return x * 16387.1; })\r\n    .addGroups([\r\n    {\r\n        system: System.US,\r\n        common: true,\r\n        unit: 'tsp',\r\n        baseUnit: 'tsp',\r\n        denominators: [2, 3, 4],\r\n        units: {\r\n            'tsp': Plurality.EITHER,\r\n            'ts': Plurality.EITHER,\r\n            'tsps': Plurality.PLURAL,\r\n            'teaspoon': Plurality.SINGULAR,\r\n            'teaspoons': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.US,\r\n        common: true,\r\n        unit: 'tbsp',\r\n        relativeUnit: 'tsp',\r\n        relativeScale: 3,\r\n        denominators: [2, 3, 4],\r\n        units: {\r\n            'tbsp': Plurality.EITHER,\r\n            'tbsps': Plurality.PLURAL,\r\n            'tablespoon': Plurality.SINGULAR,\r\n            'tablespoons': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.US,\r\n        common: true,\r\n        unit: 'floz',\r\n        relativeUnit: 'tsp',\r\n        relativeScale: 6,\r\n        denominators: [2, 3, 6],\r\n        units: {\r\n            // 'oz': Plurality.EITHER,\r\n            // 'ounce': Plurality.SINGULAR,\r\n            // 'ounces': Plurality.PLURAL,\r\n            'floz': Plurality.EITHER,\r\n            'fl-oz': Plurality.EITHER,\r\n            'fl oz': Plurality.EITHER,\r\n            'fluid ounce': Plurality.SINGULAR,\r\n            'fluid ounces': Plurality.PLURAL,\r\n            'fl. oz': Plurality.EITHER,\r\n            'oz. fl': Plurality.EITHER,\r\n            'oz fl': Plurality.EITHER\r\n        }\r\n    },\r\n    {\r\n        system: System.US,\r\n        common: true,\r\n        unit: 'c',\r\n        relativeUnit: 'floz',\r\n        relativeScale: 8,\r\n        denominators: [2, 3, 4],\r\n        units: {\r\n            'c': Plurality.EITHER,\r\n            'cup': Plurality.SINGULAR,\r\n            'cups': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.US,\r\n        common: true,\r\n        unit: 'pt',\r\n        relativeUnit: 'c',\r\n        relativeScale: 2,\r\n        denominators: [2, 4, 8],\r\n        units: {\r\n            'pt': Plurality.EITHER,\r\n            'pint': Plurality.SINGULAR,\r\n            'pints': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.US,\r\n        common: true,\r\n        unit: 'qt',\r\n        relativeUnit: 'c',\r\n        relativeScale: 4,\r\n        denominators: [2, 4, 8],\r\n        units: {\r\n            'qt': Plurality.EITHER,\r\n            'quart': Plurality.SINGULAR,\r\n            'quarts': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.US,\r\n        common: true,\r\n        unit: 'gal',\r\n        relativeUnit: 'qt',\r\n        relativeScale: 4,\r\n        denominators: [2, 4, 8, 16],\r\n        units: {\r\n            'gal': Plurality.EITHER,\r\n            'gallon': Plurality.SINGULAR,\r\n            'gallons': Plurality.PLURAL,\r\n            'gals': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'ml',\r\n        baseUnit: 'ml',\r\n        denominators: [2, 10],\r\n        units: {\r\n            'ml': Plurality.EITHER,\r\n            'millilitre': Plurality.SINGULAR,\r\n            'millilitres': Plurality.PLURAL,\r\n            'milliliter': Plurality.SINGULAR,\r\n            'milliliters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        unit: 'cl',\r\n        relativeUnit: 'ml',\r\n        relativeScale: 10,\r\n        denominators: [10],\r\n        units: {\r\n            'cl': Plurality.EITHER,\r\n            'centilitre': Plurality.SINGULAR,\r\n            'centilitres': Plurality.PLURAL,\r\n            'centiliter': Plurality.SINGULAR,\r\n            'centiliters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'l',\r\n        relativeUnit: 'ml',\r\n        relativeScale: 1000,\r\n        denominators: [2, 3, 4, 10],\r\n        units: {\r\n            'l': Plurality.EITHER,\r\n            'litre': Plurality.SINGULAR,\r\n            'litres': Plurality.PLURAL,\r\n            'liter': Plurality.SINGULAR,\r\n            'liters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        unit: 'dl',\r\n        relativeUnit: 'l',\r\n        relativeScale: 10,\r\n        denominators: [10, 100],\r\n        units: {\r\n            'dl': Plurality.EITHER,\r\n            'decalitre': Plurality.SINGULAR,\r\n            'decalitres': Plurality.PLURAL,\r\n            'decaliter': Plurality.SINGULAR,\r\n            'decaliters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'kl',\r\n        relativeUnit: 'l',\r\n        relativeScale: 1000,\r\n        denominators: [10, 100],\r\n        units: {\r\n            'kl': Plurality.EITHER,\r\n            'kilolitre': Plurality.SINGULAR,\r\n            'kilolitres': Plurality.PLURAL,\r\n            'kiloliter': Plurality.SINGULAR,\r\n            'kiloliters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        unit: 'mm3',\r\n        baseUnit: 'mm3',\r\n        denominators: [2, 4, 8],\r\n        units: {\r\n            'mm3': Plurality.EITHER,\r\n            'mm^3': Plurality.EITHER,\r\n            'mm\\xb3': Plurality.EITHER,\r\n            'millimeter3': Plurality.SINGULAR,\r\n            'millimeter^3': Plurality.SINGULAR,\r\n            'millimeter\\xb3': Plurality.SINGULAR,\r\n            'millimeters3': Plurality.PLURAL,\r\n            'millimeters^3': Plurality.PLURAL,\r\n            'millimeters\\xb3': Plurality.PLURAL,\r\n            'cubic mm': Plurality.EITHER,\r\n            'cubic millimeter': Plurality.SINGULAR,\r\n            'cubic millimeters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        unit: 'cm3',\r\n        relativeUnit: 'mm3',\r\n        relativeScale: 1000,\r\n        denominators: [2, 4, 8],\r\n        units: {\r\n            'cm3': Plurality.EITHER,\r\n            'cm^3': Plurality.EITHER,\r\n            'cm\\xb3': Plurality.EITHER,\r\n            'centimeter3': Plurality.SINGULAR,\r\n            'centimeter^3': Plurality.SINGULAR,\r\n            'centimeter\\xb3': Plurality.SINGULAR,\r\n            'centimeters3': Plurality.PLURAL,\r\n            'centimeters^3': Plurality.PLURAL,\r\n            'centimeters\\xb3': Plurality.PLURAL,\r\n            'cubic cm': Plurality.EITHER,\r\n            'cubic centimeter': Plurality.SINGULAR,\r\n            'cubic centimeters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        unit: 'm3',\r\n        relativeUnit: 'cm3',\r\n        relativeScale: 1000000,\r\n        denominators: [2, 4, 8],\r\n        units: {\r\n            'm3': Plurality.EITHER,\r\n            'm^3': Plurality.EITHER,\r\n            'm\\xb3': Plurality.EITHER,\r\n            'meter3': Plurality.SINGULAR,\r\n            'meter^3': Plurality.SINGULAR,\r\n            'meter\\xb3': Plurality.SINGULAR,\r\n            'meters3': Plurality.PLURAL,\r\n            'meters^3': Plurality.PLURAL,\r\n            'meters\\xb3': Plurality.PLURAL,\r\n            'cubic m': Plurality.EITHER,\r\n            'cubic meter': Plurality.SINGULAR,\r\n            'cubic meters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        unit: 'km3',\r\n        relativeUnit: 'm3',\r\n        relativeScale: 1000000000,\r\n        denominators: [2, 4, 8],\r\n        units: {\r\n            'km3': Plurality.EITHER,\r\n            'km^3': Plurality.EITHER,\r\n            'km\\xb3': Plurality.EITHER,\r\n            'kilometer3': Plurality.SINGULAR,\r\n            'kilometer^3': Plurality.SINGULAR,\r\n            'kilometer\\xb3': Plurality.SINGULAR,\r\n            'kilometers3': Plurality.PLURAL,\r\n            'kilometers^3': Plurality.PLURAL,\r\n            'kilometers\\xb3': Plurality.PLURAL,\r\n            'cubic km': Plurality.EITHER,\r\n            'cubic kilometer': Plurality.SINGULAR,\r\n            'cubic kilometers': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.US,\r\n        unit: 'in3',\r\n        baseUnit: 'in3',\r\n        denominators: [2, 4, 8],\r\n        units: {\r\n            'in3': Plurality.EITHER,\r\n            'in^3': Plurality.EITHER,\r\n            'in\\xb3': Plurality.EITHER,\r\n            'inch3': Plurality.SINGULAR,\r\n            'inch^3': Plurality.SINGULAR,\r\n            'inch\\xb3': Plurality.SINGULAR,\r\n            'inches3': Plurality.PLURAL,\r\n            'inches^3': Plurality.PLURAL,\r\n            'inches\\xb3': Plurality.PLURAL,\r\n            'cubic in': Plurality.EITHER,\r\n            'cubic inch': Plurality.SINGULAR,\r\n            'cubic inches': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        unit: 'ft3',\r\n        relativeUnit: 'in3',\r\n        relativeScale: 1728,\r\n        denominators: [2, 4, 8],\r\n        units: {\r\n            'ft3': Plurality.EITHER,\r\n            'ft^3': Plurality.EITHER,\r\n            'ft\\xb3': Plurality.EITHER,\r\n            'foot3': Plurality.SINGULAR,\r\n            'foot^3': Plurality.SINGULAR,\r\n            'foot\\xb3': Plurality.SINGULAR,\r\n            'feet3': Plurality.PLURAL,\r\n            'feet^3': Plurality.PLURAL,\r\n            'feet\\xb3': Plurality.PLURAL,\r\n            'cubic ft': Plurality.EITHER,\r\n            'cubic foot': Plurality.SINGULAR,\r\n            'cubic feet': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        unit: 'yd3',\r\n        relativeUnit: 'ft3',\r\n        relativeScale: 27,\r\n        denominators: [2, 4, 8],\r\n        units: {\r\n            'yd3': Plurality.EITHER,\r\n            'yd^3': Plurality.EITHER,\r\n            'yd\\xb3': Plurality.EITHER,\r\n            'yard3': Plurality.SINGULAR,\r\n            'yard^3': Plurality.SINGULAR,\r\n            'yard\\xb3': Plurality.SINGULAR,\r\n            'yards3': Plurality.PLURAL,\r\n            'yards^3': Plurality.PLURAL,\r\n            'yards\\xb3': Plurality.PLURAL,\r\n            'cubic yd': Plurality.EITHER,\r\n            'cubic yard': Plurality.SINGULAR,\r\n            'cubic yards': Plurality.PLURAL\r\n        }\r\n    }\r\n])\r\n    .setClassScales();\r\n\n// CONCATENATED MODULE: ./src/classes/Weight.ts\n\r\n\r\n\r\n\r\n/**\r\n * @hidden\r\n */\r\nvar Weight = new Class_Class('Weight')\r\n    .setBaseConversion('mg', 'oz', function (x) { return x * 0.000035274; })\r\n    .setBaseConversion('oz', 'mg', function (x) { return x * 28349.5; })\r\n    .addGroups([\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'mg',\r\n        baseUnit: 'mg',\r\n        denominators: [2, 10],\r\n        units: {\r\n            'mg': Plurality.EITHER,\r\n            'milligram': Plurality.SINGULAR,\r\n            'milligrams': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'g',\r\n        relativeUnit: 'mg',\r\n        relativeScale: 1000,\r\n        denominators: [2, 10, 1000],\r\n        units: {\r\n            'g': Plurality.EITHER,\r\n            'gram': Plurality.SINGULAR,\r\n            'grams': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'kg',\r\n        relativeUnit: 'g',\r\n        relativeScale: 1000,\r\n        denominators: [2, 10, 1000],\r\n        units: {\r\n            'kg': Plurality.EITHER,\r\n            'kilo': Plurality.SINGULAR,\r\n            'kilos': Plurality.PLURAL,\r\n            'kilogram': Plurality.SINGULAR,\r\n            'kilograms': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.US,\r\n        common: true,\r\n        unit: 'oz',\r\n        baseUnit: 'oz',\r\n        denominators: [2, 3, 4, 16],\r\n        units: {\r\n            'oz': Plurality.EITHER,\r\n            'ounce': Plurality.SINGULAR,\r\n            'ounces': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.US,\r\n        common: true,\r\n        unit: 'lb',\r\n        relativeUnit: 'oz',\r\n        relativeScale: 16,\r\n        denominators: [2, 3, 4, 16],\r\n        units: {\r\n            'lb': Plurality.EITHER,\r\n            'lbs': Plurality.PLURAL,\r\n            'pound': Plurality.SINGULAR,\r\n            'pounds': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.US,\r\n        common: true,\r\n        unit: 'ton',\r\n        relativeUnit: 'lb',\r\n        relativeScale: 2000,\r\n        denominators: [2, 3, 4, 10],\r\n        units: {\r\n            'ton': Plurality.EITHER,\r\n            'tonne': Plurality.SINGULAR,\r\n            'tons': Plurality.PLURAL,\r\n            'tonnes': Plurality.PLURAL\r\n        }\r\n    }\r\n])\r\n    .setClassScales();\r\n\n// CONCATENATED MODULE: ./src/Classes.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * The class which keeps a reference to the [[Class]] instances available in\r\n * this library.\r\n */\r\nvar Classes_Classes = (function () {\r\n    function Classes() {\r\n    }\r\n    /**\r\n     * Adds all classes in the library to be available when parsing units.\r\n     */\r\n    Classes.addDefaults = function () {\r\n        Core_Core.addClasses(Classes.Weight, Classes.Area, Classes.Time, Classes.Digital, Classes.Temperature, Classes.Angle, Classes.Volume, Classes.Length);\r\n    };\r\n    /**\r\n     * The Angle class which contains the following groups.\r\n     *\r\n     * - degree\r\n     * - radian\r\n     */\r\n    Classes.Angle = Angle;\r\n    /**\r\n     * The Area class which contains the following groups:\r\n     *\r\n     * - square inch\r\n     * - square foot\r\n     * - square yard\r\n     * - acre\r\n     * - square mile\r\n     * - square millimeter\r\n     * - square centimeter\r\n     * - square meter\r\n     * - square kilometer\r\n     */\r\n    Classes.Area = Area;\r\n    /**\r\n     * The Digital class which contains the following groups:\r\n     *\r\n     * - bit\r\n     * - nibble\r\n     * - byte\r\n     * - kilo/mego/giga/tera/peta/exa/zetta/yotta byte\r\n     * - kibi/mebi/gibi/tebi/pebi/exbi/zebi/yobi byte\r\n     * - kilo/mego/giga/tera/peta/exa/zetta/yotta bit\r\n     * - ki/mi/gi/ti/pi/ez/zi/yi bit\r\n     */\r\n    Classes.Digital = Digital;\r\n    /**\r\n     * The Length class which contains the following groups.\r\n     *\r\n     * - inch\r\n     * - foot\r\n     * - yard\r\n     * - mile\r\n     * - league\r\n     * - millimeter\r\n     * - centimeter\r\n     * - decimeter\r\n     * - meter\r\n     * - kilometer\r\n     */\r\n    Classes.Length = Length;\r\n    /**\r\n     * The Temperature class which contains the following groups.\r\n     *\r\n     * - celsius\r\n     * - kelvin\r\n     * - fahrenheit\r\n     */\r\n    Classes.Temperature = Temperature;\r\n    /**\r\n     * The Time class which contains the following groups.\r\n     *\r\n     * - nanosecond\r\n     * - microsecond\r\n     * - millisecond\r\n     * - second\r\n     * - hour\r\n     * - day\r\n     * - week\r\n     * - year\r\n     * - score\r\n     * - biennium\r\n     * - triennium\r\n     * - quadrennium\r\n     * - lustrum\r\n     * - decade\r\n     * - centry\r\n     * - millennium\r\n     */\r\n    Classes.Time = Time;\r\n    /**\r\n     * The Volume clas which contains the following groups.\r\n     *\r\n     * - teaspoon\r\n     * - tablespoon\r\n     * - fluid ounce\r\n     * - cup\r\n     * - pint\r\n     * - quart\r\n     * - gallon\r\n     * - milliliter\r\n     * - centiliter\r\n     * - decaliter\r\n     * - kiloliter\r\n     * - cubic millimeter\r\n     * - cubic centimeter\r\n     * - cubic meter\r\n     * - cubic kilometer\r\n     * - cubic inch\r\n     * - cubic foot\r\n     * - cubic yard\r\n     */\r\n    Classes.Volume = Volume;\r\n    /**\r\n     * The Weight clas which contains the following groups.\r\n     *\r\n     * - milligram\r\n     * - gram\r\n     * - kilogram\r\n     * - ounce\r\n     * - pound\r\n     * - ton\r\n     */\r\n    Classes.Weight = Weight;\r\n    return Classes;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/index.ts\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Plurality\", function() { return Plurality; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"System\", function() { return System; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Functions\", function() { return Functions; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Parse\", function() { return Parse_Parse; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"OutputUnit\", function() { return OutputUnit; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"OutputFormat\", function() { return OutputFormat; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Output\", function() { return Output_Output; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Transform\", function() { return Transform_Transform; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"SortType\", function() { return SortType; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Sort\", function() { return Sort_Sort; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Core\", function() { return Core_Core; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Group\", function() { return Group_Group; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Class\", function() { return Class_Class; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Value\", function() { return Value_Value; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Range\", function() { return Range_Range; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"uz\", function() { return uz; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Base\", function() { return Base_Base; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Classes\", function() { return Classes_Classes; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"newRegexTranslator\", function() { return newRegexTranslator; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Translations\", function() { return Translations_Translations; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Rates\", function() { return Rates; });\n\r\n// Enums\r\n\r\n\r\n// Functions\r\n\r\n\r\n// Secondary\r\n\r\n\r\n\r\n// Core\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Classes\r\n\r\n// Translations\r\n\r\n// Rates\r\n\r\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// unitz.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 90df97b891c542e94d19","\nimport { Functions as fn } from './Functions';\nimport { Core } from './Core';\nimport { Parse } from './Parse';\nimport { Rate } from './Rates';\nimport { RangesInput, BaseInput } from './Types';\nimport { Range, RangeList, RangeMutator } from './Range';\nimport { Group } from './Group';\nimport { Transform, TransformInput } from './Transform';\nimport { Output, OutputInput } from './Output';\nimport { Sort, SortInput } from './Sort';\nimport { Value } from './Value';\nimport { Class } from './Class';\n\n\n/**\n * Takes user input and returns a new instance of [Base].\n */\nexport function uz(input: RangesInput)\n{\n  return new Base(input);\n}\n\n/**\n * The main class which contains a list of ranges and the user input.\n */\nexport class Base\n{\n\n  /**\n   * The input parsed to generate this instance or the input passed from the\n   * parent instance when an operation was performed on it.\n   */\n  public input: RangesInput;\n\n  /**\n   * The list of ranges in this instance.\n   */\n  public ranges: RangeList;\n\n  /**\n   * Creates a new instance of Base given some user input to parse or an\n   * existing list of ranges to use instead.\n   *\n   * @param input The input to parse if ranges is not provided.\n   * @param ranges The already parsed ranges to use for this instance.\n   */\n  public constructor(input: RangesInput, ranges?: RangeList )\n  {\n    this.input = input;\n    this.ranges = ranges || Parse.ranges( input );\n  }\n\n  /**\n   * Scales the ranges in this instance by the given factor and returns a\n   * new instance.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1c, 2.3m').scale(2); // '2c, 4.6m'\n   * ```\n   *\n   * @param amount The factor to scale the ranges in this instance by.\n   * @return A new instance.\n   * @see [[Range.scale]]\n   * @see [[Base.mutate]]\n   */\n  public scale(amount: number): Base\n  {\n    return this.mutate(r => r.scale( amount ));\n  }\n\n  /**\n   * Scales the ranges in this instance by the given value and returns a\n   * new instance.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1c, 3/5m').scale(Value.fromFraction(2, 3)); // '2/3c, 6/15m'\n   * ```\n   *\n   * @param amount The value to scale the ranges in this instance by.\n   * @return A new instance.\n   * @see [[Range.mul]]\n   * @see [[Base.mutate]]\n   */\n  public mul(amount: Value): Base\n  {\n    return this.mutate(r => r.mul( amount ));\n  }\n\n  // 1c, 3m SCALE TO 1/2c = 1/2c, 1.5m\n\n  /**\n   * Scales the ranges in this instance up to some value with a unit and returns\n   * a new instance. Because this instance might contain ranges, a rangeDelta\n   * can be specified to instruct on which value (min or max) to use when\n   * calculating how much to scale by.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1m, 2 - 3c').scaleTo('6c'); // '2m, 4 - 6c'\n   * uz('1m, 2 - 3c').scaleTo('6c', 0); // '3m, 6 - 9c'\n   * uz('1m, 2 - 3c').scaleTo('6c', 0.5); // '2.4m, 4.8 - 6c'\n   * ```\n   *\n   * @param unitValue A value & unit pair to scale the ranges in this instance to.\n   * @param rangeDelta When this instance contains ranges this value instructs\n   *  how the scale factor is calculated. A value of 0 means it looks at the\n   *  minimum, 1 is the maximum, and 0.5 is the average.\n   * @return A new instance.\n   * @see [[Base.getScaleTo]]\n   * @see [[Base.scale]]\n   */\n  public scaleTo(unitValue: string, rangeDelta: number = 1.0): Base\n  {\n    return this.scale( this.getScaleTo(unitValue, rangeDelta) );\n  }\n\n  /**\n   * Changes the units used on each of the ranges in this instance to the\n   * preferred unit for each group.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('5 kilos').preferred(); // '5 kg'\n   * ```\n   *\n   * @return A new instance.\n   * @see [[Core.setPreferred]]\n   * @see [[Range.preferred]]\n   * @see [[Base.mutate]]\n   */\n  public preferred(): Base\n  {\n    return this.mutate(r => r.preferred());\n  }\n\n  /**\n   * Drops negative ranges and modifies partially negative ranges so that all\n   * values are greater than or equal to zero.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('0c, 2tbsp, -4tbsp').positive(); // '0c, 2tbsp'\n   * uz('-2 - 3 in').positive(); // '0 - 3in'\n   * ```\n   *\n   * @return A new instance.\n   * @see [[Range.positive]]\n   * @see [[Base.mutate]]\n   */\n  public positive(): Base\n  {\n    return this.mutate(r => r.positive());\n  }\n\n  /**\n   * Drops positive ranges and modifies partially positive ranges so that all\n   * values are less than zero.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('0c, 2tbsp, -4tbsp').negative(); // '-4tbsp'\n   * uz('-2 - 3 in').negative(); // '-2 - 0in'\n   * ```\n   *\n   * @return A new instance.\n   * @see [[Range.negative]]\n   * @see [[Base.mutate]]\n   */\n  public negative(): Base\n  {\n    return this.mutate(r => r.negative());\n  }\n\n  /**\n   * Drops ranges that are equal to zero.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('0c, 2tbsp').negative(); // '2tbsp'\n   * ```\n   *\n   * @return A new instance.\n   * @see [[Range.nonzero]]\n   * @see [[Base.mutate]]\n   */\n  public nonzero(): Base\n  {\n    return this.mutate(r => r.nonzero());\n  }\n\n  /**\n   * Converts each range to fractions if a denominator for the specified units\n   * yields a fraction close enough to the original value.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1/2 cup').fractions(); // '1/2 cup'\n   * uz('0.3cm').fractions(); // '3/10 cm'\n   * uz('0.33 decades').fractions(); // '0.33 decades' closest is 3/10 but that's not close enough\n   * ```\n   *\n   * @return A new instance.\n   * @see [[Range.fractioned]]\n   * @see [[Base.mutate]]\n   */\n  public fractions(): Base\n  {\n    return this.mutate(r => r.fractioned());\n  }\n\n  /**\n   * Converts each range to numbers if they are fractions.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1/2 cup').fractions(); // '0.5 cup'\n   * uz('0.3cm').fractions(); // '0.3 cm'\n   * ```\n   *\n   * @return A new instance.\n   * @see [[Range.numbered]]\n   * @see [[Base.mutate]]\n   */\n  public numbers(): Base\n  {\n    return this.mutate(r => r.numbered());\n  }\n\n  /**\n   * Flattens any ranges to their maximum values.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1 - 3c, 5m').max(); // '3c, 5m'\n   * ```\n   *\n   * @return A new instance or this if this instance has no ranges.\n   * @see [[Range.maxd]]\n   * @see [[Base.mutate]]\n   */\n  public max(): Base\n  {\n    return this.hasRanges ? this.mutate(r => r.maxd()) : this;\n  }\n\n  /**\n   * Flattens any ranges to their minimum values.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1 - 3c, 5m').max(); // '1c, 5m'\n   * ```\n   *\n   * @return A new instance or this if this instance has no ranges.\n   * @see [[Range.mind]]\n   * @see [[Base.mutate]]\n   */\n  public min(): Base\n  {\n    return this.hasRanges ? this.mutate(r => r.mind()) : this;\n  }\n\n  /**\n   * Converts each range to units that best represent the value.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1.5pt, 12in, 3.14159rad').normalize(); // '3c, 1ft, 180deg'\n   * ```\n   *\n   * @param options Options to control which units and values are acceptable.\n   * @param forOutput The output options that should be used to determine which\n   *  value & unit is best.\n   * @return A new instance.\n   * @see [[Transform]]\n   * @see [[Output]]\n   * @see [[Core.isMoreNormal]]\n   * @see [[Core.globalTransform]]\n   * @see [[Core.globalOutput]]\n   * @see [[Range.normalize]]\n   * @see [[Base.mutate]]\n   */\n  public normalize(options?: TransformInput, forOutput?: OutputInput): Base\n  {\n    let output: Output = Core.globalOutput.extend( forOutput );\n    let transform: Transform = Core.globalTransform.extend( options );\n\n    return this.mutate(r => r.normalize( transform, output ));\n  }\n\n  /**\n   * Joins all ranges of the same classes together and uses the largest unit\n   * to represent the sum for the class.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1c, 1pt').compact(); // '1.5pt'\n   * ```\n   *\n   * @param options Options to control which units and values are acceptable.\n   * @return A new instance.\n   * @see [[Transform]]\n   * @see [[Core.globalTransform]]\n   */\n  public compact(options?: TransformInput): Base\n  {\n    let ranges: RangeList = this.ranges.slice();\n    let compacted: RangeList = [];\n    let transform: Transform = Core.globalTransform.extend( options );\n\n    // Largest ranges first\n    ranges.sort((a, b) =>\n    {\n      return b.max.classScaled - a.max.classScaled;\n    });\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let a: Range = ranges[ i ];\n      let min: Value = a.min;\n      let max: Value = a.max;\n\n      for (let k = ranges.length - 1; k > i; k--)\n      {\n        let b: Range = ranges[ k ];\n\n        if (a.isMatch( b.min, b.max ))\n        {\n          min = min.add( b.min.convertToValue( min.group, min.rateGroup ) );\n          max = max.add( b.max.convertToValue( max.group, max.rateGroup ) );\n\n          ranges.splice( k, 1 );\n        }\n      }\n\n      let sum: Range = new Range( min, max );\n\n      if (transform.isValidRange( sum ))\n      {\n        compacted.push( sum );\n      }\n    }\n\n    return new Base( this.input, compacted );\n  }\n\n  /**\n   * Joins all ranges of the same classes together and then separates them\n   * into whole number ranges for better readability.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1.5pt').expand(); // '1pt, 1c'\n   * uz('53in').expand(); // '4ft, 5in'\n   * uz('2ft, 29in').expand(); // '4ft, 5in'\n   * uz('6543mm').expand(); // '6 m, 54 cm, 3 mm'\n   * ```\n   *\n   * @param options Options to control which units and values are acceptable.\n   * @return A new instance.\n   * @see [[Transform]]\n   * @see [[Core.globalTransform]]\n   */\n  public expand(options?: TransformInput): Base\n  {\n    let transform: Transform = Core.globalTransform.extend( options );\n    let compacted: Base = this.compact( transform );\n    let { ranges } = compacted;\n    let expanded: RangeList = [];\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n      let value: Value = transform.convertWithMax ? range.max : range.min;\n      let valueGroup: Group = value.group;\n      let valueSign: number = fn.sign( value.value );\n      let valueRate: Group = value.rateGroup;\n\n      if (valueGroup)\n      {\n        valueGroup.matches(transform, true, (group) =>\n        {\n          if (!fn.isZero( value.value ))\n          {\n            let transformed = value.convertToValue(group, valueRate);\n\n            if (group.isBase)\n            {\n              value = value.zero();\n\n              expanded.push( Range.fromFixed( transformed ) )\n            }\n            else if (fn.abs( transformed.value ) >= 1 && fn.sign( transformed.value) === valueSign)\n            {\n              let truncated: Value = transformed.truncated();\n\n              value = value.sub( truncated.convertToValue( valueGroup, valueRate ) );\n\n              expanded.push( Range.fromFixed( truncated ) );\n            }\n          }\n        });\n      }\n      else\n      {\n        expanded.push( range );\n      }\n    }\n\n    return new Base( this.input, expanded );\n  }\n\n  /**\n   * Adds the ranges of this instance and the given input together. When the\n   * ranges use the same units they are added together, otherwise they are\n   * added to the end of the range list.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1pt').add('2pt, 1c'); // '3pt, 1c'\n   * uz('1pt').add('2pt, 1c', 2); // '5pt, 2c'\n   * ```\n   *\n   * @param input An instance or input which can be parsed into an instance.\n   * @param scale A number to multiple the input by when adding it to this instance.\n   * @return A new instance.\n   * @see [[Base.operate]]\n   * @see [[Range.add]]\n   * @see [[Range.scale]]\n   */\n  public add(input: BaseInput, scale: number = 1): Base\n  {\n    return this.operate(input, (a, b) => a.add(b, scale), (a) => a.scale( scale ));\n  }\n\n  /**\n   * Subtracts the given input from the ranges of this instance. When the ranges\n   * use the same units they are subtracted, otherwise they are added to the\n   * end of the range list and negated.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('3pt').sub('2pt, 1c'); // '1pt, -1c'\n   * uz('1pt').add('2pt, 1c', 2); // '-3pt, -2c'\n   * ```\n   *\n   * @param input An instance or input which can be parsed into an instance.\n   * @param scale A number to multiple the input by when subtracting it from this instance.\n   * @return A new instance.\n   * @see [[Base.operate]]\n   * @see [[Range.sub]]\n   * @see [[Range.scale]]\n   */\n  public sub(input: BaseInput, scale: number = 1): Base\n  {\n    return this.operate(input, (a, b) => a.sub(b, scale), (a) => a.scale( -scale ));\n  }\n\n  /**\n   * Subtracts the given input from the ranges of this instance. When the ranges\n   * use the same units they are subtracted, otherwise they are added to the\n   * end of the range list and negated.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('3pt').sub('2pt, 1c'); // '1pt, -1c'\n   * uz('1pt').add('2pt, 1c', 2); // '-3pt, -2c'\n   * ```\n   *\n   * @param input An instance or input which can be parsed into an instance.\n   * @param operate A function to call when matching ranges are found and an\n   *  operation should be performed between them. The range returned by this\n   *  function ends up in the result.\n   * @param operate.a The first range to operate on.\n   * @param operate.b The second range to operate on.\n   * @param remainder A function to call on a range that did not have a match\n   *  in this instance where the range returned is added to the result.\n   * @param remainder.a The remaining range to operate on.\n   * @return A new instance.\n   * @see [[Range.isExactMatch]]\n   */\n  public operate(input: BaseInput,\n    operate: (a: Range, b: Range) => Range,\n    remainder: (a: Range) => Range): Base\n  {\n    let ranges: RangeList = this.ranges;\n    let output: RangeList = [];\n\n    let other: Base = Parse.base( input );\n    let otherRanges: RangeList = other.ranges;\n    let otherUsed: boolean[] = [];\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n\n      for (let k = 0; k < otherRanges.length; k++)\n      {\n        if (!otherUsed[ k ])\n        {\n          let otherRange: Range = otherRanges[ k ];\n\n          if (range.isExactMatch( otherRange ))\n          {\n            range = operate( range, otherRange );\n            otherUsed[ k ] = true;\n          }\n        }\n      }\n\n      output.push( range );\n    }\n\n    for (let k = 0; k < otherRanges.length; k++)\n    {\n      if (!otherUsed[ k ])\n      {\n        output.push( remainder( otherRanges[ k ] ) );\n      }\n    }\n\n    return new Base( this.input, output );\n  }\n\n  /**\n   * Joins all ranges of the same classes together and then calculates all\n   * equivalent ranges for each range for each valid group according to the\n   * given options.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1.5pt').conversions(); // '3/16gal, 3/4qt, 1 1/2pt, 3c, 24floz, 48tbsp, 144tsp'\n   * uz('20celsius, 45deg'); // '68F, 20celsius, 45deg, 0.785rad'\n   * ```\n   *\n   * @param options Options to control which units and values are acceptable.\n   * @return A new instance.\n   * @see [[Transform]]\n   * @see [[Core.globalTransform]]\n   * @see [[Value.conversions]]\n   */\n  public conversions(options?: TransformInput): Base\n  {\n    let transform: Transform = Core.globalTransform.extend( options );\n    let compacted: Base = this.compact( options );\n    let ranges: RangeList = compacted.ranges;\n    let output: RangeList = [];\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n      let convert: Value = transform.convertWithMax ? range.max : range.min;\n\n      convert.conversions(transform, false, (transformed) =>\n      {\n        let min: Value = transform.convertWithMax ? range.min.convertToValue( transformed.group, transformed.rateGroup ) : transformed;\n        let max: Value = transform.convertWithMax ? transformed : range.max.convertToValue( transformed.group, transformed.rateGroup );\n\n        if (min.value <= transform.max && max.value >= transform.min)\n        {\n          output.push( new Range( min, max ) );\n        }\n      });\n    }\n\n    return new Base( this.input, output );\n  }\n\n  /**\n   * Executes the given function on each range in this instance and if the\n   * function returns a valid range its added to the result.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1.5pt').mutate(r => r.scale(2)); // '3pt'\n   * ```\n   *\n   * @param mutator The function which may return a range.\n   * @return A new instance.\n   */\n  public mutate(mutator: RangeMutator): Base\n  {\n    let ranges: RangeList = [];\n    let source: RangeList = this.ranges;\n\n    for (let i = 0; i < source.length; i++)\n    {\n      let mutated: Range = mutator( source[ i ] ) ;\n\n      if (mutated && mutated.isValid)\n      {\n        ranges.push( mutated );\n      }\n    }\n\n    return new Base( this.input, ranges );\n  }\n\n  /**\n   * Removes the ranges from this instance that aren't valid according to the\n   * transform options provided taking into account the global options.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1in, 2m').filter({system: Unitz.System.METRIC}); // '2m'\n   * ```\n   *\n   * @param options Options to control which units and values are acceptable.\n   * @return A new instance.\n   * @see [[Transform]]\n   * @see [[Core.globalTransform]]\n   * @see [[Transform.isValidRange]]\n   */\n  public filter(options?: TransformInput): Base\n  {\n    let transform: Transform = Core.globalTransform.extend( options );\n    let ranges: RangeList = this.ranges;\n    let filtered: RangeList = [];\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n\n      if (transform.isValidRange( range ))\n      {\n        filtered.push( range );\n      }\n    }\n\n    return new Base( this.input, filtered );\n  }\n\n  /**\n   * Sorts the ranges in this instance based on the options provided taking into\n   * account the global options.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1in, 3ft, 1.3yd, 1m').sort(); // 1.3yd, 1m, 3ft, 1in\n   * uz('1in, 3ft, 1.3yd, 1m').sort({ascending: true}); // 1in, 3ft, 1m, 1.3yd\n   * uz('1-3cups, 2-2.5cups, 4in').sort({\n   *  type: Unitz.SortType.MIN,\n   *  classes: {\n   *   Volume: 1,\n   *   Length: 2\n   *  }\n   * }); // 4in, 2 - 2.5cups, 1 - 3cups\n   * ```\n   *\n   * @param options Options to control how sorting is done.\n   * @return A new instance.\n   * @see [[Sort]]\n   * @see [[Core.globalSort]]\n   */\n  public sort(options?: SortInput): Base\n  {\n    let sort: Sort = Core.globalSort.extend( options );\n    let ranges: RangeList = this.ranges.slice();\n\n    ranges.sort( sort.getSorter() );\n\n    return new Base( this.input, ranges );\n  }\n\n  /**\n   * Calculates what this instance would need to be scaled by so that the given\n   * value & unit pair is equal to the sum of ranges in this instance of the\n   * same class. If there are no ranges with the same class then zero is\n   * returned. If the sum of ranges with the same class results in an actual\n   * range (where min != max) then you can specify how to pick a value from the\n   * range with rangeDetla. A value of 0 uses the min, 1 uses the max, and 0.5\n   * uses the average between them.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1m, 2 - 3c').getScaleTo('6c'); // 2\n   * uz('1m, 2 - 3c').getScaleTo('6c', 0); // 3\n   * uz('1m, 2 - 3c').getScaleTo('6c', 0.5); // 2.4\n   * uz('1m, 2 - 3c').getScaleTo('45deg'); // 0\n   * ```\n\n   * @param unitValue A value & unit pair to scale the ranges in this instance to.\n   * @param rangeDelta When this instance contains ranges this value instructs\n   *  how the scale factor is calculated. A value of 0 means it looks at the\n   *  minimum, 1 is the maximum, and 0.5 is the average.\n   * @return A value to scale by or zero if this instance cannot match the input.\n   * @see [[Base.convert]]\n   * @see [[Parse.value]]\n   */\n  public getScaleTo(unitValue: string, rangeDelta: number = 1.0): number\n  {\n    let to: Value = Parse.value( unitValue );\n\n    if (!to.isValid)\n    {\n      return 0;\n    }\n\n    let converted: Range = this.convert( to.units() );\n\n    if (!converted || !converted.isValid)\n    {\n      return 0;\n    }\n\n    let convertedValue: number = (converted.maximum - converted.minimum) * rangeDelta + converted.minimum;\n    let scale: number = to.value / convertedValue;\n\n    return scale;\n  }\n\n  /**\n   * Converts the ranges in this instance to a string with the given output\n   * options taking into account the global options.\n   *\n   * @param options The options to override the global output options.\n   * @return The string representation of this instance.\n   * @see [[Output]]\n   */\n  public output(options?: OutputInput): string\n  {\n    let output: Output = Core.globalOutput.extend( options );\n\n    return output.ranges( this.ranges );\n  }\n\n  /**\n   * Converts the appropriate ranges in this instance into the desired unit\n   * and returns their converted sum. If the given unit does not map to a group\n   * then null is returned. If there are no ranges in this instance in the same\n   * class then the range returned is equivalent to zero.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1in, 1m, 1ft').convert('cm'); // '133.02 cm'\n   * uz('60 mph').convert('miles per minute'); // '1 miles/minute'\n   * ```\n   *\n   * @param unit The unit to calculate the sum of.\n   * @return A new range which is the sum of ranges in the same class converted\n   *  to the desired unit.\n   * @see [[Core.getGroup]]\n   * @see [[Range.isZero]]\n   */\n  public convert(unit: string): Range\n  {\n    let unitParsed: Rate = Parse.unit( unit );\n    let group: Group = Core.getGroup( unitParsed.unit );\n    let rateGroup: Group = Core.getGroup( unitParsed.rate );\n\n    if (!group)\n    {\n      return null;\n    }\n\n    let ranges: RangeList = this.ranges;\n    let min: Value = new Value(0, 0, 1, unit, group, unitParsed.rate, rateGroup);\n    let max: Value = new Value(0, 0, 1, unit, group, unitParsed.rate, rateGroup);\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n\n      if (range.isMatch( min, max ))\n      {\n        min = min.add( range.min.convertToValue( group, rateGroup ) );\n        max = max.add( range.max.convertToValue( group, rateGroup ) );\n      }\n    }\n\n    return new Range( min, max );\n  }\n\n  /**\n   * Alias for [[Base.convert]].\n   */\n  public to(unit: string): Range\n  {\n    return this.convert( unit );\n  }\n\n  /**\n   * Iterates over each range in this instance in order or reversed and passes\n   * each one to the given iterate function. If the iterate function returns\n   * false the iteration will stop.\n   *\n   * @param iterate The function to invoke with each range and it's index.\n   * @param iterate.range The current range being iterated.\n   * @param iterate.index The index of the current range in this instance.\n   * @param reverse Whether the iteration should be done forward or backward.\n   * @return The reference to this instance.\n   */\n  public each(iterate: (range: Range, index: number) => any, reverse: boolean = false): this\n  {\n    let ranges: RangeList = this.ranges;\n    let start = reverse ? ranges.length - 1 : 0;\n    let end = reverse ? -1 : ranges.length;\n    let move = reverse ? -1 : 1;\n\n    for (let i = start; i !== end; i += move)\n    {\n      if (iterate( ranges[ i ], i ) === false)\n      {\n        break;\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Returns an array of the classes represented in this instance. If there are\n   * no classes in this instance then an empty array is returned.\n   *\n   * @return An array of the classes in this instance.\n   */\n  public classes(): Class[]\n  {\n    let ranges: RangeList = this.ranges;\n    let classMap = {};\n    let classes: Class[] = [];\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n      let group: Group = range.min.group;\n\n      if (group)\n      {\n        classMap[ group.parent.name ] = group.parent;\n      }\n    }\n\n    for (let className in classMap)\n    {\n      classes.push( classMap[ className ] );\n    }\n\n    return classes;\n  }\n\n  /**\n   * Returns whether this instance has actual ranges. An actual range is where\n   * the minimum and maximum values differ.\n   *\n   * @see [[Range.isRange]]\n   */\n  public get hasRanges(): boolean\n  {\n    return this.test(false, false, (r) => r.isRange);\n  }\n\n  /**\n   * Returns whether this instance has values or ranges that are rates.\n   *\n   * @see [[Range.isRate]]\n   */\n  public get hasRates(): boolean\n  {\n    return this.test(false, false, (r) => r.isRate);\n  }\n\n  /**\n   * Returns whether this instance only has valid ranges. If any of the ranges\n   * in this instance are not valid false is returned, otherwise true.\n   *\n   * @see [[Range.isValid]]\n   */\n  public get isValid(): boolean\n  {\n    return this.test(true, true, (r) => r.isValid);\n  }\n\n  /**\n   * Performs a test on the ranges in this instance and returns whether the\n   * ranges passed the test. If the `tester` function returns something\n   * different than `expected` then the function ends early with `!passed`.\n   * If all tests pass then `passed` is returned.\n   *\n   * @param expected The expected result of the tester.\n   * @param passed The value to return if all ranges pass the test.\n   * @param tester The function to test a range.\n   * @return Return `passed` if all ranges return `expected` from `tester`.\n   */\n  public test(expected: boolean, passed: boolean, tester: (range: Range) => boolean): boolean\n  {\n    let ranges: RangeList = this.ranges;\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      if (tester( ranges[ i ] ) != expected)\n      {\n        return !passed;\n      }\n    }\n\n    return passed;\n  }\n\n  /**\n   * Returns the number of ranges in this instance.\n   */\n  public get length(): number\n  {\n    return this.ranges.length;\n  }\n\n  /**\n   * Returns true if this instance has a single fixed value.\n   *\n   * @see [[Range.isFixed]]\n   */\n  public get isFixed(): boolean\n  {\n    return this.ranges.length === 1 && this.ranges[ 0 ].isFixed;\n  }\n\n  /**\n   * Returns true if this instance has a single range.\n   *\n   * @see [[Range.isRange]]\n   */\n  public get isRange(): boolean\n  {\n    return this.ranges.length === 1 && this.ranges[ 0 ].isRange;\n  }\n\n  /**\n   * Returns true if this instance has a single rate.\n   *\n   * @see [[Range.isRate]]\n   */\n  public get isRate(): boolean\n  {\n    return this.ranges.length === 1 && this.ranges[ 0 ].isRate;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Base.ts","\nimport { Core } from './Core';\nimport { Parse } from './Parse';\nimport { Value } from './Value';\n\n\n/**\n * A function which takes user input and a group factor and converts the user\n * input into another string to be parsed by the next translator or the\n * [[Parse]] class.\n *\n * @param x The input to parse.\n * @return The translated input or the original input.\n */\nexport type Translator = (x: string) => string;\n\n/**\n * A function which provides a regular expression match, a group factory, and\n * a constant variable which was provided earlier to run a translation and\n * return the translated value.\n *\n * @param matches The regular expression group matches.\n * @param vars The constant variable passed to [[newRegexTranslator]].\n */\nexport type RegexTranslator = (matches: any[], vars?: any) => string;\n\n/**\n * Creates a [[Translator]] which matches against a regular expression and when\n * the user input matches the regular expression another handler function is\n * called to translate the input. Optionally a constant value can be passed\n * to this function and down to the translator.\n *\n * @param regex The regular expression to match against user input.\n * @param handler The function to call if the input matched the expression.\n * @param vars The constant value to pass to the [[RegexTranslator]].\n * @return A [[Translator]] function.\n */\nexport function newRegexTranslator(regex: RegExp, handler: RegexTranslator, vars?: any): Translator\n{\n  return (x: string) =>\n  {\n    let matches = x.match( regex );\n\n    if (matches)\n    {\n      x = handler( matches, vars );\n    }\n\n    return x;\n  };\n}\n\n/**\n * The class which holds [[Translator]]s to manipulate user input into something\n * more understandable to the [[Parse]] class.\n */\nexport class Translations\n{\n\n  /**\n   * An array of translators that have been registered.\n   *\n   * @see [[Translations.add]]\n   */\n  public static registered: Translator[] = [];\n\n  /**\n   * Adds all translators in the library to be available when parsing.\n   */\n  public static addDefaults()\n  {\n    this.add( this.Quantity );\n    this.add( this.NumberWords );\n    this.add( this.FractionOfNumber );\n    this.add( this.AndFraction );\n    this.add( this.QuantityValue );\n  }\n\n  /**\n   * Adds the given translator to the list of registered translators. This\n   * translator will be called last.\n   *\n   * @param translator The function which translates user input.\n\n   */\n  public static add(translator: Translator)\n  {\n    this.registered.push( translator );\n  }\n\n  /**\n   * Translates the user input based on the registered translators and returns\n   * the final string ready to be parsed.\n   *\n   * @param input The input to translate.\n   * @return The translated string.\n   */\n  public static translate(input: string): string\n  {\n    let registered = this.registered;\n\n    for (let i = 0; i < registered.length; i++)\n    {\n      input = registered[ i ]( input );\n    }\n\n    return input;\n  }\n\n  /**\n   * A translator which takes a word which represents a number and converts it\n   * the respective number.\n   *\n   * *Examples:*\n   * - one [unit]\n   * - dozen [unit]\n   * - an eleven [unit]\n   */\n  public static NumberWords: Translator =\n    newRegexTranslator(\n      /^(an?\\s+|)(one|two|three|four|five|six|seven|eight|nine|ten|eleven|twelve|dozen|thirteen|fourteen|fifteen|sixteen|seventeen|eighteen|nineteen|twenty|thirty|fourty|fifty|sixty|seventy|eighty|ninety)\\s+(.*)/i,\n      (matches, vars) => {\n        let wordName: string = matches[ 2 ];\n        let remaining: string = matches[ 3 ];\n\n        return vars[ wordName ] + ' ' + remaining;\n      }, {\n        one: '1',\n        two: '2',\n        three: '3',\n        four: '4',\n        five: '5',\n        six: '6',\n        seven: '7',\n        eight: '8',\n        nine: '9',\n        ten: '10',\n        eleven: '11',\n        twelve: '12',\n        dozen: '12',\n        thirteen: '13',\n        fouteen: '14',\n        fifteen: '15',\n        sixteen: '16',\n        seventeen: '17',\n        eighteen: '18',\n        nineteen: '19',\n        twenty: '20',\n        thirty: '30',\n        fourty: '40',\n        fifty: '50',\n        sixty: '60',\n        seventy: '70',\n        eighty: '80',\n        ninety: '90'\n      }\n    );\n\n  /**\n   * A translator which takes a word which represents a fraction and multiplies\n   * it by the following value.\n   *\n   * *Examples:*\n   * - a third of an acre\n   * - half a dozen eggs\n   * - a seventh of a mile\n   */\n  public static FractionOfNumber: Translator =\n    newRegexTranslator(\n      /^(an?\\s+|one|)(half|third|fourth|fifth|sixth|seventh|eighth|nineth|tenth)\\s+(a\\s+|an\\s+|of\\s+an?\\s+|of\\s+)(.*)/i,\n      (matches, vars) => {\n        let remaining: string = matches[ 4 ];\n        let parsed: Value = Parse.valueFromString( remaining );\n        let fractionName: string = matches[ 2 ].toLowerCase();\n        let fraction: Value = vars[ fractionName ];\n\n        return parsed.mul( fraction ).output( Core.globalOutput );\n      }, {\n        half: Value.fromFraction(1, 2),\n        third: Value.fromFraction(1, 3),\n        fourth: Value.fromFraction(1, 4),\n        fifth: Value.fromFraction(1, 5),\n        sixth: Value.fromFraction(1, 6),\n        seventh: Value.fromFraction(1, 7),\n        eighth: Value.fromFraction(1, 8),\n        nineth: Value.fromFraction(1, 9),\n        tenth: Value.fromFraction(1, 10)\n      }\n    );\n\n  /**\n   * A translator which takes a word which represents a fraction and multiplies\n   * it by the following value.\n   *\n   * *Examples:*\n   * - 23 and a half eggs\n   * - one and a half acres\n   * - 23 and a third\n   * - 12 and one fourth\n   */\n  public static AndFraction: Translator =\n    newRegexTranslator(\n      /^(.*)\\s+and\\s+(an?|one)\\s+(half|third|fourth|fifth|sixth|seventh|eighth|nineth|tenth)\\s*(.*)/i,\n      (matches, vars) => {\n        let prefix: string = matches[ 1 ];\n        let units: string = matches[ 4 ];\n        let value: Value = Parse.valueFromString( prefix + units );\n        let fractionName: string = matches[ 3 ].toLowerCase();\n        let fraction: Value = vars[ fractionName ];\n\n        return value.add( fraction ).output( Core.globalOutput );\n      }, {\n        half: Value.fromFraction(1, 2),\n        third: Value.fromFraction(1, 3),\n        fourth: Value.fromFraction(1, 4),\n        fifth: Value.fromFraction(1, 5),\n        sixth: Value.fromFraction(1, 6),\n        seventh: Value.fromFraction(1, 7),\n        eighth: Value.fromFraction(1, 8),\n        nineth: Value.fromFraction(1, 9),\n        tenth: Value.fromFraction(1, 10)\n      }\n    );\n\n  /**\n   * A translator which takes the amount in parenthesis and moves it out.\n   *\n   * *Examples:*\n   * - (one and a half) acre\n   * - (12) tacos\n   */\n  public static Quantity: Translator =\n    newRegexTranslator(\n      /^\\((.*)\\)(.*)$/,\n      (matches) => {\n        let quantity: string = matches[ 1 ];\n        let unit: string = matches[ 2 ];\n\n        return quantity + unit;\n      }\n    );\n\n  /**\n   * A translator which takes the amount in parenthesis and moves it out.\n   *\n   * *Examples:*\n   * - 1 (6 ounce)\n   * - 5 (3 liter)\n   */\n  public static QuantityValue: Translator =\n    newRegexTranslator(\n      /^\\s*((-?\\d*)(\\s+(\\d+))?(\\s*\\/\\s*(\\d+)|\\.(\\d+)|))\\s*\\(\\s*((-?\\d*)(\\s+(\\d+))?(\\s*\\/\\s*(\\d+)|\\.(\\d+)|)\\s*(.*))\\s*\\)\\s*$/i,\n      (matches) => {\n        let quantityInput: string = matches[ 1 ];\n        let quantity: Value = Parse.valueFromString( quantityInput );\n        let alternativeInput: string = matches[ 8 ];\n        let alternative: Value = Parse.valueFromString( alternativeInput );\n\n        return alternative.mul( quantity ).output( Core.globalOutput );\n      }\n    );\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Translations.ts","\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n\n\n/**\n * @hidden\n */\nexport let Digital = new Class('Digital')\n  .addGroups([\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'b',\n      baseUnit: 'b',\n      denominators: [],\n      units: {\n        'b': Plurality.EITHER,\n        'bit': Plurality.SINGULAR,\n        'bits': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      unit: 'nibble',\n      relativeUnit: 'b',\n      relativeScale: 4,\n      denominators: [],\n      units: {\n        'nibble': Plurality.EITHER,\n        'nibbles': Plurality.PLURAL,\n        'nybble': Plurality.EITHER,\n        'nyble': Plurality.EITHER,\n        'half-byte': Plurality.EITHER,\n        'half byte': Plurality.EITHER,\n        'tetrade': Plurality.EITHER,\n        'semi-octet': Plurality.EITHER,\n        'quadbit': Plurality.EITHER,\n        'quartet': Plurality.EITHER\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'B',\n      relativeUnit: 'b',\n      relativeScale: 8,\n      denominators: [2, 8],\n      units: {\n        'B': Plurality.EITHER,\n        'byte': Plurality.SINGULAR,\n        'bytes': Plurality.PLURAL\n      }\n    }\n  ])\n\naddDigitalUnits(\n  Digital,\n  'B',\n  1000,\n  [2, 4, 5, 10],\n  'byte', 'bytes',\n  [\n    ['kB', 'kilo'],\n    ['mB', 'mega'],\n    ['gB', 'giga'],\n    ['tB', 'tera'],\n    ['pB', 'peta'],\n    ['eB', 'exa'],\n    ['zB', 'zetta'],\n    ['yB', 'yotta']\n  ]\n);\n\naddDigitalUnits(\n  Digital,\n  'B',\n  1024,\n  [2, 4, 8, 16],\n  'byte', 'bytes',\n  [\n    ['KB', 'kibi'],\n    ['MB', 'mebi'],\n    ['GB', 'gibi'],\n    ['TB', 'tebi'],\n    ['PB', 'pebi'],\n    ['EB', 'exbi'],\n    ['ZB', 'zebi'],\n    ['YB', 'yobi']\n  ]\n);\n\naddDigitalUnits(\n  Digital,\n  'b',\n  1000,\n  [2, 4, 5, 10],\n  'bit', 'bits',\n  [\n    ['kb', 'kilo', 'kbit'],\n    ['mb', 'mega', 'mbit'],\n    ['gb', 'giga', 'gbit'],\n    ['tb', 'tera', 'tbit'],\n    ['pb', 'peta', 'pbit'],\n    ['eb', 'exa', 'ebit'],\n    ['zb', 'zetta', 'zbit'],\n    ['yb', 'yotta', 'ybit']\n  ]\n);\n\naddDigitalUnits(\n  Digital,\n  'b',\n  1024,\n  [2, 4, 8, 16],\n  'bit', 'bits',\n  [\n    ['kibit', 'kibi'],\n    ['mibit', 'mebi'],\n    ['gibit', 'gibi'],\n    ['tibit', 'tebi'],\n    ['pibit', 'pebi'],\n    ['eibit', 'exbi'],\n    ['zibit', 'zebi'],\n    ['yibit', 'yobi']\n  ]\n);\n\nDigital.setClassScales();\n\n\nfunction addDigitalUnits(parent: Class, relativeTo: string, relativeScales: number, denominators: number[], suffixSingular: string, suffixPlural: string, unitAndPrefixes: string[][])\n{\n  for (let i = 0; i < unitAndPrefixes.length; i++)\n  {\n    let [unit, prefix, extra] = unitAndPrefixes[ i ];\n\n    let units = {};\n    units[ unit ] = Plurality.EITHER;\n    units[ prefix + suffixSingular ] = Plurality.SINGULAR;\n    units[ prefix + suffixPlural ] = Plurality.PLURAL;\n\n    if (extra)\n    {\n      units[ extra ] = Plurality.EITHER;\n    }\n\n    parent.addGroup({\n      system: System.ANY,\n      common: true,\n      unit: unit,\n      relativeUnit: relativeTo,\n      relativeScale: relativeScales,\n      denominators: denominators,\n      units: units\n    });\n\n    relativeTo = unit;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Digital.ts","\n\n/**\n * An enumeration which specifies whether a unit represents a singular value (1),\n * a plural value, or might represent either.\n */\nexport enum Plurality\n{\n\n  /**\n   * The unit is only a singular representation.\n   */\n  SINGULAR,\n\n  /**\n   * The unit is only a plural representation.\n   */\n  PLURAL,\n\n  /**\n   * The unit can be used as singular and plural.\n   */\n  EITHER\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Plurality.ts","\n\n/**\n * An enumeration which specifies what system of measurement a unit belongs to\n * or specifies which system a user desires for output or conversions.\n *\n * @see [[Group]]\n * @see [[Transform]]\n */\nexport enum System\n{\n\n  /**\n   * The Metrix System of Measurement.\n   */\n  METRIC,\n\n  /**\n   * The US \"traditional systems of weights and measures\". Also known as\n   * \"Standard\", \"Customary\", or, erroneously: \"Imperial\", or \"English\".\n   */\n  US,\n\n  /**\n   * A value for groups when the unit does not belong to a system.\n   */\n  NONE,\n\n  /**\n   * A value for transforms which specify that the user or developer are looking\n   * to get results in any system.\n   */\n  ANY,\n\n  /**\n   * A value for transforms which specify that the user or developer are looking\n   * to get results in the same system that is already being used for a range.\n   * If a current system cannot be determined then any system is returned.\n   */\n  GIVEN\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/System.ts","\n\n/**\n * The class which contains commonly used functions by the library. These\n * functions and variables exist in a class so they may be overridden if\n * desired.\n */\nexport class Functions\n{\n\n  /**\n   * The maximum distance a number can be from another to be considered\n   * equivalent. This is to compensate for floating point precision issues.\n   */\n  public static EPSILON: number = 0.00001;\n\n  /**\n   * Determines if the given number is zero.\n   *\n   * @param x The number to test.\n   * @return True if the number is zero, otherwise false.\n   * @see [[Functions.EPSILON]]\n   */\n  public static isZero(x: number): boolean\n  {\n    return this.abs( x ) < this.EPSILON;\n  }\n\n  /**\n   * Determines if the given number is equal to another.\n   *\n   * @param a The first number to compare.\n   * @param b The second number to compare.\n   * @return True if the two numbers are equal.\n   * @see [[Functions.EPSILON]]\n   */\n  public static isEqual(a: number, b: number): boolean\n  {\n    return this.abs( a - b ) < this.EPSILON;\n  }\n\n  /**\n   * Determines if the given number is a whole number (integer).\n   *\n   * @param x The number to test.\n   * @return True if the number is whole, otherwise false.\n   * @see [[Functions.EPSILON]]\n   */\n  public static isWhole(x: number): boolean\n  {\n    return this.abs( Math.floor( x ) - x ) < this.EPSILON;\n  }\n\n  /**\n   * Determines if the given number is singular. A singular number is 1 or -1.\n   *\n   * @param x The number to test.\n   * @return True if the number is singular, otherwise false.\n   * @see [[Functions.EPSILON]]\n   */\n  public static isSingular(x: any): boolean\n  {\n    return this.isNumber( x ) && this.abs( this.abs( x ) - 1 ) < this.EPSILON;\n  }\n\n  /**\n   * Determines if the given number is valid. A valid number is finite and not\n   * NaN or Infinity.\n   *\n   * @param x The number to test.\n   * @return True if the input is finite number.\n   */\n  public static isNumber(x: any): boolean\n  {\n    return isFinite(x);\n  }\n\n  /**\n   * Trims the given input if its a string.\n   *\n   * @param x The string to remove space from the beginning and end.\n   * @return A trimmed string.\n   */\n  public static trim(x: string): string\n  {\n    return x ? x.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '') : x;\n  }\n\n  /**\n   * Calculates the greatest common denominator between the two numbers. If\n   * either of the numbers are not whole (integers) then 1 is immediately\n   * returned.\n   *\n   * @param a The first number.\n   * @param b The second number.\n   * @return The greatest common denominator between the two numbers.\n   */\n  public static gcd(a: number, b: number): number\n  {\n    if (!this.isWhole(a) || !this.isWhole(b))\n    {\n      return 1;\n    }\n\n    let x: number = a < b ? a : b;\n    let y: number = a < b ? b : a;\n    x = this.abs(x);\n    y = this.abs(y);\n\n    while(y)\n    {\n      let t = y;\n      y = x % y;\n      x = t;\n    }\n\n    return x;\n  }\n\n  /**\n   * Determines the absolute value of the given number.\n   *\n   * @param x The number to return the positive version of.\n   * @return The absolute value of x.\n   */\n  public static abs(x: number): number\n  {\n    return x < 0 ? -x : x;\n  }\n\n  /**\n   * Determines the sign of the given number. One of three values will be\n   * returned: 1, 0, or -1.\n   *\n   * @param x The number to determine the sign of.\n   * @return The sign of the given number.\n   */\n  public static sign(x: number): number\n  {\n    return x < 0 ? -1 : (x > 0 ? 1 : 0);\n  }\n\n  /**\n   * Appends an element or array of elements to the end of the given array.\n   *\n   * @param array The array to append values to the end of.\n   * @param input The element or array of elements to append to the end.\n   * @return The reference to the `array` given.\n   */\n  public static appendTo<T>(array: T[], input: T | T[]): T[]\n  {\n    if (input instanceof Array)\n    {\n      array.push.apply( array, input );\n    }\n    else if (input)\n    {\n      array.push( input );\n    }\n\n    return array;\n  }\n\n  /**\n   * Determines whether the given input looks like a [[GroupDefinition]].\n   *\n   * @param input The variable to inspect.\n   * @return True if the variable appears to be a [[GroupDefinition]].\n   */\n  public static isGroupDefinition(input: any): boolean\n  {\n    return !!(input && input.system && input.unit && input.denominators && input.units);\n  }\n\n  /**\n   * Determines whether the given input looks like a [[ValueDefinition]].\n   *\n   * @param input The variable to inspect.\n   * @return True if the variable appears to be a [[ValueDefinition]].\n   */\n  public static isValueDefinition(input: any): boolean\n  {\n    return !!(input && (input.value || input.unit || input.num || input.den));\n  }\n\n  /**\n   * Determines whether the given input looks like a [[RangeDefinition]].\n   *\n   * @param input The variable to inspect.\n   * @return True if the variable appears to be a [[RangeDefinition]].\n   */\n  public static isRangeDefinition(input: any): boolean\n  {\n    return !!(input && input.min && input.max);\n  }\n\n  /**\n   * Determines whether the given input is an array.\n   *\n   * @param input The variable to test.\n   * @return True if the variable is an array, otherwise false.\n   */\n  public static isArray(input: any): boolean\n  {\n    return input instanceof Array;\n  }\n\n  /**\n   * Determines whether the given input is a string.\n   *\n   * @param input The variable to test.\n   * @return True if the variable is a string, otherwise false.\n   */\n  public static isString(input: any): boolean\n  {\n    return typeof(input) === 'string';\n  }\n\n  /**\n   * Determines whether the given input is defined.\n   *\n   * @param input The variable to test.\n   * @return True if the variable is defined, otherwise false.\n   */\n  public static isDefined(input: any): boolean\n  {\n    return typeof(input) !== 'undefined';\n  }\n\n  /**\n   * Returns the first argument which is defined.\n   *\n   * @param a The first argument to look at.\n   * @param b The second argument to look at.\n   * @return The first defined argument.\n   * @see [[Functions.isDefined]]\n   */\n  public static coalesce(a: any, b: any): any\n  {\n    return this.isDefined( a ) ? a : b;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Functions.ts","\nimport { Value } from './Value';\nimport { Group } from './Group';\nimport { Range, RangeList } from './Range';\nimport { Functions as fn } from './Functions';\n\n\n/**\n * The enumeration which decides what unit to use when converting to a string.\n */\nexport enum OutputUnit\n{\n\n  /**\n   * This value will keep units from being displayed.\n   */\n  NONE,\n\n  /**\n   * This value will ensure the unit exactly as the user entered it is used in\n   * the output no matter whether the value's plurality matches the given\n   * unit's plurality.\n   *\n   * @see [[Value.unit]]\n   */\n  GIVEN,\n\n  /**\n   * This value will force the short versions of the unit to be used.\n   *\n   * @see [[Group.singularShort]]\n   * @see [[Group.pluralShort]]\n   */\n  SHORT,\n\n  /**\n   * This value will force the long versions of the unit to be used.\n   *\n   * @see [[Group.singularLong]]\n   * @see [[Group.pluralLong]]\n   */\n  LONG\n}\n\n/**\n * The enumeration which decides how a value will be converted to a string.\n */\nexport enum OutputFormat\n{\n\n  /**\n   * The format of the user input will be used if possible.\n   */\n  GIVEN,\n\n  /**\n   * All values will be displayed using their decimal representation.\n   */\n  NUMBER,\n\n  /**\n   * All values will be displayed as a mixed fraction if the value is a fraction.\n   * A mixed fraction has a whole number followed by a fraction where the\n   * numerator is smaller than the denominator.\n   *\n   * @see [[Value.isFraction]]\n   */\n  MIXED,\n\n  /**\n   * All values will be displayed as an improper fraction if the value is a\n   * fraction and the numerator is larger than the denoninator.\n   *\n   * @see [[Value.isFraction]]\n   */\n  IMPROPER\n}\n\n\n/**\n * Developer input which can be passed to an Output constructor or all the\n * various functions that use the [[Output]] object.\n *\n * @see [[Base.output]]\n * @see [[Range.output]]\n * @see [[Value.output]]\n */\nexport interface OutputInput\n{\n  /**\n   * @see [[Output.unit]]\n   */\n  unit?: OutputUnit;\n\n  /**\n   * @see [[Output.format]]\n   */\n  format?: OutputFormat;\n\n  /**\n   * @see [[Output.repeatUnit]]\n   */\n  repeatUnit?: boolean;\n\n  /**\n   * @see [[Output.unitSpacer]]\n   */\n  unitSpacer?: string;\n\n  /**\n   * @see [[Output.rangeSpacer]]\n   */\n  rangeSpacer?: string;\n\n  /**\n   * @see [[Output.fractionSpacer]]\n   */\n  fractionSpacer?: string;\n\n  /**\n   * @see [[Output.mixedSpacer]]\n   */\n  mixedSpacer?: string;\n\n  /**\n   * @see [[Output.rateSpacer]]\n   */\n  rateSpacer?: string;\n\n  /**\n   * @see [[Output.delimiter]]\n   */\n  delimiter?: string;\n\n  /**\n   * @see [[Output.significant]]\n   */\n  significant?: number;\n}\n\n\n/**\n * The class which converts Unitz objects to strings.\n */\nexport class Output implements OutputInput\n{\n\n  /**\n   * The option that specifies which units are chosen.\n   */\n  public unit: OutputUnit = OutputUnit.GIVEN;\n\n  /**\n   * The option that specifies how values are displayed.\n   */\n  public format: OutputFormat = OutputFormat.GIVEN;\n\n  /**\n   * Whether or not a unit should be displayed for the minimum and maximum of a\n   * range when they have the same group.\n   */\n  public repeatUnit: boolean = false;\n\n  /**\n   * The spacing used between the value and the unit.\n   */\n  public unitSpacer: string = '';\n\n  /**\n   * The spacing used between the minimum and maximum values in a range.\n   */\n  public rangeSpacer: string = ' - ';\n\n  /**\n   * The spacing used to separate the numerator and denominator of a fraction.\n   */\n  public fractionSpacer: string = '/';\n\n  /**\n   * The spacing used to seperate a mixed number from the fraction.\n   */\n  public mixedSpacer: string = ' ';\n\n  /**\n   * The spacing used to separate a unit and the rate unit.\n   */\n  public rateSpacer: string = '/';\n\n  /**\n   * The delimiter used to separate ranges.\n   */\n  public delimiter: string = ', ';\n\n  /**\n   * An option used to restrict numbers from displaying large decimal numbers.\n   * When this value is set to -1 numbers are displayed fully. If the value is\n   * set to zero all numbers will be truncated to the whole version.\n   */\n  public significant: number = -1;\n\n\n  /**\n   * Creates a new instance of Output with an optional set of options to\n   * override the default values.\n   *\n   * @param input The options to apply to the new instance.\n   */\n  public constructor(input?: OutputInput)\n  {\n    if (fn.isDefined(input))\n    {\n      this.set( input );\n    }\n  }\n\n  /**\n   * Overrides values in this instance with ones specified in input.\n   *\n   * @param input The values to override.\n   * @return The reference to this instance.\n   */\n  public set(input: OutputInput): this\n  {\n    this.unit = fn.coalesce( input.unit, this.unit );\n    this.format = fn.coalesce( input.format, this.format );\n    this.repeatUnit = fn.coalesce( input.repeatUnit, this.repeatUnit );\n    this.unitSpacer = fn.coalesce( input.unitSpacer, this.unitSpacer );\n    this.rangeSpacer = fn.coalesce( input.rangeSpacer, this.rangeSpacer );\n    this.fractionSpacer = fn.coalesce( input.fractionSpacer, this.fractionSpacer );\n    this.mixedSpacer = fn.coalesce( input.mixedSpacer, this.mixedSpacer );\n    this.rateSpacer = fn.coalesce( input.rateSpacer, this.rateSpacer );\n    this.delimiter = fn.coalesce( input.delimiter, this.delimiter );\n    this.significant = fn.coalesce( input.significant, this.significant );\n\n    return this;\n  }\n\n  /**\n   * Returns an Output instance which matches the desired options. If no options\n   * are specified the reference to this instance is returned. If the options\n   * are already an instance of Output its returned. If options are specified\n   * a new instance is created with the options of this instance, and the given\n   * options applied with [[Output.set]].\n   *\n   * @param input The options desired.\n   * @return An instance of this class which matches the desired options.\n   */\n  public extend(input?: OutputInput): Output\n  {\n    let extended: Output = this;\n\n    if (fn.isDefined(input))\n    {\n      if (input instanceof Output)\n      {\n        extended = input;\n      }\n      else\n      {\n        extended = new Output( this );\n        extended.set( input );\n      }\n    }\n\n    return extended;\n  }\n\n  /**\n   * Converts the list of ranges to a string. If a range is not valid it is\n   * skipped.\n   *\n   * @param ranges The list of ranges to convert.\n   * @return The string representation of the input.\n   */\n  public ranges(ranges: RangeList): string\n  {\n    let out = '';\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n\n      if (range.isValid)\n      {\n        if (out.length)\n        {\n          out += this.delimiter;\n        }\n\n        out += this.range( range );\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Converts the range to a string.\n   *\n   * @param ranges The range to convert.\n   * @return The string representation of the input.\n   */\n  public range(range: Range): string\n  {\n    let out = '';\n\n    if (!range.isValid)\n    {\n      // nothing\n    }\n    else if (range.isFixed)\n    {\n      out += this.value( range.min );\n    }\n    else\n    {\n      let minUnit: boolean = this.repeatUnit || range.min.unit !== range.max.unit;\n\n      out += this.value( range.min, minUnit );\n      out += this.rangeSpacer;\n      out += this.value( range.max );\n    }\n\n    return out;\n  }\n\n  /**\n   * Converts the value to the string optionally showing or hiding the unit.\n   *\n   * @param value The value to convert.\n   * @param showUnit Whether or not the unit should be added to the string.\n   * @return The string representation of the input.\n   */\n  public value(value: Value, showUnit: boolean = true): string\n  {\n    let out = '';\n\n    if (!value.isValid)\n    {\n\n    }\n    else if (this.isFraction( value ))\n    {\n      if (this.isMixed( value ))\n      {\n        out += value.mixedWhole;\n        out += this.mixedSpacer;\n        out += value.mixedNum;\n        out += this.fractionSpacer;\n        out += value.den;\n      }\n      else\n      {\n        out += value.num;\n        out += this.fractionSpacer;\n        out += value.den;\n      }\n    }\n    else\n    {\n      out += this.number( value.value );\n    }\n\n    if (showUnit && this.unit !== OutputUnit.NONE && value.isValid)\n    {\n      out += this.unitSpacer;\n      out += this.units( value );\n    }\n\n    return out;\n  }\n\n  /**\n   * Generates a full unit string including the rate unit if it exists.\n   *\n   * @param value The value to generate a unit for.\n   * @return The units string representation.\n   */\n  public units(value: Value): string\n  {\n    let out: string = '';\n\n    out += this.group( value.value, value.unit, value.group );\n\n    if (value.rateGroup)\n    {\n      out += this.rateSpacer;\n      out += this.group( value.value, value.rate, value.rateGroup );\n    }\n\n    return out;\n  }\n\n  /**\n   * Generates a unit string given the value, the current unit, and its group.\n   *\n   * @param value The value to generate a unit for.\n   * @param unit The unit to potentially use.\n   * @param group The group of the unit.\n   * @return The unit determined based on the options.\n   */\n  public group(value: number, unit: string, group: Group): string\n  {\n    if (this.isLongUnit( group ))\n    {\n      return fn.isSingular( value ) ? group.singularLong : group.pluralLong;\n    }\n    else if (this.isShortUnit( group ) || (group && group.dynamic))\n    {\n      return fn.isSingular( value ) ? group.singularShort : group.pluralShort;\n    }\n\n    return unit;\n  }\n\n  /**\n   * Converts the number to a string.\n   *\n   * @param x The number to convert.\n   * @return The string representation of the input.\n   */\n  public number(x: number): string\n  {\n    let valueString: string = x + '';\n\n    if (this.significant >= 0 && valueString !== '0')\n    {\n      let valueSignificant: string = x\n        .toFixed(this.significant)\n        .replace(/0*$/, '')\n        .replace(/\\.$/, '');\n\n      return valueSignificant.length < valueString.length ? valueSignificant : valueString;\n    }\n\n    return valueString;\n  }\n\n  /**\n   * Determines whether the value should be displayed as a fraction.\n   *\n   * @param value The value to look at.\n   * @return True if the value should be displayed as a fraction, otherwise false.\n   */\n  public isFraction(value: Value): boolean\n  {\n    return value.isFraction && this.format !== OutputFormat.NUMBER;\n  }\n\n  /**\n   * Determines whether the value should be displayed as a number.\n   *\n   * @param value The value to look at.\n   * @return True if the value should be displayed as a number, otherwise false.\n   */\n  public isNumber(value: Value): boolean\n  {\n    return value.isValid && !this.isFraction( value );\n  }\n\n  /**\n   * Determines whether the value should be displayed as a mixed fraction. This\n   * assumes [[Output.isFraction]] was already checked and returned true.\n   *\n   * @param value The value to look at.\n   * @return True if the value should be displayed as a mixed fraction, otherwise false.\n   */\n  public isMixed(value: Value): boolean\n  {\n    return value.mixedWhole !== 0 && this.format !== OutputFormat.IMPROPER;\n  }\n\n  /**\n   * Determines whether the short unit should be displayed.\n   *\n   * @param group The group of the unit.\n   * @return True if the short unit should be displayed, otherwise false.\n   */\n  public isShortUnit(group: Group)\n  {\n    return group && this.unit === OutputUnit.SHORT;\n  }\n\n  /**\n   * Determines whether the long unit should be displayed.\n   *\n   * @param group The group of the unit.\n   * @return True if the short unit should be displayed, otherwise false.\n   */\n  public isLongUnit(group: Group)\n  {\n    return group && this.unit === OutputUnit.LONG;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Output.ts","\nimport { Plurality } from './Plurality';\nimport { System } from './System';\nimport { Class } from './Class';\nimport { GroupDefinition, UnitDefinitionMap, Numbers } from './Types';\nimport { Functions as fn } from './Functions';\nimport { Transform } from './Transform';\n\n\n/**\n * An array of groups.\n */\nexport type GroupList = Group[];\n\n/**\n * An object of groups keyed by their units.\n */\nexport type GroupMap = { [key: string]: Group };\n\n/**\n * A function which takes a unit and returns a Group instance.\n */\nexport type GroupFactory = (unit: string) => Group;\n\n\n/**\n * A unit and its aliases as well as their plurality.\n *\n * A group is relative to a base group or is a base group itself. As unit\n * aliases are added to the group it determines the appropriate plural and\n * singular long and short versions given the unit aliases in this group.\n */\nexport class Group\n{\n\n  /**\n   * The System this group belongs in. One of [[System.METRIC]],\n   * [[System.US]], or [[System.ANY]].\n   */\n  public system: System;\n\n  /**\n   * Whether this group is considered common. A common group is one a\n   * developer has decided the user will be familiar with and would be okay\n   * seeing values in this unit.\n   */\n  public common: boolean;\n\n  /**\n   * The main unit for this group. This is the preferred unit if one is not\n   * specified in the definition.\n   */\n  public unit: string;\n\n  /**\n   * The unit of the base group. The base group is typically the smallest value\n   * and is also where the baseUnit matches unit.\n   */\n  public baseUnit: string;\n\n  /**\n   * The scale of this group relative to the base group. This is used for\n   * conversions of values with the same base group.\n   */\n  public baseScale: number = 1;\n\n  /**\n   * The scale of this group relative to the first base group added to the\n   * class. This is used to compare numbers of the same class across all bases.\n   */\n  public classScale: number = 0;\n\n  /**\n   * The unit the developer prefers for their users.\n   *\n   * @see [[Base.preferred]]\n   */\n  public preferredUnit: string;\n\n  /**\n   * The unit this group is relative to.\n   */\n  public relativeUnit: string;\n\n  /**\n   * This defines how to calculate the scale of the group by multiplying it by\n   * the group of `relativeUnit`.\n   */\n  public relativeScale: number;\n\n  /**\n   * A map of all valid units and whether they are singular, plural, or either.\n   */\n  public units: UnitDefinitionMap;\n\n  /**\n   * The list of valid denominators for this group. Values when converted to\n   * fractions look at this list to ensure that fractions are not produced that\n   * are not user friendly. For example, no one would say 5/23 a meter.\n   */\n  public denominators: number[];\n\n  /**\n   * Whether this group was dynamically created by user input having units\n   * not mapped to groups by the developer.\n   */\n  public dynamic: boolean = false;\n\n  /**\n   * The class this group belongs to.\n   */\n  public parent: Class;\n\n  /**\n   * The shortest unit in this group that is used for singular values.\n   */\n  public singularShort: string;\n\n  /**\n   * The longest unit in this group that is used for singular values.\n   */\n  public singularLong: string;\n\n  /**\n   * The longest unit in this group that is used for plural values.\n   */\n  public pluralShort: string;\n\n  /**\n   * The longest unit in this group that is used for plural values.\n   */\n  public pluralLong: string;\n\n\n  /**\n   * Creates a new instance of Group given a definition and the parent class.\n   *\n   * @param definition The definition of the group.\n   * @param parent The class which contains this group.\n   */\n  public constructor(definition: GroupDefinition, parent: Class)\n  {\n    this.system = definition.system;\n    this.common = !!definition.common;\n    this.unit = definition.unit;\n    this.baseUnit = definition.baseUnit;\n    this.preferredUnit = definition.preferredUnit || definition.unit;\n    this.relativeUnit = definition.relativeUnit;\n    this.relativeScale = definition.relativeScale || 1;\n    this.units = definition.units;\n    this.denominators = definition.denominators;\n    this.parent = parent;\n\n    this.updateUnits();\n  }\n\n  /**\n   * True if this group is a base group, otherwise false.\n   */\n  public get isBase(): boolean\n  {\n    return this.unit === this.baseUnit;\n  }\n\n  /**\n   * Sets the dynamic flag of this group.\n   *\n   * @param dynamic Whether this group is dynamic or not.\n   * @return The reference to this instance.\n   */\n  public setDynamic(dynamic: boolean = true): this\n  {\n    this.dynamic = dynamic;\n\n    return this;\n  }\n\n  /**\n   * Adds a denominator or array of denominators to this group.\n   *\n   * @param denominators A denominator or an array of denominators to add.\n   * @return The reference to this instance.\n   */\n  public addDenominator(denominators: Numbers): this\n  {\n    fn.appendTo( this.denominators, denominators );\n\n    return this;\n  }\n\n  /**\n   * Sets the denominators of this group.\n   *\n   * @param denominators The new denominators for this group.\n   * @return The reference to this instance.\n   * @see [[Group.denominators]]\n   */\n  public setDenominators(denominators: number[]): this\n  {\n    this.denominators = denominators;\n\n    return this;\n  }\n\n  /**\n   * Sets the common flag of this group.\n   *\n   * @param common Whether this group is common or not.\n   * @return The reference to this instance.\n   * @see [[Group.common]]\n   */\n  public setCommon(common: boolean = true): this\n  {\n    this.common = common;\n\n    return this;\n  }\n\n  /**\n   * Sets the preferred unit of this group.\n   *\n   * @param unit The preferred unit of this group.\n   * @return The reference to this instance.\n   * @see [[Group.preferredUnit]]\n   */\n  public setPreferred(unit: string): this\n  {\n    this.preferredUnit = unit;\n\n    return this;\n  }\n\n  /**\n   * Adds the given unit aliases to this group and the parent class.\n   *\n   * @param units The units to add to the group and class.\n   * @return The reference to this instance.\n   * @see [[Class.addGroupUnit]]\n   */\n  public addUnits(units: UnitDefinitionMap): this\n  {\n    let parent: Class = this.parent;\n\n    for (let unit in units)\n    {\n      this.units[ unit ] = units[ unit ];\n\n      parent.addGroupUnit( unit, this );\n    }\n\n    this.updateUnits();\n\n    return this;\n  }\n\n  /**\n   * Removes the given unit aliases from this group and the parent class.\n   *\n   * @param units The array of unit aliases to remove.\n   * @return The reference to this instance.\n   * @see [[Class.removeGroupUnit]]\n   */\n  public removeUnits(units: string[]): this\n  {\n    let parent: Class = this.parent;\n    let existing: UnitDefinitionMap = this.units;\n\n    for (let i = 0; i < units.length; i++)\n    {\n      let unit = units[ i ];\n\n      if (unit in existing)\n      {\n        delete existing[ unit ];\n\n        parent.removeGroupUnit( unit, this );\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Updates the singular and plural long and short form units for this group.\n   *\n   * @return The reference to this instance.\n   */\n  public updateUnits(): this\n  {\n    this.singularShort = null;\n    this.singularLong = null;\n    this.pluralShort = null;\n    this.pluralLong = null;\n\n    for (let unit in this.units)\n    {\n      var plurality = this.units[ unit ];\n\n      if (plurality !== Plurality.PLURAL)\n      {\n        if (!this.singularShort || unit.length < this.singularShort.length)\n        {\n          this.singularShort = unit;\n        }\n\n        if (!this.singularLong || unit.length > this.singularLong.length)\n        {\n          this.singularLong = unit;\n        }\n      }\n\n      if (plurality !== Plurality.SINGULAR)\n      {\n        if (!this.pluralShort || unit.length < this.pluralShort.length)\n        {\n          this.pluralShort = unit;\n        }\n\n        if (!this.pluralLong || unit.length > this.pluralLong.length)\n        {\n          this.pluralLong = unit;\n        }\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Invokes a callback for each group in the parent class that are visible\n   * based on the given transform relative to this group.\n   *\n   * @param transform The transform which decides what groups are visible.\n   * @param reverse If the groups of the class should be iterated in reverse.\n   * @param callback A function to invoke with all visible groups found and the\n   *  index of that group in the set of visible groups. If `false` is returned\n   *  by the function iteration of visible groups ceases.\n   * @param callback.group The current visible group.\n   * @param callback.index The index of the current visible group.\n   * @see [[Transform.isVisibleGroup]]\n   */\n  public matches(transform: Transform, reverse: boolean, callback: (group: Group, index: number) => any): void\n  {\n    if (this.parent)\n    {\n      this.parent.getVisibleGroups( transform, reverse, this, callback );\n    }\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Group.ts","\nimport { GroupDefinition, Converter, ConverterMap, ConverterDoubleMap } from './Types';\nimport { Group, GroupMap, GroupList } from './Group';\nimport { Transform } from './Transform';\n\n\n/**\n * A map of classes is an object where the key is a unit and the value is a class.\n */\nexport type ClassMap = { [unit: string]: Class };\n\n/**\n * A collection of groups and their units with the logic on how to convert\n * between groups with differing base units.\n *\n * A class is essentially something like \"Length\" where base units are \"inches\"\n * and \"millimeters\" and there are various other groups based off of these\n * base groups like \"feet\", \"centimeters\", and \"meters\".\n *\n * A class is responsible for being the sole place where conversion is done\n * between different groups in the same class.\n *\n * @see [[Class.convert]]\n */\nexport class Class\n{\n\n  /**\n   * The name of the class.\n   */\n  public name: string;\n\n  /**\n   * A map of groups by their units. This map contains the expected case of each\n   * unit as well as the lowercase version of the unit as long as it doesn't\n   * overwrite another group. Unit case may be important so it has priority.\n   */\n  public groupMap: GroupMap;\n\n  /**\n   * A list of the groups in this class.\n   */\n  public groups: GroupList;\n\n  /**\n   * A map of functions which convert one unit value to another unit value.\n   * It is used by invoking `converters[ fromUnit ][ toUnit ]( value )`.\n   *\n   * @see [[Class.setBaseConversion]]\n   * @see [[Class.convert]]\n   */\n  public converters: ConverterDoubleMap;\n\n  /**\n   * Creates a new instance of Class given the name of the class and optionally\n   * the groups of the class.\n   *\n   * @param name The unique name of the class.\n   * @param groups The optional list of groups to populate the class with.\n   */\n  public constructor(name: string, groups?: GroupDefinition[])\n  {\n    this.name = name;\n    this.groupMap = {};\n    this.groups = [];\n    this.converters = {};\n\n    if (groups)\n    {\n      this.addGroups(groups);\n    }\n  }\n\n  /**\n   * Adds the group definitions to this class.\n   *\n   * @param definitions The array of group definitions.\n   * @return The reference to this instance.\n   * @see [[Class.addGroup]]\n   */\n  public addGroups(definitions: GroupDefinition[]): this\n  {\n    for (let i = 0; i < definitions.length; i++)\n    {\n      this.addGroup(definitions[i]);\n    }\n\n    return this;\n  }\n\n  /**\n   * Adds a group definition to this class. If the group is relative to another\n   * group the [[Group.baseScale]] and [[Group.baseUnit]] are set to appropriate\n   * values.\n   *\n   * @param definition The group definition.\n   * @return The instance of the group created from the definition.\n   * @see [[Class.addGroupUnit]]\n   */\n  public addGroup(definition: GroupDefinition): Group\n  {\n    let group = new Group(definition, this);\n    let { relativeUnit, relativeScale, units } = group;\n\n    if (relativeUnit)\n    {\n      let relative: Group = this.groupMap[ relativeUnit ];\n\n      group.baseScale = relativeScale * relative.baseScale;\n      group.baseUnit = relative.baseUnit;\n    }\n\n    for (let alias in units)\n    {\n      this.addGroupUnit( alias, group );\n    }\n\n    this.groups.push( group );\n\n    return group;\n  }\n\n  /**\n   * Adds the unit to this class for the given group. If the lowercase version\n   * of the unit has not been mapped yet it will be mapped to the given group.\n   *\n   * @param unit The unit to map to the group.\n   * @param group The group which has the unit.\n   * @return The reference to this instance.\n   */\n  public addGroupUnit(unit: string, group: Group): this\n  {\n    let lower: string = unit.toLowerCase();\n\n    this.groupMap[ unit ] = group;\n\n    if (!this.groupMap[ lower ])\n    {\n      this.groupMap[ lower ] = group;\n    }\n\n    return this;\n  }\n\n  /**\n   * Removes the given unit associated to the given group from the class. If the\n   * group is not mapped to this unit then this has no effect.\n   *\n   * @param unit The unit to remove from this class.\n   * @param group The group which has the unit.\n   * @return The reference to this instance.\n   */\n  public removeGroupUnit(unit: string, group: Group): this\n  {\n    let lower: string = unit.toLowerCase();\n\n    if (this.groupMap[ unit ] === group)\n    {\n      delete this.groupMap[ unit ];\n    }\n\n    if (this.groupMap[ lower ] === group)\n    {\n      delete this.groupMap[ lower ];\n    }\n\n    return this;\n  }\n\n  /**\n   * Determines the first group in this class which is a base group.\n   *\n   * @see [[Group.isBase]]\n   */\n  private getFirstBase(): Group\n  {\n    let groups: GroupList = this.groups;\n\n    for (let i = 0; i < groups.length; i++)\n    {\n      let group: Group = groups[ i ];\n\n      if (group.isBase)\n      {\n        return group;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Updates the [[Group.classScale]] value in each group in this class so that\n   * there is a baseline for comparing one group to another no matter the base\n   * unit. For comparing in the same base, you can use [[Group.baseScale]].\n   *\n   * @return The reference to this instance.\n   */\n  public setClassScales(): this\n  {\n    let groups: GroupList = this.groups;\n    let first: Group = this.getFirstBase();\n\n    if (first)\n    {\n      for (let i = 0; i < groups.length; i++)\n      {\n        let group: Group = groups[ i ];\n\n        if (group.baseUnit === first.baseUnit)\n        {\n          group.classScale = group.baseScale;\n        }\n        else if (group.baseUnit in this.converters)\n        {\n          group.classScale = this.converters[ group.baseUnit ][ first.baseUnit ]( group.baseScale );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the conversion function between the two base units.\n   *\n   * @param fromUnit The base unit to convert from.\n   * @param toUnit The base unit to convert to.\n   * @param converter The function to pass the value to convert.\n   * @return The reference to this instance.\n   */\n  public setBaseConversion(fromUnit: string, toUnit: string, converter: Converter): this\n  {\n    let converters = this.converters;\n    converters[ fromUnit ] = converters[ fromUnit ] || {};\n    converters[ fromUnit ][ toUnit ] = converter;\n\n    return this;\n  }\n\n  /**\n   * Determines which groups in this class are visible according to the given\n   * transform. The groups can be iterated in reverse and can optionally take\n   * a related group into consideration (when the system is GIVEN, we want to\n   * return the groups with the same system).\n   *\n   * @param transform The transform which decides what groups are visible.\n   * @param reverse If the groups of this class should be iterated in reverse.\n   * @param relatedGroup A related group which may be used for visibility if the\n   *  [[Transform.system]] is [[System.GIVEN]].\n   * @param callback A function to invoke with all visible groups found and the\n   *  index of that group in the set of visible groups. If `false` is returned\n   *  by the function iteration of visible groups ceases.\n   * @param callback.group The current visible group.\n   * @param callback.index The index of the current visible group.\n   * @see [[Transform.isVisibleGroup]]\n   */\n  public getVisibleGroups(transform: Transform, reverse: boolean, relatedGroup: Group, callback: (group: Group, index: number) => any): void\n  {\n    let groups: GroupList = this.groups;\n    let matched: number = 0;\n\n    let start = reverse ? groups.length - 1 : 0;\n    let stop = reverse ? -1 : groups.length;\n    let increment = reverse ? -1 : 1;\n\n    for (let i = start; i !== stop; i += increment)\n    {\n      let group: Group = groups[ i ];\n\n      if (transform.isVisibleGroup( group, relatedGroup ))\n      {\n        let result: any = callback( group, matched++ );\n\n        if (result === false)\n        {\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * Converts the given number from a given group to a given group. If the two\n   * groups are the same or one or both of the groups are not provided then the\n   * `value` provided is returned. If the two groups have differing base units\n   * the [[Class.converters]] map is used to convert the `value` over to the\n   * proper base. If the [[Class.converters]] map is missing a base conversion\n   * zero is returned. This might happen if a group is passed to this function\n   * which does not belong to this class OR if the user has impromperly setup\n   * their own classes.\n   *\n   * @param value The number to convert.\n   * @param from The group of the number to convert from.\n   * @param to The group to convert to.\n   * @param invalid The value to return if a conversion between the two groups\n   *  could not be made.\n   * @return The converted number or zero if a base conversion could not be found.\n   */\n  public convert(value: number, from: Group, to: Group, invalid: number = 0): number\n  {\n    if (from === to || !from || !to)\n    {\n      return value;\n    }\n\n    let converted: number = value * from.baseScale;\n\n    if (from.baseUnit !== to.baseUnit)\n    {\n      let map: ConverterMap = this.converters[ from.baseUnit ];\n\n      if (!map || !map[ to.baseUnit ])\n      {\n        return invalid;\n      }\n\n      let converter: Converter = map[ to.baseUnit ];\n\n      converted = converter( converted );\n    }\n\n    return converted / to.baseScale;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Class.ts","\nimport { Functions as fn } from './Functions';\nimport { Range } from './Range';\n\n\n/**\n * The enumeration which decides what value in a range should be used when\n * sorting between ranges with differing minimum and maximum values.\n */\nexport enum SortType\n{\n\n  /**\n   * This value will use the minimum of the ranges to sort by.\n   */\n  MIN,\n\n  /**\n   * This value will use the maximum of the ranges to sort by.\n   */\n  MAX,\n\n  /**\n   * This value will use the average of the ranges to sort by.\n   */\n  AVERAGE\n}\n\n/**\n * Developer input which can be passed to a Sort constructor or the sort\n * function that uses the [[Sort]] object.\n *\n * @see [[Base.sort]]\n */\nexport interface SortInput\n{\n  /**\n   * @see [[Sort.ascending]]\n   */\n  ascending?: boolean;\n\n  /**\n   * @see [[Sort.type]]\n   */\n  type?: SortType;\n\n  /**\n   * @see [[Sort.classes]]\n   */\n  classes?: SortClassMap;\n}\n\n/**\n * An object which specifies the priority between different class types.\n */\nexport type SortClassMap =\n{\n\n  /**\n   * The priorities are numbers keyed by the class names.\n   */\n  [className: string]: number\n};\n\n/**\n * A function which takes two ranges and returns a number which discribes the\n * ordering relationship between the two ranges. If a < b then a negative value\n * is returned. If a > b then a positive value is returned. If a = b then zero\n * is returned.\n *\n * @param a The first range.\n * @param b The second range.\n * @return A number which describes the ordering between the two ranges.\n */\nexport type Sorter = (a: Range, b: Range) => number;\n\n\n/**\n * The class which determines how to sort ranges.\n */\nexport class Sort implements SortInput\n{\n\n  /**\n   * If the ranges should be in ascending order (small values followed by large\n   * values). The default value is in descending order.\n   */\n  public ascending: boolean = false;\n\n  /**\n   * How ranges should be compared when the minimum and maximum values differ.\n   */\n  public type: SortType = SortType.MAX;\n\n  /**\n   * This object describes how ranges of different classes should be sorted by\n   * given each class a priority. If a class is not defined here the priority\n   * assumed is zero.\n   */\n  public classes: SortClassMap = {};\n\n  /**\n   * Creates a new instance of Sort with an optional set of options to override\n   * the default values.\n   *\n   * @param input The options to apply to the new instance.\n   */\n  public constructor(input?: SortInput)\n  {\n    if (fn.isDefined(input))\n    {\n      this.set( input );\n    }\n  }\n\n  /**\n   * Overrides values in this instance ith ones specified in the input. If class\n   * sorting options are specified they are merged into this instance as opposed\n   * to a complete overwrite.\n   *\n   * @param input The values to override.\n   * @return The reference to this instance.\n   */\n  public set(input: SortInput): this\n  {\n    this.ascending = fn.coalesce( input.ascending, this.ascending );\n    this.type = fn.coalesce( input.type, this.type );\n\n    if (fn.isDefined( input.classes ))\n    {\n      for (let className in input.classes)\n      {\n        this.classes[ className ] = input.classes[ className ];\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Returns a Sort instance which matches the desired options. If no options\n   * are specified the reference to this instance is returned. If the options\n   * are already an instance of Sort its returned. If options are specified\n   * a new instance is created with the options of this instance, and the given\n   * options applied with [[Sort.set]].\n   *\n   * @param input The options desired.\n   * @return An instance of this class which matches the desired options.\n   */\n  public extend(input?: SortInput): Sort\n  {\n    let extended: Sort = this;\n\n    if (fn.isDefined(input))\n    {\n      if (input instanceof Sort)\n      {\n        extended = input;\n      }\n      else\n      {\n        extended = new Sort( this );\n        extended.set( input );\n      }\n    }\n\n    return extended;\n  }\n\n  /**\n   * Returns a function which can sort ranges based on the options in this\n   * instance. Comparison is first done by class, and followed by type.\n   */\n  public getSorter(): Sorter\n  {\n    return (a: Range, b: Range) =>\n    {\n      let d: number = this.getClassComparison(a, b);\n\n      if (d === 0)\n      {\n        switch (this.type)\n        {\n          case SortType.MIN:\n            d = this.getMinComparison(a, b);\n            break;\n          case SortType.MAX:\n            d = this.getMaxComparison(a, b);\n            break;\n          case SortType.AVERAGE:\n            d = this.getAverageComparison(a, b);\n            break;\n        }\n      }\n\n      return this.ascending ? d : -d;\n    };\n  }\n\n  /**\n   * A sort function between two ranges which look at the range minimums.\n   *\n   * @param a The first range.\n   * @param b The second range.\n   * @see [[Sorter]]\n   */\n  private getMinComparison(a: Range, b: Range): number\n  {\n    return fn.sign( a.min.classScaled - b.min.classScaled );\n  }\n\n  /**\n   * A sort function between two ranges which look at the range maximums.\n   *\n   * @param a The first range.\n   * @param b The second range.\n   * @see [[Sorter]]\n   */\n  private getMaxComparison(a: Range, b: Range): number\n  {\n    return fn.sign( a.max.classScaled - b.max.classScaled );\n  }\n\n  /**\n   * A sort function between two ranges which look at the range averages.\n   *\n   * @param a The first range.\n   * @param b The second range.\n   * @see [[Sorter]]\n   */\n  private getAverageComparison(a: Range, b: Range): number\n  {\n    let avg: number = (a.min.classScaled + a.max.classScaled) * 0.5;\n    let bvg: number = (b.min.classScaled + b.max.classScaled) * 0.5;\n\n    return fn.sign( avg - bvg );\n  }\n\n  /**\n   * A sort function between two ranges which look at the range classes.\n   *\n   * @param a The first range.\n   * @param b The second range.\n   * @see [[Sorter]]\n   */\n  private getClassComparison(a: Range, b: Range): number\n  {\n    let ag: number = a.min.group ? 1 : -1;\n    let bg: number = b.min.group ? 1 : -1;\n\n    if (ag !== bg)\n    {\n      return ag - bg;\n    }\n\n    let ac: number = this.classes[ a.min.group.parent.name ] || 0;\n    let bc: number = this.classes[ b.min.group.parent.name ] || 0;\n\n    return ac - bc;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Sort.ts","\nimport { Functions as fn } from './Functions';\nimport { System } from './System';\nimport { Group } from './Group';\nimport { Class } from './Class';\nimport { Range } from './Range';\n\n\n/**\n * Developer input which can be passed to a Transform constructor or all the\n * various functions that use the [[Transform]] object.\n *\n * @see [[Base.normalize]]\n * @see [[Base.compact]]\n * @see [[Base.expand]]\n * @see [[Base.conversions]]\n * @see [[Base.filter]]\n */\nexport interface TransformInput\n{\n  /**\n   * @see [[Transform.common]]\n   */\n  common?: boolean;\n  /**\n   * @see [[Transform.system]]\n   */\n  system?: System;\n  /**\n   * @see [[Transform.min]]\n   */\n  min?: number;\n  /**\n   * @see [[Transform.max]]\n   */\n  max?: number;\n  /**\n   * @see [[Transform.groupless]]\n   */\n  groupless?: boolean;\n  /**\n   * @see [[Transform.convertWithMax]]\n   */\n  convertWithMax?: boolean;\n  /**\n   * @see [[Transform.onlyUnits]]\n   */\n  onlyUnits?: string[];\n  /**\n   * @see [[Transform.notUnits]]\n   */\n  notUnits?: string[];\n  /**\n   * @see [[Transform.onlyClasses]]\n   */\n  onlyClasses?: string[];\n  /**\n   * @see [[Transform.notClasses]]\n   */\n  notClasses?: string[];\n  /**\n   * @see [[Transform.convertUnit]]\n   */\n  convertUnit?: boolean;\n  /**\n   * @see [[Transform.convertRate]]\n   */\n  convertRate?: boolean;\n}\n\n\n/**\n * THe class which controls which units and values are acceptable when\n * transforming a set of ranges.\n *\n * @see [[Base.normalize]]\n * @see [[Base.compact]]\n * @see [[Base.expand]]\n * @see [[Base.conversions]]\n * @see [[Base.filter]]\n */\nexport class Transform implements TransformInput\n{\n\n  /**\n   * The option which determines whether only common or any group are valid.\n   * To only include common units this value must be `true` and to include\n   * common and uncommon this value must be `false`.\n   */\n  public common: boolean = true;\n\n  /**\n   * The desired system for the transformation.\n   */\n  public system: System = System.GIVEN;\n\n  /**\n   * The mimimum allowed value for the transformation.\n   */\n  public min: number = -Number.MAX_VALUE;\n\n  /**\n   * The maximum allowed value for the transformation.\n   */\n  public max: number = Number.MAX_VALUE;\n\n  /**\n   * Whether the minimum or maximum value of a range is used when producing\n   * conversions.\n   */\n  public convertWithMax: boolean = true;\n\n  /**\n   * Whether conversions should convert the main unit.\n   */\n  public convertUnit: boolean = true;\n\n  /**\n   * Whether conversions should convert the rate unit.\n   */\n  public convertRate: boolean = false;\n\n  /**\n   * Whether ranges without units are considered valid for the transformation.\n   */\n  public groupless: boolean = true;\n\n  /**\n   * An array of units that define the valid ranges for a transformation.\n   */\n  public onlyUnits: string[];\n\n  /**\n   * An array of units that define the invalid ranges for a transformation.\n   */\n  public notUnits: string[];\n\n  /**\n   * An array of class names that define the valid ranges for a transformation.\n   */\n  public onlyClasses: string[];\n\n  /**\n   * An array of class names that define the invalid ranges for a transformation.\n   */\n  public notClasses: string[];\n\n\n  /**\n   * Creates a new instance of Transform with an optional set of options to\n   * override the default values.\n   *\n   * @param input The options to apply to the new instance.\n   */\n  public constructor(input?: TransformInput)\n  {\n    if (fn.isDefined(input))\n    {\n      this.set( input );\n    }\n  }\n\n  /**\n   * Overrides values in this instance with ones specified in input.\n   *\n   * @param input The values to override.\n   * @return The reference to this instance.\n   */\n  public set(input: TransformInput): this\n  {\n    this.common = fn.coalesce( input.common, this.common );\n    this.system = fn.coalesce( input.system, this.system );\n    this.min = fn.coalesce( input.min, this.min );\n    this.max = fn.coalesce( input.max, this.max );\n    this.groupless = fn.coalesce( input.groupless, this.groupless );\n    this.convertWithMax = fn.coalesce( input.convertWithMax, this.convertWithMax );\n    this.convertUnit = fn.coalesce( input.convertUnit, this.convertUnit );\n    this.convertRate = fn.coalesce( input.convertRate, this.convertRate );\n    this.onlyUnits = fn.coalesce( input.onlyUnits, this.onlyUnits );\n    this.notUnits = fn.coalesce( input.notUnits, this.notUnits );\n    this.onlyClasses = fn.coalesce( input.onlyClasses, this.onlyClasses );\n    this.notClasses = fn.coalesce( input.notClasses, this.notClasses );\n\n    return this;\n  }\n\n  /**\n   * Returns a Transform instance which matches the desired options. If no\n   * options are specified the reference to this instance is returned. If the\n   * options are already an instance of Transform its returned. If options are\n   * specified a new instance is created with the options of this instance, and\n   * the given options applied with [[Transform.set]].\n   *\n   * @param input The options desired.\n   * @return An instance of this class which matches the desired options.\n   */\n  public extend(input?: TransformInput): Transform\n  {\n    let extended: Transform = this;\n\n    if (fn.isDefined(input))\n    {\n      if (input instanceof Transform)\n      {\n        extended = input;\n      }\n      else\n      {\n        extended = new Transform( this );\n        extended.set( input );\n      }\n    }\n\n    return extended;\n  }\n\n  /**\n   * Determines whether the given range is valid according to this instance.\n   *\n   * @param range The range to test.\n   * @return True if the range matches this transform, otherwise false.\n   */\n  public isValidRange(range: Range): boolean\n  {\n    if (range.max.value < this.min)\n    {\n      return false;\n    }\n\n    if (range.min.value > this.max)\n    {\n      return false;\n    }\n\n    let group: Group = this.convertWithMax ? range.max.group : range.min.group;\n\n    return this.isVisibleGroup(group);\n  }\n\n  /**\n   * Determines whether the given group (and optionally a current group) is\n   * valid or visible according to this instance.\n   *\n   * @param group The group to test.\n   * @param givenGroup The current group if available.\n   * @return True if the group matches this transform, otherwise false.\n   */\n  public isVisibleGroup(group: Group, givenGroup?: Group): boolean\n  {\n    if (!group)\n    {\n      return this.groupless;\n    }\n\n    return this.isCommonMatch( group ) &&\n      this.isSystemMatch( group, givenGroup ) &&\n      this.isUnitMatch( group ) &&\n      this.isClassMatch( group.parent );\n  }\n\n  /**\n   * Determines whether the given group matches the common option on this\n   * instance.\n   *\n   * @param group The group to test.\n   * @return True if the group matches the common option, otherwise false.\n   */\n  public isCommonMatch(group: Group): boolean\n  {\n    return !this.common || group.common;\n  }\n\n  /**\n   * Determines whether the given group (and optionally a current group)\n   * matches the system option on this instance.\n   *\n   * @param group The group to test.\n   * @param givenGroup The current group if available.\n   * @return True if the group matches ths system option, otherwise false.\n   */\n  public isSystemMatch(group: Group, givenGroup?: Group): boolean\n  {\n    switch (this.system)\n    {\n      case System.METRIC:\n        return group.system === System.METRIC || group.system === System.ANY;\n      case System.US:\n        return group.system === System.US || group.system === System.ANY;\n      case System.NONE:\n        return false;\n      case System.ANY:\n        return true;\n      case System.GIVEN:\n        return !givenGroup || group.baseUnit === givenGroup.baseUnit;\n    }\n\n    return false;\n  }\n\n  /**\n   * Determines whether the given class matches the classes options on this\n   * instance.\n   *\n   * @param parent The class to test.\n   * @return True if the class matches the classes options, otherwise false.\n   */\n  public isClassMatch(parent: Class): boolean\n  {\n    if (this.onlyClasses)\n    {\n      return this.onlyClasses.indexOf( parent.name ) !== -1;\n    }\n\n    if (this.notClasses)\n    {\n      return this.notClasses.indexOf( parent.name ) === -1;\n    }\n\n    return true;\n  }\n\n  /**\n   * Determines whether the given group matches the unit options on this\n   * instance.\n   *\n   * @param group The group to test.\n   * @return True if the group matches the unit options, otherwise false.\n   */\n  public isUnitMatch(group: Group): boolean\n  {\n    if (this.onlyUnits)\n    {\n      return this.onlyUnits.indexOf( group.unit ) !== -1;\n    }\n\n    if (this.notUnits)\n    {\n      return this.notUnits.indexOf( group.unit ) === -1;\n    }\n\n    return true;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Transform.ts","\nimport { Plurality } from './Plurality';\nimport { System } from './System';\nimport { Class, ClassMap } from './Class';\nimport { Output } from './Output';\nimport { Group, GroupMap, GroupList } from './Group';\nimport { Transform } from './Transform';\nimport { Value } from './Value';\nimport { Sort } from './Sort';\n\n\n/**\n * The global class which keeps track of all unit mappings and global options.\n *\n * This class is also responsible for creating dynamic classes and groups based\n * on approximation when a desired unit is not defined by the developer.\n */\nexport class Core\n{\n\n  /**\n   * The map of defined classes by their name.\n   */\n  public static classMap: ClassMap = {};\n\n  /**\n   * An array of the defined classes.\n   */\n  public static classes: Class[] = [];\n\n  /**\n   * A map of groups by their acceptable units.\n   */\n  public static unitToGroup: GroupMap = {};\n\n  /**\n   * A list of dynamically created groups based on units specified by a user\n   * which are not defined by the developer.\n   */\n  public static dynamicGroups: GroupList = [];\n\n  /**\n   * A map of the dynamically created groups by a key determined by\n   * [[Core.getDynamicMatch]].\n   */\n  public static dynamicMatches: GroupMap = {};\n\n  /**\n   * Dynamic groups are mapped together (by default) by looking at the first few\n   * characters.\n   *\n   * @see [[Core.getDynamicMatch]]\n   */\n  public static dynamicMatchLength: number = 3;\n\n\n  /**\n   * The global options used for outputting [[Base]], [[Range]], and [[Value]]s\n   * which may be overridden by specifying any number of options.\n   *\n   * @see [[Base.output]]\n   * @see [[Range.output]]\n   * @see [[Value.output]]\n   */\n  public static globalOutput: Output = new Output();\n\n  /**\n   * The global transform options used for transforming a [[Base]] instance\n   * by specifying what sort of units/groups are visible to the user.\n   *\n   * @see [[Base.normalize]]\n   * @see [[Base.compact]]\n   * @see [[Base.expand]]\n   * @see [[Base.conversions]]\n   * @see [[Base.filter]]\n   */\n  public static globalTransform: Transform = new Transform();\n\n  /**\n   * The global sort options used for ordering ranges in a [[Base]] instance.\n   *\n   * @see [[Base.sort]]\n   */\n  public static globalSort: Sort = new Sort();\n\n\n  /**\n   * Returns a [[Group]] instance mapped by the given unit. If no unit is given\n   * `null` is returned. If the unit isn't mapped to a group a dynamic group\n   * match is looked at and if none are found and `createDynamic` is true a new\n   * dynamic group is created.\n   *\n   * @param unit The unit of the group to get.\n   * @param createDynamic If creating a dynamic group should be created if an\n   *  existing group could not be found.\n   * @return The group matched to the unit or null if none was found.\n   * @see [[Core.getDynamicMatch]]\n   * @see [[Core.addDynamicUnit]]\n   * @see [[Core.newDynamicGroup]]\n   */\n  public static getGroup(unit: string, createDynamic: boolean = true): Group\n  {\n    if (!unit)\n    {\n      return null;\n    }\n\n    let exactGroup: Group = Core.unitToGroup[ unit ];\n\n    if (exactGroup)\n    {\n      return exactGroup;\n    }\n\n    let normalizedUnit: string = unit.toLowerCase();\n    let normalizedGroup: Group = Core.unitToGroup[ normalizedUnit ];\n\n    if (normalizedGroup)\n    {\n      return normalizedGroup;\n    }\n\n    if (!createDynamic)\n    {\n      return null;\n    }\n\n    let dynamicUnit: string = Core.getDynamicMatch( unit );\n    let dynamicGroup: Group = Core.dynamicMatches[ dynamicUnit ];\n\n    if (dynamicGroup)\n    {\n      return Core.addDynamicUnit( unit, dynamicGroup );\n    }\n\n    return Core.newDynamicGroup( unit );\n  }\n\n  /**\n   * Sets the given unit as the preferred unit for the group it belongs to. If a\n   * group is not found then this has no affect.\n   *\n   * @param unit The unit to mark as the preferred unit.\n   * @see [[Core.getGroup]]\n   */\n  public static setPreferred(unit: string): void\n  {\n    let group: Group = this.getGroup( unit, false );\n\n    if (group)\n    {\n      group.setPreferred( unit );\n    }\n  }\n\n  /**\n   * Sets whether the group associated with the given unit is common. A common\n   * group is one a user is familiar with and would be okay seeing values\n   * represented in. If a group is not found then this has no affect.\n   *\n   * @param unit The unit of a group to set the common flag.\n   * @param common Whether the associated group should be common.\n   * @see [[Core.getGroup]]\n   */\n  public static setCommon(unit: string, common: boolean = true): void\n  {\n    let group: Group = this.getGroup( unit, false );\n\n    if (group)\n    {\n      group.setCommon( common );\n    }\n  }\n\n  /**\n   * Sets the denominators for the group associated to the given unit.\n   * Denominators are useful for calculating a fraction from a value.\n   *\n   * @param unit The unit of a group to set the denominators of.\n   * @param denominators The new denominators for the group.\n   * @see [[Core.getGroup]]\n   */\n  public static setDenominators(unit: string, denominators: number[]): void\n  {\n    let group: Group = this.getGroup( unit, false );\n\n    if (group)\n    {\n      group.setDenominators( denominators );\n    }\n  }\n\n  /**\n   * Adds the given class and all groups and units to the global state. If there\n   * are units mapped to other groups they are overwritten by the units in the\n   * given class.\n   *\n   * @param parent The class to add to the global state.\n   */\n  public static addClass(parent: Class): void\n  {\n    this.classMap[ parent.name ] = parent;\n    this.classes.push( parent );\n\n    let groups: GroupMap = parent.groupMap;\n\n    for (let unit in groups)\n    {\n      this.unitToGroup[ unit ] = groups[ unit ];\n    }\n  }\n\n  /**\n   * Adds an array of classes to the global state.\n   *\n   * @see [[Core.addClass]]\n   */\n  public static addClasses(...classes: Class[]): void\n  {\n    for (let i = 0; i < classes.length; i++)\n    {\n      this.addClass( classes[ i ] );\n    }\n  }\n\n  /**\n   * Adds the unit to the given dynamic group. This function also updates the\n   * plurality of all the units currently in the group.\n   *\n   * @param unit The unit to add to the given group.\n   * @param group The dynamically created group.\n   * @return The instance of the given group.\n   */\n  public static addDynamicUnit(unit: string, group: Group): Group\n  {\n    group.units[ unit ] = Plurality.EITHER;\n\n    let unitCount: number = 0;\n\n    for (let groupUnit in group.units)\n    {\n      if (groupUnit)\n      {\n        unitCount++;\n      }\n    }\n\n    if (unitCount > 1)\n    {\n      let longest: string;\n\n      for (let groupUnit in group.units)\n      {\n        group.units[ groupUnit ] = Plurality.SINGULAR;\n\n        if (!longest || groupUnit.length > longest.length)\n        {\n          longest = groupUnit;\n        }\n      }\n\n      if (longest)\n      {\n        group.units[ longest ] = Plurality.PLURAL;\n      }\n    }\n\n    group.updateUnits();\n\n    this.unitToGroup[ unit ] = group;\n    this.unitToGroup[ unit.toLowerCase() ] = group;\n\n    this.dynamicMatches[ this.getDynamicMatch( unit ) ] = group;\n\n    return group;\n  }\n\n  /**\n   * Creates a dynamic class & group based on the given unit and adds it to the\n   * global state. By default the group is marked with [[System.ANY]], is\n   * common, and has the valid denominators 2, 3, 4, 5, 6, 8, 10.\n   *\n   * @param unit The initial unit of the group to use as the name of the class\n   *  and the base unit of the group.\n   * @return An instance of a new Group with a new parent Class.\n   */\n  public static newDynamicGroup(unit: string): Group\n  {\n    let parent: Class = new Class(unit);\n\n    let group: Group = parent.addGroup({\n      system: System.ANY,\n      unit: unit,\n      common: true,\n      baseUnit: unit,\n      denominators: [2, 3, 4, 5, 6, 8, 10],\n      units: {}\n    });\n\n    group.setDynamic();\n\n    this.addDynamicUnit( unit, group );\n    this.dynamicGroups.push( group );\n\n    return group;\n  }\n\n  /**\n   * The function which takes a unit and generates a string which should be used\n   * to mark similarly spelled units under the same dynamic group.\n   *\n   * @param unit The unit to build a key from.\n   * @return The key which identifies the dynamic group.\n   */\n  public static getDynamicMatch(unit: string): string\n  {\n    return unit.substring( 0, this.dynamicMatchLength ).toLowerCase();\n  }\n\n  /**\n   * The function which takes to values and determines which one is more\n   * \"normal\" or \"human friendly\".\n   *\n   * @param fromValue The most normal value found so far.\n   * @param toValue The value to compare to.\n   * @param transform The transformation rules to guide the function to choose\n   *  the more normal value.\n   * @param forOutput The output options to guide the function to choose the\n   *  more normal value.\n   * @return True if `toValue` appears more normal than `fromValue`.\n   */\n  // @ts-ignore\n  public static isMoreNormal(fromValue: Value, toValue: Value, transform: Transform, forOutput: Output): boolean\n  {\n    let fromString: string = forOutput.value( fromValue );\n    let toString: string = forOutput.value( toValue );\n\n    return toString.length <= fromString.length;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Core.ts","\nimport { Functions as fn } from './Functions';\nimport { Transform } from './Transform';\nimport { Output, OutputInput } from './Output';\nimport { Group } from './Group';\nimport { Core } from './Core';\n\n\n/**\n * A class which contains a parsed number or fraction.\n */\nexport class Value\n{\n\n  /**\n   * A value instance which contains invalid numbers.\n   */\n  public static INVALID: Value = new Value(Number.NaN, Number.NaN, 1, '', null, '', null);\n\n  /**\n   * The number parsed or num / den if a fraction was parsed.\n   */\n  public readonly value: number;\n\n  /**\n   * The numerator parsed or calculated if this is a fraction, otherwise this\n   * will be equal to [[Value.value]].\n   */\n  public readonly num: number;\n\n  /**\n   * The denominator parsed or calculated if this is a fraction, otherwise this\n   * will be equal to 1.\n   */\n  public readonly den: number;\n\n  /**\n   * The group determined based on the unit.\n   */\n  public readonly group: Group;\n\n  /**\n   * The unit parsed or chosen to be output to the user.\n   */\n  public readonly unit: string;\n\n  /**\n   * The group determined based on the rate.\n   */\n  public readonly rateGroup: Group;\n\n  /**\n   * The unit parsed or chosen for rate to be output to the user.\n   */\n  public readonly rate: string;\n\n\n  /**\n   * Creates a new instance of Value given the value, possible numerator and\n   * denominator, and the unit and it's group.\n   *\n   * @param value [[Value.value]]\n   * @param num [[Value.num]]\n   * @param den [[Value.den]]\n   * @param unit [[Value.unit]]\n   * @param group [[Value.group]]\n   */\n  public constructor(value: number, num: number, den: number, unit: string, group: Group, rate: string, rateGroup: Group)\n  {\n    let divisor: number = fn.gcd(num, den);\n    this.value = value;\n    this.num = num / divisor;\n    this.den = den / divisor;\n    this.unit = unit;\n    this.group = group;\n    this.rate = rate;\n    this.rateGroup = rateGroup;\n  }\n\n  /**\n   * Returns true if this value was successfully parsed from some input.\n   */\n  public get isValid(): boolean\n  {\n    return isFinite(this.value);\n  }\n\n  /**\n   * Returns true if this value is a fraction with a numerator and denoninator.\n   */\n  public get isFraction(): boolean\n  {\n    return this.den !== 1;\n  }\n\n  /**\n   * Returns true if this value is a number and not a fraction.\n   */\n  public get isDecimal(): boolean\n  {\n    return this.den === 1;\n  }\n\n  /**\n   * Returns true if this value is zero.\n   */\n  public get isZero(): boolean\n  {\n    return fn.isZero( this.value );\n  }\n\n  /**\n   * Returns true if this value is singular.\n   *\n   * @see [[Functions.isSingular]]\n   */\n  public get isSingular(): boolean\n  {\n    return fn.isSingular( this.value );\n  }\n\n  /**\n   * Returns true if this value is a rate.\n   */\n  public get isRate(): boolean\n  {\n    return !!this.rate;\n  }\n\n  /**\n   * Returns the number of this value relative to the base unit.\n   */\n  public get scaled(): number\n  {\n    return this.group ? this.value * this.group.baseScale : this.value;\n  }\n\n  /**\n   * Returns the number of this value relative to the first base unit of it's\n   * class.\n   */\n  public get classScaled(): number\n  {\n    return this.group ? this.value * this.group.classScale : this.value;\n  }\n\n  /**\n   * Returns the number which represents the fraction in the value. There may\n   * be a difference between this value and the number when the fraction is\n   * calculated from the denominators of the group.\n   */\n  public get calculated(): number\n  {\n    return this.num / this.den;\n  }\n\n  /**\n   * Returns the whole number for the mixed fraction of this value. If this\n   * value is not a fraction 0 is returned.\n   */\n  public get mixedWhole(): number\n  {\n    return this.den !== 1 ? Math.floor(this.num / this.den) : 0;\n  }\n\n  /**\n   * Returns the numerator for the mixed fraction of this value. If this value\n   * is not a fraction then the numerator is returned.\n   */\n  public get mixedNum(): number\n  {\n    return this.den !== 1 ? this.num % this.den : this.num;\n  }\n\n  /**\n   * Returns the floor of the number in this value.\n   */\n  public get floor(): number\n  {\n    return Math.floor(this.value);\n  }\n\n  /**\n   * Returns the ceiling of the number in this value.\n   */\n  public get ceil(): number\n  {\n    return Math.ceil(this.value);\n  }\n\n  /**\n   * Returns the truncated number in this value taking into account it's sign.\n   */\n  public get truncate(): number\n  {\n    return this.value < 0 ? this.ceil : this.floor;\n  }\n\n  /**\n   * Returns the fractional part of the number in this value.\n   */\n  public get remainder(): number\n  {\n    return this.value - this.floor;\n  }\n\n  /**\n   * Returns the signed distance the number of this value is from the fraction\n   * numerator and denominator determined. If this value is not a fraction then\n   * this should return zero.\n   */\n  public get error(): number\n  {\n    return this.calculated - this.value;\n  }\n\n  /**\n   * Returns the absolute distance the number of this value is from the fraction\n   * numerator and denominator determined. If this value is not a fraction then\n   * this should return zero.\n   */\n  public get distance(): number\n  {\n    return fn.abs(this.error);\n  }\n\n  /**\n   * Calculates the scale necessary to switch this value from the current rate\n   * to the provided rate.\n   *\n   * @param rate The rate group.\n   * @return The calculated scale.\n   */\n  public getRateScale(rate: Group): number\n  {\n    return rate ? rate.parent.convert( 1, rate, this.rateGroup, 1 ) : 1;\n  }\n\n  /**\n   * Determines whether the given value is compatible with this value to perform\n   * operations with.\n   *\n   * @param other The value to test against.\n   * @return True if the given value has compatible unit and rate groups.\n   */\n  public isMatch(other: Value): boolean\n  {\n    let group: Group = this.group;\n    let groupOther: Group = other.group;\n    let groupMatch: boolean = groupOther === group || ( groupOther && group && groupOther.parent === group.parent );\n\n    if (!groupMatch)\n    {\n      return false;\n    }\n\n    let rate: Group = this.rateGroup;\n    let rateOther: Group = other.rateGroup;\n    let rateMatch: boolean = rateOther === rate || ( rateOther && rate && rateOther.parent === rate.parent );\n\n    return rateMatch;\n  }\n\n  /**\n   * Returns a version of this value with the preferred unit.\n   *\n   * @return A new value or the reference to this instance if it's groupless.\n   * @see [[Group.preferredUnit]]\n   */\n  public preferred(): Value\n  {\n    return this.group ? new Value(this.value, this.num, this.den, this.group.preferredUnit, this.group, this.rateGroup ? this.rateGroup.preferredUnit : this.rate, this.rateGroup) : this;\n  }\n\n  /**\n   * Returns a copy of this value.\n   *\n   * @return A new value.\n   */\n  public copy(): Value\n  {\n    return new Value(this.value, this.num, this.den, this.unit, this.group, this.rate, this.rateGroup);\n  }\n\n  /**\n   * Returns a value equivalent to zero with the unt and group of this instance.\n   *\n   * @return A new value.\n   */\n  public zero(): Value\n  {\n    return new Value(0, 0, 1, this.unit, this.group, this.rate, this.rateGroup);\n  }\n\n  /**\n   * Returns the truncated version of this value. That's a value where the\n   * number is a whole number.\n   *\n   * @return A new value.\n   */\n  public truncated(): Value\n  {\n    return new Value(this.truncate, this.truncate, 1, this.unit, this.group, this.rate, this.rateGroup);\n  }\n\n  /**\n   * Returns a version of this value as a fraction.\n   *\n   * @return A new value or the reference to this instance if it's a fraction.\n   */\n  public fractioned(): Value\n  {\n    if (this.isFraction)\n    {\n      return this;\n    }\n\n    if (this.group)\n    {\n      return Value.fromNumberWithDenominators(this.value, this.group.denominators, this.unit, this.group, this.rate, this.rateGroup);\n    }\n\n    return this;\n  }\n\n  /**\n   * Returns a version of this value as a number.\n   *\n   * @return A new value or the reference to this instance if it's a number.\n   */\n  public numbered(): Value\n  {\n    if (this.isFraction)\n    {\n      return new Value(this.value, this.value, 1, this.unit, this.group, this.rate, this.rateGroup);\n    }\n\n    return this;\n  }\n\n  /**\n   * Converts this value to the given group and returns the result.\n   *\n   * @param to The group to convert to.\n   * @param rate The group for the rate.\n   * @return The converted value or the number of this value if there's no group.\n   */\n  public convertTo(to: Group, rate: Group = null): number\n  {\n    let group: Group = this.group;\n    let rateScale: number = this.getRateScale( rate );\n    let value: number = this.value * rateScale;\n\n    return group ? group.parent.convert( value, group, to ) : value;\n  }\n\n  /**\n   * Converts this value to the given group and returns a new value. The new\n   * value will attempted to be converted to a fraction.\n   *\n   * @param group The group to convert to.\n   * @param rate The group for the rate.\n   * @return A new value.\n   */\n  public convertToValue(group: Group, rate: Group = null): Value\n  {\n    return Value.fromNumberForGroup( this.convertTo( group, rate ), group, rate || this.rateGroup );\n  }\n\n  /**\n   * Determines the available conversions of this value for all groups\n   * that are valid for the given transform.\n   *\n   * @param transform Transform which controls the units and values acceptable.\n   * @param reverse Whether to iterate from largest units to smallest units\n   *  (`true`), or from smallest to largest (`false`).\n   * @param callback The function to invoke for each valid conversion.\n   * @param callback.transformed The conversion calculated.\n   * @param callback.index The index of the conversion during iteration.\n   * @see [[Group.matches]]\n   */\n  public conversions(transform: Transform, reverse: boolean, callback: (transformed: Value, index: number) => void): void\n  {\n    let unitGroup: Group = this.group;\n    let rateGroup: Group = this.rateGroup;\n    let convertUnit: boolean = unitGroup && transform.convertUnit;\n    let convertRate: boolean = rateGroup && transform.convertRate;\n    let index: number = 0;\n\n    if (convertUnit && convertRate)\n    {\n      rateGroup.matches(transform, reverse, (rate) =>\n      {\n        unitGroup.matches(transform, reverse, (group) =>\n        {\n          callback( this.convertToValue( group, rate ), index++ );\n        });\n      });\n    }\n    else if (convertUnit)\n    {\n      unitGroup.matches(transform, reverse, (group) =>\n      {\n        callback( this.convertToValue( group ), index++ );\n      });\n    }\n    else if (convertRate)\n    {\n      rateGroup.matches(transform, reverse, (rate) =>\n      {\n        callback( this.convertToValue( unitGroup, rate ), index++ );\n      });\n    }\n  }\n\n  /**\n   * Returns a value based on this value with the unit that best represents the\n   * value. What is best is typically related to the magnitude of the value.\n   * Really small and really large values are harder for people to comprehend so\n   * the unit which results in the most normal looking value is determined.\n   *\n   * @param transform Transform which controls the units and values acceptable.\n   * @param forOutput The output that may be used so the most normal looking\n   *  value can be determined.\n   * @return The most normal value found.\n   * @see [[Value.conversions]]\n   * @see [[Core.isMoreNormal]]\n   */\n  public normalize(transform: Transform, forOutput: Output): Value\n  {\n    let closest: Value;\n\n    this.conversions(transform, false, (convert) =>\n    {\n      let acceptable: boolean = !forOutput.isNumber( convert );\n\n      if (!acceptable)\n      {\n        let number: string = forOutput.number( convert.value );\n\n        acceptable = number !== '0';\n      }\n\n      if (acceptable)\n      {\n        if (!closest || Core.isMoreNormal(closest, convert, transform, forOutput))\n        {\n          closest = convert;\n        }\n      }\n    });\n\n    return closest || this;\n  }\n\n  /**\n   * Calculates the sum of this value and the given addend scaled by some\n   * factor. This is equivalent to `result = this + (addend * scale)`.\n   *\n   * @param addend The value to add to this.\n   * @param scale The factor to scale the addend by before adding it to this.\n   * @return A new instance.\n   */\n  public add(addend: Value, scale: number = 1): Value\n  {\n    let rateScale: number = this.getRateScale( addend.rateGroup );\n    let totalScale: number = rateScale * scale;\n    let num: number = this.num * addend.den + addend.num * this.den * totalScale;\n    let den: number = this.den * addend.den;\n    let result: number = this.value + addend.value * totalScale;\n\n    return new Value(result, num, den, this.unit, this.group, this.rate, this.rateGroup);\n  }\n\n  /**\n   * Calculates the difference between this value and the subtrahend scaled by\n   * some factor. This is equivalent to `result = this - (subtrahend * scale)`.\n   *\n   * @param subtrahend The value to subtract from this.\n   * @param scale The factor to scale the subtrahend by before subtraction.\n   * @return A new instance.\n   */\n  public sub(subtrahend: Value, scale: number = 1): Value\n  {\n    let rateScale: number = this.getRateScale( subtrahend.rateGroup );\n    let totalScale: number = rateScale * scale;\n    let num: number = this.num * subtrahend.den - subtrahend.num * this.den * totalScale;\n    let den: number = this.den * subtrahend.den;\n    let result: number = this.value - subtrahend.value * totalScale;\n\n    return new Value(result, num, den, this.unit, this.group, this.rate, this.rateGroup);\n  }\n\n  /**\n   * Calculates a new value by multiplying this by a given factor. This is\n   * equivalent to `result = this * scale`.\n   *\n   * @param scale The factor to scale this instance by.\n   * @return A new instance.\n   */\n  public scale(scale: number): Value\n  {\n    return new Value(this.value * scale, this.num * scale, this.den, this.unit, this.group, this.rate, this.rateGroup);\n  }\n\n  /**\n   * Calculates a new value by multiplying this by a given value. This is\n   * equivalent to `result = this * scale`.\n   *\n   * @param scale The value to scale this instance by.\n   * @return A new instance.\n   */\n  public mul(scale: Value): Value\n  {\n    let rateScale: number = this.getRateScale( scale.rateGroup );\n    let num: number = this.num * scale.num * rateScale;\n    let den: number = this.den * scale.den;\n    let result: number = this.value * scale.value * rateScale;\n\n    return new Value(result, num, den, this.unit, this.group, this.rate, this.rateGroup);\n  }\n\n  /**\n   * Converts this value to a string with the given output options taking into\n   * account the global options.\n   *\n   * @param options The options to override the global output options.\n   * @return The string representation of this instance.\n   * @see [[Output]]\n   */\n  public output(options?: OutputInput): string\n  {\n    let output: Output = Core.globalOutput.extend( options );\n\n    return output.value( this );\n  }\n\n  /**\n   * Returns the units of this value as a string based on the global output\n   * options.\n   *\n   * @param options The options to override the global output options.\n   * @return The string representation of the units of this value.\n   * @see [[Output]]\n   */\n  public units(options?: OutputInput): string\n  {\n    let output: Output = Core.globalOutput.extend( options );\n\n    return output.units( this );\n  }\n\n  /**\n   * Returns a Value instance which is a number with the optional unit and group.\n   *\n   * @param value The number.\n   * @param unit The unit, if any, of the number.\n   * @param group The group which matches the unit.\n   * @return A new instance.\n   */\n  public static fromNumber(value: number, unit: string = '', group: Group = null, rate: string = '', rateGroup: Group = null): Value\n  {\n    return new Value(value, value, 1, unit, group, rate, rateGroup);\n  }\n\n  /**\n   * Returns a Value instance which tries to be a fraction given a range of\n   * denominators. If the number is already whole or a fraction close\n   * enough to the number cannot be found a value which is a number is returned.\n   *\n   * @param value The number to try to find a fraction for.\n   * @param unit The unit, if any, of the number.\n   * @param group The group which matches the unit.\n   * @param minDen The starting denominator to inclusively try.\n   * @param maxDen The last denominator to inclusively try.\n   * @return A new instance.\n   */\n  public static fromNumberWithRange(value: number, unit: string = '', group: Group = null, minDen: number = 1, maxDen: number = 100, rate: string = '', rateGroup: Group = null): Value\n  {\n    let closestDenominator: number = 0;\n    let closestDistance: number = -1;\n\n    for (let i = minDen; i <= maxDen; i++)\n    {\n      let den = i;\n      let num = Math.floor( den * value );\n      let actual = num / den;\n      let distance = fn.abs(value - actual);\n\n      if (closestDistance === -1 || distance < closestDistance)\n      {\n        closestDistance = distance;\n        closestDenominator = den;\n      }\n    }\n\n    if (closestDistance > fn.EPSILON)\n    {\n      return new Value(value, value, 1, unit, group, rate, rateGroup);\n    }\n\n    if (closestDenominator === 0)\n    {\n      closestDenominator = 1;\n    }\n\n    return new Value(value, Math.floor(value * closestDenominator), closestDenominator, unit, group, rate, rateGroup);\n  }\n\n  /**\n   * Returns a Value instance which tries to be a fraction based on the\n   * denominators of the group. If a valid fraction could not be found then the\n   * instance returned will be a number value. Since a unit is not passed here,\n   * the preferred unit of the group is used as the unit of the value.\n   *\n   * @param value The number to try to find a fraction for.\n   * @param group The group for the unit and also the denominators to try.\n   * @param rateGroup The group for the rate.\n   * @return A new instance.\n   */\n  public static fromNumberForGroup(value: number, group: Group, rateGroup: Group): Value\n  {\n    return this.fromNumberWithDenominators( value, group.denominators, group.preferredUnit, group, rateGroup ? rateGroup.preferredUnit : '', rateGroup );\n  }\n\n  /**\n   * Returns a Value instance which tries to be a fraction based on the\n   * denominators of the group. If a valid fraction could not be found then the\n   * instance returned will be a number value.\n   *\n   * @param value The number to try to find a fraction for.\n   * @param denominators The array of denominators to try.\n   * @param unit The unit, if any, of the number.\n   * @param group The group which matches the unit.\n   * @return A new instance.\n   */\n  public static fromNumberWithDenominators(value: number, denominators: number[], unit: string = '', group: Group = null, rate: string = '', rateGroup: Group = null): Value\n  {\n    let closestDenominator: number = 0;\n    let closestDistance: number = -1;\n\n    for (let i = 0; i < denominators.length; i++)\n    {\n      let den = denominators[ i ];\n      let num = Math.floor( den * value );\n      let actual = num / den;\n      let distance = fn.abs(value - actual);\n\n      if (closestDistance === -1 || distance < closestDistance)\n      {\n        closestDistance = distance;\n        closestDenominator = den;\n      }\n    }\n\n    if (closestDistance > fn.EPSILON)\n    {\n      return new Value(value, value, 1, unit, group, rate, rateGroup);\n    }\n\n    if (closestDenominator === 0)\n    {\n      closestDenominator = 1;\n    }\n\n    return new Value(value, Math.floor(value * closestDenominator), closestDenominator, unit, group, rate, rateGroup);\n  }\n\n  /**\n   * Returns a Value instance for a given fraction specified by a numerator and\n   * denominator.\n   *\n   * @param num The numerator of the fraction.\n   * @param den The denominator of the fraction.\n   * @param unit The unit, if any, of the fraction.\n   * @param group The group which matches the unit.\n   * @return A new instance.\n   */\n  public static fromFraction(num: number, den: number, unit: string = '', group: Group = null, rate: string = '', rateGroup: Group = null): Value\n  {\n    return new Value(num / den, num, den, unit, group, rate, rateGroup);\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Value.ts","\nimport { Functions as fn } from './Functions';\nimport { Value } from './Value';\nimport { Transform } from './Transform';\nimport { Output, OutputInput } from './Output';\nimport { Core } from './Core';\n\n\n/**\n * An array of ranges.\n */\nexport type RangeList = Range[];\n\n/**\n * A function which takes a range and might return a range based on the given.\n */\nexport type RangeMutator = (range: Range) => Range;\n\n\n/**\n * A pair of minimum and maximum values. A range can be fixed which means the\n * minimum and maximum are equivalent - in which case the range behaves like\n * a [[Value]].\n */\nexport class Range\n{\n\n  /**\n   * A range instance which contains invalid values.\n   */\n  public static INVALID: Range = new Range( Value.INVALID, Value.INVALID );\n\n\n  /**\n   * The minimum value in the range.\n   */\n  public readonly min: Value;\n\n  /**\n   * The maximum value in the range.\n   */\n  public readonly max: Value;\n\n\n  /**\n   * Creates a new instance of Range given the minimum and maximum values.\n   *\n   * @param min The minimum value for the range.\n   * @param max The maximum value for the range.\n   */\n  public constructor(min: Value, max: Value)\n  {\n    this.min = min.value < max.value ? min : max;\n    this.max = max.value > min.value ? max : min;\n  }\n\n  /**\n   * True if the min and max are both valid.\n   */\n  public get isValid(): boolean\n  {\n    return this.min.isValid && this.max.isValid;\n  }\n\n  /**\n   * True if the min or max are a fraction.\n   */\n  public get isFraction(): boolean\n  {\n    return this.min.isFraction || this.max.isFraction;\n  }\n\n  /**\n   * True if the min and max are decimal.\n   */\n  public get isDecimal(): boolean\n  {\n    return this.min.isDecimal && this.max.isDecimal;\n  }\n\n  /**\n   * True if the min and max are not the same value.\n   */\n  public get isRange(): boolean\n  {\n    return this.min.value !== this.max.value;\n  }\n\n  /**\n   * True if the min and max are the same value.\n   */\n  public get isFixed(): boolean\n  {\n    return this.min.value === this.max.value;\n  }\n\n  /**\n   * True if the min and max are both equal to zero.\n   */\n  public get isZero(): boolean\n  {\n    return this.min.isZero && this.max.isZero;\n  }\n\n  /**\n   * True if the min and max are both singular (1 or -1).\n   */\n  public get isSingular(): boolean\n  {\n    return this.min.isSingular && this.max.isSingular;\n  }\n\n  /**\n   * True if one of min and max are rates.\n   */\n  public get isRate(): boolean\n  {\n    return this.min.isRate && this.max.isRate;\n  }\n\n  /**\n   * The average number between the min and max.\n   */\n  public get average(): number\n  {\n    return (this.min.value + this.max.value) * 0.5;\n  }\n\n  /**\n   * The minimum value of this range.\n   */\n  public get value(): number\n  {\n    return this.min.value;\n  }\n\n  /**\n   * The minimum value of this range.\n   */\n  public get minimum(): number\n  {\n    return this.min.value;\n  }\n\n  /**\n   * The maximum value of this range.\n   */\n  public get maximum(): number\n  {\n    return this.max.value;\n  }\n\n  /**\n   * The unit which identifies the group of the minimum value or `null` if the\n   * minimum value does not have a group.\n   */\n  public get unit(): string\n  {\n    return this.min.group ? this.min.group.unit : null;\n  }\n\n  /**\n   * Determines if the given range matches this range enough to allow a\n   * simple mathematical operation between the two ranges.\n   *\n   * @param range The range to test.\n   * @return True if the groups of the given range match this range.\n   */\n  public isExactMatch(range: Range): boolean\n  {\n    return this.min.group === range.min.group &&\n      this.max.group === range.max.group &&\n      this.min.rateGroup === range.min.rateGroup &&\n      this.max.rateGroup === range.max.rateGroup;\n  }\n\n  /**\n   * Determines if the given range matches this range enough to allow a\n   * complex mathematical operation between the two ranges.\n   *\n   * @param min The minimum of the range to test.\n   * @param max The maximum of the range to test.\n   * @return True if the min and max have compatible values.\n   */\n  public isMatch(min: Value, max: Value): boolean\n  {\n    return this.min.isMatch( min ) && this.max.isMatch( max );\n  }\n\n  /**\n   * @return A range which has the min and max converted to their preferred units.\n   * @see [[Value.preferred]]\n   */\n  public preferred(): Range\n  {\n    let min: Value = this.min.preferred();\n    let max: Value = this.max.preferred();\n\n    return new Range( min, max );\n  }\n\n  /**\n   * @return A range which has only positive values. If the range is entirely\n   *  negative then `null` is returned.\n   */\n  public positive(): Range\n  {\n    let minNegative: boolean = this.min.value < 0;\n    let maxNegative: boolean = this.max.value < 0;\n\n    if (maxNegative)\n    {\n      return null;\n    }\n\n    let min: Value = minNegative ? this.min.zero() : this.min.copy();\n    let max: Value = this.max.copy();\n\n    return new Range( min, max );\n  }\n\n  /**\n   * @return A range which has only negative values. If the range is entirely\n   *  positive then `null` is returned.\n   */\n  public negative(): Range\n  {\n    let minPositive: boolean = this.min.value >= 0;\n    let maxPositive: boolean = this.max.value >= 0;\n\n    if (minPositive)\n    {\n      return null;\n    }\n\n    let min: Value = this.min.copy();\n    let max: Value = maxPositive ? this.max.zero() : this.max.copy();\n\n    return new Range( min, max );\n  }\n\n  /**\n   * @return A range which has a non-zero min and max. If both are equial to\n   *  zero then `null` is returned.\n   */\n  public nonzero(): Range\n  {\n    let minZero: boolean = fn.isZero( this.min.value );\n    let maxZero: boolean = fn.isZero( this.max.value );\n\n    if (minZero && maxZero)\n    {\n      return null;\n    }\n\n    let min: Value = this.min.copy();\n    let max: Value = this.max.copy();\n\n    return new Range( min, max );\n  }\n\n  /**\n   * @return A range with only the maximum value from this range.\n   */\n  public maxd(): Range\n  {\n    let fixed: Value = this.max.copy();\n\n    return new Range(fixed, fixed);\n  }\n\n  /**\n   * @return A range with only the minimum value from this range.\n   */\n  public mind(): Range\n  {\n    let fixed: Value = this.min.copy();\n\n    return new Range(fixed, fixed);\n  }\n\n  /**\n   * Creates a range with with units that best represent the values. This may\n   * cause the minimum and maximum values to have different units.\n   *\n   * @param transform Options to control which units and values are acceptable.\n   * @param forOutput The output options that should be used to determine which\n   *  value & unit is best.\n   * @return A new range.\n   * @see [[Value.normalize]]\n   */\n  public normalize(transform: Transform, forOutput: Output): Range\n  {\n    let min: Value = this.min.normalize( transform, forOutput );\n    let max: Value = this.max.normalize( transform, forOutput );\n\n    return new Range(min, max)\n  }\n\n  /**\n   * Adds this range and a given range (optionally scaled by a factor) together.\n   *\n   * @param addend The range to add to this instance.\n   * @param scale The factor to multiply the addend by when added it to this\n   *  instance.\n   * @return a new range.\n   * @see [[Value.add]]\n   */\n  public add(addend: Range, scale: number = 1): Range\n  {\n    let min: Value = this.min.add(addend.min, scale);\n    let max: Value = this.max.add(addend.max, scale);\n\n    return new Range(min, max);\n  }\n\n  /**\n   * Subtracts a given range (optionally scaled by a factor) from this range.\n   *\n   * @param subtrahend The range to remove from this instance.\n   * @param scale The factor to multiply the subtrahend by when subtracting it\n   *  from this instance.\n   * @return A new range.\n   * @see [[Value.sub]]\n   */\n  public sub(subtrahend: Range, scale: number = 1): Range\n  {\n    let min: Value = this.min.sub(subtrahend.min, scale);\n    let max: Value = this.max.sub(subtrahend.max, scale);\n\n    return new Range(min, max);\n  }\n\n  /**\n   * Multiplies this range by a scalar factor.\n   *\n   * @param scale The amount to multiply the range by.\n   * @return A new range.\n   * @see [[Value.scale]]\n   */\n  public scale(scale: number): Range\n  {\n    let min: Value = this.min.scale(scale);\n    let max: Value = this.max.scale(scale);\n\n    return new Range(min, max);\n  }\n\n  /**\n   * Multiplies this range by a scale value.\n   *\n   * @param scale The amount to multiply the range by.\n   * @return A new range.\n   * @see [[Value.mul]]\n   */\n  public mul(scale: Value): Range\n  {\n    let min: Value = this.min.mul(scale);\n    let max: Value = this.max.mul(scale);\n\n    return new Range(min, max);\n  }\n\n  /**\n   * Returns a range which is coerced into being represented by fractions if a\n   * valid fraction can be determined from the units valid denominators.\n   *\n   * @return A new range if the minimum and maximum are not fractions, otherwise\n   *  the reference to this range is returned.\n   * @see [[Value.fractioned]]\n   */\n  public fractioned(): Range\n  {\n    if (this.min.isFraction && this.max.isFraction)\n    {\n      return this;\n    }\n\n    let min: Value = this.min.fractioned();\n    let max: Value = this.max.fractioned();\n\n    return new Range(min, max);\n  }\n\n  /**\n   * Returns a range which has any fraction values converted to numbers.\n   *\n   * @return A new range if the mimimum or maximum are fractions, otherwise the\n   *  the reference to this range is returned.\n   * @see [[Value.numbered]]\n   */\n  public numbered(): Range\n  {\n    if (!this.min.isFraction && !this.max.isFraction)\n    {\n      return this;\n    }\n\n    let min: Value = this.min.numbered();\n    let max: Value = this.max.numbered();\n\n    return new Range(min, max);\n  }\n\n  /**\n   * Converts this range to a string with the given output options taking into\n   * account the global options.\n   *\n   * @param options The options to override the global output options.\n   * @return The string representation of this instance.\n   * @see [[Output]]\n   */\n  public output(options?: OutputInput): string\n  {\n    let output: Output = Core.globalOutput.extend( options );\n\n    return output.range( this );\n  }\n\n  /**\n   * Creates a fixed range from a given value. A fixed range behaves essentially\n   * as a value since the minimum and maximum are equivalent.\n   *\n   * @param fixed The value to be used as the min and max of the range.\n   * @return A new fixed range.\n   */\n  public static fromFixed(fixed: Value): Range\n  {\n    return new Range(fixed, fixed);\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Range.ts","\n\n/**\n * A class which stores rate abbreviation mappins to the respective unit and\n * rate unit.\n */\nexport interface Rate\n{\n  /**\n   * The main unit changing by some rate.\n   */\n  unit: string;\n\n  /**\n   * The unit which decides the rate. This typically follows per or slash (/),\n   * for example: `m/s` and `meters per second`.\n   */\n  rate: string;\n}\n\n\n/**\n * A map of [[Rate]]s by their abbreviations.\n */\nexport type RateMap = { [name: string]: Rate };\n\n\n/**\n * The class which holds [[Rate]]s mapped by their abbreviations.\n */\nexport class Rates\n{\n\n  /**\n   * An object of rates mapped by their abbreviation.\n   *\n   * @see [[Rates.add]]\n   */\n  public static registered: RateMap = {};\n\n  /**\n   * Adds all rates in the library to be available when parsing.\n   */\n  public static addDefaults()\n  {\n    this.add('miles', 'hour', ['mph']);\n    this.add('nautical miles', 'hour', ['knot']);\n    this.add('kilometers', 'hour', ['kph', 'kmph', 'km. hr.', 'k.p.h.', 'k.m.p.h.', 'km:h']);\n  }\n\n  /**\n   * Adds one or many rates given the unit, rate, and all abbreviations.\n   *\n   * @param unit The unit.\n   * @param rate The rate unit.\n   * @param names The list of abbreviations for this rate.\n   */\n  public static add(unit: string, rate: string, names: string[])\n  {\n    for (let i = 0; i < names.length; i++)\n    {\n      this.registered[ names[ i ].toLowerCase() ] = { unit, rate };\n    }\n  }\n\n  /**\n   * Gets the rate for the given input or `undefined` if none exists.\n   *\n   * @param input The input to find a rate for.\n   * @return The rate mapped by the input, otherwise `undefined`.\n   */\n  public static get(input: string): Rate\n  {\n    return this.registered[ input.toLowerCase() ];\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Rates.ts","\nimport { Functions as fn } from './Functions';\nimport { BaseInput, RangeInput, RangesInput, RangeDefinition, ValueInput, ValueDefinition, ParseResult } from './Types';\nimport { Group } from './Group';\nimport { Core } from './Core';\nimport { Range, RangeList } from './Range';\nimport { Value } from './Value';\nimport { Base } from './Base';\nimport { Translations } from './Translations';\nimport { Rate, Rates } from './Rates';\n\n\n/**\n * The class which takes user input and parses it to specific structures.\n */\nexport class Parse\n{\n\n  /**\n   * The regular expression used to split up a string into multiple ranges.\n   */\n  public static REGEX_LIST: RegExp = /\\s*,\\s*/;\n\n  /**\n   * The regular expression used to split up a range string to determine the min\n   * and maximum values.\n   */\n  public static REGEX_RANGE: RegExp = /\\s*(-?[^-]+)-(.+)/;\n\n  /**\n   * The regular expression used to parse a value number or fraction and\n   * possible unit from a string.\n   */\n  public static REGEX_PARSE: RegExp = /^\\s*(-?\\d*)(\\s+(\\d+))?(\\s*\\/\\s*(\\d+)|\\.(\\d+)|)\\s*(.*)\\s*$/i;\n\n  /**\n   * The regular expression used to split up a unit from a rateUnit.\n   */\n  public static REGEX_UNIT: RegExp = /\\s*(\\/|\\s+per\\s+)\\s*/i;\n\n  /**\n   * Parses user input into a [[Base]] instance.\n   *\n   * @param input The input to parse into a Base.\n   * @return The instance parsed from the input.\n   */\n  public static base(input: BaseInput): Base\n  {\n    if (input instanceof Base)\n    {\n      return <Base>input;\n    }\n\n    return new Base( <RangesInput>input );\n  }\n\n  /**\n   * Parses user input into a an array of [[Range]]s.\n   *\n   * @param input The input to parse.\n   * @return The instances parsed from the input.\n   */\n  public static ranges(input: RangesInput): RangeList\n  {\n    if (fn.isArray(input))\n    {\n      return this.rangesFromArray( <RangeInput[]>input );\n    }\n    else if (fn.isString(input))\n    {\n      return this.rangesFromString( <string>input );\n    }\n    else if (fn.isRangeDefinition(input))\n    {\n      return this.rangesFromArray( [ <RangeDefinition>input ] );\n    }\n    else if (fn.isValueDefinition(input))\n    {\n      return this.rangesFromArray( [ <ValueDefinition>input ] );\n    }\n\n    return [];\n  }\n\n  /**\n   * Parses user input into a an array of [[Range]]s.\n   *\n   * @param input The input to parse.\n   * @return The instances parsed from the input.\n   */\n  public static rangesFromArray(input: RangeInput[]): RangeList\n  {\n    let ranges = [];\n\n    for (let i = 0; i < input.length; i++)\n    {\n      let range: Range = this.range( input[ i ] );\n\n      ranges.push( range );\n    }\n\n    return ranges;\n  }\n\n  /**\n   * Parses user input into a an array of [[Range]]s.\n   *\n   * @param input The input to parse.\n   * @return The instances parsed from the input.\n   */\n  public static rangesFromString(input: string): RangeList\n  {\n    let ranges: string[] = input.split( this.REGEX_LIST );\n\n    return this.rangesFromArray( ranges );\n  }\n\n  /**\n   * Parses user input into a [[Range]].\n   *\n   * @param input The input to parse.\n   * @return The instance parsed from the input.\n   */\n  public static range(input: RangeInput): Range\n  {\n    if (fn.isString(input))\n    {\n      return this.rangeFromString( <string>input );\n    }\n    else if (fn.isRangeDefinition(input))\n    {\n      let range: RangeDefinition = <RangeDefinition>input;\n      let min: Value = this.value( range.min );\n      let max: Value = this.value( range.max );\n\n      return new Range( min, max );\n    }\n\n    return Range.INVALID;\n  }\n\n  /**\n   * Parses user input into a [[Range]].\n   *\n   * @param input The input to parse.\n   * @return The instance parsed from the input.\n   */\n  public static rangeFromString(input: string): Range\n  {\n    let matches: string[] = this.REGEX_RANGE.exec( input );\n\n    if (!matches)\n    {\n      let fixed: Value = this.valueFromString(input);\n\n      return new Range(fixed, fixed);\n    }\n\n    let minInput: string = matches[1];\n    let maxInput: string = matches[2];\n\n    let minParsed: ParseResult = this.input( minInput );\n    let maxParsed: ParseResult = this.input( maxInput );\n\n    if (!minParsed || !maxParsed)\n    {\n      return Range.INVALID;\n    }\n\n    let minUnit: string = minParsed.unit || maxParsed.unit;\n    let maxUnit: string = maxParsed.unit || minParsed.unit;\n\n    let minRate: string = minParsed.rate || maxParsed.rate;\n    let maxRate: string = maxParsed.rate || minParsed.rate;\n\n    let min: Value = this.valueFromResult(minParsed, minUnit, minRate);\n    let max: Value = this.valueFromResult(maxParsed, maxUnit, maxRate);\n\n    return new Range( min, max );\n  }\n\n  /**\n   * Parses user input into a [[Value]].\n   *\n   * @param input The input to parse.\n   * @return The instance parsed from the input.\n   */\n  public static value(input: ValueInput): Value\n  {\n    if (fn.isString(input))\n    {\n      return this.valueFromString( <string>input );\n    }\n    else if (fn.isValueDefinition(input))\n    {\n      return this.valueFromValue( <ValueDefinition>input );\n    }\n\n    return Value.INVALID;\n  }\n\n  /**\n   * Parses user input into a [[Value]].\n   *\n   * @param input The input to parse.\n   * @return The instance parsed from the input.\n   */\n  public static valueFromValue(input: ValueDefinition): Value\n  {\n    let givenValue: number = fn.isDefined( input.value ) ? input.value : 1;\n    let num: number = fn.isDefined( input.num ) ? input.num : givenValue;\n    let den: number = fn.isDefined( input.den ) ? input.den : 1;\n    let parsedValue: number = fn.isDefined( input.value ) ? input.value : num / den;\n    let unit: string = input.unit || '';\n    let rate: string = input.rate || '';\n    let group: Group = Core.getGroup( unit );\n    let rateGroup: Group = Core.getGroup( rate );\n\n    return new Value( parsedValue, num, den, unit, group, rate, rateGroup );\n  }\n\n  /**\n   * Parses user input into a [[Value]].\n   *\n   * @param input The input to parse.\n   * @return The instance parsed from the input.\n   */\n  public static valueFromString(input: string): Value\n  {\n    let translated: string = Translations.translate( input );\n    let parsed: ParseResult = this.input( translated );\n\n    return parsed ? this.valueFromResult(parsed, parsed.unit, parsed.rate) : Value.INVALID;\n  }\n\n  /**\n   * Parses user input into a [[Value]].\n   *\n   * @param result The already parsed input.\n   * @param unit The unit parsed from the input.\n   * @return The instance parsed from the input.\n   */\n  public static valueFromResult(result: ParseResult, unit: string, rateUnit: string): Value\n  {\n    let group: Group = Core.getGroup( unit );\n    let rateGroup: Group = Core.getGroup( rateUnit );\n\n    return new Value(result.value, result.valueNum, result.valueDen, unit, group, rateUnit, rateGroup);\n  }\n\n\n\n  /**\n   * Parses user input into a [[ParseResult]]. If the input is not valid null\n   * is returned.\n   *\n   * *Examples:*\n   * - 1tsp\n   * - 1 tsp\n   * - 1/2 tsp\n   * - 1 1/2 tsp\n   * - -2 cups\n   * - 2.35\"\n   *\n   * @param input The string to parse a value and unit from.\n   * @return The result of the parsing.\n   */\n  public static input(input: string): ParseResult\n  {\n    let matches: string[] = this.REGEX_PARSE.exec( input );\n    let whole: number = parseInt( matches[1] );\n    let hasWhole: boolean = isFinite( whole );\n    let sign: number = matches[1].charAt(0) === '-' ? -1 : 1;\n    let num: number = parseInt( matches[3] );\n    let den: number = parseInt( matches[5] );\n    let decimal: string = matches[6];\n    let hasDecimal: boolean = isFinite( parseFloat( decimal ) );\n    let { unit, rate } = this.unit( fn.trim( matches[7] ) );\n\n    if ( !hasWhole && hasDecimal )\n    {\n      whole = 0;\n      hasWhole = true;\n    }\n\n    if ( !hasWhole && !unit )\n    {\n      return null;\n    }\n\n    let value: number = 1;\n    let valueDen: number = 1;\n    let valueNum: number = 1;\n\n    if ( hasWhole )\n    {\n      value = whole;\n      valueNum = whole;\n\n      if ( isFinite( den ) )\n      {\n        valueDen = den;\n\n        if ( isFinite( num ) )\n        {\n          value += ( num / den ) * sign;\n          valueNum *= den;\n          valueNum += num;\n        }\n        else\n        {\n          value /= den;\n        }\n      }\n      else if ( hasDecimal )\n      {\n        let remainder = parseFloat( '0.' + decimal );\n\n        value += remainder * sign;\n        valueNum += remainder;\n      }\n\n      valueNum *= sign;\n    }\n\n    return { value, valueNum, valueDen, num, den, unit, rate };\n  }\n\n  /**\n   * Parses unit input into a [[Rate]].\n   *\n   * *Examples:*\n   * - m/s\n   * - miles per hour\n   * - mph\n   *\n   * @param input The string to parse a unit from.\n   * @return The result of the parsing.\n   */\n  public static unit(input: string): Rate\n  {\n    let rate: Rate = Rates.get( input );\n\n    if (!rate)\n    {\n      let units: string[] = input.split( this.REGEX_UNIT );\n\n      rate = {\n        unit: units[0] ? fn.trim( units[0] ).replace( /\\.$/, '' ) : '',\n        rate: units[2] ? fn.trim( units[2] ).replace( /\\.$/, '' ) : ''\n      };\n    }\n\n    return rate;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Parse.ts","\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n\nlet RAD2DEG = 180 / Math.PI;\nlet DEG2RAD = Math.PI / 180;\n\n/**\n * @hidden\n */\nexport let Angle = new Class('Angle')\n  .setBaseConversion('deg', 'rad', (x) => x * DEG2RAD)\n\n  .setBaseConversion('rad', 'deg', (x) => x * RAD2DEG)\n\n  .addGroups([\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'deg',\n      baseUnit: 'deg',\n      denominators: [],\n      units: {\n        'deg': Plurality.EITHER,\n        '\\xb0': Plurality.EITHER,\n        'degrees': Plurality.PLURAL,\n        'degree': Plurality.SINGULAR\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'rad',\n      baseUnit: 'rad',\n      denominators: [],\n      units: {\n        'rad': Plurality.EITHER,\n        'radians': Plurality.PLURAL,\n        'radian': Plurality.SINGULAR\n      }\n    }\n  ])\n  .setClassScales()\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Angle.ts","\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n\n\n/**\n * @hidden\n */\nexport let Area = new Class('Area')\n  .setBaseConversion('sqin', 'sqmm', (x) => x * 645.16)\n\n  .setBaseConversion('sqmm', 'sqin', (x) => x * 0.00155)\n\n  .addGroups([\n    {\n      system: System.US,\n      common: true,\n      unit: 'sqin',\n      baseUnit: 'sqin',\n      denominators: [2, 4, 8, 16],\n      units: {\n        'sqin': Plurality.EITHER,\n        'sq. in': Plurality.EITHER,\n        'sq in': Plurality.EITHER,\n        'in2': Plurality.EITHER,\n        'in^2': Plurality.EITHER,\n        'in\\xb2': Plurality.EITHER,\n        'inch2': Plurality.SINGULAR,\n        'inch^2': Plurality.SINGULAR,\n        'inch\\xb2': Plurality.SINGULAR,\n        'inches2': Plurality.PLURAL,\n        'inches^2': Plurality.PLURAL,\n        'inches\\xb2': Plurality.PLURAL,\n        'square in': Plurality.EITHER,\n        'square inch': Plurality.SINGULAR,\n        'square inches': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'sqft',\n      relativeUnit: 'sqin',\n      relativeScale: 12 * 12,\n      denominators: [2, 4, 8, 16],\n      units: {\n        'sqft': Plurality.EITHER,\n        'sq. ft': Plurality.EITHER,\n        'sq ft': Plurality.EITHER,\n        'ft2': Plurality.EITHER,\n        'ft^2': Plurality.EITHER,\n        'ft\\xb2': Plurality.EITHER,\n        'foot2': Plurality.SINGULAR,\n        'foot^2': Plurality.SINGULAR,\n        'foot\\xb2': Plurality.SINGULAR,\n        'feet2': Plurality.PLURAL,\n        'feet^2': Plurality.PLURAL,\n        'feet\\xb2': Plurality.PLURAL,\n        'square ft': Plurality.EITHER,\n        'square foot': Plurality.SINGULAR,\n        'square feet': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      unit: 'sqyd',\n      relativeUnit: 'sqft',\n      relativeScale: 3 * 3,\n      denominators: [2, 3, 4, 8, 9, 16],\n      units: {\n        'sqyd': Plurality.EITHER,\n        'sq. yd': Plurality.EITHER,\n        'sq yd': Plurality.EITHER,\n        'yd2': Plurality.EITHER,\n        'yd^2': Plurality.EITHER,\n        'yd\\xb2': Plurality.EITHER,\n        'yard2': Plurality.SINGULAR,\n        'yard^2': Plurality.SINGULAR,\n        'yard\\xb2': Plurality.SINGULAR,\n        'yards2': Plurality.PLURAL,\n        'yards^2': Plurality.PLURAL,\n        'yards\\xb2': Plurality.PLURAL,\n        'square yd': Plurality.EITHER,\n        'square yard': Plurality.SINGULAR,\n        'square yards': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'acre',\n      relativeUnit: 'sqyd',\n      relativeScale: 4840,\n      denominators: [2, 3, 4, 8, 10],\n      units: {\n        'acre': Plurality.EITHER,\n        'acres': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'sqmi',\n      relativeUnit: 'acre',\n      relativeScale: 640,\n      denominators: [2, 3, 4, 8, 10],\n      units: {\n        'sqmi': Plurality.EITHER,\n        'sq. mi': Plurality.EITHER,\n        'sq mi': Plurality.EITHER,\n        'mi2': Plurality.EITHER,\n        'mi^2': Plurality.EITHER,\n        'mi\\xb2': Plurality.EITHER,\n        'mile2': Plurality.SINGULAR,\n        'mile^2': Plurality.SINGULAR,\n        'mile\\xb2': Plurality.SINGULAR,\n        'miles2': Plurality.PLURAL,\n        'miles^2': Plurality.PLURAL,\n        'miles\\xb2': Plurality.PLURAL,\n        'square mi': Plurality.EITHER,\n        'square mile': Plurality.SINGULAR,\n        'square miles': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'sqmm',\n      baseUnit: 'sqmm',\n      denominators: [2, 4, 8, 16],\n      units: {\n        'sqmm': Plurality.EITHER,\n        'sq. mm': Plurality.EITHER,\n        'sq mm': Plurality.EITHER,\n        'mm2': Plurality.EITHER,\n        'mm^2': Plurality.EITHER,\n        'mm\\xb2': Plurality.EITHER,\n        'millimeter2': Plurality.SINGULAR,\n        'millimeter^2': Plurality.SINGULAR,\n        'millimeter\\xb2': Plurality.SINGULAR,\n        'millimeters2': Plurality.PLURAL,\n        'millimeters^2': Plurality.PLURAL,\n        'millimeters\\xb2': Plurality.PLURAL,\n        'square mm': Plurality.EITHER,\n        'square millimeter': Plurality.SINGULAR,\n        'square millimeters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'sqcm',\n      relativeUnit: 'sqmm',\n      relativeScale: 100,\n      denominators: [2, 4, 8, 16],\n      units: {\n        'sqcm': Plurality.EITHER,\n        'sq. cm': Plurality.EITHER,\n        'sq cm': Plurality.EITHER,\n        'cm2': Plurality.EITHER,\n        'cm^2': Plurality.EITHER,\n        'cm\\xb2': Plurality.EITHER,\n        'centimeter2': Plurality.SINGULAR,\n        'centimeter^2': Plurality.SINGULAR,\n        'centimeter\\xb2': Plurality.SINGULAR,\n        'centimeters2': Plurality.PLURAL,\n        'centimeters^2': Plurality.PLURAL,\n        'centimeters\\xb2': Plurality.PLURAL,\n        'square cm': Plurality.EITHER,\n        'square centimeter': Plurality.SINGULAR,\n        'square centimeters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'sqm',\n      relativeUnit: 'sqcm',\n      relativeScale: 10000,\n      denominators: [2, 4, 8, 16],\n      units: {\n        'sqm': Plurality.EITHER,\n        'sq. m': Plurality.EITHER,\n        'sq m': Plurality.EITHER,\n        'm2': Plurality.EITHER,\n        'm^2': Plurality.EITHER,\n        'm\\xb2': Plurality.EITHER,\n        'meter2': Plurality.SINGULAR,\n        'meter^2': Plurality.SINGULAR,\n        'meter\\xb2': Plurality.SINGULAR,\n        'meters2': Plurality.PLURAL,\n        'meters^2': Plurality.PLURAL,\n        'meters\\xb2': Plurality.PLURAL,\n        'square m': Plurality.EITHER,\n        'square meter': Plurality.SINGULAR,\n        'square meters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'sqkm',\n      relativeUnit: 'sqm',\n      relativeScale: 1000000,\n      denominators: [2, 4, 8, 16],\n      units: {\n        'sqkm': Plurality.EITHER,\n        'sq. km': Plurality.EITHER,\n        'sq km': Plurality.EITHER,\n        'km2': Plurality.EITHER,\n        'km^2': Plurality.EITHER,\n        'km\\xb2': Plurality.EITHER,\n        'kilometer2': Plurality.SINGULAR,\n        'kilometer^2': Plurality.SINGULAR,\n        'kilometer\\xb2': Plurality.SINGULAR,\n        'kilometers2': Plurality.PLURAL,\n        'kilometers^2': Plurality.PLURAL,\n        'kilometers\\xb2': Plurality.PLURAL,\n        'square km': Plurality.EITHER,\n        'square kilometer': Plurality.SINGULAR,\n        'square kilometers': Plurality.PLURAL\n      }\n    }\n  ])\n  .setClassScales()\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Area.ts","\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n\n\n/**\n * @hidden\n */\nexport let Length = new Class('Length')\n  .setBaseConversion('in', 'mm', (x) => x * 25.4)\n\n  .setBaseConversion('mm', 'in', (x) => x * 0.039370)\n\n  .addGroups([\n    {\n      system: System.US,\n      common: true,\n      unit: 'in',\n      baseUnit: 'in',\n      denominators: [2, 4, 8, 16, 32],\n      units: {\n        'in': Plurality.EITHER,\n        'inch': Plurality.SINGULAR,\n        'inches': Plurality.PLURAL,\n        '\"': Plurality.EITHER\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'ft',\n      relativeUnit: 'in',\n      relativeScale: 12,\n      denominators: [2],\n      units: {\n        'ft': Plurality.EITHER,\n        'foot': Plurality.SINGULAR,\n        'feet': Plurality.PLURAL,\n        '\\'': Plurality.EITHER\n      }\n    },\n    {\n      system: System.US,\n      unit: 'yd',\n      relativeUnit: 'ft',\n      relativeScale: 3,\n      denominators: [],\n      units: {\n        'yd': Plurality.EITHER,\n        'yard': Plurality.SINGULAR,\n        'yards': Plurality.PLURAL,\n        'yds': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'mi',\n      relativeUnit: 'ft',\n      relativeScale: 5280,\n      denominators: [2, 3, 4, 10],\n      units: {\n        'mi': Plurality.EITHER,\n        'mile': Plurality.SINGULAR,\n        'miles': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      unit: 'league',\n      relativeUnit: 'mi',\n      relativeScale: 3,\n      denominators: [2, 3, 4, 5, 6, 7, 8, 9, 10],\n      units: {\n        'league': Plurality.EITHER,\n        'leagues': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'mm',\n      baseUnit: 'mm',\n      denominators: [10],\n      units: {\n        'mm': Plurality.EITHER,\n        'millimeter': Plurality.SINGULAR,\n        'millimeters': Plurality.PLURAL,\n        'millimetre': Plurality.SINGULAR,\n        'millimetres': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'cm',\n      relativeUnit: 'mm',\n      relativeScale: 10,\n      denominators: [2, 4, 10],\n      units: {\n        'cm': Plurality.EITHER,\n        'centimeter': Plurality.SINGULAR,\n        'centimeters': Plurality.PLURAL,\n        'centimetre': Plurality.SINGULAR,\n        'centimetres': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'dc',\n      relativeUnit: 'cm',\n      relativeScale: 10,\n      denominators: [10],\n      units: {\n        'dc': Plurality.EITHER,\n        'decimeter': Plurality.SINGULAR,\n        'decimeters': Plurality.PLURAL,\n        'decimetre': Plurality.SINGULAR,\n        'decimetres': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'm',\n      relativeUnit: 'cm',\n      relativeScale: 100,\n      denominators: [2, 3, 4, 5, 10],\n      units: {\n        'm': Plurality.EITHER,\n        'meter': Plurality.SINGULAR,\n        'meters': Plurality.PLURAL,\n        'metre': Plurality.SINGULAR,\n        'metres': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'km',\n      relativeUnit: 'm',\n      relativeScale: 1000,\n      denominators: [2, 3, 4, 5, 6, 7, 8, 9, 10],\n      units: {\n        'km': Plurality.EITHER,\n        'kms': Plurality.PLURAL,\n        'kilometer': Plurality.SINGULAR,\n        'kilometers': Plurality.PLURAL,\n        'kilometre': Plurality.SINGULAR,\n        'kilometres': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'nm',\n      relativeUnit: 'm',\n      relativeScale: 1852,\n      denominators: [2, 3, 4, 5, 10],\n      units: {\n        'nm': Plurality.EITHER,\n        'nmi': Plurality.EITHER,\n        'nautical mi': Plurality.EITHER,\n        'nautical mile': Plurality.SINGULAR,\n        'nautical miles': Plurality.PLURAL\n      }\n    }\n  ])\n  .setClassScales()\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Length.ts","\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n\n\nlet _C_: string = '\\xb0C';\n\n/**\n * @hidden\n */\nexport let Temperature = new Class('Temperature')\n  .setBaseConversion('F', _C_, x => ((x - 32) * 5 / 9))\n  .setBaseConversion('F', 'K', x => ((x + 459.67) * 5 / 9))\n\n  .setBaseConversion(_C_, 'F', x => ((x * 9 / 5) + 32))\n  .setBaseConversion(_C_, 'K', x => (x + 273.15))\n\n  .setBaseConversion('K', _C_, x => (x - 273.15))\n  .setBaseConversion('K', 'F', x => ((x * 9 / 5) - 459.67))\n\n  .addGroups([\n    {\n      system: System.US,\n      common: true,\n      unit: 'F',\n      baseUnit: 'F',\n      denominators: [],\n      units: {\n        'F': Plurality.EITHER,\n        '\\xb0F': Plurality.EITHER,\n        'Fahrenheit': Plurality.EITHER\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: _C_,\n      baseUnit: _C_,\n      denominators: [],\n      units: {\n        '\\xb0C': Plurality.EITHER,\n        'Celsius': Plurality.EITHER\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'K',\n      baseUnit: 'K',\n      denominators: [],\n      units: {\n        'K': Plurality.EITHER,\n        'kelvin': Plurality.SINGULAR,\n        'kelvins': Plurality.PLURAL\n      }\n    }\n  ])\n  .setClassScales()\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Temperature.ts","\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n\n\n/**\n * @hidden\n */\nexport let Time = new Class('Time')\n  .addGroups([\n    {\n      system: System.ANY,\n      unit: 'ns',\n      baseUnit: 'ns',\n      denominators: [10, 100],\n      units: {\n        'ns': Plurality.EITHER,\n        'nanosecond': Plurality.SINGULAR,\n        'nanoseconds': Plurality.PLURAL,\n        'nano': Plurality.SINGULAR,\n        'nanos': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      unit: 'us',\n      relativeUnit: 'ns',\n      relativeScale: 1000,\n      denominators: [10, 100, 1000],\n      units: {\n        'us': Plurality.EITHER,\n        'microsecond': Plurality.SINGULAR,\n        'microseconds': Plurality.PLURAL,\n        'micro': Plurality.SINGULAR,\n        'micros': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'ms',\n      relativeUnit: 'us',\n      relativeScale: 1000,\n      denominators: [10, 100, 1000],\n      units: {\n        'ms': Plurality.EITHER,\n        'millisecond': Plurality.SINGULAR,\n        'milliseconds': Plurality.PLURAL,\n        'milli': Plurality.SINGULAR,\n        'millis': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 's',\n      relativeUnit: 'ms',\n      relativeScale: 1000,\n      denominators: [10, 100, 1000],\n      units: {\n        's': Plurality.EITHER,\n        'second': Plurality.SINGULAR,\n        'seconds': Plurality.PLURAL,\n        'sec': Plurality.SINGULAR,\n        'secs': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'min',\n      relativeUnit: 's',\n      relativeScale: 60,\n      denominators: [2, 3, 4, 60],\n      units: {\n        'min': Plurality.EITHER,\n        'minute': Plurality.SINGULAR,\n        'minutes': Plurality.PLURAL,\n        'mins': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'hr',\n      relativeUnit: 'min',\n      relativeScale: 60,\n      denominators: [2, 3, 4, 60],\n      units: {\n        'hr': Plurality.EITHER,\n        'hour': Plurality.SINGULAR,\n        'hours': Plurality.PLURAL,\n        'hrs': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'day',\n      relativeUnit: 'hr',\n      relativeScale: 24,\n      denominators: [2, 3, 4, 6, 24],\n      units: {\n        'day': Plurality.EITHER,\n        'days': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'wk',\n      relativeUnit: 'day',\n      relativeScale: 7,\n      denominators: [7],\n      units: {\n        'wk': Plurality.EITHER,\n        'week': Plurality.SINGULAR,\n        'weeks': Plurality.PLURAL,\n        'wks': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'yr',\n      relativeUnit: 'day',\n      relativeScale: 365.2425,\n      denominators: [2, 3, 4, 6, 12, 52],\n      units: {\n        'yr': Plurality.EITHER,\n        'year': Plurality.SINGULAR,\n        'years': Plurality.PLURAL,\n        'yrs': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'score',\n      relativeUnit: 'yr',\n      relativeScale: 20,\n      denominators: [20],\n      units: {\n        'score': Plurality.EITHER\n      }\n    },\n    {\n      system: System.ANY,\n      unit: 'biennium',\n      relativeUnit: 'yr',\n      relativeScale: 2,\n      denominators: [],\n      units: {\n        'biennium': Plurality.EITHER,\n        'bienniums': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      unit: 'triennium',\n      relativeUnit: 'yr',\n      relativeScale: 3,\n      denominators: [],\n      units: {\n        'triennium': Plurality.EITHER,\n        'trienniums': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      unit: 'quadrennium',\n      relativeUnit: 'yr',\n      relativeScale: 4,\n      denominators: [],\n      units: {\n        'quadrennium': Plurality.EITHER,\n        'quadrenniums': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      unit: 'lustrum',\n      relativeUnit: 'yr',\n      relativeScale: 5,\n      denominators: [],\n      units: {\n        'lustrum': Plurality.EITHER,\n        'lustrums': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'decade',\n      relativeUnit: 'yr',\n      relativeScale: 10,\n      denominators: [2, 10],\n      units: {\n        'decade': Plurality.EITHER,\n        'decades': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'century',\n      relativeUnit: 'yr',\n      relativeScale: 100,\n      denominators: [2, 10],\n      units: {\n        'century': Plurality.EITHER,\n        'centurys': Plurality.PLURAL,\n        'centuries': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'millennium',\n      relativeUnit: 'yr',\n      relativeScale: 1000,\n      denominators: [2, 3, 4],\n      units: {\n        'millennium': Plurality.EITHER,\n        'millenniums': Plurality.PLURAL,\n        'millennia': Plurality.PLURAL,\n        'millennias': Plurality.PLURAL\n      }\n    }\n  ])\n  .setClassScales();\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Time.ts","\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n\n\n/**\n * @hidden\n */\nexport let Volume = new Class('Volume')\n  .setBaseConversion('tsp', 'ml', (x) => x * 4.92892)\n  .setBaseConversion('tsp', 'mm3', (x) => x * 4928.92)\n  .setBaseConversion('tsp', 'in3', (x) => x * 0.300781)\n\n  .setBaseConversion('ml', 'tsp', (x) => x * 0.202884)\n  .setBaseConversion('ml', 'mm3', (x) => x * 1000)\n  .setBaseConversion('ml', 'in3', (x) => x * 0.0610237)\n\n  .setBaseConversion('mm3', 'tsp', (x) => x * 0.000202884)\n  .setBaseConversion('mm3', 'ml', (x) => x * 0.001)\n  .setBaseConversion('mm3', 'in3', (x) => x * 0.0000610237)\n\n  .setBaseConversion('in3', 'tsp', (x) => x * 3.32468)\n  .setBaseConversion('in3', 'ml', (x) => x * 16.3871)\n  .setBaseConversion('in3', 'mm3', (x) => x * 16387.1)\n\n  .addGroups([\n    {\n      system: System.US,\n      common: true,\n      unit: 'tsp',\n      baseUnit: 'tsp',\n      denominators: [2, 3, 4],\n      units: {\n        'tsp': Plurality.EITHER,\n        'ts': Plurality.EITHER,\n        'tsps': Plurality.PLURAL,\n        'teaspoon': Plurality.SINGULAR,\n        'teaspoons': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'tbsp',\n      relativeUnit: 'tsp',\n      relativeScale: 3,\n      denominators: [2, 3, 4],\n      units: {\n        'tbsp': Plurality.EITHER,\n        'tbsps': Plurality.PLURAL,\n        'tablespoon': Plurality.SINGULAR,\n        'tablespoons': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'floz',\n      relativeUnit: 'tsp',\n      relativeScale: 6,\n      denominators: [2, 3, 6],\n      units: {\n        // 'oz': Plurality.EITHER,\n        // 'ounce': Plurality.SINGULAR,\n        // 'ounces': Plurality.PLURAL,\n        'floz': Plurality.EITHER,\n        'fl-oz': Plurality.EITHER,\n        'fl oz': Plurality.EITHER,\n        'fluid ounce': Plurality.SINGULAR,\n        'fluid ounces': Plurality.PLURAL,\n        'fl. oz': Plurality.EITHER,\n        'oz. fl': Plurality.EITHER,\n        'oz fl': Plurality.EITHER\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'c',\n      relativeUnit: 'floz',\n      relativeScale: 8,\n      denominators: [2, 3, 4],\n      units: {\n        'c': Plurality.EITHER,\n        'cup': Plurality.SINGULAR,\n        'cups': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'pt',\n      relativeUnit: 'c',\n      relativeScale: 2,\n      denominators: [2, 4, 8],\n      units: {\n        'pt': Plurality.EITHER,\n        'pint': Plurality.SINGULAR,\n        'pints': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'qt',\n      relativeUnit: 'c',\n      relativeScale: 4,\n      denominators: [2, 4, 8],\n      units: {\n        'qt': Plurality.EITHER,\n        'quart': Plurality.SINGULAR,\n        'quarts': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'gal',\n      relativeUnit: 'qt',\n      relativeScale: 4,\n      denominators: [2, 4, 8, 16],\n      units: {\n        'gal': Plurality.EITHER,\n        'gallon': Plurality.SINGULAR,\n        'gallons': Plurality.PLURAL,\n        'gals': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'ml',\n      baseUnit: 'ml',\n      denominators: [2, 10],\n      units: {\n        'ml': Plurality.EITHER,\n        'millilitre': Plurality.SINGULAR,\n        'millilitres': Plurality.PLURAL,\n        'milliliter': Plurality.SINGULAR,\n        'milliliters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'cl',\n      relativeUnit: 'ml',\n      relativeScale: 10,\n      denominators: [10],\n      units: {\n        'cl': Plurality.EITHER,\n        'centilitre': Plurality.SINGULAR,\n        'centilitres': Plurality.PLURAL,\n        'centiliter': Plurality.SINGULAR,\n        'centiliters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'l',\n      relativeUnit: 'ml',\n      relativeScale: 1000,\n      denominators: [2, 3, 4, 10],\n      units: {\n        'l': Plurality.EITHER,\n        'litre': Plurality.SINGULAR,\n        'litres': Plurality.PLURAL,\n        'liter': Plurality.SINGULAR,\n        'liters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'dl',\n      relativeUnit: 'l',\n      relativeScale: 10,\n      denominators: [10, 100],\n      units: {\n        'dl': Plurality.EITHER,\n        'decalitre': Plurality.SINGULAR,\n        'decalitres': Plurality.PLURAL,\n        'decaliter': Plurality.SINGULAR,\n        'decaliters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'kl',\n      relativeUnit: 'l',\n      relativeScale: 1000,\n      denominators: [10, 100],\n      units: {\n        'kl': Plurality.EITHER,\n        'kilolitre': Plurality.SINGULAR,\n        'kilolitres': Plurality.PLURAL,\n        'kiloliter': Plurality.SINGULAR,\n        'kiloliters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'mm3',\n      baseUnit: 'mm3',\n      denominators: [2, 4, 8],\n      units: {\n        'mm3': Plurality.EITHER,\n        'mm^3': Plurality.EITHER,\n        'mm\\xb3': Plurality.EITHER,\n        'millimeter3': Plurality.SINGULAR,\n        'millimeter^3': Plurality.SINGULAR,\n        'millimeter\\xb3': Plurality.SINGULAR,\n        'millimeters3': Plurality.PLURAL,\n        'millimeters^3': Plurality.PLURAL,\n        'millimeters\\xb3': Plurality.PLURAL,\n        'cubic mm': Plurality.EITHER,\n        'cubic millimeter': Plurality.SINGULAR,\n        'cubic millimeters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'cm3',\n      relativeUnit: 'mm3',\n      relativeScale: 1000,\n      denominators: [2, 4, 8],\n      units: {\n        'cm3': Plurality.EITHER,\n        'cm^3': Plurality.EITHER,\n        'cm\\xb3': Plurality.EITHER,\n        'centimeter3': Plurality.SINGULAR,\n        'centimeter^3': Plurality.SINGULAR,\n        'centimeter\\xb3': Plurality.SINGULAR,\n        'centimeters3': Plurality.PLURAL,\n        'centimeters^3': Plurality.PLURAL,\n        'centimeters\\xb3': Plurality.PLURAL,\n        'cubic cm': Plurality.EITHER,\n        'cubic centimeter': Plurality.SINGULAR,\n        'cubic centimeters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'm3',\n      relativeUnit: 'cm3',\n      relativeScale: 1000000,\n      denominators: [2, 4, 8],\n      units: {\n        'm3': Plurality.EITHER,\n        'm^3': Plurality.EITHER,\n        'm\\xb3': Plurality.EITHER,\n        'meter3': Plurality.SINGULAR,\n        'meter^3': Plurality.SINGULAR,\n        'meter\\xb3': Plurality.SINGULAR,\n        'meters3': Plurality.PLURAL,\n        'meters^3': Plurality.PLURAL,\n        'meters\\xb3': Plurality.PLURAL,\n        'cubic m': Plurality.EITHER,\n        'cubic meter': Plurality.SINGULAR,\n        'cubic meters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'km3',\n      relativeUnit: 'm3',\n      relativeScale: 1000000000,\n      denominators: [2, 4, 8],\n      units: {\n        'km3': Plurality.EITHER,\n        'km^3': Plurality.EITHER,\n        'km\\xb3': Plurality.EITHER,\n        'kilometer3': Plurality.SINGULAR,\n        'kilometer^3': Plurality.SINGULAR,\n        'kilometer\\xb3': Plurality.SINGULAR,\n        'kilometers3': Plurality.PLURAL,\n        'kilometers^3': Plurality.PLURAL,\n        'kilometers\\xb3': Plurality.PLURAL,\n        'cubic km': Plurality.EITHER,\n        'cubic kilometer': Plurality.SINGULAR,\n        'cubic kilometers': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      unit: 'in3',\n      baseUnit: 'in3',\n      denominators: [2, 4, 8],\n      units: {\n        'in3': Plurality.EITHER,\n        'in^3': Plurality.EITHER,\n        'in\\xb3': Plurality.EITHER,\n        'inch3': Plurality.SINGULAR,\n        'inch^3': Plurality.SINGULAR,\n        'inch\\xb3': Plurality.SINGULAR,\n        'inches3': Plurality.PLURAL,\n        'inches^3': Plurality.PLURAL,\n        'inches\\xb3': Plurality.PLURAL,\n        'cubic in': Plurality.EITHER,\n        'cubic inch': Plurality.SINGULAR,\n        'cubic inches': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'ft3',\n      relativeUnit: 'in3',\n      relativeScale: 1728,\n      denominators: [2, 4, 8],\n      units: {\n        'ft3': Plurality.EITHER,\n        'ft^3': Plurality.EITHER,\n        'ft\\xb3': Plurality.EITHER,\n        'foot3': Plurality.SINGULAR,\n        'foot^3': Plurality.SINGULAR,\n        'foot\\xb3': Plurality.SINGULAR,\n        'feet3': Plurality.PLURAL,\n        'feet^3': Plurality.PLURAL,\n        'feet\\xb3': Plurality.PLURAL,\n        'cubic ft': Plurality.EITHER,\n        'cubic foot': Plurality.SINGULAR,\n        'cubic feet': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'yd3',\n      relativeUnit: 'ft3',\n      relativeScale: 27,\n      denominators: [2, 4, 8],\n      units: {\n        'yd3': Plurality.EITHER,\n        'yd^3': Plurality.EITHER,\n        'yd\\xb3': Plurality.EITHER,\n        'yard3': Plurality.SINGULAR,\n        'yard^3': Plurality.SINGULAR,\n        'yard\\xb3': Plurality.SINGULAR,\n        'yards3': Plurality.PLURAL,\n        'yards^3': Plurality.PLURAL,\n        'yards\\xb3': Plurality.PLURAL,\n        'cubic yd': Plurality.EITHER,\n        'cubic yard': Plurality.SINGULAR,\n        'cubic yards': Plurality.PLURAL\n      }\n    }\n  ])\n  .setClassScales()\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Volume.ts","\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n\n\n/**\n * @hidden\n */\nexport let Weight = new Class('Weight')\n  .setBaseConversion('mg', 'oz', (x) => x * 0.000035274)\n\n  .setBaseConversion('oz', 'mg', (x) => x * 28349.5)\n\n  .addGroups([\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'mg',\n      baseUnit: 'mg',\n      denominators: [2, 10],\n      units: {\n        'mg': Plurality.EITHER,\n        'milligram': Plurality.SINGULAR,\n        'milligrams': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'g',\n      relativeUnit: 'mg',\n      relativeScale: 1000,\n      denominators: [2, 10, 1000],\n      units: {\n        'g': Plurality.EITHER,\n        'gram': Plurality.SINGULAR,\n        'grams': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'kg',\n      relativeUnit: 'g',\n      relativeScale: 1000,\n      denominators: [2, 10, 1000],\n      units: {\n        'kg': Plurality.EITHER,\n        'kilo': Plurality.SINGULAR,\n        'kilos': Plurality.PLURAL,\n        'kilogram': Plurality.SINGULAR,\n        'kilograms': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'oz',\n      baseUnit: 'oz',\n      denominators: [2, 3, 4, 16],\n      units: {\n        'oz': Plurality.EITHER,\n        'ounce': Plurality.SINGULAR,\n        'ounces': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'lb',\n      relativeUnit: 'oz',\n      relativeScale: 16,\n      denominators: [2, 3, 4, 16],\n      units: {\n        'lb': Plurality.EITHER,\n        'lbs': Plurality.PLURAL,\n        'pound': Plurality.SINGULAR,\n        'pounds': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'ton',\n      relativeUnit: 'lb',\n      relativeScale: 2000,\n      denominators: [2, 3, 4, 10],\n      units: {\n        'ton': Plurality.EITHER,\n        'tonne': Plurality.SINGULAR,\n        'tons': Plurality.PLURAL,\n        'tonnes': Plurality.PLURAL\n      }\n    }\n  ])\n  .setClassScales();\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Weight.ts","\nimport { Class } from './Class';\nimport { Core } from './Core';\n\nimport { Angle } from './classes/Angle';\nimport { Area } from './classes/Area';\nimport { Digital } from './classes/Digital';\nimport { Length } from './classes/Length';\nimport { Temperature } from './classes/Temperature';\nimport { Time } from './classes/Time';\nimport { Volume } from './classes/Volume';\nimport { Weight } from './classes/Weight';\n\n\n/**\n * The class which keeps a reference to the [[Class]] instances available in\n * this library.\n */\nexport class Classes\n{\n\n  /**\n   * The Angle class which contains the following groups.\n   *\n   * - degree\n   * - radian\n   */\n  public static Angle: Class = Angle;\n\n  /**\n   * The Area class which contains the following groups:\n   *\n   * - square inch\n   * - square foot\n   * - square yard\n   * - acre\n   * - square mile\n   * - square millimeter\n   * - square centimeter\n   * - square meter\n   * - square kilometer\n   */\n  public static Area: Class = Area;\n\n  /**\n   * The Digital class which contains the following groups:\n   *\n   * - bit\n   * - nibble\n   * - byte\n   * - kilo/mego/giga/tera/peta/exa/zetta/yotta byte\n   * - kibi/mebi/gibi/tebi/pebi/exbi/zebi/yobi byte\n   * - kilo/mego/giga/tera/peta/exa/zetta/yotta bit\n   * - ki/mi/gi/ti/pi/ez/zi/yi bit\n   */\n  public static Digital: Class = Digital;\n\n  /**\n   * The Length class which contains the following groups.\n   *\n   * - inch\n   * - foot\n   * - yard\n   * - mile\n   * - league\n   * - millimeter\n   * - centimeter\n   * - decimeter\n   * - meter\n   * - kilometer\n   */\n  public static Length: Class = Length;\n\n  /**\n   * The Temperature class which contains the following groups.\n   *\n   * - celsius\n   * - kelvin\n   * - fahrenheit\n   */\n  public static Temperature: Class = Temperature;\n\n  /**\n   * The Time class which contains the following groups.\n   *\n   * - nanosecond\n   * - microsecond\n   * - millisecond\n   * - second\n   * - hour\n   * - day\n   * - week\n   * - year\n   * - score\n   * - biennium\n   * - triennium\n   * - quadrennium\n   * - lustrum\n   * - decade\n   * - centry\n   * - millennium\n   */\n  public static Time: Class = Time;\n\n  /**\n   * The Volume clas which contains the following groups.\n   *\n   * - teaspoon\n   * - tablespoon\n   * - fluid ounce\n   * - cup\n   * - pint\n   * - quart\n   * - gallon\n   * - milliliter\n   * - centiliter\n   * - decaliter\n   * - kiloliter\n   * - cubic millimeter\n   * - cubic centimeter\n   * - cubic meter\n   * - cubic kilometer\n   * - cubic inch\n   * - cubic foot\n   * - cubic yard\n   */\n  public static Volume: Class = Volume;\n\n  /**\n   * The Weight clas which contains the following groups.\n   *\n   * - milligram\n   * - gram\n   * - kilogram\n   * - ounce\n   * - pound\n   * - ton\n   */\n  public static Weight: Class = Weight;\n\n  /**\n   * Adds all classes in the library to be available when parsing units.\n   */\n  public static addDefaults()\n  {\n    Core.addClasses(\n      Classes.Weight,\n      Classes.Area,\n      Classes.Time,\n      Classes.Digital,\n      Classes.Temperature,\n      Classes.Angle,\n      Classes.Volume,\n      Classes.Length\n    );\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Classes.ts"],"sourceRoot":""}