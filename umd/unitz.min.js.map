{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///unitz.min.js","webpack:///webpack/bootstrap 381960ac00eea09527ef","webpack:///./src/Base.ts","webpack:///./src/classes/Digital.ts","webpack:///./src/classes/index.ts","webpack:///./src/Plurality.ts","webpack:///./src/System.ts","webpack:///./src/Functions.ts","webpack:///./src/Output.ts","webpack:///./src/Value.ts","webpack:///./src/Range.ts","webpack:///./src/Group.ts","webpack:///./src/Class.ts","webpack:///./src/Sort.ts","webpack:///./src/Transform.ts","webpack:///./src/Core.ts","webpack:///./src/Parse.ts","webpack:///./src/classes/Weight.ts","webpack:///./src/classes/Area.ts","webpack:///./src/classes/Time.ts","webpack:///./src/classes/Temperature.ts","webpack:///./src/classes/Rotation.ts","webpack:///./src/classes/Volume.ts","webpack:///./src/classes/Length.ts"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","uz","input","Base_Base","addDigitalUnits","parent","relativeTo","relativeScales","denominators","suffixSingular","suffixPlural","unitAndPrefixes","length","_a","unit","prefix","extra","units","Plurality","EITHER","SINGULAR","PLURAL","addGroup","system","System","ANY","relativeUnit","relativeScale","addDefaults","Core_Core","addClasses","Weight","Area","Time","Digital","Temperature","Rotation","Volume","Length","value","OutputUnit","Functions","isZero","x","abs","EPSILON","isEqual","a","b","isWhole","Math","floor","isSingular","isNumber","isPlural","isFinite","trim","replace","gcd","y","t","sign","appendTo","array","Array","push","apply","isGroupDefinition","isValueDefinition","num","den","isRangeDefinition","min","max","isArray","isString","isDefined","coalesce","Value_Value","Value","group","divisor","baseScale","classScale","ceil","actual","error","mixedWhole","SEPARATOR_MIXED","mixedNum","SEPARATOR_FRACTION","preferred","preferredUnit","copy","zero","truncated","truncate","convertTo","to","convert","convertToValue","fromNumberForGroup","conversions","transform","reverse","callback","_this","matches","index","normalize","forOutput","closest","closestString","acceptable","number","convertString","add","addend","scale","sub","subtrahend","mul","fromNumber","fromNumberWithRange","minDen","maxDen","closestDenominator","closestDistance","distance","fromNumberWithDenominators","fromFraction","INVALID","Number","NaN","Range_Range","Range","isValid","isFraction","isDecimal","asString","SEPARATOR","isMatch","range","positive","minNegative","negative","minPositive","maxPositive","nonzero","minZero","maxZero","maxd","fixed","mind","fromFixed","Group_Group","Group","definition","dynamic","common","baseUnit","updateUnits","setDynamic","addUnits","addGroupUnit","removeUnits","existing","removeGroupUnit","addDenominator","setDenominators","setCommon","setPreferred","singularShort","singularLong","pluralShort","pluralLong","plurality","getPluralLong","getPluralShort","getSingularLong","getSingularShort","getVisibleGroups","Class_Class","Class","groups","groupMap","converters","addGroups","definitions","relative","alias","lower","toLowerCase","getFirstBase","setClassScales","first","setBaseConversion","fromUnit","toUnit","converter","relatedGroup","matched","start","stop","increment","isVisibleGroup","from","converted","map","OutputFormat","SortType","Output_Output","Output","GIVEN","format","repeatUnit","unitSpacer","rangeSpacer","fractionSpacer","mixedSpacer","delimiter","significant","set","extend","extended","ranges","out","isFixed","minUnit","showUnit","isMixed","NONE","isLongUnit","isShortUnit","valueString","valueSignificant","toFixed","NUMBER","IMPROPER","SHORT","LONG","Transform_Transform","Transform","MAX_VALUE","convertWithMax","groupless","onlyUnits","notUnits","onlyClasses","notClasses","givenGroup","isCommonMatch","isSystemMatch","isUnitMatch","isClassMatch","METRIC","IMPERIAL","indexOf","Sort_Sort","Sort","ascending","type","MAX","classes","className","getSorter","getClassComparison","MIN","getMinComparison","getMaxComparison","AVERAGE","getAverageComparison","classScaled","avg","bvg","ag","bg","Core","getGroup","exactGroup","unitToGroup","normalizedUnit","normalizedGroup","dynamicUnit","getDynamicMatch","dynamicGroup","dynamicMatches","addDynamicUnit","newDynamicGroup","addClass","classMap","_i","arguments","unitCount","groupUnit","longest","dynamicGroups","substring","dynamicMatchLength","globalOutput","globalTransform","globalSort","Base","Parse_Parse","amount","mutate","r","scaleTo","unitValue","getScaleTo","hasRanges","options","output","compact","compacted","groupByClass","entry","parent_1","minGroupChosen","maxGroupChosen","minSum","maxSum","minGroup","maxGroup","expand","expanded","valueGroup","transformed","isBase","scaled","operate","other","base","otherRanges","otherUsed","k","otherRange","mutator","source","mutated","filter","filtered","sort","slice","parent_2","average","rangeGroup","isRange","Parse","rangesFromArray","rangesFromString","split","REGEX_LIST","rangeFromString","REGEX_RANGE","exec","valueFromString","minInput","maxInput","minParsed","maxParsed","maxUnit","valueFromResult","valueFromValue","givenValue","parsedValue","parsed","result","valueNum","valueDen","REGEX_PARSE","whole","parseInt","hasWhole","charAt","decimal","hasDecimal","parseFloat","remainder","mg","milligram","milligrams","g","gram","grams","kg","kilogram","kilograms","oz","ounce","ounces","lb","lbs","pound","pounds","ton","tons","tonnes","sqin","sq. in.","sq in","in2","in^2","in²","square inch","square inches","sqft","sq. ft.","sq ft","ft2","ft^2","ft²","square foot","square feet","sqyd","sq. yd.","sq yd","yd2","yd^2","yd²","square yard","square yards","acre","acres","sqmi","sq. mi.","sq mi","mi2","mi^2","mi²","square mile","square miles","sqmm","sq. mm.","sq mm","mm2","mm^2","mm²","square millimeter","square millimeters","sqcm","sq. cm.","sq cm","cm2","cm^2","cm²","square centimeter","square centimeters","sqm","sq. m.","sq m","m2","m^2","m²","square meter","square meters","sqkm","sq. km.","sq km","km2","km^2","km²","square kilometer","square kilometers","ns","nanosecond","nanoseconds","nano","nanos","us","microsecond","microseconds","micro","micros","ms","millisecond","milliseconds","milli","millis","second","seconds","sec","secs","minute","minutes","mins","hr","hour","hours","hrs","day","days","wk","week","weeks","wks","yr","year","years","yrs","score","bit","bits","nibble","nibbles","nybble","nyble","half-byte","half byte","tetrade","semi-octet","quadbit","quartet","B","byte","bytes","F","°F","Fahrenheit","°C","Celsius","K","kelvin","kelvins","DEG2RAD","PI","RAD2DEG","deg","°","degrees","degree","rad","radians","radian","in","inch","inches","\"","ft","foot","feet","'","yd","yard","yards","yds","mi","mile","miles","league","leagues","mm","millimeter","millimeters","cm","centimeter","centimeters","dc","decimeter","decimeters","meter","meters","km","kilometer","kilometers"],"mappings":"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","file":"unitz.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Unitz\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Unitz\"] = factory();\n\telse\n\t\troot[\"Unitz\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Unitz\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Unitz\"] = factory();\n\telse\n\t\troot[\"Unitz\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(1);\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n\n// CONCATENATED MODULE: ./src/Plurality.ts\n\r\nvar Plurality;\r\n(function (Plurality) {\r\n    Plurality[Plurality[\"SINGULAR\"] = 0] = \"SINGULAR\";\r\n    Plurality[Plurality[\"PLURAL\"] = 1] = \"PLURAL\";\r\n    Plurality[Plurality[\"EITHER\"] = 2] = \"EITHER\";\r\n})(Plurality = Plurality || (Plurality = {}));\r\n\n// CONCATENATED MODULE: ./src/System.ts\n\r\nvar System;\r\n(function (System) {\r\n    System[System[\"METRIC\"] = 0] = \"METRIC\";\r\n    System[System[\"IMPERIAL\"] = 1] = \"IMPERIAL\";\r\n    System[System[\"NONE\"] = 2] = \"NONE\";\r\n    System[System[\"ANY\"] = 3] = \"ANY\";\r\n    System[System[\"GIVEN\"] = 4] = \"GIVEN\";\r\n})(System = System || (System = {}));\r\n\n// CONCATENATED MODULE: ./src/Functions.ts\n\r\nvar Functions = (function () {\r\n    function Functions() {\r\n    }\r\n    Functions.isZero = function (x) {\r\n        return this.abs(x) < this.EPSILON;\r\n    };\r\n    Functions.isEqual = function (a, b) {\r\n        return this.abs(a - b) < this.EPSILON;\r\n    };\r\n    Functions.isWhole = function (x) {\r\n        return this.abs(Math.floor(x) - x) < this.EPSILON;\r\n    };\r\n    Functions.isSingular = function (x) {\r\n        return this.isNumber(x) && this.abs(this.abs(x) - 1) < this.EPSILON;\r\n    };\r\n    Functions.isPlural = function (x) {\r\n        return x !== 1 && x !== -1;\r\n    };\r\n    Functions.isNumber = function (x) {\r\n        return isFinite(x);\r\n    };\r\n    Functions.trim = function (x) {\r\n        return x ? x.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '') : x;\r\n    };\r\n    Functions.gcd = function (a, b) {\r\n        if (!this.isWhole(a) || !this.isWhole(b)) {\r\n            return 1;\r\n        }\r\n        var x = a < b ? a : b;\r\n        var y = a < b ? b : a;\r\n        x = this.abs(x);\r\n        y = this.abs(y);\r\n        while (y) {\r\n            var t = y;\r\n            y = x % y;\r\n            x = t;\r\n        }\r\n        return x;\r\n    };\r\n    Functions.abs = function (x) {\r\n        return x < 0 ? -x : x;\r\n    };\r\n    Functions.sign = function (x) {\r\n        return x < 0 ? -1 : (x === 0 ? 0 : 1);\r\n    };\r\n    Functions.appendTo = function (array, input) {\r\n        if (input instanceof Array) {\r\n            array.push.apply(array, input);\r\n        }\r\n        else if (input) {\r\n            array.push(input);\r\n        }\r\n        return array;\r\n    };\r\n    Functions.isGroupDefinition = function (input) {\r\n        return !!(input && input.system && input.unit && input.denominators && input.units);\r\n    };\r\n    Functions.isValueDefinition = function (input) {\r\n        return !!(input && (input.value || input.unit || input.num || input.den));\r\n    };\r\n    Functions.isRangeDefinition = function (input) {\r\n        return !!(input && input.min && input.max);\r\n    };\r\n    Functions.isArray = function (input) {\r\n        return input instanceof Array;\r\n    };\r\n    Functions.isString = function (input) {\r\n        return typeof (input) === 'string';\r\n    };\r\n    Functions.isDefined = function (input) {\r\n        return typeof (input) !== 'undefined';\r\n    };\r\n    Functions.coalesce = function (a, b) {\r\n        return this.isDefined(a) ? a : b;\r\n    };\r\n    Functions.EPSILON = 0.00001;\r\n    return Functions;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Value.ts\n\r\n\r\nvar Value_Value = (function () {\r\n    function Value(value, num, den, unit, group) {\r\n        var divisor = Functions.gcd(num, den);\r\n        this.value = value;\r\n        this.num = num / divisor;\r\n        this.den = den / divisor;\r\n        this.unit = unit;\r\n        this.group = group;\r\n    }\r\n    Object.defineProperty(Value.prototype, \"isValid\", {\r\n        get: function () {\r\n            return isFinite(this.value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"isFraction\", {\r\n        get: function () {\r\n            return this.den !== 1;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"isDecimal\", {\r\n        get: function () {\r\n            return this.den === 1;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"scaled\", {\r\n        get: function () {\r\n            return this.group ? this.value * this.group.baseScale : this.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"classScaled\", {\r\n        get: function () {\r\n            return this.group ? this.value * this.group.classScale : this.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"actual\", {\r\n        get: function () {\r\n            return this.num / this.den;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"mixedWhole\", {\r\n        get: function () {\r\n            return this.den !== 1 ? Math.floor(this.num / this.den) : 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"mixedNum\", {\r\n        get: function () {\r\n            return this.den !== 1 ? this.num % this.den : this.num;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"floor\", {\r\n        get: function () {\r\n            return Math.floor(this.value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"ceil\", {\r\n        get: function () {\r\n            return Math.ceil(this.value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"truncate\", {\r\n        get: function () {\r\n            return this.value < 0 ? this.ceil : this.floor;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"remainder\", {\r\n        get: function () {\r\n            return this.value - this.floor;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"error\", {\r\n        get: function () {\r\n            return this.actual - this.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"distance\", {\r\n        get: function () {\r\n            return Functions.abs(this.error);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"asString\", {\r\n        get: function () {\r\n            return (this.den === 1) ?\r\n                (this.value + '') :\r\n                (this.mixedWhole !== 0 ?\r\n                    (this.mixedWhole + Value.SEPARATOR_MIXED + this.mixedNum + Value.SEPARATOR_FRACTION + this.den) :\r\n                    (this.num + Value.SEPARATOR_FRACTION + this.den));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Value.prototype.preferred = function () {\r\n        return this.group ? new Value(this.value, this.num, this.den, this.group.preferredUnit, this.group) : this;\r\n    };\r\n    Value.prototype.copy = function () {\r\n        return new Value(this.value, this.num, this.den, this.unit, this.group);\r\n    };\r\n    Value.prototype.zero = function () {\r\n        return new Value(0, 0, 1, this.unit, this.group);\r\n    };\r\n    Value.prototype.truncated = function () {\r\n        return new Value(this.truncate, this.truncate, 1, this.unit, this.group);\r\n    };\r\n    Value.prototype.convertTo = function (to) {\r\n        var group = this.group;\r\n        return group ? group.parent.convert(this.value, group, to) : this.value;\r\n    };\r\n    Value.prototype.convertToValue = function (group) {\r\n        return Value.fromNumberForGroup(this.convertTo(group), group);\r\n    };\r\n    Value.prototype.conversions = function (transform, reverse, callback) {\r\n        var _this = this;\r\n        if (this.group) {\r\n            this.group.matches(transform, reverse, function (group, index) {\r\n                callback(_this.convertToValue(group), index);\r\n            });\r\n        }\r\n    };\r\n    Value.prototype.normalize = function (transform, forOutput) {\r\n        var closest;\r\n        var closestString;\r\n        this.conversions(transform, false, function (convert) {\r\n            var acceptable = !forOutput.isNumber(convert);\r\n            if (!acceptable) {\r\n                var number = forOutput.number(convert.value);\r\n                acceptable = number !== '0';\r\n            }\r\n            if (acceptable) {\r\n                var convertString = forOutput.value(convert);\r\n                if (!closest || convertString.length <= closestString.length) {\r\n                    closest = convert;\r\n                    closestString = convertString;\r\n                }\r\n            }\r\n        });\r\n        return closest || this;\r\n    };\r\n    Value.prototype.add = function (addend, scale) {\r\n        if (scale === void 0) { scale = 1; }\r\n        var num = this.num * addend.den + addend.num * this.den * scale;\r\n        var den = this.den * addend.den;\r\n        var result = this.value + addend.value * scale;\r\n        return new Value(result, num, den, this.unit, this.group);\r\n    };\r\n    Value.prototype.sub = function (subtrahend, scale) {\r\n        if (scale === void 0) { scale = 1; }\r\n        var num = this.num * subtrahend.den - subtrahend.num * this.den * scale;\r\n        var den = this.den * subtrahend.den;\r\n        var result = this.value - subtrahend.value * scale;\r\n        return new Value(result, num, den, this.unit, this.group);\r\n    };\r\n    Value.prototype.mul = function (scale) {\r\n        return new Value(this.value * scale, this.num * scale, this.den, this.unit, this.group);\r\n    };\r\n    Value.fromNumber = function (value, unit, group) {\r\n        if (unit === void 0) { unit = ''; }\r\n        if (group === void 0) { group = null; }\r\n        return new Value(value, value, 1, unit, group);\r\n    };\r\n    Value.fromNumberWithRange = function (value, unit, group, minDen, maxDen) {\r\n        if (unit === void 0) { unit = ''; }\r\n        if (group === void 0) { group = null; }\r\n        if (minDen === void 0) { minDen = 1; }\r\n        if (maxDen === void 0) { maxDen = 100; }\r\n        var closestDenominator = 0;\r\n        var closestDistance = -1;\r\n        for (var i = minDen; i <= maxDen; i++) {\r\n            var den = i;\r\n            var num = Math.floor(den * value);\r\n            var actual = num / den;\r\n            var distance = Functions.abs(value - actual);\r\n            if (closestDistance === -1 || distance < closestDistance) {\r\n                closestDistance = distance;\r\n                closestDenominator = den;\r\n            }\r\n        }\r\n        if (closestDistance > Functions.EPSILON) {\r\n            return new Value(value, value, 1, unit, group);\r\n        }\r\n        return new Value(value, Math.floor(value * closestDenominator), closestDenominator, unit, group);\r\n    };\r\n    Value.fromNumberForGroup = function (value, group) {\r\n        return this.fromNumberWithDenominators(value, group.denominators, group.preferredUnit, group);\r\n    };\r\n    Value.fromNumberWithDenominators = function (value, denominators, unit, group) {\r\n        if (unit === void 0) { unit = ''; }\r\n        if (group === void 0) { group = null; }\r\n        var closestDenominator = 0;\r\n        var closestDistance = -1;\r\n        for (var i = 0; i < denominators.length; i++) {\r\n            var den = denominators[i];\r\n            var num = Math.floor(den * value);\r\n            var actual = num / den;\r\n            var distance = Functions.abs(value - actual);\r\n            if (closestDistance === -1 || distance < closestDistance) {\r\n                closestDistance = distance;\r\n                closestDenominator = den;\r\n            }\r\n        }\r\n        if (closestDistance > Functions.EPSILON) {\r\n            return new Value(value, value, 1, unit, group);\r\n        }\r\n        if (closestDenominator === 0) {\r\n            closestDenominator = 1;\r\n        }\r\n        return new Value(value, Math.floor(value * closestDenominator), closestDenominator, unit, group);\r\n    };\r\n    Value.fromFraction = function (num, den, unit, group) {\r\n        if (unit === void 0) { unit = ''; }\r\n        if (group === void 0) { group = null; }\r\n        return new Value(num / den, num, den, unit, group);\r\n    };\r\n    Value.INVALID = new Value(Number.NaN, Number.NaN, 1, '', null);\r\n    Value.SEPARATOR_FRACTION = '/';\r\n    Value.SEPARATOR_MIXED = ' ';\r\n    return Value;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Range.ts\n\r\n\r\nvar Range_Range = (function () {\r\n    function Range(min, max) {\r\n        this.min = min.value < max.value ? min : max;\r\n        this.max = max.value > min.value ? max : min;\r\n    }\r\n    Object.defineProperty(Range.prototype, \"isValid\", {\r\n        get: function () {\r\n            return this.min.isValid && this.max.isValid;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"isFraction\", {\r\n        get: function () {\r\n            return this.min.isFraction || this.max.isFraction;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"isDecimal\", {\r\n        get: function () {\r\n            return this.min.isDecimal && this.max.isDecimal;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"isRange\", {\r\n        get: function () {\r\n            return this.min.value !== this.max.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"isFixed\", {\r\n        get: function () {\r\n            return this.min.value === this.max.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"average\", {\r\n        get: function () {\r\n            return (this.min.value + this.max.value) * 0.5;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"value\", {\r\n        get: function () {\r\n            return this.min.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"minimum\", {\r\n        get: function () {\r\n            return this.min.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"maximum\", {\r\n        get: function () {\r\n            return this.max.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"unit\", {\r\n        get: function () {\r\n            return this.min.group.unit;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"asString\", {\r\n        get: function () {\r\n            return (this.min.value === this.max.value) ?\r\n                (this.min.asString) :\r\n                (this.min.asString + Range.SEPARATOR + this.max.asString);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Range.prototype.isMatch = function (range) {\r\n        return this.min.group === range.min.group &&\r\n            this.max.group === range.max.group;\r\n    };\r\n    Range.prototype.preferred = function () {\r\n        var min = this.min.preferred();\r\n        var max = this.max.preferred();\r\n        return new Range(min, max);\r\n    };\r\n    Range.prototype.positive = function () {\r\n        var minNegative = this.min.value < 0;\r\n        var maxNegative = this.max.value < 0;\r\n        if (maxNegative) {\r\n            return null;\r\n        }\r\n        var min = minNegative ? this.min.zero() : this.min.copy();\r\n        var max = this.max.copy();\r\n        return new Range(min, max);\r\n    };\r\n    Range.prototype.negative = function () {\r\n        var minPositive = this.min.value >= 0;\r\n        var maxPositive = this.max.value >= 0;\r\n        if (minPositive) {\r\n            return null;\r\n        }\r\n        var min = this.min.copy();\r\n        var max = maxPositive ? this.max.zero() : this.max.copy();\r\n        return new Range(min, max);\r\n    };\r\n    Range.prototype.nonzero = function () {\r\n        var minZero = this.min.value === 0;\r\n        var maxZero = this.max.value === 0;\r\n        if (minZero && maxZero) {\r\n            return null;\r\n        }\r\n        var min = this.min.copy();\r\n        var max = this.max.copy();\r\n        return new Range(min, max);\r\n    };\r\n    Range.prototype.maxd = function () {\r\n        var fixed = this.max.copy();\r\n        return new Range(fixed, fixed);\r\n    };\r\n    Range.prototype.mind = function () {\r\n        var fixed = this.min.copy();\r\n        return new Range(fixed, fixed);\r\n    };\r\n    Range.prototype.normalize = function (transform, forOutput) {\r\n        var min = this.min.normalize(transform, forOutput);\r\n        var max = this.max.normalize(transform, forOutput);\r\n        return new Range(min, max);\r\n    };\r\n    Range.prototype.add = function (addend, scale) {\r\n        if (scale === void 0) { scale = 1; }\r\n        var min = this.min.add(addend.min, scale);\r\n        var max = this.max.add(addend.max, scale);\r\n        return new Range(min, max);\r\n    };\r\n    Range.prototype.sub = function (subtrahend, scale) {\r\n        if (scale === void 0) { scale = 1; }\r\n        var min = this.min.sub(subtrahend.min, scale);\r\n        var max = this.max.sub(subtrahend.max, scale);\r\n        return new Range(min, max);\r\n    };\r\n    Range.prototype.mul = function (scale) {\r\n        var min = this.min.mul(scale);\r\n        var max = this.max.mul(scale);\r\n        return new Range(min, max);\r\n    };\r\n    Range.fromFixed = function (fixed) {\r\n        return new Range(fixed, fixed);\r\n    };\r\n    Range.INVALID = new Range(Value_Value.INVALID, Value_Value.INVALID);\r\n    Range.SEPARATOR = ' - ';\r\n    return Range;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Group.ts\n\r\n\r\n\r\nvar Group_Group = (function () {\r\n    function Group(definition, parent) {\r\n        this.baseScale = 1;\r\n        this.classScale = 0;\r\n        this.dynamic = false;\r\n        this.system = definition.system;\r\n        this.common = !!definition.common;\r\n        this.unit = definition.unit;\r\n        this.baseUnit = definition.baseUnit;\r\n        this.preferredUnit = definition.preferredUnit || definition.unit;\r\n        this.relativeUnit = definition.relativeUnit;\r\n        this.relativeScale = definition.relativeScale || 1;\r\n        this.units = definition.units;\r\n        this.denominators = definition.denominators;\r\n        this.parent = parent;\r\n        this.updateUnits();\r\n    }\r\n    Object.defineProperty(Group.prototype, \"isBase\", {\r\n        get: function () {\r\n            return this.unit === this.baseUnit;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Group.prototype.setDynamic = function (dynamic) {\r\n        if (dynamic === void 0) { dynamic = true; }\r\n        this.dynamic = dynamic;\r\n        return this;\r\n    };\r\n    Group.prototype.addUnits = function (units) {\r\n        var parent = this.parent;\r\n        for (var unit in units) {\r\n            this.units[unit] = units[unit];\r\n            parent.addGroupUnit(unit, this);\r\n        }\r\n        this.updateUnits();\r\n        return this;\r\n    };\r\n    Group.prototype.removeUnits = function (units) {\r\n        var parent = this.parent;\r\n        var existing = this.units;\r\n        for (var i = 0; i < units.length; i++) {\r\n            var unit = units[i];\r\n            if (unit in existing) {\r\n                delete existing[unit];\r\n                parent.removeGroupUnit(unit, this);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    Group.prototype.addDenominator = function (denominators) {\r\n        Functions.appendTo(this.denominators, denominators);\r\n        return this;\r\n    };\r\n    Group.prototype.setDenominators = function (denominators) {\r\n        this.denominators = denominators;\r\n        return this;\r\n    };\r\n    Group.prototype.setCommon = function (common) {\r\n        if (common === void 0) { common = true; }\r\n        this.common = common;\r\n        return this;\r\n    };\r\n    Group.prototype.setPreferred = function (unit) {\r\n        this.preferredUnit = unit;\r\n        return this;\r\n    };\r\n    Group.prototype.updateUnits = function () {\r\n        this.singularShort = null;\r\n        this.singularLong = null;\r\n        this.pluralShort = null;\r\n        this.pluralLong = null;\r\n        for (var unit in this.units) {\r\n            var plurality = this.units[unit];\r\n            if (plurality !== Plurality.PLURAL) {\r\n                if (!this.singularShort || unit.length < this.singularShort.length) {\r\n                    this.singularShort = unit;\r\n                }\r\n                if (!this.singularLong || unit.length > this.singularLong.length) {\r\n                    this.singularLong = unit;\r\n                }\r\n            }\r\n            if (plurality !== Plurality.SINGULAR) {\r\n                if (!this.pluralShort || unit.length < this.pluralShort.length) {\r\n                    this.pluralShort = unit;\r\n                }\r\n                if (!this.pluralLong || unit.length > this.pluralLong.length) {\r\n                    this.pluralLong = unit;\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    Group.prototype.getPluralLong = function () {\r\n        return this.pluralLong;\r\n    };\r\n    Group.prototype.getPluralShort = function () {\r\n        return this.pluralShort;\r\n    };\r\n    Group.prototype.getSingularLong = function () {\r\n        return this.singularLong;\r\n    };\r\n    Group.prototype.getSingularShort = function () {\r\n        return this.singularShort;\r\n    };\r\n    Group.prototype.matches = function (transform, reverse, callback) {\r\n        if (this.parent) {\r\n            this.parent.getVisibleGroups(transform, reverse, this, callback);\r\n        }\r\n    };\r\n    return Group;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Class.ts\n\r\n\r\nvar Class_Class = (function () {\r\n    function Class(name, groups) {\r\n        this.name = name;\r\n        this.groupMap = {};\r\n        this.groups = [];\r\n        this.converters = {};\r\n        if (groups) {\r\n            this.addGroups(groups);\r\n        }\r\n    }\r\n    Class.prototype.addGroups = function (definitions) {\r\n        for (var i = 0; i < definitions.length; i++) {\r\n            this.addGroup(definitions[i]);\r\n        }\r\n        return this;\r\n    };\r\n    Class.prototype.addGroup = function (definition) {\r\n        var group = new Group_Group(definition, this);\r\n        var relativeUnit = group.relativeUnit, relativeScale = group.relativeScale, units = group.units;\r\n        if (relativeUnit) {\r\n            var relative = this.groupMap[relativeUnit];\r\n            group.baseScale = relativeScale * relative.baseScale;\r\n            group.baseUnit = relative.baseUnit;\r\n        }\r\n        for (var alias in units) {\r\n            this.addGroupUnit(alias, group);\r\n        }\r\n        this.groups.push(group);\r\n        return group;\r\n    };\r\n    Class.prototype.addGroupUnit = function (unit, group) {\r\n        var lower = unit.toLowerCase();\r\n        this.groupMap[unit] = group;\r\n        this.groupMap[lower] = group;\r\n        return this;\r\n    };\r\n    Class.prototype.removeGroupUnit = function (unit, group) {\r\n        var lower = unit.toLowerCase();\r\n        if (this.groupMap[unit] === group) {\r\n            delete this.groupMap[unit];\r\n        }\r\n        if (this.groupMap[lower] === group) {\r\n            delete this.groupMap[lower];\r\n        }\r\n        return this;\r\n    };\r\n    Class.prototype.getFirstBase = function () {\r\n        var groups = this.groups;\r\n        for (var i = 0; i < groups.length; i++) {\r\n            var group = groups[i];\r\n            if (group.unit === group.baseUnit) {\r\n                return group;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    Class.prototype.setClassScales = function () {\r\n        var groups = this.groups;\r\n        var first = this.getFirstBase();\r\n        if (first) {\r\n            for (var i = 0; i < groups.length; i++) {\r\n                var group = groups[i];\r\n                if (group.baseUnit === first.baseUnit) {\r\n                    group.classScale = group.baseScale;\r\n                }\r\n                else if (group.baseUnit in this.converters) {\r\n                    group.classScale = this.converters[group.baseUnit][first.baseUnit](group.baseScale);\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    Class.prototype.setBaseConversion = function (fromUnit, toUnit, converter) {\r\n        var converters = this.converters;\r\n        converters[fromUnit] = converters[fromUnit] || {};\r\n        converters[fromUnit][toUnit] = converter;\r\n        return this;\r\n    };\r\n    Class.prototype.getVisibleGroups = function (transform, reverse, relatedGroup, callback) {\r\n        var groups = this.groups;\r\n        var matched = 0;\r\n        var start = reverse ? groups.length - 1 : 0;\r\n        var stop = reverse ? -1 : groups.length;\r\n        var increment = reverse ? -1 : 1;\r\n        for (var i = start; i !== stop; i += increment) {\r\n            var group = groups[i];\r\n            if (transform.isVisibleGroup(group, relatedGroup)) {\r\n                var result = callback(group, matched++);\r\n                if (result === false) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Class.prototype.convert = function (value, from, to) {\r\n        if (from === to || !from || !to) {\r\n            return value;\r\n        }\r\n        var converted = value * from.baseScale;\r\n        if (from.baseUnit !== to.baseUnit) {\r\n            var map = this.converters[from.baseUnit];\r\n            if (!map || !map[to.baseUnit]) {\r\n                return 0;\r\n            }\r\n            var converter = map[to.baseUnit];\r\n            converted = converter(converted);\r\n        }\r\n        return converted / to.baseScale;\r\n    };\r\n    return Class;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Output.ts\n\r\n\r\nvar OutputUnit;\r\n(function (OutputUnit) {\r\n    OutputUnit[OutputUnit[\"NONE\"] = 0] = \"NONE\";\r\n    OutputUnit[OutputUnit[\"GIVEN\"] = 1] = \"GIVEN\";\r\n    OutputUnit[OutputUnit[\"SHORT\"] = 2] = \"SHORT\";\r\n    OutputUnit[OutputUnit[\"LONG\"] = 3] = \"LONG\";\r\n})(OutputUnit = OutputUnit || (OutputUnit = {}));\r\nvar OutputFormat;\r\n(function (OutputFormat) {\r\n    OutputFormat[OutputFormat[\"GIVEN\"] = 0] = \"GIVEN\";\r\n    OutputFormat[OutputFormat[\"NUMBER\"] = 1] = \"NUMBER\";\r\n    OutputFormat[OutputFormat[\"MIXED\"] = 2] = \"MIXED\";\r\n    OutputFormat[OutputFormat[\"FRACTION\"] = 3] = \"FRACTION\";\r\n    OutputFormat[OutputFormat[\"IMPROPER\"] = 4] = \"IMPROPER\";\r\n})(OutputFormat = OutputFormat || (OutputFormat = {}));\r\nvar Output_Output = (function () {\r\n    function Output(input) {\r\n        this.unit = OutputUnit.GIVEN;\r\n        this.format = OutputFormat.GIVEN;\r\n        this.repeatUnit = false;\r\n        this.unitSpacer = '';\r\n        this.rangeSpacer = ' - ';\r\n        this.fractionSpacer = '/';\r\n        this.mixedSpacer = ' ';\r\n        this.delimiter = ', ';\r\n        this.significant = -1;\r\n        if (Functions.isDefined(input)) {\r\n            this.set(input);\r\n        }\r\n    }\r\n    Output.prototype.set = function (input) {\r\n        this.unit = Functions.coalesce(input.unit, this.unit);\r\n        this.format = Functions.coalesce(input.format, this.format);\r\n        this.repeatUnit = Functions.coalesce(input.repeatUnit, this.repeatUnit);\r\n        this.unitSpacer = Functions.coalesce(input.unitSpacer, this.unitSpacer);\r\n        this.rangeSpacer = Functions.coalesce(input.rangeSpacer, this.rangeSpacer);\r\n        this.fractionSpacer = Functions.coalesce(input.fractionSpacer, this.fractionSpacer);\r\n        this.mixedSpacer = Functions.coalesce(input.mixedSpacer, this.mixedSpacer);\r\n        this.delimiter = Functions.coalesce(input.delimiter, this.delimiter);\r\n        this.significant = Functions.coalesce(input.significant, this.significant);\r\n        return this;\r\n    };\r\n    Output.prototype.extend = function (input) {\r\n        var extended = this;\r\n        if (Functions.isDefined(input)) {\r\n            if (input instanceof Output) {\r\n                extended = input;\r\n            }\r\n            else {\r\n                extended = new Output(this);\r\n                extended.set(input);\r\n            }\r\n        }\r\n        return extended;\r\n    };\r\n    Output.prototype.ranges = function (ranges) {\r\n        var out = '';\r\n        for (var i = 0; i < ranges.length; i++) {\r\n            var range = ranges[i];\r\n            if (range.isValid) {\r\n                if (out.length) {\r\n                    out += this.delimiter;\r\n                }\r\n                out += this.range(range);\r\n            }\r\n        }\r\n        return out;\r\n    };\r\n    Output.prototype.range = function (range) {\r\n        var out = '';\r\n        if (!range.isValid) {\r\n            // nothing\r\n        }\r\n        else if (range.isFixed) {\r\n            out += this.value(range.min);\r\n        }\r\n        else {\r\n            var minUnit = this.repeatUnit || range.min.unit !== range.max.unit;\r\n            out += this.value(range.min, minUnit);\r\n            out += this.rangeSpacer;\r\n            out += this.value(range.max);\r\n        }\r\n        return out;\r\n    };\r\n    Output.prototype.value = function (value, showUnit) {\r\n        if (showUnit === void 0) { showUnit = true; }\r\n        var out = '';\r\n        if (!value.isValid) {\r\n        }\r\n        else if (this.isFraction(value)) {\r\n            if (this.isMixed(value)) {\r\n                out += value.mixedWhole;\r\n                out += this.mixedSpacer;\r\n                out += value.mixedNum;\r\n                out += this.fractionSpacer;\r\n                out += value.den;\r\n            }\r\n            else {\r\n                out += value.num;\r\n                out += this.fractionSpacer;\r\n                out += value.den;\r\n            }\r\n        }\r\n        else {\r\n            out += this.number(value.value);\r\n        }\r\n        if (value.isValid && this.unit !== OutputUnit.NONE && showUnit) {\r\n            var group = value.group;\r\n            out += this.unitSpacer;\r\n            if (this.isLongUnit(value)) {\r\n                out += Functions.isSingular(value.value) ? group.getSingularLong() : group.getPluralLong();\r\n            }\r\n            else if (this.isShortUnit(value) || (group && group.dynamic)) {\r\n                out += Functions.isSingular(value.value) ? group.getSingularShort() : group.getPluralShort();\r\n            }\r\n            else {\r\n                out += value.unit;\r\n            }\r\n        }\r\n        return out;\r\n    };\r\n    Output.prototype.number = function (x) {\r\n        var valueString = x + '';\r\n        if (this.significant >= 0) {\r\n            var valueSignificant = x\r\n                .toFixed(this.significant)\r\n                .replace(/0*$/, '')\r\n                .replace(/\\.$/, '');\r\n            return valueSignificant.length < valueString.length ? valueSignificant : valueString;\r\n        }\r\n        return valueString;\r\n    };\r\n    Output.prototype.isFraction = function (value) {\r\n        return value.isFraction && this.format !== OutputFormat.NUMBER;\r\n    };\r\n    Output.prototype.isNumber = function (value) {\r\n        return value.isValid && !this.isFraction(value);\r\n    };\r\n    Output.prototype.isMixed = function (value) {\r\n        return value.mixedWhole !== 0 && this.format !== OutputFormat.IMPROPER;\r\n    };\r\n    Output.prototype.isShortUnit = function (value) {\r\n        return value.group && this.unit === OutputUnit.SHORT;\r\n    };\r\n    Output.prototype.isLongUnit = function (value) {\r\n        return value.group && this.unit === OutputUnit.LONG;\r\n    };\r\n    return Output;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Transform.ts\n\r\n\r\n\r\nvar Transform_Transform = (function () {\r\n    function Transform(input) {\r\n        this.common = true;\r\n        this.system = System.GIVEN;\r\n        this.min = -Number.MAX_VALUE;\r\n        this.max = Number.MAX_VALUE;\r\n        this.convertWithMax = true;\r\n        this.groupless = true;\r\n        if (Functions.isDefined(input)) {\r\n            this.set(input);\r\n        }\r\n    }\r\n    Transform.prototype.set = function (input) {\r\n        this.common = Functions.coalesce(input.common, this.common);\r\n        this.system = Functions.coalesce(input.system, this.system);\r\n        this.min = Functions.coalesce(input.min, this.min);\r\n        this.max = Functions.coalesce(input.max, this.max);\r\n        this.groupless = Functions.coalesce(input.groupless, this.groupless);\r\n        this.convertWithMax = Functions.coalesce(input.convertWithMax, this.convertWithMax);\r\n        this.onlyUnits = Functions.coalesce(input.onlyUnits, this.onlyUnits);\r\n        this.notUnits = Functions.coalesce(input.notUnits, this.notUnits);\r\n        this.onlyClasses = Functions.coalesce(input.onlyClasses, this.onlyClasses);\r\n        this.notClasses = Functions.coalesce(input.notClasses, this.notClasses);\r\n        return this;\r\n    };\r\n    Transform.prototype.extend = function (input) {\r\n        var extended = this;\r\n        if (Functions.isDefined(input)) {\r\n            if (input instanceof Transform) {\r\n                extended = input;\r\n            }\r\n            else {\r\n                extended = new Transform(this);\r\n                extended.set(input);\r\n            }\r\n        }\r\n        return extended;\r\n    };\r\n    Transform.prototype.isVisibleGroup = function (group, givenGroup) {\r\n        return this.isCommonMatch(group) &&\r\n            this.isSystemMatch(group, givenGroup) &&\r\n            this.isUnitMatch(group) &&\r\n            this.isClassMatch(group.parent);\r\n    };\r\n    Transform.prototype.isCommonMatch = function (group) {\r\n        return !this.common || group.common;\r\n    };\r\n    Transform.prototype.isSystemMatch = function (group, givenGroup) {\r\n        switch (this.system) {\r\n            case System.METRIC:\r\n                return group.system === System.METRIC || group.system === System.ANY;\r\n            case System.IMPERIAL:\r\n                return group.system === System.IMPERIAL || group.system === System.ANY;\r\n            case System.NONE:\r\n                return false;\r\n            case System.ANY:\r\n                return true;\r\n            case System.GIVEN:\r\n                return !givenGroup || group.baseUnit === givenGroup.baseUnit;\r\n        }\r\n        return false;\r\n    };\r\n    Transform.prototype.isClassMatch = function (parent) {\r\n        if (this.onlyClasses) {\r\n            return this.onlyClasses.indexOf(parent.name) !== -1;\r\n        }\r\n        if (this.notClasses) {\r\n            return this.notClasses.indexOf(parent.name) === -1;\r\n        }\r\n        return true;\r\n    };\r\n    Transform.prototype.isUnitMatch = function (group) {\r\n        if (this.onlyUnits) {\r\n            return this.onlyUnits.indexOf(group.unit) !== -1;\r\n        }\r\n        if (this.notUnits) {\r\n            return this.notUnits.indexOf(group.unit) === -1;\r\n        }\r\n        return true;\r\n    };\r\n    return Transform;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Sort.ts\n\r\n\r\nvar SortType;\r\n(function (SortType) {\r\n    SortType[SortType[\"MIN\"] = 0] = \"MIN\";\r\n    SortType[SortType[\"MAX\"] = 1] = \"MAX\";\r\n    SortType[SortType[\"AVERAGE\"] = 2] = \"AVERAGE\";\r\n})(SortType = SortType || (SortType = {}));\r\nvar Sort_Sort = (function () {\r\n    function Sort(input) {\r\n        this.ascending = false;\r\n        this.type = SortType.MAX;\r\n        this.classes = {};\r\n        if (Functions.isDefined(input)) {\r\n            this.set(input);\r\n        }\r\n    }\r\n    Sort.prototype.set = function (input) {\r\n        this.ascending = Functions.coalesce(input.ascending, this.ascending);\r\n        this.type = Functions.coalesce(input.type, this.type);\r\n        if (Functions.isDefined(input.classes)) {\r\n            for (var className in input.classes) {\r\n                this.classes[className] = input.classes[className];\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    Sort.prototype.extend = function (input) {\r\n        var extended = this;\r\n        if (Functions.isDefined(input)) {\r\n            if (input instanceof Sort) {\r\n                extended = input;\r\n            }\r\n            else {\r\n                extended = new Sort(this);\r\n                extended.set(input);\r\n            }\r\n        }\r\n        return extended;\r\n    };\r\n    Sort.prototype.getSorter = function () {\r\n        var _this = this;\r\n        return function (a, b) {\r\n            var d = _this.getClassComparison(a, b);\r\n            if (d === 0) {\r\n                switch (_this.type) {\r\n                    case SortType.MIN:\r\n                        d = _this.getMinComparison(a, b);\r\n                        break;\r\n                    case SortType.MAX:\r\n                        d = _this.getMaxComparison(a, b);\r\n                        break;\r\n                    case SortType.AVERAGE:\r\n                        d = _this.getAverageComparison(a, b);\r\n                        break;\r\n                }\r\n            }\r\n            return _this.ascending ? d : -d;\r\n        };\r\n    };\r\n    Sort.prototype.getMinComparison = function (a, b) {\r\n        return Functions.sign(a.min.classScaled - b.min.classScaled);\r\n    };\r\n    Sort.prototype.getMaxComparison = function (a, b) {\r\n        return Functions.sign(a.max.classScaled - b.max.classScaled);\r\n    };\r\n    Sort.prototype.getAverageComparison = function (a, b) {\r\n        var avg = (a.min.classScaled + a.max.classScaled) * 0.5;\r\n        var bvg = (b.min.classScaled + b.max.classScaled) * 0.5;\r\n        return Functions.sign(avg - bvg);\r\n    };\r\n    Sort.prototype.getClassComparison = function (a, b) {\r\n        var ag = a.min.group ? 1 : -1;\r\n        var bg = b.min.group ? 1 : -1;\r\n        if (ag !== bg) {\r\n            return ag - bg;\r\n        }\r\n        var ac = this.classes[a.min.group.parent.name] || 0;\r\n        var bc = this.classes[b.min.group.parent.name] || 0;\r\n        return ac - bc;\r\n    };\r\n    return Sort;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Core.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar Core_Core = (function () {\r\n    function Core() {\r\n    }\r\n    Core.getGroup = function (unit) {\r\n        if (!unit) {\r\n            return null;\r\n        }\r\n        var exactGroup = Core.unitToGroup[unit];\r\n        if (exactGroup) {\r\n            return exactGroup;\r\n        }\r\n        var normalizedUnit = unit.toLowerCase();\r\n        var normalizedGroup = Core.unitToGroup[normalizedUnit];\r\n        if (normalizedGroup) {\r\n            return normalizedGroup;\r\n        }\r\n        var dynamicUnit = Core.getDynamicMatch(unit);\r\n        var dynamicGroup = Core.dynamicMatches[dynamicUnit];\r\n        if (dynamicGroup) {\r\n            return Core.addDynamicUnit(unit, dynamicGroup);\r\n        }\r\n        return Core.newDynamicGroup(unit);\r\n    };\r\n    Core.addClass = function (parent) {\r\n        this.classMap[parent.name] = parent;\r\n        this.classes.push(parent);\r\n        var groups = parent.groupMap;\r\n        for (var unit in groups) {\r\n            this.unitToGroup[unit] = groups[unit];\r\n        }\r\n    };\r\n    Core.addClasses = function () {\r\n        var classes = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            classes[_i] = arguments[_i];\r\n        }\r\n        for (var i = 0; i < classes.length; i++) {\r\n            this.addClass(classes[i]);\r\n        }\r\n    };\r\n    Core.addDynamicUnit = function (unit, group) {\r\n        group.units[unit] = Plurality.EITHER;\r\n        var unitCount = 0;\r\n        for (var groupUnit in group.units) {\r\n            if (groupUnit) {\r\n                unitCount++;\r\n            }\r\n        }\r\n        if (unitCount > 1) {\r\n            var longest = void 0;\r\n            for (var groupUnit in group.units) {\r\n                group.units[groupUnit] = Plurality.SINGULAR;\r\n                if (!longest || groupUnit.length > longest.length) {\r\n                    longest = groupUnit;\r\n                }\r\n            }\r\n            if (longest) {\r\n                group.units[longest] = Plurality.PLURAL;\r\n            }\r\n        }\r\n        group.updateUnits();\r\n        this.unitToGroup[unit] = group;\r\n        this.unitToGroup[unit.toLowerCase()] = group;\r\n        this.dynamicMatches[this.getDynamicMatch(unit)] = group;\r\n        return group;\r\n    };\r\n    Core.newDynamicGroup = function (unit) {\r\n        var parent = new Class_Class(unit);\r\n        var group = parent.addGroup({\r\n            system: System.ANY,\r\n            unit: unit,\r\n            common: true,\r\n            baseUnit: unit,\r\n            denominators: [2, 3, 4, 5, 6, 8, 10],\r\n            units: {}\r\n        });\r\n        group.setDynamic();\r\n        this.addDynamicUnit(unit, group);\r\n        this.dynamicGroups.push(group);\r\n        return group;\r\n    };\r\n    Core.getDynamicMatch = function (unit) {\r\n        return unit.substring(0, this.dynamicMatchLength).toLowerCase();\r\n    };\r\n    Core.classMap = {};\r\n    Core.classes = [];\r\n    Core.unitToGroup = {};\r\n    Core.dynamicGroups = [];\r\n    Core.dynamicMatches = {};\r\n    Core.dynamicMatchLength = 3;\r\n    Core.globalOutput = new Output_Output();\r\n    Core.globalTransform = new Transform_Transform();\r\n    Core.globalSort = new Sort_Sort();\r\n    return Core;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Base.ts\n\r\n\r\n\r\n\r\n\r\n\r\nfunction uz(input) {\r\n    return new Base_Base(input);\r\n}\r\nvar Base_Base = (function () {\r\n    function Base(input, ranges) {\r\n        this.input = input;\r\n        this.ranges = ranges || Parse_Parse.ranges(input, Core_Core.getGroup);\r\n    }\r\n    // 1c, 2.3m SCALE BY 2 = 2c, 4.6m\r\n    Base.prototype.scale = function (amount) {\r\n        return this.mutate(function (r) { return r.mul(amount); });\r\n    };\r\n    // 1c, 3m SCALE TO 1/2c = 1/2c, 1.5m\r\n    Base.prototype.scaleTo = function (unitValue) {\r\n        return this.scale(this.getScaleTo(unitValue));\r\n    };\r\n    // 5 kilograms = 5kg\r\n    Base.prototype.preferred = function () {\r\n        return this.mutate(function (r) { return r.preferred(); });\r\n    };\r\n    // 0c, 2tbsp, -4tbsp = 0c, 2tbsp\r\n    Base.prototype.positive = function () {\r\n        return this.mutate(function (r) { return r.positive(); });\r\n    };\r\n    // 0c, 2tbsp, -4tbsp = -4tbsp\r\n    Base.prototype.negative = function () {\r\n        return this.mutate(function (r) { return r.negative(); });\r\n    };\r\n    // 0c, 2tbsp = 2tbsp\r\n    Base.prototype.nonzero = function () {\r\n        return this.mutate(function (r) { return r.nonzero(); });\r\n    };\r\n    // 1 - 3c = 3c\r\n    Base.prototype.max = function () {\r\n        return this.hasRanges ? this.mutate(function (r) { return r.maxd(); }) : this;\r\n    };\r\n    // 1 - 3c = 1c\r\n    Base.prototype.min = function () {\r\n        return this.hasRanges ? this.mutate(function (r) { return r.mind(); }) : this;\r\n    };\r\n    // 1.5pt = 3c\r\n    Base.prototype.normalize = function (options, forOutput) {\r\n        var output = Core_Core.globalOutput.extend(forOutput);\r\n        var transform = Core_Core.globalTransform.extend(options);\r\n        return this.mutate(function (r) { return r.normalize(transform, output); });\r\n    };\r\n    // 1c, 1pt = 1.5pt\r\n    Base.prototype.compact = function (options) {\r\n        var compacted = [];\r\n        var transform = Core_Core.globalTransform.extend(options);\r\n        var _a = this.groupByClass(), classes = _a.classes, groupless = _a.groupless;\r\n        var _loop_1 = function (className) {\r\n            var entry = classes[className];\r\n            var ranges = entry.ranges;\r\n            var parent_1 = entry.parent;\r\n            var minGroupChosen = null;\r\n            var maxGroupChosen = null;\r\n            var minSum = 0;\r\n            var maxSum = 0;\r\n            // If the transformation options ignores this class, skip it.\r\n            if (!transform.isClassMatch(parent_1)) {\r\n                return \"continue\";\r\n            }\r\n            // Determine the smallest visible group we can use.\r\n            parent_1.getVisibleGroups(transform, false, null, function (group) {\r\n                minGroupChosen = maxGroupChosen = group;\r\n                return false;\r\n            });\r\n            // If we can't find one, then no groups are valid. Skip them.\r\n            if (!minGroupChosen) {\r\n                return \"continue\";\r\n            }\r\n            // For each range, sum up the minimums and maximums while also determining\r\n            // the largest min & max that should be used to represent the sums.\r\n            for (var i = 0; i < ranges.length; i++) {\r\n                var range = ranges[i];\r\n                var minGroup = range.min.group;\r\n                var maxGroup = range.max.group;\r\n                if (minGroup.classScale > minGroupChosen.classScale && transform.isVisibleGroup(minGroup)) {\r\n                    minSum = parent_1.convert(minSum, minGroupChosen, minGroup);\r\n                    minGroupChosen = minGroup;\r\n                }\r\n                if (maxGroup.classScale > maxGroupChosen.classScale && transform.isVisibleGroup(maxGroup)) {\r\n                    maxSum = parent_1.convert(maxSum, maxGroupChosen, maxGroup);\r\n                    maxGroupChosen = maxGroup;\r\n                }\r\n                minSum += range.min.convertTo(minGroupChosen);\r\n                maxSum += range.max.convertTo(maxGroupChosen);\r\n            }\r\n            var min = Value_Value.fromNumberForGroup(minSum, minGroupChosen);\r\n            var max = Value_Value.fromNumberForGroup(maxSum, maxGroupChosen);\r\n            compacted.push(new Range_Range(min, max));\r\n        };\r\n        for (var className in classes) {\r\n            _loop_1(className);\r\n        }\r\n        // If the transform options permit groupless results and there are ranges\r\n        // without groups - sum them all.\r\n        if (transform.groupless && groupless.length) {\r\n            var minSum = new Value_Value(0, 0, 1, '', null);\r\n            var maxSum = new Value_Value(0, 0, 1, '', null);\r\n            for (var i = 0; i < groupless.length; i++) {\r\n                minSum = minSum.add(groupless[i].min);\r\n                maxSum = maxSum.add(groupless[i].max);\r\n            }\r\n            compacted.push(new Range_Range(minSum, maxSum));\r\n        }\r\n        return new Base(this.input, compacted);\r\n    };\r\n    // 1.5pt = 1c, 1pt\r\n    Base.prototype.expand = function (options) {\r\n        var transform = Core_Core.globalTransform.extend(options);\r\n        var compacted = this.compact(transform);\r\n        var ranges = compacted.ranges;\r\n        var expanded = [];\r\n        var _loop_2 = function (i) {\r\n            var range = ranges[i];\r\n            var value = transform.convertWithMax ? range.max : range.min;\r\n            var valueGroup = value.group;\r\n            if (valueGroup) {\r\n                valueGroup.matches(transform, true, function (group) {\r\n                    if (!Functions.isZero(value.value)) {\r\n                        var transformed = value.convertToValue(group);\r\n                        if (group.isBase) {\r\n                            expanded.push(Range_Range.fromFixed(transformed));\r\n                        }\r\n                        else if (Functions.abs(transformed.value) >= 1) {\r\n                            var truncated = transformed.truncated();\r\n                            var scaled = group.baseScale / valueGroup.baseScale;\r\n                            value = value.sub(truncated, scaled);\r\n                            expanded.push(Range_Range.fromFixed(truncated));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                expanded.push(range);\r\n            }\r\n        };\r\n        for (var i = 0; i < ranges.length; i++) {\r\n            _loop_2(i);\r\n        }\r\n        return new Base(this.input, expanded);\r\n    };\r\n    Base.prototype.add = function (input, scale) {\r\n        if (scale === void 0) { scale = 1; }\r\n        return this.operate(input, function (a, b) {\r\n            return a.add(b, scale);\r\n        });\r\n    };\r\n    Base.prototype.sub = function (input, scale) {\r\n        if (scale === void 0) { scale = 1; }\r\n        return this.operate(input, function (a, b) {\r\n            return a.sub(b, scale);\r\n        });\r\n    };\r\n    Base.prototype.operate = function (input, operate) {\r\n        var ranges = this.ranges;\r\n        var output = [];\r\n        var other = Parse_Parse.base(input);\r\n        var otherRanges = other.ranges;\r\n        var otherUsed = [];\r\n        for (var i = 0; i < ranges.length; i++) {\r\n            var range = ranges[i];\r\n            for (var k = 0; k < otherRanges.length; k++) {\r\n                if (!otherUsed[k]) {\r\n                    var otherRange = otherRanges[k];\r\n                    if (range.isMatch(otherRange)) {\r\n                        range = operate(range, otherRange);\r\n                        otherUsed[k] = true;\r\n                    }\r\n                }\r\n            }\r\n            output.push(range);\r\n        }\r\n        for (var k = 0; k < otherRanges.length; k++) {\r\n            if (!otherUsed[k]) {\r\n                output.push(otherRanges[k]);\r\n            }\r\n        }\r\n        return new Base(this.input, output);\r\n    };\r\n    Base.prototype.conversions = function (options) {\r\n        var transform = Core_Core.globalTransform.extend(options);\r\n        var compacted = this.compact(options);\r\n        var ranges = compacted.ranges;\r\n        var output = [];\r\n        var _loop_3 = function (i) {\r\n            var range = ranges[i];\r\n            var convert = transform.convertWithMax ? range.max : range.min;\r\n            convert.conversions(transform, false, function (transformed) {\r\n                var min = transform.convertWithMax ? range.min.convertToValue(transformed.group) : transformed;\r\n                var max = transform.convertWithMax ? transformed : range.max.convertToValue(transformed.group);\r\n                if (min.value <= transform.max && max.value >= transform.min) {\r\n                    output.push(new Range_Range(min, max));\r\n                }\r\n            });\r\n        };\r\n        for (var i = 0; i < ranges.length; i++) {\r\n            _loop_3(i);\r\n        }\r\n        return new Base(this.input, output);\r\n    };\r\n    Base.prototype.mutate = function (mutator) {\r\n        var ranges = [];\r\n        var source = this.ranges;\r\n        for (var i = 0; i < source.length; i++) {\r\n            var mutated = mutator(source[i]);\r\n            if (mutated) {\r\n                ranges.push(mutated);\r\n            }\r\n        }\r\n        return new Base(this.input, ranges);\r\n    };\r\n    Base.prototype.filter = function (options) {\r\n        var transform = Core_Core.globalTransform.extend(options);\r\n        var ranges = this.ranges;\r\n        var filtered = [];\r\n        for (var i = 0; i < ranges.length; i++) {\r\n            var range = ranges[i];\r\n            var group = transform.convertWithMax ? range.max.group : range.min.group;\r\n            if ((group && transform.isVisibleGroup(group)) || (!group && transform.groupless)) {\r\n                filtered.push(range);\r\n            }\r\n        }\r\n        return new Base(this.input, filtered);\r\n    };\r\n    Base.prototype.sort = function (options) {\r\n        var sort = Core_Core.globalSort.extend(options);\r\n        var ranges = this.ranges.slice();\r\n        ranges.sort(sort.getSorter());\r\n        return new Base(this.input, ranges);\r\n    };\r\n    Base.prototype.groupByClass = function () {\r\n        var ranges = this.ranges;\r\n        var classes = {};\r\n        var groupless = [];\r\n        for (var i = 0; i < ranges.length; i++) {\r\n            var range = ranges[i];\r\n            if (range.min.group) {\r\n                var parent_2 = range.min.group.parent;\r\n                var entry = classes[parent_2.name];\r\n                if (!entry) {\r\n                    entry = classes[parent_2.name] = {\r\n                        parent: parent_2,\r\n                        ranges: []\r\n                    };\r\n                }\r\n                entry.ranges.push(range);\r\n            }\r\n            else {\r\n                groupless.push(range);\r\n            }\r\n        }\r\n        return { classes: classes, groupless: groupless };\r\n    };\r\n    Base.prototype.getScaleTo = function (unitValue) {\r\n        var to = Parse_Parse.value(unitValue, Core_Core.getGroup);\r\n        var converted = this.convert(to.unit);\r\n        var scale = to.value / converted.average;\r\n        return scale;\r\n    };\r\n    Base.prototype.output = function (options) {\r\n        var output = Core_Core.globalOutput.extend(options);\r\n        return output.ranges(this.ranges);\r\n    };\r\n    Base.prototype.convert = function (unit) {\r\n        var group = Core_Core.getGroup(unit);\r\n        if (!group) {\r\n            return null;\r\n        }\r\n        var parent = group.parent;\r\n        var ranges = this.ranges;\r\n        var min = new Value_Value(0, 0, 1, unit, group);\r\n        var max = new Value_Value(0, 0, 1, unit, group);\r\n        for (var i = 0; i < ranges.length; i++) {\r\n            var range = ranges[i];\r\n            var rangeGroup = range.min.group;\r\n            if (rangeGroup && rangeGroup.parent === parent) {\r\n                min = min.add(range.min.convertToValue(group));\r\n                max = max.add(range.max.convertToValue(group));\r\n            }\r\n        }\r\n        return new Range_Range(min, max);\r\n    };\r\n    Base.prototype.classes = function () {\r\n        var ranges = this.ranges;\r\n        var classMap = {};\r\n        var classes = [];\r\n        for (var i = 0; i < ranges.length; i++) {\r\n            var range = ranges[i];\r\n            var group = range.min.group;\r\n            if (group) {\r\n                classMap[group.parent.name] = group.parent;\r\n            }\r\n        }\r\n        for (var className in classMap) {\r\n            classes.push(classMap[className]);\r\n        }\r\n        return classes;\r\n    };\r\n    Object.defineProperty(Base.prototype, \"hasRanges\", {\r\n        get: function () {\r\n            var ranges = this.ranges;\r\n            for (var i = 0; i < ranges.length; i++) {\r\n                if (ranges[i].isRange) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Base.prototype, \"isValid\", {\r\n        get: function () {\r\n            var ranges = this.ranges;\r\n            for (var i = 0; i < ranges.length; i++) {\r\n                if (!ranges[i].isValid) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Base;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Parse.ts\n\r\n\r\n\r\n\r\n\r\n/** The class which takes user input and parses it to specific structures. **/\r\nvar Parse_Parse = (function () {\r\n    function Parse() {\r\n    }\r\n    /**\r\n     * Parses user input into a base.\r\n     *\r\n     * @param input The input to parse into a Base.\r\n     */\r\n    Parse.base = function (input) {\r\n        if (input instanceof Base_Base) {\r\n            return input;\r\n        }\r\n        return new Base_Base(input);\r\n    };\r\n    Parse.ranges = function (input, groups) {\r\n        if (Functions.isArray(input)) {\r\n            return this.rangesFromArray(input, groups);\r\n        }\r\n        else if (Functions.isString(input)) {\r\n            return this.rangesFromString(input, groups);\r\n        }\r\n        else if (Functions.isRangeDefinition(input)) {\r\n            return this.rangesFromArray([input], groups);\r\n        }\r\n        else if (Functions.isValueDefinition(input)) {\r\n            return this.rangesFromArray([input], groups);\r\n        }\r\n        return [];\r\n    };\r\n    Parse.rangesFromArray = function (input, groups) {\r\n        var ranges = [];\r\n        for (var i = 0; i < input.length; i++) {\r\n            var range = this.range(input[i], groups);\r\n            ranges.push(range);\r\n        }\r\n        return ranges;\r\n    };\r\n    Parse.rangesFromString = function (input, groups) {\r\n        var ranges = input.split(this.REGEX_LIST);\r\n        return this.rangesFromArray(ranges, groups);\r\n    };\r\n    Parse.range = function (input, groups) {\r\n        if (Functions.isString(input)) {\r\n            return this.rangeFromString(input, groups);\r\n        }\r\n        else if (Functions.isRangeDefinition(input)) {\r\n            var range = input;\r\n            var min = this.value(range.min, groups);\r\n            var max = this.value(range.max, groups);\r\n            return new Range_Range(min, max);\r\n        }\r\n        return Range_Range.INVALID;\r\n    };\r\n    Parse.rangeFromString = function (input, groups) {\r\n        var matches = this.REGEX_RANGE.exec(input);\r\n        if (!matches) {\r\n            var fixed = this.valueFromString(input, groups);\r\n            return new Range_Range(fixed, fixed);\r\n        }\r\n        var minInput = matches[1];\r\n        var maxInput = matches[2];\r\n        var minParsed = this.input(minInput);\r\n        var maxParsed = this.input(maxInput);\r\n        if (!minParsed || !maxParsed) {\r\n            return Range_Range.INVALID;\r\n        }\r\n        var minUnit = minParsed.unit || maxParsed.unit;\r\n        var maxUnit = maxParsed.unit || minParsed.unit;\r\n        var min = this.valueFromResult(minParsed, minUnit, groups);\r\n        var max = this.valueFromResult(maxParsed, maxUnit, groups);\r\n        return new Range_Range(min, max);\r\n    };\r\n    Parse.value = function (input, groups) {\r\n        if (Functions.isString(input)) {\r\n            return this.valueFromString(input, groups);\r\n        }\r\n        else if (Functions.isValueDefinition(input)) {\r\n            return this.valueFromValue(input, groups);\r\n        }\r\n        return Value_Value.INVALID;\r\n    };\r\n    Parse.valueFromValue = function (input, groups) {\r\n        var givenValue = Functions.isDefined(input.value) ? input.value : 1;\r\n        var num = Functions.isDefined(input.num) ? input.num : givenValue;\r\n        var den = Functions.isDefined(input.den) ? input.den : 1;\r\n        var parsedValue = Functions.isDefined(input.value) ? input.value : num / den;\r\n        var unit = input.unit || '';\r\n        var group = groups(unit);\r\n        return new Value_Value(parsedValue, num, den, unit, group);\r\n    };\r\n    Parse.valueFromString = function (input, groups) {\r\n        var parsed = this.input(input);\r\n        return parsed ? this.valueFromResult(parsed, parsed.unit, groups) : Value_Value.INVALID;\r\n    };\r\n    Parse.valueFromResult = function (result, unit, groups) {\r\n        var group = groups(unit);\r\n        return new Value_Value(result.value, result.valueNum, result.valueDen, unit, group);\r\n    };\r\n    /**\r\n     * Possible Values:\r\n     * 1tsp\r\n     * 1 tsp\r\n     * 1/2 tsp\r\n     * 1 1/2 tsp\r\n     * 1 - 2 tsp\r\n     * 1 tsp, 1 cup\r\n     * 2/3 - 1 c, 1 lb, 2.45 cats\r\n     */\r\n    Parse.input = function (input) {\r\n        var matches = this.REGEX_PARSE.exec(input);\r\n        var whole = parseInt(matches[1]);\r\n        var hasWhole = isFinite(whole);\r\n        var sign = matches[1].charAt(0) === '-' ? -1 : 1;\r\n        var num = parseInt(matches[3]);\r\n        var den = parseInt(matches[5]);\r\n        var decimal = matches[6];\r\n        var hasDecimal = isFinite(parseFloat(decimal));\r\n        var unit = Functions.trim(matches[7]);\r\n        if (!hasWhole && hasDecimal) {\r\n            whole = 0;\r\n            hasWhole = true;\r\n        }\r\n        if (!hasWhole && !unit) {\r\n            return null;\r\n        }\r\n        var value = 1;\r\n        var valueDen = 1;\r\n        var valueNum = 1;\r\n        if (hasWhole) {\r\n            value = whole;\r\n            valueNum = whole;\r\n            if (isFinite(den)) {\r\n                valueDen = den;\r\n                if (isFinite(num)) {\r\n                    value += (num / den) * sign;\r\n                    valueNum *= den;\r\n                    valueNum += num;\r\n                }\r\n                else {\r\n                    value /= den;\r\n                }\r\n            }\r\n            else if (hasDecimal) {\r\n                var remainder = parseFloat('0.' + decimal);\r\n                value += remainder * sign;\r\n                valueNum += remainder;\r\n            }\r\n            valueNum *= sign;\r\n        }\r\n        return { value: value, valueNum: valueNum, valueDen: valueDen, num: num, den: den, unit: unit };\r\n    };\r\n    /** The regular expression used to split up a string into multiple ranges. **/\r\n    Parse.REGEX_LIST = /\\s*,\\s*/;\r\n    /** The regular expression used to split up a range string to determine the min and maximum values. **/\r\n    Parse.REGEX_RANGE = /\\s*(-?[^-]+)-(.+)/;\r\n    /** The regular expression used to parse a value number or fraction and possible unit from a string. **/\r\n    Parse.REGEX_PARSE = /^\\s*(-?\\d*)(\\s+(\\d+))?(\\s*\\/\\s*(\\d+)|\\.(\\d+)|)\\s*(.*)\\s*$/i;\r\n    return Parse;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/classes/Weight.ts\n\r\n\r\n\r\n\r\nvar Weight = new Class_Class('Weight')\r\n    .setBaseConversion('mg', 'oz', function (x) { return x * 0.000035274; })\r\n    .setBaseConversion('oz', 'mg', function (x) { return x * 28349.5; })\r\n    .addGroups([\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'mg',\r\n        baseUnit: 'mg',\r\n        denominators: [2, 10],\r\n        units: {\r\n            'mg': Plurality.EITHER,\r\n            'milligram': Plurality.SINGULAR,\r\n            'milligrams': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'g',\r\n        relativeUnit: 'mg',\r\n        relativeScale: 1000,\r\n        denominators: [2, 10, 1000],\r\n        units: {\r\n            'g': Plurality.EITHER,\r\n            'gram': Plurality.SINGULAR,\r\n            'grams': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'kg',\r\n        relativeUnit: 'g',\r\n        relativeScale: 1000,\r\n        denominators: [2, 10, 1000],\r\n        units: {\r\n            'kg': Plurality.EITHER,\r\n            'kilogram': Plurality.SINGULAR,\r\n            'kilograms': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.IMPERIAL,\r\n        common: true,\r\n        unit: 'oz',\r\n        baseUnit: 'oz',\r\n        denominators: [2, 3, 4, 16],\r\n        units: {\r\n            'oz': Plurality.EITHER,\r\n            'ounce': Plurality.SINGULAR,\r\n            'ounces': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.IMPERIAL,\r\n        common: true,\r\n        unit: 'lb',\r\n        relativeUnit: 'oz',\r\n        relativeScale: 16,\r\n        denominators: [2, 3, 4, 16],\r\n        units: {\r\n            'lb': Plurality.EITHER,\r\n            'lbs': Plurality.PLURAL,\r\n            'pound': Plurality.SINGULAR,\r\n            'pounds': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.IMPERIAL,\r\n        common: true,\r\n        unit: 'ton',\r\n        relativeUnit: 'lb',\r\n        relativeScale: 2000,\r\n        denominators: [2, 3, 4, 10],\r\n        units: {\r\n            'ton': Plurality.EITHER,\r\n            'tons': Plurality.PLURAL,\r\n            'tonnes': Plurality.PLURAL\r\n        }\r\n    }\r\n])\r\n    .setClassScales();\r\n\n// CONCATENATED MODULE: ./src/classes/Area.ts\n\r\n\r\n\r\n\r\nvar Area = new Class_Class('Area')\r\n    .setBaseConversion('sqin', 'sqmm', function (x) { return x * 645.16; })\r\n    .setBaseConversion('sqmm', 'sqin', function (x) { return x * 0.00155; })\r\n    .addGroups([\r\n    {\r\n        system: System.IMPERIAL,\r\n        common: true,\r\n        unit: 'sqin',\r\n        baseUnit: 'sqin',\r\n        denominators: [2, 4, 8, 16],\r\n        units: {\r\n            'sqin': Plurality.EITHER,\r\n            'sq. in.': Plurality.EITHER,\r\n            'sq in': Plurality.EITHER,\r\n            'in2': Plurality.EITHER,\r\n            'in^2': Plurality.EITHER,\r\n            'in²': Plurality.EITHER,\r\n            'square inch': Plurality.SINGULAR,\r\n            'square inches': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.IMPERIAL,\r\n        common: true,\r\n        unit: 'sqft',\r\n        relativeUnit: 'sqin',\r\n        relativeScale: 12 * 12,\r\n        denominators: [2, 4, 8, 16],\r\n        units: {\r\n            'sqft': Plurality.EITHER,\r\n            'sq. ft.': Plurality.EITHER,\r\n            'sq ft': Plurality.EITHER,\r\n            'ft2': Plurality.EITHER,\r\n            'ft^2': Plurality.EITHER,\r\n            'ft²': Plurality.EITHER,\r\n            'square foot': Plurality.SINGULAR,\r\n            'square feet': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.IMPERIAL,\r\n        unit: 'sqyd',\r\n        relativeUnit: 'sqft',\r\n        relativeScale: 3 * 3,\r\n        denominators: [2, 3, 4, 8, 9, 16],\r\n        units: {\r\n            'sqyd': Plurality.EITHER,\r\n            'sq. yd.': Plurality.EITHER,\r\n            'sq yd': Plurality.EITHER,\r\n            'yd2': Plurality.EITHER,\r\n            'yd^2': Plurality.EITHER,\r\n            'yd²': Plurality.EITHER,\r\n            'square yard': Plurality.SINGULAR,\r\n            'square yards': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.IMPERIAL,\r\n        common: true,\r\n        unit: 'acre',\r\n        relativeUnit: 'sqyd',\r\n        relativeScale: 4840,\r\n        denominators: [2, 3, 4, 8, 10],\r\n        units: {\r\n            'acre': Plurality.EITHER,\r\n            'acres': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.IMPERIAL,\r\n        common: true,\r\n        unit: 'sqmi',\r\n        relativeUnit: 'acre',\r\n        relativeScale: 640,\r\n        denominators: [2, 3, 4, 8, 10],\r\n        units: {\r\n            'sqmi': Plurality.EITHER,\r\n            'sq. mi.': Plurality.EITHER,\r\n            'sq mi': Plurality.EITHER,\r\n            'mi2': Plurality.EITHER,\r\n            'mi^2': Plurality.EITHER,\r\n            'mi²': Plurality.EITHER,\r\n            'square mile': Plurality.SINGULAR,\r\n            'square miles': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'sqmm',\r\n        baseUnit: 'sqmm',\r\n        denominators: [2, 4, 8, 16],\r\n        units: {\r\n            'sqmm': Plurality.EITHER,\r\n            'sq. mm.': Plurality.EITHER,\r\n            'sq mm': Plurality.EITHER,\r\n            'mm2': Plurality.EITHER,\r\n            'mm^2': Plurality.EITHER,\r\n            'mm²': Plurality.EITHER,\r\n            'square millimeter': Plurality.SINGULAR,\r\n            'square millimeters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'sqcm',\r\n        relativeUnit: 'sqmm',\r\n        relativeScale: 100,\r\n        denominators: [2, 4, 8, 16],\r\n        units: {\r\n            'sqcm': Plurality.EITHER,\r\n            'sq. cm.': Plurality.EITHER,\r\n            'sq cm': Plurality.EITHER,\r\n            'cm2': Plurality.EITHER,\r\n            'cm^2': Plurality.EITHER,\r\n            'cm²': Plurality.EITHER,\r\n            'square centimeter': Plurality.SINGULAR,\r\n            'square centimeters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'sqm',\r\n        relativeUnit: 'sqcm',\r\n        relativeScale: 10000,\r\n        denominators: [2, 4, 8, 16],\r\n        units: {\r\n            'sqm': Plurality.EITHER,\r\n            'sq. m.': Plurality.EITHER,\r\n            'sq m': Plurality.EITHER,\r\n            'm2': Plurality.EITHER,\r\n            'm^2': Plurality.EITHER,\r\n            'm²': Plurality.EITHER,\r\n            'square meter': Plurality.SINGULAR,\r\n            'square meters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'sqkm',\r\n        relativeUnit: 'sqm',\r\n        relativeScale: 1000000,\r\n        denominators: [2, 4, 8, 16],\r\n        units: {\r\n            'sqkm': Plurality.EITHER,\r\n            'sq. km.': Plurality.EITHER,\r\n            'sq km': Plurality.EITHER,\r\n            'km2': Plurality.EITHER,\r\n            'km^2': Plurality.EITHER,\r\n            'km²': Plurality.EITHER,\r\n            'square kilometer': Plurality.SINGULAR,\r\n            'square kilometers': Plurality.PLURAL\r\n        }\r\n    }\r\n])\r\n    .setClassScales();\r\n\n// CONCATENATED MODULE: ./src/classes/Time.ts\n\r\n\r\n\r\n\r\nvar Time = new Class_Class('Time')\r\n    .addGroups([\r\n    {\r\n        system: System.ANY,\r\n        unit: 'ns',\r\n        baseUnit: 'ns',\r\n        denominators: [10, 100],\r\n        units: {\r\n            'ns': Plurality.EITHER,\r\n            'nanosecond': Plurality.SINGULAR,\r\n            'nanoseconds': Plurality.PLURAL,\r\n            'nano': Plurality.SINGULAR,\r\n            'nanos': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        unit: 'us',\r\n        relativeUnit: 'ns',\r\n        relativeScale: 1000,\r\n        denominators: [10, 100, 1000],\r\n        units: {\r\n            'us': Plurality.EITHER,\r\n            'microsecond': Plurality.SINGULAR,\r\n            'microseconds': Plurality.PLURAL,\r\n            'micro': Plurality.SINGULAR,\r\n            'micros': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'ms',\r\n        relativeUnit: 'us',\r\n        relativeScale: 1000,\r\n        denominators: [10, 100, 1000],\r\n        units: {\r\n            'ms': Plurality.EITHER,\r\n            'millisecond': Plurality.SINGULAR,\r\n            'milliseconds': Plurality.PLURAL,\r\n            'milli': Plurality.SINGULAR,\r\n            'millis': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 's',\r\n        relativeUnit: 'ms',\r\n        relativeScale: 1000,\r\n        denominators: [10, 100, 1000],\r\n        units: {\r\n            's': Plurality.EITHER,\r\n            'second': Plurality.SINGULAR,\r\n            'seconds': Plurality.PLURAL,\r\n            'sec': Plurality.SINGULAR,\r\n            'secs': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'min',\r\n        relativeUnit: 's',\r\n        relativeScale: 60,\r\n        denominators: [2, 3, 4, 60],\r\n        units: {\r\n            'min': Plurality.EITHER,\r\n            'minute': Plurality.SINGULAR,\r\n            'minutes': Plurality.PLURAL,\r\n            'mins': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'hr',\r\n        relativeUnit: 'min',\r\n        relativeScale: 60,\r\n        denominators: [2, 3, 4, 60],\r\n        units: {\r\n            'hr': Plurality.EITHER,\r\n            'hour': Plurality.SINGULAR,\r\n            'hours': Plurality.PLURAL,\r\n            'hrs': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'day',\r\n        relativeUnit: 'hr',\r\n        relativeScale: 24,\r\n        denominators: [2, 3, 4, 6, 24],\r\n        units: {\r\n            'day': Plurality.EITHER,\r\n            'days': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'wk',\r\n        relativeUnit: 'day',\r\n        relativeScale: 7,\r\n        denominators: [7],\r\n        units: {\r\n            'wk': Plurality.EITHER,\r\n            'week': Plurality.SINGULAR,\r\n            'weeks': Plurality.PLURAL,\r\n            'wks': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'yr',\r\n        relativeUnit: 'day',\r\n        relativeScale: 365.2425,\r\n        denominators: [2, 3, 4, 6, 12, 52],\r\n        units: {\r\n            'yr': Plurality.EITHER,\r\n            'year': Plurality.SINGULAR,\r\n            'years': Plurality.PLURAL,\r\n            'yrs': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'score',\r\n        relativeUnit: 'yr',\r\n        relativeScale: 20,\r\n        denominators: [20],\r\n        units: {\r\n            'score': Plurality.EITHER\r\n        }\r\n    }\r\n])\r\n    .setClassScales();\r\n\n// CONCATENATED MODULE: ./src/classes/Digital.ts\n\r\n\r\n\r\n\r\nvar Digital = new Class_Class('Digital')\r\n    .addGroups([\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'b',\r\n        baseUnit: 'b',\r\n        denominators: [],\r\n        units: {\r\n            'b': Plurality.EITHER,\r\n            'bit': Plurality.SINGULAR,\r\n            'bits': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        unit: 'nibble',\r\n        relativeUnit: 'b',\r\n        relativeScale: 4,\r\n        denominators: [],\r\n        units: {\r\n            'nibble': Plurality.EITHER,\r\n            'nibbles': Plurality.PLURAL,\r\n            'nybble': Plurality.EITHER,\r\n            'nyble': Plurality.EITHER,\r\n            'half-byte': Plurality.EITHER,\r\n            'half byte': Plurality.EITHER,\r\n            'tetrade': Plurality.EITHER,\r\n            'semi-octet': Plurality.EITHER,\r\n            'quadbit': Plurality.EITHER,\r\n            'quartet': Plurality.EITHER\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        unit: 'B',\r\n        relativeUnit: 'b',\r\n        relativeScale: 8,\r\n        denominators: [2, 8],\r\n        units: {\r\n            'B': Plurality.EITHER,\r\n            'byte': Plurality.SINGULAR,\r\n            'bytes': Plurality.PLURAL\r\n        }\r\n    }\r\n]);\r\naddDigitalUnits(Digital, 'B', 1000, [2, 4, 5, 10], 'byte', 'bytes', [\r\n    ['kB', 'kilo'],\r\n    ['mB', 'mega'],\r\n    ['gB', 'giga'],\r\n    ['tB', 'tera'],\r\n    ['pB', 'peta'],\r\n    ['eB', 'exa'],\r\n    ['zB', 'zetta'],\r\n    ['yB', 'yotta']\r\n]);\r\naddDigitalUnits(Digital, 'B', 1024, [2, 4, 8, 16], 'byte', 'bytes', [\r\n    ['KB', 'kibi'],\r\n    ['MB', 'mebi'],\r\n    ['GB', 'gibi'],\r\n    ['TB', 'tebi'],\r\n    ['PB', 'pebi'],\r\n    ['EB', 'exbi'],\r\n    ['ZB', 'zebi'],\r\n    ['YB', 'yobi']\r\n]);\r\naddDigitalUnits(Digital, 'b', 1000, [2, 4, 5, 10], 'bit', 'bits', [\r\n    ['kb', 'kilo', 'kbit'],\r\n    ['mb', 'mega', 'mbit'],\r\n    ['gb', 'giga', 'gbit'],\r\n    ['tb', 'tera', 'tbit'],\r\n    ['pb', 'peta', 'pbit'],\r\n    ['eb', 'exa', 'ebit'],\r\n    ['zb', 'zetta', 'zbit'],\r\n    ['yb', 'yotta', 'ybit']\r\n]);\r\naddDigitalUnits(Digital, 'b', 1024, [2, 4, 8, 16], 'bit', 'bits', [\r\n    ['kibit', 'kibi'],\r\n    ['mibit', 'mebi'],\r\n    ['gibit', 'gibi'],\r\n    ['tibit', 'tebi'],\r\n    ['pibit', 'pebi'],\r\n    ['eibit', 'exbi'],\r\n    ['zibit', 'zebi'],\r\n    ['yibit', 'yobi']\r\n]);\r\nDigital.setClassScales();\r\nfunction addDigitalUnits(parent, relativeTo, relativeScales, denominators, suffixSingular, suffixPlural, unitAndPrefixes) {\r\n    for (var i = 0; i < unitAndPrefixes.length; i++) {\r\n        var _a = unitAndPrefixes[i], unit = _a[0], prefix = _a[1], extra = _a[2];\r\n        var units = {};\r\n        units[unit] = Plurality.EITHER;\r\n        units[prefix + suffixSingular] = Plurality.SINGULAR;\r\n        units[prefix + suffixPlural] = Plurality.PLURAL;\r\n        if (extra) {\r\n            units[extra] = Plurality.EITHER;\r\n        }\r\n        parent.addGroup({\r\n            system: System.ANY,\r\n            unit: unit,\r\n            relativeUnit: relativeTo,\r\n            relativeScale: relativeScales,\r\n            denominators: denominators,\r\n            units: units\r\n        });\r\n        relativeTo = unit;\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/classes/Temperature.ts\n\r\n\r\n\r\n\r\nvar _C_ = '\\xb0C';\r\nvar Temperature = new Class_Class('Temperature')\r\n    .setBaseConversion('F', _C_, function (x) { return (x - 32) * 5 / 9; })\r\n    .setBaseConversion(_C_, 'F', function (x) { return (x * 9 / 5) + 32; })\r\n    .setBaseConversion('K', _C_, function (x) { return x - 273.15; })\r\n    .setBaseConversion('K', 'F', function (x) { return (x * 9 / 5) - 459.67; })\r\n    .setBaseConversion(_C_, 'K', function (x) { return x + 273.15; })\r\n    .setBaseConversion('F', 'K', function (x) { return (x + 459.67) * 5 / 9; })\r\n    .addGroups([\r\n    {\r\n        system: System.IMPERIAL,\r\n        common: true,\r\n        unit: 'F',\r\n        baseUnit: 'F',\r\n        denominators: [],\r\n        units: {\r\n            'F': Plurality.EITHER,\r\n            '\\xb0F': Plurality.EITHER,\r\n            'Fahrenheit': Plurality.EITHER\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: _C_,\r\n        baseUnit: _C_,\r\n        denominators: [],\r\n        units: {\r\n            '\\xb0C': Plurality.EITHER,\r\n            'Celsius': Plurality.EITHER\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        unit: 'K',\r\n        baseUnit: 'K',\r\n        denominators: [],\r\n        units: {\r\n            'K': Plurality.EITHER,\r\n            'kelvin': Plurality.EITHER,\r\n            'kelvins': Plurality.EITHER\r\n        }\r\n    }\r\n])\r\n    .setClassScales();\r\n\n// CONCATENATED MODULE: ./src/classes/Rotation.ts\n\r\n\r\n\r\n\r\nvar DEG2RAD = 180 / Math.PI;\r\nvar RAD2DEG = Math.PI / 180;\r\nvar Rotation = new Class_Class('Rotation')\r\n    .setBaseConversion('deg', 'rad', function (x) { return x * DEG2RAD; })\r\n    .setBaseConversion('rad', 'deg', function (x) { return x * RAD2DEG; })\r\n    .addGroups([\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'deg',\r\n        baseUnit: 'deg',\r\n        denominators: [],\r\n        units: {\r\n            'deg': Plurality.EITHER,\r\n            '\\xb0': Plurality.EITHER,\r\n            'degrees': Plurality.PLURAL,\r\n            'degree': Plurality.SINGULAR\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'rad',\r\n        baseUnit: 'rad',\r\n        denominators: [],\r\n        units: {\r\n            'rad': Plurality.EITHER,\r\n            'radians': Plurality.PLURAL,\r\n            'radian': Plurality.SINGULAR\r\n        }\r\n    }\r\n])\r\n    .setClassScales();\r\n\n// CONCATENATED MODULE: ./src/classes/Volume.ts\n\r\n\r\n\r\n\r\nSystem.METRIC;\r\nPlurality.SINGULAR;\r\nvar Volume = new Class_Class('Volume')\r\n    .setBaseConversion('deg', 'rad', function (x) { return x * 1; })\r\n    .setBaseConversion('rad', 'deg', function (x) { return x * 2; })\r\n    .addGroups([])\r\n    .setClassScales();\r\n\n// CONCATENATED MODULE: ./src/classes/Length.ts\n\r\n\r\n\r\n\r\nvar Length = new Class_Class('Length')\r\n    .setBaseConversion('in', 'mm', function (x) { return x * 25.4; })\r\n    .setBaseConversion('mm', 'in', function (x) { return x * 0.039370; })\r\n    .addGroups([\r\n    {\r\n        system: System.IMPERIAL,\r\n        common: true,\r\n        unit: 'in',\r\n        baseUnit: 'in',\r\n        denominators: [2, 4, 8, 16, 32],\r\n        units: {\r\n            'in': Plurality.EITHER,\r\n            'inch': Plurality.SINGULAR,\r\n            'inches': Plurality.PLURAL,\r\n            '\"': Plurality.EITHER\r\n        }\r\n    },\r\n    {\r\n        system: System.IMPERIAL,\r\n        common: true,\r\n        unit: 'ft',\r\n        relativeUnit: 'in',\r\n        relativeScale: 12,\r\n        denominators: [2],\r\n        units: {\r\n            'ft': Plurality.EITHER,\r\n            'foot': Plurality.SINGULAR,\r\n            'feet': Plurality.PLURAL,\r\n            '\\'': Plurality.EITHER\r\n        }\r\n    },\r\n    {\r\n        system: System.IMPERIAL,\r\n        unit: 'yd',\r\n        relativeUnit: 'ft',\r\n        relativeScale: 3,\r\n        denominators: [],\r\n        units: {\r\n            'yd': Plurality.EITHER,\r\n            'yard': Plurality.SINGULAR,\r\n            'yards': Plurality.PLURAL,\r\n            'yds': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.IMPERIAL,\r\n        common: true,\r\n        unit: 'mi',\r\n        relativeUnit: 'ft',\r\n        relativeScale: 5280,\r\n        denominators: [2, 3, 4, 10],\r\n        units: {\r\n            'mi': Plurality.EITHER,\r\n            'mile': Plurality.SINGULAR,\r\n            'miles': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.IMPERIAL,\r\n        unit: 'league',\r\n        relativeUnit: 'mi',\r\n        relativeScale: 3,\r\n        denominators: [2, 3, 4, 5, 6, 7, 8, 9, 10],\r\n        units: {\r\n            'league': Plurality.EITHER,\r\n            'leagues': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'mm',\r\n        baseUnit: 'mm',\r\n        denominators: [10],\r\n        units: {\r\n            'mm': Plurality.EITHER,\r\n            'millimeter': Plurality.SINGULAR,\r\n            'millimeters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'cm',\r\n        relativeUnit: 'mm',\r\n        relativeScale: 10,\r\n        denominators: [2, 4, 10],\r\n        units: {\r\n            'cm': Plurality.EITHER,\r\n            'centimeter': Plurality.SINGULAR,\r\n            'centimeters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        unit: 'dc',\r\n        relativeUnit: 'cm',\r\n        relativeScale: 10,\r\n        denominators: [10],\r\n        units: {\r\n            'dc': Plurality.EITHER,\r\n            'decimeter': Plurality.SINGULAR,\r\n            'decimeters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'm',\r\n        relativeUnit: 'cm',\r\n        relativeScale: 100,\r\n        denominators: [2, 3, 4, 5, 10],\r\n        units: {\r\n            'm': Plurality.EITHER,\r\n            'meter': Plurality.SINGULAR,\r\n            'meters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'km',\r\n        relativeUnit: 'm',\r\n        relativeScale: 1000,\r\n        denominators: [2, 3, 4, 5, 6, 7, 8, 9, 10],\r\n        units: {\r\n            'km': Plurality.EITHER,\r\n            'kilometer': Plurality.SINGULAR,\r\n            'kilometers': Plurality.PLURAL\r\n        }\r\n    }\r\n])\r\n    .setClassScales();\r\n\n// CONCATENATED MODULE: ./src/classes/index.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nfunction addDefaults() {\r\n    Core_Core.addClasses(Weight, Area, Time, Digital, Temperature, Rotation, Volume, Length);\r\n}\r\n\n// CONCATENATED MODULE: ./src/index.ts\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Plurality\", function() { return Plurality; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"System\", function() { return System; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Functions\", function() { return Functions; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Parse\", function() { return Parse_Parse; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"OutputUnit\", function() { return OutputUnit; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"OutputFormat\", function() { return OutputFormat; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Output\", function() { return Output_Output; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Transform\", function() { return Transform_Transform; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"SortType\", function() { return SortType; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Sort\", function() { return Sort_Sort; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Core\", function() { return Core_Core; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Group\", function() { return Group_Group; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Class\", function() { return Class_Class; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Value\", function() { return Value_Value; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Range\", function() { return Range_Range; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"uz\", function() { return uz; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Base\", function() { return Base_Base; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"addDefaults\", function() { return addDefaults; });\n\r\n// Enums\r\n\r\n\r\n// Functions\r\n\r\n\r\n// Secondary\r\n\r\n\r\n\r\n// Core\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Classes\r\n\r\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// unitz.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 381960ac00eea09527ef","\nimport { Functions as fn } from './Functions';\nimport { Core } from './Core';\nimport { Parse } from './Parse';\nimport { RangesInput, BaseInput } from './Types';\nimport { Range, RangeList, RangeMutator } from './Range';\nimport { Group } from './Group';\nimport { Transform, TransformInput } from './Transform';\nimport { Output, OutputInput } from './Output';\nimport { Sort, SortInput } from './Sort';\nimport { Value } from './Value';\nimport { Class, ClassGrouping } from './Class';\n\n\nexport function uz(input: RangesInput)\n{\n  return new Base(input);\n}\n\nexport class Base\n{\n\n  public input: RangesInput;\n  public ranges: RangeList;\n\n  public constructor(input: RangesInput, ranges?: RangeList )\n  {\n    this.input = input;\n    this.ranges = ranges || Parse.ranges( input, Core.getGroup );\n  }\n\n  // 1c, 2.3m SCALE BY 2 = 2c, 4.6m\n  public scale(amount: number): Base\n  {\n    return this.mutate(r => r.mul( amount ));\n  }\n\n  // 1c, 3m SCALE TO 1/2c = 1/2c, 1.5m\n  public scaleTo(unitValue: string): Base\n  {\n    return this.scale( this.getScaleTo(unitValue) );\n  }\n\n  // 5 kilograms = 5kg\n  public preferred(): Base\n  {\n    return this.mutate(r => r.preferred());\n  }\n\n  // 0c, 2tbsp, -4tbsp = 0c, 2tbsp\n  public positive(): Base\n  {\n    return this.mutate(r => r.positive());\n  }\n\n  // 0c, 2tbsp, -4tbsp = -4tbsp\n  public negative(): Base\n  {\n    return this.mutate(r => r.negative());\n  }\n\n  // 0c, 2tbsp = 2tbsp\n  public nonzero(): Base\n  {\n    return this.mutate(r => r.nonzero());\n  }\n\n  // 1 - 3c = 3c\n  public max(): Base\n  {\n    return this.hasRanges ? this.mutate(r => r.maxd()) : this;\n  }\n\n  // 1 - 3c = 1c\n  public min(): Base\n  {\n    return this.hasRanges ? this.mutate(r => r.mind()) : this;\n  }\n\n  // 1.5pt = 3c\n  public normalize(options?: TransformInput, forOutput?: OutputInput): Base\n  {\n    let output: Output = Core.globalOutput.extend( forOutput );\n    let transform: Transform = Core.globalTransform.extend( options );\n\n    return this.mutate(r => r.normalize( transform, output ));\n  }\n\n  // 1c, 1pt = 1.5pt\n  public compact(options?: TransformInput): Base\n  {\n    let compacted: RangeList = [];\n    let transform: Transform = Core.globalTransform.extend( options );\n    let { classes, groupless } = this.groupByClass();\n\n    for (let className in classes)\n    {\n      let entry = classes[ className ];\n      let ranges: RangeList = entry.ranges;\n      let parent: Class = entry.parent;\n      let minGroupChosen: Group = <Group>null;\n      let maxGroupChosen: Group = <Group>null;\n      let minSum: number = 0;\n      let maxSum: number = 0;\n\n      // If the transformation options ignores this class, skip it.\n      if (!transform.isClassMatch( parent ))\n      {\n        continue;\n      }\n\n      // Determine the smallest visible group we can use.\n      parent.getVisibleGroups( transform, false, null, (group) =>\n      {\n        minGroupChosen = maxGroupChosen = group;\n        return false;\n      });\n\n      // If we can't find one, then no groups are valid. Skip them.\n      if (!minGroupChosen)\n      {\n        continue;\n      }\n\n      // For each range, sum up the minimums and maximums while also determining\n      // the largest min & max that should be used to represent the sums.\n      for (let i = 0; i < ranges.length; i++)\n      {\n        let range: Range = ranges[ i ];\n        let minGroup: Group = range.min.group;\n        let maxGroup: Group = range.max.group;\n\n        if (minGroup.classScale > minGroupChosen.classScale && transform.isVisibleGroup( minGroup ))\n        {\n          minSum = parent.convert( minSum, minGroupChosen, minGroup );\n          minGroupChosen = minGroup;\n        }\n\n        if (maxGroup.classScale > maxGroupChosen.classScale && transform.isVisibleGroup( maxGroup ))\n        {\n          maxSum = parent.convert( maxSum, maxGroupChosen, maxGroup );\n          maxGroupChosen = maxGroup;\n        }\n\n        minSum += range.min.convertTo( minGroupChosen );\n        maxSum += range.max.convertTo( maxGroupChosen );\n      }\n\n      let min: Value = Value.fromNumberForGroup( minSum, minGroupChosen );\n      let max: Value = Value.fromNumberForGroup( maxSum, maxGroupChosen );\n\n      compacted.push( new Range( min, max ) );\n    }\n\n    // If the transform options permit groupless results and there are ranges\n    // without groups - sum them all.\n    if (transform.groupless && groupless.length)\n    {\n      let minSum: Value = new Value(0, 0, 1, '', <Group>null);\n      let maxSum: Value = new Value(0, 0, 1, '', <Group>null);\n\n      for (let i = 0; i < groupless.length; i++)\n      {\n        minSum = minSum.add( groupless[ i ].min );\n        maxSum = maxSum.add( groupless[ i ].max );\n      }\n\n      compacted.push( new Range( minSum, maxSum ) );\n    }\n\n    return new Base( this.input, compacted );\n  }\n\n  // 1.5pt = 1c, 1pt\n  public expand(options?: TransformInput): Base\n  {\n    let transform: Transform = Core.globalTransform.extend( options );\n    let compacted: Base = this.compact( transform );\n    let { ranges } = compacted;\n    let expanded: RangeList = [];\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n      let value: Value = transform.convertWithMax ? range.max : range.min;\n      let valueGroup: Group = value.group;\n\n      if (valueGroup)\n      {\n        valueGroup.matches(transform, true, (group) =>\n        {\n          if (!fn.isZero( value.value ))\n          {\n            let transformed = value.convertToValue(group);\n\n            if (group.isBase)\n            {\n              expanded.push( Range.fromFixed( transformed ) )\n            }\n            else if (fn.abs( transformed.value ) >= 1)\n            {\n              let truncated: Value = transformed.truncated();\n              let scaled: number = group.baseScale / valueGroup.baseScale;\n\n              value = value.sub( truncated, scaled );\n              expanded.push( Range.fromFixed( truncated ) );\n            }\n          }\n        });\n      }\n      else\n      {\n        expanded.push( range );\n      }\n    }\n\n    return new Base( this.input, expanded );\n  }\n\n  public add(input: BaseInput, scale: number = 1): Base\n  {\n    return this.operate(input, (a, b) =>\n    {\n      return a.add(b, scale);\n    });\n  }\n\n  public sub(input: BaseInput, scale: number = 1): Base\n  {\n    return this.operate(input, (a, b) =>\n    {\n      return a.sub(b, scale);\n    });\n  }\n\n  public operate(input: BaseInput, operate: (a: Range, b: Range) => any): Base\n  {\n    let ranges: RangeList = this.ranges;\n    let output: RangeList = [];\n\n    let other: Base = Parse.base( input );\n    let otherRanges: RangeList = other.ranges;\n    let otherUsed: boolean[] = [];\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n\n      for (let k = 0; k < otherRanges.length; k++)\n      {\n        if (!otherUsed[ k ])\n        {\n          let otherRange: Range = otherRanges[ k ];\n\n          if (range.isMatch( otherRange ))\n          {\n            range = operate( range, otherRange );\n            otherUsed[ k ] = true;\n          }\n        }\n      }\n\n      output.push( range );\n    }\n\n    for (let k = 0; k < otherRanges.length; k++)\n    {\n      if (!otherUsed[ k ])\n      {\n        output.push( otherRanges[ k ] );\n      }\n    }\n\n    return new Base( this.input, output );\n  }\n\n  public conversions(options?: TransformInput): Base\n  {\n    let transform: Transform = Core.globalTransform.extend( options );\n    let compacted: Base = this.compact( options );\n    let ranges: RangeList = compacted.ranges;\n    let output: RangeList = [];\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n      let convert: Value = transform.convertWithMax ? range.max : range.min;\n\n      convert.conversions(transform, false, (transformed) =>\n      {\n        let min: Value = transform.convertWithMax ? range.min.convertToValue( transformed.group ) : transformed;\n        let max: Value = transform.convertWithMax ? transformed : range.max.convertToValue( transformed.group );\n\n        if (min.value <= transform.max && max.value >= transform.min)\n        {\n          output.push( new Range( min, max ) );\n        }\n      });\n    }\n\n    return new Base( this.input, output );\n  }\n\n  public mutate(mutator: RangeMutator): Base\n  {\n    let ranges: RangeList = [];\n    let source: RangeList = this.ranges;\n\n    for (let i = 0; i < source.length; i++)\n    {\n      let mutated: Range = mutator( source[ i ] ) ;\n\n      if (mutated)\n      {\n        ranges.push( mutated );\n      }\n    }\n\n    return new Base( this.input, ranges );\n  }\n\n  public filter(options?: TransformInput): Base\n  {\n    let transform: Transform = Core.globalTransform.extend( options );\n    let ranges: RangeList = this.ranges;\n    let filtered: RangeList = [];\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n      let group: Group = transform.convertWithMax ? range.max.group : range.min.group;\n\n      if ((group && transform.isVisibleGroup( group )) || (!group && transform.groupless))\n      {\n        filtered.push( range );\n      }\n    }\n\n    return new Base( this.input, filtered );\n  }\n\n  public sort(options?: SortInput): Base\n  {\n    let sort: Sort = Core.globalSort.extend( options );\n    let ranges: RangeList = this.ranges.slice();\n\n    ranges.sort( sort.getSorter() );\n\n    return new Base( this.input, ranges );\n  }\n\n  public groupByClass(): ClassGrouping\n  {\n    let ranges: RangeList = this.ranges;\n    let classes = {};\n    let groupless = [];\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n\n      if (range.min.group)\n      {\n        let parent: Class = range.min.group.parent;\n        let entry = classes[ parent.name ];\n\n        if (!entry)\n        {\n          entry = classes[ parent.name ] = {\n            parent: parent,\n            ranges: []\n          };\n        }\n\n        entry.ranges.push( range );\n      }\n      else\n      {\n        groupless.push( range );\n      }\n    }\n\n    return { classes, groupless };\n  }\n\n  public getScaleTo(unitValue: string): number\n  {\n    let to: Value = Parse.value( unitValue, Core.getGroup );\n    let converted: Range = this.convert( to.unit );\n    let scale: number = to.value / converted.average;\n\n    return scale;\n  }\n\n  public output(options?: OutputInput): string\n  {\n    let output: Output = Core.globalOutput.extend( options );\n\n    return output.ranges( this.ranges );\n  }\n\n  public convert(unit: string): Range\n  {\n    let group: Group = Core.getGroup( unit );\n\n    if (!group)\n    {\n      return null;\n    }\n\n    let parent: Class = group.parent;\n    let ranges: RangeList = this.ranges;\n    let min: Value = new Value(0, 0, 1, unit, group);\n    let max: Value = new Value(0, 0, 1, unit, group);\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n      let rangeGroup: Group = range.min.group;\n\n      if (rangeGroup && rangeGroup.parent === parent)\n      {\n        min = min.add( range.min.convertToValue( group ) );\n        max = max.add( range.max.convertToValue( group ) );\n      }\n    }\n\n    return new Range( min, max );\n  }\n\n  public classes(): Class[]\n  {\n    let ranges: RangeList = this.ranges;\n    let classMap = {};\n    let classes: Class[] = [];\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n      let group: Group = range.min.group;\n\n      if (group)\n      {\n        classMap[ group.parent.name ] = group.parent;\n      }\n    }\n\n    for (let className in classMap)\n    {\n      classes.push( classMap[ className ] );\n    }\n\n    return classes;\n  }\n\n  public get hasRanges(): boolean\n  {\n    let ranges: RangeList = this.ranges;\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      if (ranges[ i ].isRange)\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public get isValid(): boolean\n  {\n    let ranges: RangeList = this.ranges;\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      if (!ranges[ i ].isValid)\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Base.ts","\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n\n\nexport let Digital = new Class('Digital')\n  .addGroups([\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'b',\n      baseUnit: 'b',\n      denominators: [],\n      units: {\n        'b': Plurality.EITHER,\n        'bit': Plurality.SINGULAR,\n        'bits': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      unit: 'nibble',\n      relativeUnit: 'b',\n      relativeScale: 4,\n      denominators: [],\n      units: {\n        'nibble': Plurality.EITHER,\n        'nibbles': Plurality.PLURAL,\n        'nybble': Plurality.EITHER,\n        'nyble': Plurality.EITHER,\n        'half-byte': Plurality.EITHER,\n        'half byte': Plurality.EITHER,\n        'tetrade': Plurality.EITHER,\n        'semi-octet': Plurality.EITHER,\n        'quadbit': Plurality.EITHER,\n        'quartet': Plurality.EITHER\n      }\n    },\n    {\n      system: System.ANY,\n      unit: 'B',\n      relativeUnit: 'b',\n      relativeScale: 8,\n      denominators: [2, 8],\n      units: {\n        'B': Plurality.EITHER,\n        'byte': Plurality.SINGULAR,\n        'bytes': Plurality.PLURAL\n      }\n    }\n  ])\n\naddDigitalUnits(\n  Digital,\n  'B',\n  1000,\n  [2, 4, 5, 10],\n  'byte', 'bytes',\n  [\n    ['kB', 'kilo'],\n    ['mB', 'mega'],\n    ['gB', 'giga'],\n    ['tB', 'tera'],\n    ['pB', 'peta'],\n    ['eB', 'exa'],\n    ['zB', 'zetta'],\n    ['yB', 'yotta']\n  ]\n);\n\naddDigitalUnits(\n  Digital,\n  'B',\n  1024,\n  [2, 4, 8, 16],\n  'byte', 'bytes',\n  [\n    ['KB', 'kibi'],\n    ['MB', 'mebi'],\n    ['GB', 'gibi'],\n    ['TB', 'tebi'],\n    ['PB', 'pebi'],\n    ['EB', 'exbi'],\n    ['ZB', 'zebi'],\n    ['YB', 'yobi']\n  ]\n);\n\naddDigitalUnits(\n  Digital,\n  'b',\n  1000,\n  [2, 4, 5, 10],\n  'bit', 'bits',\n  [\n    ['kb', 'kilo', 'kbit'],\n    ['mb', 'mega', 'mbit'],\n    ['gb', 'giga', 'gbit'],\n    ['tb', 'tera', 'tbit'],\n    ['pb', 'peta', 'pbit'],\n    ['eb', 'exa', 'ebit'],\n    ['zb', 'zetta', 'zbit'],\n    ['yb', 'yotta', 'ybit']\n  ]\n);\n\naddDigitalUnits(\n  Digital,\n  'b',\n  1024,\n  [2, 4, 8, 16],\n  'bit', 'bits',\n  [\n    ['kibit', 'kibi'],\n    ['mibit', 'mebi'],\n    ['gibit', 'gibi'],\n    ['tibit', 'tebi'],\n    ['pibit', 'pebi'],\n    ['eibit', 'exbi'],\n    ['zibit', 'zebi'],\n    ['yibit', 'yobi']\n  ]\n);\n\nDigital.setClassScales();\n\n\nfunction addDigitalUnits(parent: Class, relativeTo: string, relativeScales: number, denominators: number[], suffixSingular: string, suffixPlural: string, unitAndPrefixes: string[][])\n{\n  for (let i = 0; i < unitAndPrefixes.length; i++)\n  {\n    let [unit, prefix, extra] = unitAndPrefixes[ i ];\n\n    let units = {};\n    units[ unit ] = Plurality.EITHER;\n    units[ prefix + suffixSingular ] = Plurality.SINGULAR;\n    units[ prefix + suffixPlural ] = Plurality.PLURAL;\n\n    if (extra)\n    {\n      units[ extra ] = Plurality.EITHER;\n    }\n\n    parent.addGroup({\n      system: System.ANY,\n      unit: unit,\n      relativeUnit: relativeTo,\n      relativeScale: relativeScales,\n      denominators: denominators,\n      units: units\n    });\n\n    relativeTo = unit;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Digital.ts","\nimport { Core } from '../Core';\nimport { Weight } from './Weight';\nimport { Area } from './Area';\nimport { Time } from './Time';\nimport { Digital } from './Digital';\nimport { Temperature } from './Temperature';\nimport { Rotation } from './Rotation';\nimport { Volume } from './Volume';\nimport { Length } from './Length';\n\nexport function addDefaults()\n{\n  Core.addClasses(\n    Weight,\n    Area,\n    Time,\n    Digital,\n    Temperature,\n    Rotation,\n    Volume,\n    Length\n  );\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/index.ts","\n\nexport enum Plurality\n{\n  SINGULAR,\n  PLURAL,\n  EITHER\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Plurality.ts","\n\nexport enum System\n{\n  METRIC,\n  IMPERIAL,\n  NONE,\n  ANY,\n  GIVEN\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/System.ts","\n\nexport class Functions\n{\n\n  public static EPSILON: number = 0.00001;\n\n  public static isZero(x: number): boolean\n  {\n    return this.abs( x ) < this.EPSILON;\n  }\n\n  public static isEqual(a: number, b: number): boolean\n  {\n    return this.abs( a - b ) < this.EPSILON;\n  }\n\n  public static isWhole(x: number): boolean\n  {\n    return this.abs( Math.floor( x ) - x ) < this.EPSILON;\n  }\n\n  public static isSingular(x: any): boolean\n  {\n    return this.isNumber( x ) && this.abs( this.abs( x ) - 1 ) < this.EPSILON;\n  }\n\n  public static isPlural(x: number): boolean\n  {\n    return x !== 1 && x !== -1;\n  }\n\n  public static isNumber(x: any): boolean\n  {\n    return isFinite(x);\n  }\n\n  public static trim(x: string): string\n  {\n    return x ? x.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '') : x;\n  }\n\n  public static gcd(a: number, b: number): number\n  {\n    if (!this.isWhole(a) || !this.isWhole(b))\n    {\n      return 1;\n    }\n\n    let x: number = a < b ? a : b;\n    let y: number = a < b ? b : a;\n    x = this.abs(x);\n    y = this.abs(y);\n\n    while(y)\n    {\n      let t = y;\n      y = x % y;\n      x = t;\n    }\n\n    return x;\n  }\n\n  public static abs(x: number): number\n  {\n    return x < 0 ? -x : x;\n  }\n\n  public static sign(x: number): number\n  {\n    return x < 0 ? -1 : (x === 0 ? 0 : 1);\n  }\n\n  public static appendTo<T>(array: T[], input: T | T[]): T[]\n  {\n    if (input instanceof Array)\n    {\n      array.push.apply( array, input );\n    }\n    else if (input)\n    {\n      array.push( input );\n    }\n\n    return array;\n  }\n\n  public static isGroupDefinition(input: any): boolean\n  {\n    return !!(input && input.system && input.unit && input.denominators && input.units);\n  }\n\n  public static isValueDefinition(input: any): boolean\n  {\n    return !!(input && (input.value || input.unit || input.num || input.den));\n  }\n\n  public static isRangeDefinition(input: any): boolean\n  {\n    return !!(input && input.min && input.max);\n  }\n\n  public static isArray(input: any): boolean\n  {\n    return input instanceof Array;\n  }\n\n  public static isString(input: any): boolean\n  {\n    return typeof(input) === 'string';\n  }\n\n  public static isDefined(input: any): boolean\n  {\n    return typeof(input) !== 'undefined';\n  }\n\n  public static coalesce(a: any, b: any): any\n  {\n    return this.isDefined( a ) ? a : b;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Functions.ts","\nimport { Value } from './Value';\nimport { Range, RangeList } from './Range';\nimport { Functions as fn } from './Functions';\n\n\nexport enum OutputUnit {\n  NONE,\n  GIVEN,\n  SHORT,\n  LONG\n}\n\nexport enum OutputFormat {\n  GIVEN,\n  NUMBER,\n  MIXED,\n  FRACTION,\n  IMPROPER\n}\n\nexport interface OutputInput {\n  unit?: OutputUnit;\n  format?: OutputFormat;\n  repeatUnit?: boolean;\n  unitSpacer?: string;\n  rangeSpacer?: string;\n  fractionSpacer?: string;\n  mixedSpacer?: string;\n  delimiter?: string;\n  significant?: number;\n}\n\nexport class Output implements OutputInput\n{\n\n  public unit: OutputUnit = OutputUnit.GIVEN;\n  public format: OutputFormat = OutputFormat.GIVEN;\n  public repeatUnit: boolean = false;\n  public unitSpacer: string = '';\n  public rangeSpacer: string = ' - ';\n  public fractionSpacer: string = '/';\n  public mixedSpacer: string = ' ';\n  public delimiter: string = ', ';\n  public significant: number = -1;\n\n  public constructor(input?: OutputInput)\n  {\n    if (fn.isDefined(input))\n    {\n      this.set( input );\n    }\n  }\n\n  public set(input: OutputInput): this\n  {\n    this.unit = fn.coalesce( input.unit, this.unit );\n    this.format = fn.coalesce( input.format, this.format );\n    this.repeatUnit = fn.coalesce( input.repeatUnit, this.repeatUnit );\n    this.unitSpacer = fn.coalesce( input.unitSpacer, this.unitSpacer );\n    this.rangeSpacer = fn.coalesce( input.rangeSpacer, this.rangeSpacer );\n    this.fractionSpacer = fn.coalesce( input.fractionSpacer, this.fractionSpacer );\n    this.mixedSpacer = fn.coalesce( input.mixedSpacer, this.mixedSpacer );\n    this.delimiter = fn.coalesce( input.delimiter, this.delimiter );\n    this.significant = fn.coalesce( input.significant, this.significant );\n\n    return this;\n  }\n\n  public extend(input?: OutputInput): Output\n  {\n    let extended: Output = this;\n\n    if (fn.isDefined(input))\n    {\n      if (input instanceof Output)\n      {\n        extended = input;\n      }\n      else\n      {\n        extended = new Output( this );\n        extended.set( input );\n      }\n    }\n\n    return extended;\n  }\n\n  public ranges(ranges: RangeList): string\n  {\n    let out = '';\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n\n      if (range.isValid)\n      {\n        if (out.length)\n        {\n          out += this.delimiter;\n        }\n\n        out += this.range( range );\n      }\n    }\n\n    return out;\n  }\n\n  public range(range: Range): string\n  {\n    let out = '';\n\n    if (!range.isValid)\n    {\n      // nothing\n    }\n    else if (range.isFixed)\n    {\n      out += this.value( range.min );\n    }\n    else\n    {\n      let minUnit: boolean = this.repeatUnit || range.min.unit !== range.max.unit;\n\n      out += this.value( range.min, minUnit );\n      out += this.rangeSpacer;\n      out += this.value( range.max );\n    }\n\n    return out;\n  }\n\n  public value(value: Value, showUnit: boolean = true): string\n  {\n    let out = '';\n\n    if (!value.isValid)\n    {\n\n    }\n    else if (this.isFraction( value ))\n    {\n      if (this.isMixed( value ))\n      {\n        out += value.mixedWhole;\n        out += this.mixedSpacer;\n        out += value.mixedNum;\n        out += this.fractionSpacer;\n        out += value.den;\n      }\n      else\n      {\n        out += value.num;\n        out += this.fractionSpacer;\n        out += value.den;\n      }\n    }\n    else\n    {\n      out += this.number( value.value );\n    }\n\n    if (value.isValid && this.unit !== OutputUnit.NONE && showUnit)\n    {\n      let group = value.group;\n\n      out += this.unitSpacer;\n\n      if (this.isLongUnit( value ))\n      {\n        out += fn.isSingular( value.value ) ? group.getSingularLong() : group.getPluralLong();\n      }\n      else if (this.isShortUnit( value ) || (group && group.dynamic))\n      {\n        out += fn.isSingular( value.value ) ? group.getSingularShort() : group.getPluralShort();\n      }\n      else\n      {\n        out += value.unit;\n      }\n    }\n\n    return out;\n  }\n\n  public number(x: number): string\n  {\n    let valueString: string = x + '';\n\n    if (this.significant >= 0)\n    {\n      let valueSignificant: string = x\n        .toFixed(this.significant)\n        .replace(/0*$/, '')\n        .replace(/\\.$/, '');\n\n      return valueSignificant.length < valueString.length ? valueSignificant : valueString;\n    }\n\n    return valueString;\n  }\n\n  public isFraction(value: Value): boolean\n  {\n    return value.isFraction && this.format !== OutputFormat.NUMBER;\n  }\n\n  public isNumber(value: Value): boolean\n  {\n    return value.isValid && !this.isFraction( value );\n  }\n\n  public isMixed(value: Value): boolean\n  {\n    return value.mixedWhole !== 0 && this.format !== OutputFormat.IMPROPER;\n  }\n\n  public isShortUnit(value: Value)\n  {\n    return value.group && this.unit === OutputUnit.SHORT;\n  }\n\n  public isLongUnit(value: Value)\n  {\n    return value.group && this.unit === OutputUnit.LONG;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Output.ts","\nimport { Functions as fn } from './Functions';\nimport { Transform } from './Transform';\nimport { Output } from './Output';\nimport { Group } from './Group';\n\n\n// TODO perUnit & perGroup (or: rateUnit & rateGroup)\n\nexport type ValueMap = { [unit: string]: Value };\n\nexport class Value\n{\n\n  public static INVALID: Value = new Value(Number.NaN, Number.NaN, 1, '', null);\n  public static SEPARATOR_FRACTION: string = '/';\n  public static SEPARATOR_MIXED: string = ' ';\n\n  public readonly value: number;\n  public readonly num: number;\n  public readonly den: number;\n  public readonly group: Group;\n  public unit: string;\n\n  public constructor(value: number, num: number, den: number, unit: string, group: Group)\n  {\n    let divisor: number = fn.gcd(num, den);\n    this.value = value;\n    this.num = num / divisor;\n    this.den = den / divisor;\n    this.unit = unit;\n    this.group = group;\n  }\n\n  public get isValid(): boolean\n  {\n    return isFinite(this.value);\n  }\n\n  public get isFraction(): boolean\n  {\n    return this.den !== 1;\n  }\n\n  public get isDecimal(): boolean\n  {\n    return this.den === 1;\n  }\n\n  public get scaled(): number\n  {\n    return this.group ? this.value * this.group.baseScale : this.value;\n  }\n\n  public get classScaled(): number\n  {\n    return this.group ? this.value * this.group.classScale : this.value;\n  }\n\n  public get actual(): number\n  {\n    return this.num / this.den;\n  }\n\n  public get mixedWhole(): number\n  {\n    return this.den !== 1 ? Math.floor(this.num / this.den) : 0;\n  }\n\n  public get mixedNum(): number\n  {\n    return this.den !== 1 ? this.num % this.den : this.num;\n  }\n\n  public get floor(): number\n  {\n    return Math.floor(this.value);\n  }\n\n  public get ceil(): number\n  {\n    return Math.ceil(this.value);\n  }\n\n  public get truncate(): number\n  {\n    return this.value < 0 ? this.ceil : this.floor;\n  }\n\n  public get remainder(): number\n  {\n    return this.value - this.floor;\n  }\n\n  public get error(): number\n  {\n    return this.actual - this.value;\n  }\n\n  public get distance(): number\n  {\n    return fn.abs(this.error);\n  }\n\n  public get asString(): string\n  {\n    return (this.den === 1) ?\n      (this.value + '') :\n      (this.mixedWhole !== 0 ?\n          (this.mixedWhole + Value.SEPARATOR_MIXED + this.mixedNum + Value.SEPARATOR_FRACTION + this.den) :\n          (this.num + Value.SEPARATOR_FRACTION + this.den)\n      )\n    ;\n  }\n\n  public preferred(): Value\n  {\n    return this.group ? new Value(this.value, this.num, this.den, this.group.preferredUnit, this.group) : this;\n  }\n\n  public copy(): Value\n  {\n    return new Value(this.value, this.num, this.den, this.unit, this.group);\n  }\n\n  public zero(): Value\n  {\n    return new Value(0, 0, 1, this.unit, this.group);\n  }\n\n  public truncated(): Value\n  {\n    return new Value(this.truncate, this.truncate, 1, this.unit, this.group);\n  }\n\n  public convertTo(to: Group): number\n  {\n    let group: Group = this.group;\n\n    return group ? group.parent.convert( this.value, group, to ) : this.value;\n  }\n\n  public convertToValue(group: Group): Value\n  {\n    return Value.fromNumberForGroup( this.convertTo( group ), group );\n  }\n\n  public conversions(transform: Transform, reverse: boolean, callback: (transformed: Value, index: number) => void): void\n  {\n    if (this.group)\n    {\n      this.group.matches(transform, reverse, (group, index) =>\n      {\n        callback( this.convertToValue( group ), index );\n      });\n    }\n  }\n\n  public normalize(transform: Transform, forOutput: Output): Value\n  {\n    let closest: Value;\n    let closestString: string;\n\n    this.conversions(transform, false, (convert) =>\n    {\n      let acceptable: boolean = !forOutput.isNumber( convert );\n\n      if (!acceptable)\n      {\n        let number: string = forOutput.number( convert.value );\n\n        acceptable = number !== '0';\n      }\n\n      if (acceptable)\n      {\n        let convertString: string = forOutput.value( convert );\n\n        if (!closest || convertString.length <= closestString.length)\n        {\n          closest = convert;\n          closestString = convertString;\n        }\n      }\n    });\n\n    return closest || this;\n  }\n\n  public add(addend: Value, scale: number = 1): Value\n  {\n    let num = this.num * addend.den + addend.num * this.den * scale;\n    let den = this.den * addend.den;\n    let result = this.value + addend.value * scale;\n\n    return new Value(result, num, den, this.unit, this.group);\n  }\n\n  public sub(subtrahend: Value, scale: number = 1): Value\n  {\n    let num = this.num * subtrahend.den - subtrahend.num * this.den * scale;\n    let den = this.den * subtrahend.den;\n    let result = this.value - subtrahend.value * scale;\n\n    return new Value(result, num, den, this.unit, this.group);\n  }\n\n  public mul(scale: number): Value\n  {\n    return new Value(this.value * scale, this.num * scale, this.den, this.unit, this.group);\n  }\n\n  public static fromNumber(value: number, unit: string = '', group: Group = null): Value\n  {\n    return new Value(value, value, 1, unit, group);\n  }\n\n  public static fromNumberWithRange(value: number, unit: string = '', group: Group = null, minDen: number = 1, maxDen: number = 100): Value\n  {\n    let closestDenominator: number = 0;\n    let closestDistance: number = -1;\n\n    for (let i = minDen; i <= maxDen; i++)\n    {\n      let den = i;\n      let num = Math.floor( den * value );\n      let actual = num / den;\n      let distance = fn.abs(value - actual);\n\n      if (closestDistance === -1 || distance < closestDistance)\n      {\n        closestDistance = distance;\n        closestDenominator = den;\n      }\n    }\n\n    if (closestDistance > fn.EPSILON)\n    {\n      return new Value(value, value, 1, unit, group);\n    }\n\n    return new Value(value, Math.floor(value * closestDenominator), closestDenominator, unit, group);\n  }\n\n  public static fromNumberForGroup(value: number, group: Group): Value\n  {\n    return this.fromNumberWithDenominators( value, group.denominators, group.preferredUnit, group );\n  }\n\n  public static fromNumberWithDenominators(value: number, denominators: number[], unit: string = '', group: Group = null): Value\n  {\n    let closestDenominator: number = 0;\n    let closestDistance: number = -1;\n\n    for (let i = 0; i < denominators.length; i++)\n    {\n      let den = denominators[ i ];\n      let num = Math.floor( den * value );\n      let actual = num / den;\n      let distance = fn.abs(value - actual);\n\n      if (closestDistance === -1 || distance < closestDistance)\n      {\n        closestDistance = distance;\n        closestDenominator = den;\n      }\n    }\n\n    if (closestDistance > fn.EPSILON)\n    {\n      return new Value(value, value, 1, unit, group);\n    }\n\n    if (closestDenominator === 0)\n    {\n      closestDenominator = 1;\n    }\n\n    return new Value(value, Math.floor(value * closestDenominator), closestDenominator, unit, group);\n  }\n\n  public static fromFraction(num: number, den: number, unit: string = '', group: Group = null): Value\n  {\n    return new Value(num / den, num, den, unit, group);\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Value.ts","\nimport { Value } from './Value';\nimport { Transform } from './Transform';\nimport { Output } from './Output';\n\n\nexport type RangeMap = { [key: string]: Range };\n\nexport type RangeList = Range[];\n\nexport type RangeMutator = (range: Range) => Range;\n\nexport class Range\n{\n\n  public static INVALID: Range = new Range( Value.INVALID, Value.INVALID );\n  public static SEPARATOR: string = ' - ';\n\n  public readonly min: Value;\n  public readonly max: Value;\n\n  public constructor(min: Value, max: Value)\n  {\n    this.min = min.value < max.value ? min : max;\n    this.max = max.value > min.value ? max : min;\n  }\n\n  public get isValid(): boolean\n  {\n    return this.min.isValid && this.max.isValid;\n  }\n\n  public get isFraction(): boolean\n  {\n    return this.min.isFraction || this.max.isFraction;\n  }\n\n  public get isDecimal(): boolean\n  {\n    return this.min.isDecimal && this.max.isDecimal;\n  }\n\n  public get isRange(): boolean\n  {\n    return this.min.value !== this.max.value;\n  }\n\n  public get isFixed(): boolean\n  {\n    return this.min.value === this.max.value;\n  }\n\n  public get average(): number\n  {\n    return (this.min.value + this.max.value) * 0.5;\n  }\n\n  public get value(): number\n  {\n    return this.min.value;\n  }\n\n  public get minimum(): number\n  {\n    return this.min.value;\n  }\n\n  public get maximum(): number\n  {\n    return this.max.value;\n  }\n\n  public get unit(): string\n  {\n    return this.min.group.unit;\n  }\n\n  public get asString(): string\n  {\n    return (this.min.value === this.max.value) ?\n      (this.min.asString) :\n      (this.min.asString + Range.SEPARATOR + this.max.asString);\n  }\n\n  public isMatch(range: Range): boolean\n  {\n    return this.min.group === range.min.group &&\n      this.max.group === range.max.group;\n  }\n\n  public preferred(): Range\n  {\n    let min: Value = this.min.preferred();\n    let max: Value = this.max.preferred();\n\n    return new Range( min, max );\n  }\n\n  public positive(): Range\n  {\n    let minNegative: boolean = this.min.value < 0;\n    let maxNegative: boolean = this.max.value < 0;\n\n    if (maxNegative)\n    {\n      return null;\n    }\n\n    let min: Value = minNegative ? this.min.zero() : this.min.copy();\n    let max: Value = this.max.copy();\n\n    return new Range( min, max );\n  }\n\n  public negative(): Range\n  {\n    let minPositive: boolean = this.min.value >= 0;\n    let maxPositive: boolean = this.max.value >= 0;\n\n    if (minPositive)\n    {\n      return null;\n    }\n\n    let min: Value = this.min.copy();\n    let max: Value = maxPositive ? this.max.zero() : this.max.copy();\n\n    return new Range( min, max );\n  }\n\n  public nonzero(): Range\n  {\n    let minZero: boolean = this.min.value === 0;\n    let maxZero: boolean = this.max.value === 0;\n\n    if (minZero && maxZero)\n    {\n      return null;\n    }\n\n    let min: Value = this.min.copy();\n    let max: Value = this.max.copy();\n\n    return new Range( min, max );\n  }\n\n  public maxd(): Range\n  {\n    let fixed: Value = this.max.copy();\n\n    return new Range(fixed, fixed);\n  }\n\n  public mind(): Range\n  {\n    let fixed: Value = this.min.copy();\n\n    return new Range(fixed, fixed);\n  }\n\n  public normalize(transform: Transform, forOutput: Output): Range\n  {\n    let min: Value = this.min.normalize( transform, forOutput );\n    let max: Value = this.max.normalize( transform, forOutput );\n\n    return new Range(min, max)\n  }\n\n  public add(addend: Range, scale: number = 1): Range\n  {\n    let min: Value = this.min.add(addend.min, scale);\n    let max: Value = this.max.add(addend.max, scale);\n\n    return new Range(min, max);\n  }\n\n  public sub(subtrahend: Range, scale: number = 1): Range\n  {\n    let min: Value = this.min.sub(subtrahend.min, scale);\n    let max: Value = this.max.sub(subtrahend.max, scale);\n\n    return new Range(min, max);\n  }\n\n  public mul(scale: number): Range\n  {\n    let min: Value = this.min.mul(scale);\n    let max: Value = this.max.mul(scale);\n\n    return new Range(min, max);\n  }\n\n  public static fromFixed(fixed: Value): Range\n  {\n    return new Range(fixed, fixed);\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Range.ts","\nimport { Plurality } from './Plurality';\nimport { System } from './System';\nimport { Class } from './Class';\nimport { GroupDefinition, UnitDefinitionMap, Numbers } from './Types';\nimport { Functions as fn } from './Functions';\nimport { Transform } from './Transform';\n\n\nexport type GroupList = Group[];\n\nexport type GroupMap = { [key: string]: Group };\n\nexport type GroupFactory = (unit: string) => Group;\n\nexport class Group\n{\n\n  public system: System;\n  public common: boolean;\n  public unit: string;\n  public baseUnit: string;\n  public baseScale: number = 1;\n  public classScale: number = 0;\n  public preferredUnit: string;\n  public relativeUnit: string;\n  public relativeScale: number;\n  public units: UnitDefinitionMap;\n  public denominators: number[];\n  public dynamic: boolean = false;\n  public parent: Class;\n\n  private singularShort: string;\n  private singularLong: string;\n  private pluralShort: string;\n  private pluralLong: string;\n\n  public constructor(definition: GroupDefinition, parent: Class)\n  {\n    this.system = definition.system;\n    this.common = !!definition.common;\n    this.unit = definition.unit;\n    this.baseUnit = definition.baseUnit;\n    this.preferredUnit = definition.preferredUnit || definition.unit;\n    this.relativeUnit = definition.relativeUnit;\n    this.relativeScale = definition.relativeScale || 1;\n    this.units = definition.units;\n    this.denominators = definition.denominators;\n    this.parent = parent;\n\n    this.updateUnits();\n  }\n\n  public get isBase(): boolean\n  {\n    return this.unit === this.baseUnit;\n  }\n\n  public setDynamic(dynamic: boolean = true): this\n  {\n    this.dynamic = dynamic;\n\n    return this;\n  }\n\n  public addUnits(units: UnitDefinitionMap): this\n  {\n    let parent: Class = this.parent;\n\n    for (let unit in units)\n    {\n      this.units[ unit ] = units[ unit ];\n\n      parent.addGroupUnit( unit, this );\n    }\n\n    this.updateUnits();\n\n    return this;\n  }\n\n  public removeUnits(units: string[]): this\n  {\n    let parent: Class = this.parent;\n    let existing: UnitDefinitionMap = this.units;\n\n    for (let i = 0; i < units.length; i++)\n    {\n      let unit = units[ i ];\n\n      if (unit in existing)\n      {\n        delete existing[ unit ];\n\n        parent.removeGroupUnit( unit, this );\n      }\n    }\n\n    return this;\n  }\n\n  public addDenominator(denominators: Numbers): this\n  {\n    fn.appendTo( this.denominators, denominators );\n\n    return this;\n  }\n\n  public setDenominators(denominators: number[]): this\n  {\n    this.denominators = denominators;\n\n    return this;\n  }\n\n  public setCommon(common: boolean = true): this\n  {\n    this.common = common;\n\n    return this;\n  }\n\n  public setPreferred(unit: string): this\n  {\n    this.preferredUnit = unit;\n\n    return this;\n  }\n\n  public updateUnits(): this\n  {\n    this.singularShort = null;\n    this.singularLong = null;\n    this.pluralShort = null;\n    this.pluralLong = null;\n\n    for (let unit in this.units)\n    {\n      var plurality = this.units[ unit ];\n\n      if (plurality !== Plurality.PLURAL)\n      {\n        if (!this.singularShort || unit.length < this.singularShort.length)\n        {\n          this.singularShort = unit;\n        }\n\n        if (!this.singularLong || unit.length > this.singularLong.length)\n        {\n          this.singularLong = unit;\n        }\n      }\n\n      if (plurality !== Plurality.SINGULAR)\n      {\n        if (!this.pluralShort || unit.length < this.pluralShort.length)\n        {\n          this.pluralShort = unit;\n        }\n\n        if (!this.pluralLong || unit.length > this.pluralLong.length)\n        {\n          this.pluralLong = unit;\n        }\n      }\n    }\n\n    return this;\n  }\n\n  public getPluralLong(): string\n  {\n    return this.pluralLong;\n  }\n\n  public getPluralShort(): string\n  {\n    return this.pluralShort;\n  }\n\n  public getSingularLong(): string\n  {\n    return this.singularLong;\n  }\n\n  public getSingularShort(): string\n  {\n    return this.singularShort;\n  }\n\n  public matches(transform: Transform, reverse: boolean, callback: (group: Group, index: number) => any): void\n  {\n    if (this.parent)\n    {\n      this.parent.getVisibleGroups( transform, reverse, this, callback );\n    }\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Group.ts","\nimport { GroupDefinition, Converter, ConverterMap, ConverterDoubleMap } from './Types';\nimport { Group, GroupMap, GroupList } from './Group';\nimport { Transform } from './Transform';\nimport { RangeList } from './Range';\n\n\nexport type ClassMap = { [unit: string]: Class };\n\nexport type ClassGrouping = {\n  groupless: RangeList,\n  classes: { [className: string]: { ranges: RangeList, parent: Class } }\n}\n\nexport class Class\n{\n\n  public name: string;\n  public groupMap: GroupMap;\n  public groups: GroupList;\n  public converters: ConverterDoubleMap;\n\n  public constructor(name: string, groups?: GroupDefinition[])\n  {\n    this.name = name;\n    this.groupMap = {};\n    this.groups = [];\n    this.converters = {};\n\n    if (groups)\n    {\n      this.addGroups(groups);\n    }\n  }\n\n  public addGroups(definitions: GroupDefinition[]): this\n  {\n    for (let i = 0; i < definitions.length; i++)\n    {\n      this.addGroup(definitions[i]);\n    }\n\n    return this;\n  }\n\n  public addGroup(definition: GroupDefinition): Group\n  {\n    let group = new Group(definition, this);\n    let { relativeUnit, relativeScale, units } = group;\n\n    if (relativeUnit)\n    {\n      let relative: Group = this.groupMap[ relativeUnit ];\n\n      group.baseScale = relativeScale * relative.baseScale;\n      group.baseUnit = relative.baseUnit;\n    }\n\n    for (let alias in units)\n    {\n      this.addGroupUnit( alias, group );\n    }\n\n    this.groups.push( group );\n\n    return group;\n  }\n\n  public addGroupUnit(unit: string, group: Group): this\n  {\n    let lower: string = unit.toLowerCase();\n\n    this.groupMap[ unit ] = group;\n    this.groupMap[ lower ] = group;\n\n    return this;\n  }\n\n  public removeGroupUnit(unit: string, group: Group): this\n  {\n    let lower: string = unit.toLowerCase();\n\n    if (this.groupMap[ unit ] === group)\n    {\n      delete this.groupMap[ unit ];\n    }\n\n    if (this.groupMap[ lower ] === group)\n    {\n      delete this.groupMap[ lower ];\n    }\n\n    return this;\n  }\n\n  private getFirstBase(): Group\n  {\n    let groups: GroupList = this.groups;\n\n    for (let i = 0; i < groups.length; i++)\n    {\n      let group: Group = groups[ i ];\n\n      if (group.unit === group.baseUnit)\n      {\n        return group;\n      }\n    }\n\n    return null;\n  }\n\n  public setClassScales(): this\n  {\n    let groups: GroupList = this.groups;\n    let first: Group = this.getFirstBase();\n\n    if (first)\n    {\n      for (let i = 0; i < groups.length; i++)\n      {\n        let group: Group = groups[ i ];\n\n        if (group.baseUnit === first.baseUnit)\n        {\n          group.classScale = group.baseScale;\n        }\n        else if (group.baseUnit in this.converters)\n        {\n          group.classScale = this.converters[ group.baseUnit ][ first.baseUnit ]( group.baseScale );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  public setBaseConversion(fromUnit: string, toUnit: string, converter: Converter): this\n  {\n    let converters = this.converters;\n    converters[ fromUnit ] = converters[ fromUnit ] || {};\n    converters[ fromUnit ][ toUnit ] = converter;\n\n    return this;\n  }\n\n  public getVisibleGroups(transform: Transform, reverse: boolean, relatedGroup: Group, callback: (group: Group, index: number) => any): void\n  {\n    let groups: GroupList = this.groups;\n    let matched: number = 0;\n\n    let start = reverse ? groups.length - 1 : 0;\n    let stop = reverse ? -1 : groups.length;\n    let increment = reverse ? -1 : 1;\n\n    for (let i = start; i !== stop; i += increment)\n    {\n      let group: Group = groups[ i ];\n\n      if (transform.isVisibleGroup( group, relatedGroup ))\n      {\n        let result: any = callback( group, matched++ );\n\n        if (result === false)\n        {\n          break;\n        }\n      }\n    }\n  }\n\n  public convert(value: number, from: Group, to: Group): number\n  {\n    if (from === to || !from || !to)\n    {\n      return value;\n    }\n\n    let converted: number = value * from.baseScale;\n\n    if (from.baseUnit !== to.baseUnit)\n    {\n      let map: ConverterMap = this.converters[ from.baseUnit ];\n\n      if (!map || !map[ to.baseUnit ])\n      {\n        return 0;\n      }\n\n      let converter: Converter = map[ to.baseUnit ];\n\n      converted = converter( converted );\n    }\n\n    return converted / to.baseScale;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Class.ts","\nimport { Functions as fn } from './Functions';\nimport { Range } from './Range';\n\n\nexport enum SortType {\n  MIN,\n  MAX,\n  AVERAGE\n}\n\nexport interface SortInput {\n  ascending?: boolean;\n  type?: SortType;\n  classes?: SortClassMap;\n}\n\nexport type SortClassMap = { [className: string]: number };\n\nexport type Sorter = (a: Range, b: Range) => number;\n\nexport class Sort implements SortInput\n{\n\n  public ascending: boolean = false;\n  public type: SortType = SortType.MAX;\n  public classes: SortClassMap = {};\n\n  public constructor(input?: SortInput)\n  {\n    if (fn.isDefined(input))\n    {\n      this.set( input );\n    }\n  }\n\n  public set(input: SortInput): this\n  {\n    this.ascending = fn.coalesce( input.ascending, this.ascending );\n    this.type = fn.coalesce( input.type, this.type );\n\n    if (fn.isDefined( input.classes ))\n    {\n      for (let className in input.classes)\n      {\n        this.classes[ className ] = input.classes[ className ];\n      }\n    }\n\n    return this;\n  }\n\n  public extend(input?: SortInput): Sort\n  {\n    let extended: Sort = this;\n\n    if (fn.isDefined(input))\n    {\n      if (input instanceof Sort)\n      {\n        extended = input;\n      }\n      else\n      {\n        extended = new Sort( this );\n        extended.set( input );\n      }\n    }\n\n    return extended;\n  }\n\n  public getSorter(): Sorter\n  {\n    return (a: Range, b: Range) =>\n    {\n      let d: number = this.getClassComparison(a, b);\n\n      if (d === 0)\n      {\n        switch (this.type)\n        {\n          case SortType.MIN:\n            d = this.getMinComparison(a, b);\n            break;\n          case SortType.MAX:\n            d = this.getMaxComparison(a, b);\n            break;\n          case SortType.AVERAGE:\n            d = this.getAverageComparison(a, b);\n            break;\n        }\n      }\n\n      return this.ascending ? d : -d;\n    };\n  }\n\n  private getMinComparison(a: Range, b: Range): number\n  {\n    return fn.sign( a.min.classScaled - b.min.classScaled );\n  }\n\n  private getMaxComparison(a: Range, b: Range): number\n  {\n    return fn.sign( a.max.classScaled - b.max.classScaled );\n  }\n\n  private getAverageComparison(a: Range, b: Range): number\n  {\n    let avg: number = (a.min.classScaled + a.max.classScaled) * 0.5;\n    let bvg: number = (b.min.classScaled + b.max.classScaled) * 0.5;\n\n    return fn.sign( avg - bvg );\n  }\n\n  private getClassComparison(a: Range, b: Range): number\n  {\n    let ag: number = a.min.group ? 1 : -1;\n    let bg: number = b.min.group ? 1 : -1;\n\n    if (ag !== bg)\n    {\n      return ag - bg;\n    }\n\n    let ac: number = this.classes[ a.min.group.parent.name ] || 0;\n    let bc: number = this.classes[ b.min.group.parent.name ] || 0;\n\n    return ac - bc;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Sort.ts","\nimport { Functions as fn } from './Functions';\nimport { System } from './System';\nimport { Group } from './Group';\nimport { Class } from './Class';\n\n\nexport interface TransformInput {\n  common?: boolean;\n  system?: System;\n  min?: number;\n  max?: number;\n  groupless?: boolean;\n  convertWithMax?: boolean;\n  onlyUnits?: string[];\n  notUnits?: string[];\n  onlyClasses?: string[];\n  notClasses?: string[];\n}\n\nexport class Transform implements TransformInput\n{\n\n  public common: boolean = true;\n  public system: System = System.GIVEN;\n  public min: number = -Number.MAX_VALUE;\n  public max: number = Number.MAX_VALUE;\n  public convertWithMax: boolean = true;\n  public groupless: boolean = true;\n  public onlyUnits: string[];\n  public notUnits: string[];\n  public onlyClasses: string[];\n  public notClasses: string[];\n\n  public constructor(input?: TransformInput)\n  {\n    if (fn.isDefined(input))\n    {\n      this.set( input );\n    }\n  }\n\n  public set(input: TransformInput): this\n  {\n    this.common = fn.coalesce( input.common, this.common );\n    this.system = fn.coalesce( input.system, this.system );\n    this.min = fn.coalesce( input.min, this.min );\n    this.max = fn.coalesce( input.max, this.max );\n    this.groupless = fn.coalesce( input.groupless, this.groupless );\n    this.convertWithMax = fn.coalesce( input.convertWithMax, this.convertWithMax );\n    this.onlyUnits = fn.coalesce( input.onlyUnits, this.onlyUnits );\n    this.notUnits = fn.coalesce( input.notUnits, this.notUnits );\n    this.onlyClasses = fn.coalesce( input.onlyClasses, this.onlyClasses );\n    this.notClasses = fn.coalesce( input.notClasses, this.notClasses );\n\n    return this;\n  }\n\n  public extend(input?: TransformInput): Transform\n  {\n    let extended: Transform = this;\n\n    if (fn.isDefined(input))\n    {\n      if (input instanceof Transform)\n      {\n        extended = input;\n      }\n      else\n      {\n        extended = new Transform( this );\n        extended.set( input );\n      }\n    }\n\n    return extended;\n  }\n\n  public isVisibleGroup(group: Group, givenGroup?: Group): boolean\n  {\n    return this.isCommonMatch( group ) &&\n      this.isSystemMatch( group, givenGroup ) &&\n      this.isUnitMatch( group ) &&\n      this.isClassMatch( group.parent );\n  }\n\n  public isCommonMatch(group: Group): boolean\n  {\n    return !this.common || group.common;\n  }\n\n  public isSystemMatch(group: Group, givenGroup?: Group): boolean\n  {\n    switch (this.system)\n    {\n      case System.METRIC:\n        return group.system === System.METRIC || group.system === System.ANY;\n      case System.IMPERIAL:\n        return group.system === System.IMPERIAL || group.system === System.ANY;\n      case System.NONE:\n        return false;\n      case System.ANY:\n        return true;\n      case System.GIVEN:\n        return !givenGroup || group.baseUnit === givenGroup.baseUnit;\n    }\n\n    return false;\n  }\n\n  public isClassMatch(parent: Class): boolean\n  {\n    if (this.onlyClasses)\n    {\n      return this.onlyClasses.indexOf( parent.name ) !== -1;\n    }\n\n    if (this.notClasses)\n    {\n      return this.notClasses.indexOf( parent.name ) === -1;\n    }\n\n    return true;\n  }\n\n  public isUnitMatch(group: Group): boolean\n  {\n    if (this.onlyUnits)\n    {\n      return this.onlyUnits.indexOf( group.unit ) !== -1;\n    }\n\n    if (this.notUnits)\n    {\n      return this.notUnits.indexOf( group.unit ) === -1;\n    }\n\n    return true;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Transform.ts","\nimport { Plurality } from './Plurality';\nimport { System } from './System';\nimport { Class, ClassMap } from './Class';\nimport { Output } from './Output';\nimport { Group, GroupMap, GroupList } from './Group';\nimport { Transform } from './Transform';\nimport { Sort } from './Sort';\n\n\nexport class Core\n{\n\n  public static classMap: ClassMap = {};\n  public static classes: Class[] = [];\n  public static unitToGroup: GroupMap = {};\n  public static dynamicGroups: GroupList = [];\n  public static dynamicMatches: GroupMap = {};\n  public static dynamicMatchLength: number = 3;\n\n  public static globalOutput: Output = new Output();\n  public static globalTransform: Transform = new Transform();\n  public static globalSort: Sort = new Sort();\n\n\n  public static getGroup(unit: string): Group\n  {\n    if (!unit)\n    {\n      return null;\n    }\n\n    let exactGroup: Group = Core.unitToGroup[ unit ];\n\n    if (exactGroup)\n    {\n      return exactGroup;\n    }\n\n    let normalizedUnit: string = unit.toLowerCase();\n    let normalizedGroup: Group = Core.unitToGroup[ normalizedUnit ];\n\n    if (normalizedGroup)\n    {\n      return normalizedGroup;\n    }\n\n    let dynamicUnit: string = Core.getDynamicMatch( unit );\n    let dynamicGroup: Group = Core.dynamicMatches[ dynamicUnit ];\n\n    if (dynamicGroup)\n    {\n      return Core.addDynamicUnit( unit, dynamicGroup );\n    }\n\n    return Core.newDynamicGroup( unit );\n  }\n\n  public static addClass(parent: Class): void\n  {\n    this.classMap[ parent.name ] = parent;\n    this.classes.push( parent );\n\n    let groups: GroupMap = parent.groupMap;\n\n    for (let unit in groups)\n    {\n      this.unitToGroup[ unit ] = groups[ unit ];\n    }\n  }\n\n  public static addClasses(...classes: Class[]): void\n  {\n    for (let i = 0; i < classes.length; i++)\n    {\n      this.addClass( classes[ i ] );\n    }\n  }\n\n  public static addDynamicUnit(unit: string, group: Group): Group\n  {\n    group.units[ unit ] = Plurality.EITHER;\n\n    let unitCount: number = 0;\n\n    for (let groupUnit in group.units)\n    {\n      if (groupUnit)\n      {\n        unitCount++;\n      }\n    }\n\n    if (unitCount > 1)\n    {\n      let longest: string;\n\n      for (let groupUnit in group.units)\n      {\n        group.units[ groupUnit ] = Plurality.SINGULAR;\n\n        if (!longest || groupUnit.length > longest.length)\n        {\n          longest = groupUnit;\n        }\n      }\n\n      if (longest)\n      {\n        group.units[ longest ] = Plurality.PLURAL;\n      }\n    }\n\n    group.updateUnits();\n\n    this.unitToGroup[ unit ] = group;\n    this.unitToGroup[ unit.toLowerCase() ] = group;\n\n    this.dynamicMatches[ this.getDynamicMatch( unit ) ] = group;\n\n    return group;\n  }\n\n  public static newDynamicGroup(unit: string): Group\n  {\n    let parent: Class = new Class(unit);\n\n    let group: Group = parent.addGroup({\n      system: System.ANY,\n      unit: unit,\n      common: true,\n      baseUnit: unit,\n      denominators: [2, 3, 4, 5, 6, 8, 10],\n      units: {}\n    });\n\n    group.setDynamic();\n\n    this.addDynamicUnit( unit, group );\n    this.dynamicGroups.push( group );\n\n    return group;\n  }\n\n  public static getDynamicMatch(unit: string)\n  {\n    return unit.substring( 0, this.dynamicMatchLength ).toLowerCase();\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Core.ts","\nimport { Functions as fn } from './Functions';\nimport { BaseInput, RangeInput, RangesInput, RangeDefinition, ValueInput, ValueDefinition, ParseResult } from './Types';\nimport { Group, GroupFactory } from './Group';\nimport { Range, RangeList } from './Range';\nimport { Value } from './Value';\nimport { Base } from './Base';\n\n/** The class which takes user input and parses it to specific structures. **/\nexport class Parse\n{\n\n  /** The regular expression used to split up a string into multiple ranges. **/\n  public static REGEX_LIST: RegExp = /\\s*,\\s*/;\n\n  /** The regular expression used to split up a range string to determine the min and maximum values. **/\n  public static REGEX_RANGE: RegExp = /\\s*(-?[^-]+)-(.+)/;\n\n  /** The regular expression used to parse a value number or fraction and possible unit from a string. **/\n  public static REGEX_PARSE: RegExp = /^\\s*(-?\\d*)(\\s+(\\d+))?(\\s*\\/\\s*(\\d+)|\\.(\\d+)|)\\s*(.*)\\s*$/i;\n\n  /**\n   * Parses user input into a base.\n   *\n   * @param input The input to parse into a Base.\n   */\n  public static base(input: BaseInput): Base\n  {\n    if (input instanceof Base)\n    {\n      return <Base>input;\n    }\n\n    return new Base( <RangesInput>input );\n  }\n\n  public static ranges(input: RangesInput, groups: GroupFactory): RangeList\n  {\n    if (fn.isArray(input))\n    {\n      return this.rangesFromArray( <RangeInput[]>input, groups );\n    }\n    else if (fn.isString(input))\n    {\n      return this.rangesFromString( <string>input, groups );\n    }\n    else if (fn.isRangeDefinition(input))\n    {\n      return this.rangesFromArray( [ <RangeDefinition>input ], groups );\n    }\n    else if (fn.isValueDefinition(input))\n    {\n      return this.rangesFromArray( [ <ValueDefinition>input ], groups );\n    }\n\n    return [];\n  }\n\n  public static rangesFromArray(input: RangeInput[], groups: GroupFactory): RangeList\n  {\n    let ranges = [];\n\n    for (let i = 0; i < input.length; i++)\n    {\n      let range: Range = this.range( input[ i ], groups );\n\n      ranges.push( range );\n    }\n\n    return ranges;\n  }\n\n  public static rangesFromString(input: string, groups: GroupFactory): RangeList\n  {\n    let ranges: string[] = input.split( this.REGEX_LIST );\n\n    return this.rangesFromArray( ranges, groups );\n  }\n\n  public static range(input: RangeInput, groups: GroupFactory): Range\n  {\n    if (fn.isString(input))\n    {\n      return this.rangeFromString( <string>input, groups );\n    }\n    else if (fn.isRangeDefinition(input))\n    {\n      let range: RangeDefinition = <RangeDefinition>input;\n      let min: Value = this.value( range.min, groups );\n      let max: Value = this.value( range.max, groups );\n\n      return new Range( min, max );\n    }\n\n    return Range.INVALID;\n  }\n\n  public static rangeFromString(input: string, groups: GroupFactory): Range\n  {\n    let matches: string[] = this.REGEX_RANGE.exec( input );\n\n    if (!matches)\n    {\n      let fixed: Value = this.valueFromString(input, groups);\n\n      return new Range(fixed, fixed);\n    }\n\n    let minInput: string = matches[1];\n    let maxInput: string = matches[2];\n\n    let minParsed: ParseResult = this.input( minInput );\n    let maxParsed: ParseResult = this.input( maxInput );\n\n    if (!minParsed || !maxParsed)\n    {\n      return Range.INVALID;\n    }\n\n    let minUnit: string = minParsed.unit || maxParsed.unit;\n    let maxUnit: string = maxParsed.unit || minParsed.unit;\n\n    let min: Value = this.valueFromResult(minParsed, minUnit, groups);\n    let max: Value = this.valueFromResult(maxParsed, maxUnit, groups);\n\n    return new Range( min, max );\n  }\n\n  public static value(input: ValueInput, groups: GroupFactory): Value\n  {\n    if (fn.isString(input))\n    {\n      return this.valueFromString( <string>input, groups );\n    }\n    else if (fn.isValueDefinition(input))\n    {\n      return this.valueFromValue( <ValueDefinition>input, groups );\n    }\n\n    return Value.INVALID;\n  }\n\n  public static valueFromValue(input: ValueDefinition, groups: GroupFactory): Value\n  {\n    let givenValue: number = fn.isDefined( input.value ) ? input.value : 1;\n    let num: number = fn.isDefined( input.num ) ? input.num : givenValue;\n    let den: number = fn.isDefined( input.den ) ? input.den : 1;\n    let parsedValue: number = fn.isDefined( input.value ) ? input.value : num / den;\n    let unit: string = input.unit || '';\n    let group: Group = groups( unit );\n\n    return new Value( parsedValue, num, den, unit, group );\n  }\n\n  public static valueFromString(input: string, groups: GroupFactory): Value\n  {\n    let parsed: ParseResult = this.input( input );\n\n    return parsed ? this.valueFromResult(parsed, parsed.unit, groups) : Value.INVALID;\n  }\n\n  public static valueFromResult(result: ParseResult, unit: string, groups: GroupFactory): Value\n  {\n    let group: Group = groups( unit );\n\n    return new Value(result.value, result.valueNum, result.valueDen, unit, group);\n  }\n\n  /**\n   * Possible Values:\n   * 1tsp\n   * 1 tsp\n   * 1/2 tsp\n   * 1 1/2 tsp\n   * 1 - 2 tsp\n   * 1 tsp, 1 cup\n   * 2/3 - 1 c, 1 lb, 2.45 cats\n   */\n  public static input(input: string): ParseResult\n  {\n    let matches: string[] = this.REGEX_PARSE.exec( input );\n    let whole: number = parseInt( matches[1] );\n    let hasWhole: boolean = isFinite( whole );\n    let sign: number = matches[1].charAt(0) === '-' ? -1 : 1;\n    let num: number = parseInt( matches[3] );\n    let den: number = parseInt( matches[5] );\n    let decimal: string = matches[6];\n    let hasDecimal: boolean = isFinite( parseFloat( decimal ) );\n    let unit: string = fn.trim( matches[7] );\n\n    if ( !hasWhole && hasDecimal )\n    {\n      whole = 0;\n      hasWhole = true;\n    }\n\n    if ( !hasWhole && !unit )\n    {\n      return null;\n    }\n\n    let value: number = 1;\n    let valueDen: number = 1;\n    let valueNum: number = 1;\n\n    if ( hasWhole )\n    {\n      value = whole;\n      valueNum = whole;\n\n      if ( isFinite( den ) )\n      {\n        valueDen = den;\n\n        if ( isFinite( num ) )\n        {\n          value += ( num / den ) * sign;\n          valueNum *= den;\n          valueNum += num;\n        }\n        else\n        {\n          value /= den;\n        }\n      }\n      else if ( hasDecimal )\n      {\n        let remainder = parseFloat( '0.' + decimal );\n\n        value += remainder * sign;\n        valueNum += remainder;\n      }\n\n      valueNum *= sign;\n    }\n\n    return { value, valueNum, valueDen, num, den, unit };\n  }\n\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Parse.ts","\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n\n\nexport let Weight = new Class('Weight')\n  .setBaseConversion('mg', 'oz', (x) => x * 0.000035274)\n  .setBaseConversion('oz', 'mg', (x) => x * 28349.5)\n  .addGroups([\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'mg',\n      baseUnit: 'mg',\n      denominators: [2, 10],\n      units: {\n        'mg': Plurality.EITHER,\n        'milligram': Plurality.SINGULAR,\n        'milligrams': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'g',\n      relativeUnit: 'mg',\n      relativeScale: 1000,\n      denominators: [2, 10, 1000],\n      units: {\n        'g': Plurality.EITHER,\n        'gram': Plurality.SINGULAR,\n        'grams': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'kg',\n      relativeUnit: 'g',\n      relativeScale: 1000,\n      denominators: [2, 10, 1000],\n      units: {\n        'kg': Plurality.EITHER,\n        'kilogram': Plurality.SINGULAR,\n        'kilograms': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.IMPERIAL,\n      common: true,\n      unit: 'oz',\n      baseUnit: 'oz',\n      denominators: [2, 3, 4, 16],\n      units: {\n        'oz': Plurality.EITHER,\n        'ounce': Plurality.SINGULAR,\n        'ounces': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.IMPERIAL,\n      common: true,\n      unit: 'lb',\n      relativeUnit: 'oz',\n      relativeScale: 16,\n      denominators: [2, 3, 4, 16],\n      units: {\n        'lb': Plurality.EITHER,\n        'lbs': Plurality.PLURAL,\n        'pound': Plurality.SINGULAR,\n        'pounds': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.IMPERIAL,\n      common: true,\n      unit: 'ton',\n      relativeUnit: 'lb',\n      relativeScale: 2000,\n      denominators: [2, 3, 4, 10],\n      units: {\n        'ton': Plurality.EITHER,\n        'tons': Plurality.PLURAL,\n        'tonnes': Plurality.PLURAL\n      }\n    }\n  ])\n  .setClassScales();\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Weight.ts","\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n\n\nexport let Area = new Class('Area')\n  .setBaseConversion('sqin', 'sqmm', (x) => x * 645.16)\n  .setBaseConversion('sqmm', 'sqin', (x) => x * 0.00155)\n  .addGroups([\n    {\n      system: System.IMPERIAL,\n      common: true,\n      unit: 'sqin',\n      baseUnit: 'sqin',\n      denominators: [2, 4, 8, 16],\n      units: {\n        'sqin': Plurality.EITHER,\n        'sq. in.': Plurality.EITHER,\n        'sq in': Plurality.EITHER,\n        'in2': Plurality.EITHER,\n        'in^2': Plurality.EITHER,\n        'in²': Plurality.EITHER,\n        'square inch': Plurality.SINGULAR,\n        'square inches': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.IMPERIAL,\n      common: true,\n      unit: 'sqft',\n      relativeUnit: 'sqin',\n      relativeScale: 12 * 12,\n      denominators: [2, 4, 8, 16],\n      units: {\n        'sqft': Plurality.EITHER,\n        'sq. ft.': Plurality.EITHER,\n        'sq ft': Plurality.EITHER,\n        'ft2': Plurality.EITHER,\n        'ft^2': Plurality.EITHER,\n        'ft²': Plurality.EITHER,\n        'square foot': Plurality.SINGULAR,\n        'square feet': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.IMPERIAL,\n      unit: 'sqyd',\n      relativeUnit: 'sqft',\n      relativeScale: 3 * 3,\n      denominators: [2, 3, 4, 8, 9, 16],\n      units: {\n        'sqyd': Plurality.EITHER,\n        'sq. yd.': Plurality.EITHER,\n        'sq yd': Plurality.EITHER,\n        'yd2': Plurality.EITHER,\n        'yd^2': Plurality.EITHER,\n        'yd²': Plurality.EITHER,\n        'square yard': Plurality.SINGULAR,\n        'square yards': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.IMPERIAL,\n      common: true,\n      unit: 'acre',\n      relativeUnit: 'sqyd',\n      relativeScale: 4840,\n      denominators: [2, 3, 4, 8, 10],\n      units: {\n        'acre': Plurality.EITHER,\n        'acres': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.IMPERIAL,\n      common: true,\n      unit: 'sqmi',\n      relativeUnit: 'acre',\n      relativeScale: 640,\n      denominators: [2, 3, 4, 8, 10],\n      units: {\n        'sqmi': Plurality.EITHER,\n        'sq. mi.': Plurality.EITHER,\n        'sq mi': Plurality.EITHER,\n        'mi2': Plurality.EITHER,\n        'mi^2': Plurality.EITHER,\n        'mi²': Plurality.EITHER,\n        'square mile': Plurality.SINGULAR,\n        'square miles': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'sqmm',\n      baseUnit: 'sqmm',\n      denominators: [2, 4, 8, 16],\n      units: {\n        'sqmm': Plurality.EITHER,\n        'sq. mm.': Plurality.EITHER,\n        'sq mm': Plurality.EITHER,\n        'mm2': Plurality.EITHER,\n        'mm^2': Plurality.EITHER,\n        'mm²': Plurality.EITHER,\n        'square millimeter': Plurality.SINGULAR,\n        'square millimeters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'sqcm',\n      relativeUnit: 'sqmm',\n      relativeScale: 100,\n      denominators: [2, 4, 8, 16],\n      units: {\n        'sqcm': Plurality.EITHER,\n        'sq. cm.': Plurality.EITHER,\n        'sq cm': Plurality.EITHER,\n        'cm2': Plurality.EITHER,\n        'cm^2': Plurality.EITHER,\n        'cm²': Plurality.EITHER,\n        'square centimeter': Plurality.SINGULAR,\n        'square centimeters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'sqm',\n      relativeUnit: 'sqcm',\n      relativeScale: 10000,\n      denominators: [2, 4, 8, 16],\n      units: {\n        'sqm': Plurality.EITHER,\n        'sq. m.': Plurality.EITHER,\n        'sq m': Plurality.EITHER,\n        'm2': Plurality.EITHER,\n        'm^2': Plurality.EITHER,\n        'm²': Plurality.EITHER,\n        'square meter': Plurality.SINGULAR,\n        'square meters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'sqkm',\n      relativeUnit: 'sqm',\n      relativeScale: 1000000,\n      denominators: [2, 4, 8, 16],\n      units: {\n        'sqkm': Plurality.EITHER,\n        'sq. km.': Plurality.EITHER,\n        'sq km': Plurality.EITHER,\n        'km2': Plurality.EITHER,\n        'km^2': Plurality.EITHER,\n        'km²': Plurality.EITHER,\n        'square kilometer': Plurality.SINGULAR,\n        'square kilometers': Plurality.PLURAL\n      }\n    }\n  ])\n  .setClassScales()\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Area.ts","\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n\n\nexport let Time = new Class('Time')\n  .addGroups([\n    {\n      system: System.ANY,\n      unit: 'ns',\n      baseUnit: 'ns',\n      denominators: [10, 100],\n      units: {\n        'ns': Plurality.EITHER,\n        'nanosecond': Plurality.SINGULAR,\n        'nanoseconds': Plurality.PLURAL,\n        'nano': Plurality.SINGULAR,\n        'nanos': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      unit: 'us',\n      relativeUnit: 'ns',\n      relativeScale: 1000,\n      denominators: [10, 100, 1000],\n      units: {\n        'us': Plurality.EITHER,\n        'microsecond': Plurality.SINGULAR,\n        'microseconds': Plurality.PLURAL,\n        'micro': Plurality.SINGULAR,\n        'micros': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'ms',\n      relativeUnit: 'us',\n      relativeScale: 1000,\n      denominators: [10, 100, 1000],\n      units: {\n        'ms': Plurality.EITHER,\n        'millisecond': Plurality.SINGULAR,\n        'milliseconds': Plurality.PLURAL,\n        'milli': Plurality.SINGULAR,\n        'millis': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 's',\n      relativeUnit: 'ms',\n      relativeScale: 1000,\n      denominators: [10, 100, 1000],\n      units: {\n        's': Plurality.EITHER,\n        'second': Plurality.SINGULAR,\n        'seconds': Plurality.PLURAL,\n        'sec': Plurality.SINGULAR,\n        'secs': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'min',\n      relativeUnit: 's',\n      relativeScale: 60,\n      denominators: [2, 3, 4, 60],\n      units: {\n        'min': Plurality.EITHER,\n        'minute': Plurality.SINGULAR,\n        'minutes': Plurality.PLURAL,\n        'mins': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'hr',\n      relativeUnit: 'min',\n      relativeScale: 60,\n      denominators: [2, 3, 4, 60],\n      units: {\n        'hr': Plurality.EITHER,\n        'hour': Plurality.SINGULAR,\n        'hours': Plurality.PLURAL,\n        'hrs': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'day',\n      relativeUnit: 'hr',\n      relativeScale: 24,\n      denominators: [2, 3, 4, 6, 24],\n      units: {\n        'day': Plurality.EITHER,\n        'days': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'wk',\n      relativeUnit: 'day',\n      relativeScale: 7,\n      denominators: [7],\n      units: {\n        'wk': Plurality.EITHER,\n        'week': Plurality.SINGULAR,\n        'weeks': Plurality.PLURAL,\n        'wks': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'yr',\n      relativeUnit: 'day',\n      relativeScale: 365.2425,\n      denominators: [2, 3, 4, 6, 12, 52],\n      units: {\n        'yr': Plurality.EITHER,\n        'year': Plurality.SINGULAR,\n        'years': Plurality.PLURAL,\n        'yrs': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'score',\n      relativeUnit: 'yr',\n      relativeScale: 20,\n      denominators: [20],\n      units: {\n        'score': Plurality.EITHER\n      }\n    }\n  ])\n  .setClassScales();\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Time.ts","\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n\nlet _C_: string = '\\xb0C';\n\nexport let Temperature = new Class('Temperature')\n  .setBaseConversion('F', _C_, (x) => (x - 32) * 5 / 9)\n  .setBaseConversion(_C_, 'F', (x) => (x * 9 / 5) + 32)\n  .setBaseConversion('K', _C_, (x) => x - 273.15)\n  .setBaseConversion('K', 'F', (x) => (x * 9 / 5) - 459.67)\n  .setBaseConversion(_C_, 'K', (x) => x + 273.15)\n  .setBaseConversion('F', 'K', (x) => (x + 459.67) * 5 / 9)\n  .addGroups([\n    {\n      system: System.IMPERIAL,\n      common: true,\n      unit: 'F',\n      baseUnit: 'F',\n      denominators: [],\n      units: {\n        'F': Plurality.EITHER,\n        '\\xb0F': Plurality.EITHER,\n        'Fahrenheit': Plurality.EITHER\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: _C_,\n      baseUnit: _C_,\n      denominators: [],\n      units: {\n        '\\xb0C': Plurality.EITHER,\n        'Celsius': Plurality.EITHER\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'K',\n      baseUnit: 'K',\n      denominators: [],\n      units: {\n        'K': Plurality.EITHER,\n        'kelvin': Plurality.EITHER,\n        'kelvins': Plurality.EITHER\n      }\n    }\n  ])\n  .setClassScales()\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Temperature.ts","\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n\nlet DEG2RAD = 180 / Math.PI;\nlet RAD2DEG = Math.PI / 180;\n\nexport let Rotation = new Class('Rotation')\n  .setBaseConversion('deg', 'rad', (x) => x * DEG2RAD)\n  .setBaseConversion('rad', 'deg', (x) => x * RAD2DEG)\n  .addGroups([\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'deg',\n      baseUnit: 'deg',\n      denominators: [],\n      units: {\n        'deg': Plurality.EITHER,\n        '\\xb0': Plurality.EITHER,\n        'degrees': Plurality.PLURAL,\n        'degree': Plurality.SINGULAR\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'rad',\n      baseUnit: 'rad',\n      denominators: [],\n      units: {\n        'rad': Plurality.EITHER,\n        'radians': Plurality.PLURAL,\n        'radian': Plurality.SINGULAR\n      }\n    }\n  ])\n  .setClassScales()\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Rotation.ts","\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n\nSystem.METRIC;\nPlurality.SINGULAR;\n\nexport let Volume = new Class('Volume')\n  .setBaseConversion('deg', 'rad', (x) => x * 1)\n  .setBaseConversion('rad', 'deg', (x) => x * 2)\n  .addGroups([\n\n  ])\n  .setClassScales()\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Volume.ts","\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n\n\nexport let Length = new Class('Length')\n  .setBaseConversion('in', 'mm', (x) => x * 25.4)\n  .setBaseConversion('mm', 'in', (x) => x * 0.039370)\n  .addGroups([\n    {\n      system: System.IMPERIAL,\n      common: true,\n      unit: 'in',\n      baseUnit: 'in',\n      denominators: [2, 4, 8, 16, 32],\n      units: {\n        'in': Plurality.EITHER,\n        'inch': Plurality.SINGULAR,\n        'inches': Plurality.PLURAL,\n        '\"': Plurality.EITHER\n      }\n    },\n    {\n      system: System.IMPERIAL,\n      common: true,\n      unit: 'ft',\n      relativeUnit: 'in',\n      relativeScale: 12,\n      denominators: [2],\n      units: {\n        'ft': Plurality.EITHER,\n        'foot': Plurality.SINGULAR,\n        'feet': Plurality.PLURAL,\n        '\\'': Plurality.EITHER\n      }\n    },\n    {\n      system: System.IMPERIAL,\n      unit: 'yd',\n      relativeUnit: 'ft',\n      relativeScale: 3,\n      denominators: [],\n      units: {\n        'yd': Plurality.EITHER,\n        'yard': Plurality.SINGULAR,\n        'yards': Plurality.PLURAL,\n        'yds': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.IMPERIAL,\n      common: true,\n      unit: 'mi',\n      relativeUnit: 'ft',\n      relativeScale: 5280,\n      denominators: [2, 3, 4, 10],\n      units: {\n        'mi': Plurality.EITHER,\n        'mile': Plurality.SINGULAR,\n        'miles': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.IMPERIAL,\n      unit: 'league',\n      relativeUnit: 'mi',\n      relativeScale: 3,\n      denominators: [2, 3, 4, 5, 6, 7, 8, 9, 10],\n      units: {\n        'league': Plurality.EITHER,\n        'leagues': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'mm',\n      baseUnit: 'mm',\n      denominators: [10],\n      units: {\n        'mm': Plurality.EITHER,\n        'millimeter': Plurality.SINGULAR,\n        'millimeters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'cm',\n      relativeUnit: 'mm',\n      relativeScale: 10,\n      denominators: [2, 4, 10],\n      units: {\n        'cm': Plurality.EITHER,\n        'centimeter': Plurality.SINGULAR,\n        'centimeters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'dc',\n      relativeUnit: 'cm',\n      relativeScale: 10,\n      denominators: [10],\n      units: {\n        'dc': Plurality.EITHER,\n        'decimeter': Plurality.SINGULAR,\n        'decimeters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'm',\n      relativeUnit: 'cm',\n      relativeScale: 100,\n      denominators: [2, 3, 4, 5, 10],\n      units: {\n        'm': Plurality.EITHER,\n        'meter': Plurality.SINGULAR,\n        'meters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'km',\n      relativeUnit: 'm',\n      relativeScale: 1000,\n      denominators: [2, 3, 4, 5, 6, 7, 8, 9, 10],\n      units: {\n        'km': Plurality.EITHER,\n        'kilometer': Plurality.SINGULAR,\n        'kilometers': Plurality.PLURAL\n      }\n    }\n  ])\n  .setClassScales()\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Length.ts"],"sourceRoot":""}