{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///unitz.min.js","webpack:///webpack/bootstrap 927230eff4f18890fc0b","webpack:///./src/Base.ts","webpack:///./src/classes/Digital.ts","webpack:///./src/classes/index.ts","webpack:///./src/Plurality.ts","webpack:///./src/System.ts","webpack:///./src/Functions.ts","webpack:///./src/Output.ts","webpack:///./src/Group.ts","webpack:///./src/Class.ts","webpack:///./src/Sort.ts","webpack:///./src/Transform.ts","webpack:///./src/Core.ts","webpack:///./src/Value.ts","webpack:///./src/Range.ts","webpack:///./src/Parse.ts","webpack:///./src/classes/Weight.ts","webpack:///./src/classes/Area.ts","webpack:///./src/classes/Time.ts","webpack:///./src/classes/Temperature.ts","webpack:///./src/classes/Angle.ts","webpack:///./src/classes/Volume.ts","webpack:///./src/classes/Length.ts"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","uz","input","Base_Base","addDigitalUnits","parent","relativeTo","relativeScales","denominators","suffixSingular","suffixPlural","unitAndPrefixes","length","_a","unit","prefix","extra","units","Plurality","EITHER","SINGULAR","PLURAL","addGroup","system","System","ANY","common","relativeUnit","relativeScale","addDefaults","Core_Core","addClasses","Weight","Area","Time","Digital","Temperature","Angle","Volume","Length","value","OutputUnit","Functions","isZero","x","abs","EPSILON","isEqual","a","b","isWhole","Math","floor","isSingular","isNumber","isFinite","trim","replace","gcd","y","t","sign","appendTo","array","Array","push","apply","isGroupDefinition","isValueDefinition","num","den","isRangeDefinition","min","max","isArray","isString","isDefined","coalesce","Group_Group","Group","definition","baseScale","classScale","dynamic","baseUnit","preferredUnit","updateUnits","setDynamic","addDenominator","setDenominators","setCommon","setPreferred","addUnits","addGroupUnit","removeUnits","existing","removeGroupUnit","singularShort","singularLong","pluralShort","pluralLong","plurality","matches","transform","reverse","callback","getVisibleGroups","Class_Class","Class","groups","groupMap","converters","addGroups","definitions","group","relative","alias","lower","toLowerCase","getFirstBase","isBase","setClassScales","first","setBaseConversion","fromUnit","toUnit","converter","relatedGroup","matched","start","stop","increment","isVisibleGroup","convert","from","to","converted","map","OutputFormat","SortType","Output_Output","Output","GIVEN","format","repeatUnit","unitSpacer","rangeSpacer","fractionSpacer","mixedSpacer","delimiter","significant","set","extend","extended","ranges","out","range","isValid","isFixed","minUnit","showUnit","isFraction","isMixed","mixedWhole","mixedNum","number","NONE","isLongUnit","isShortUnit","valueString","valueSignificant","toFixed","NUMBER","IMPROPER","SHORT","LONG","Transform_Transform","Transform","Number","MAX_VALUE","convertWithMax","groupless","onlyUnits","notUnits","onlyClasses","notClasses","isValidRange","givenGroup","isCommonMatch","isSystemMatch","isUnitMatch","isClassMatch","METRIC","US","indexOf","Sort_Sort","Sort","ascending","type","MAX","classes","className","getSorter","_this","getClassComparison","MIN","getMinComparison","getMaxComparison","AVERAGE","getAverageComparison","classScaled","avg","bvg","ag","bg","Core","getGroup","createDynamic","exactGroup","unitToGroup","normalizedUnit","normalizedGroup","dynamicUnit","getDynamicMatch","dynamicGroup","dynamicMatches","addDynamicUnit","newDynamicGroup","addClass","classMap","_i","arguments","unitCount","groupUnit","longest","dynamicGroups","substring","dynamicMatchLength","isMoreNormal","fromValue","toValue","forOutput","fromString","toString","globalOutput","globalTransform","globalSort","Value_Value","Value","divisor","ceil","actual","error","preferred","copy","zero","truncated","truncate","fractioned","fromNumberWithDenominators","numbered","convertTo","convertToValue","fromNumberForGroup","conversions","index","normalize","closest","acceptable","add","addend","scale","sub","subtrahend","mul","output","options","fromNumber","fromNumberWithRange","minDen","maxDen","closestDenominator","closestDistance","distance","fromFraction","INVALID","NaN","Range_Range","Range","isDecimal","isMatch","positive","minNegative","negative","minPositive","maxPositive","nonzero","minZero","maxZero","maxd","fixed","mind","fromFixed","Base","Parse_Parse","amount","mutate","r","scaleTo","unitValue","rangeDelta","getScaleTo","fractions","numbers","hasRanges","compact","compacted","groupByClass","entry","parent_1","minGroupChosen","maxGroupChosen","minSum","maxSum","minGroup","maxGroup","expand","expanded","valueGroup","valueSign","transformed","operate","remainder","other","base","otherRanges","otherUsed","k","otherRange","mutator","source","mutated","filter","filtered","sort","slice","parent_2","convertedValue","maximum","minimum","rangeGroup","each","iterate","end","move","isRange","Parse","rangesFromArray","rangesFromString","split","REGEX_LIST","rangeFromString","REGEX_RANGE","exec","valueFromString","minInput","maxInput","minParsed","maxParsed","maxUnit","valueFromResult","valueFromValue","givenValue","parsedValue","parsed","result","valueNum","valueDen","REGEX_PARSE","whole","parseInt","hasWhole","charAt","decimal","hasDecimal","parseFloat","mg","milligram","milligrams","g","gram","grams","kg","kilo","kilos","kilogram","kilograms","oz","ounce","ounces","lb","lbs","pound","pounds","ton","tons","tonnes","sqin","sq. in","sq in","in2","in^2","in²","inch2","inch^2","inch²","inches2","inches^2","inches²","square in","square inch","square inches","sqft","sq. ft","sq ft","ft2","ft^2","ft²","foot2","foot^2","foot²","feet2","feet^2","feet²","square ft","square foot","square feet","sqyd","sq. yd","sq yd","yd2","yd^2","yd²","yard2","yard^2","yard²","yards2","yards^2","yards²","square yard","square yards","acre","acres","sqmi","sq. mi","sq mi","mi2","mi^2","mi²","mile2","mile^2","mile²","miles2","miles^2","miles²","square mi","square mile","square miles","sqmm","sq. mm","sq mm","mm2","mm^2","mm²","millimeter2","millimeter^2","millimeter²","millimeters2","millimeters^2","millimeters²","square mm","square millimeter","square millimeters","sqcm","sq. cm","sq cm","cm2","cm^2","cm²","centimeter2","centimeter^2","centimeter²","centimeters2","centimeters^2","centimeters²","square cm","square centimeter","square centimeters","sqm","sq. m","sq m","m2","m^2","m²","meter2","meter^2","meter²","meters2","meters^2","meters²","square m","square meter","square meters","sqkm","sq. km","sq km","km2","km^2","km²","kilometer2","kilometer^2","kilometer²","kilometers2","kilometers^2","kilometers²","square km","square kilometer","square kilometers","ns","nanosecond","nanoseconds","nano","nanos","us","microsecond","microseconds","micro","micros","ms","millisecond","milliseconds","milli","millis","second","seconds","sec","secs","minute","minutes","mins","hr","hour","hours","hrs","day","days","wk","week","weeks","wks","yr","year","years","yrs","score","decade","decades","biennium","bienniums","triennium","trienniums","quadrennium","quadrenniums","lustrum","lustrums","century","centurys","centuries","millennium","millenniums","millennia","millennias","bit","bits","nibble","nibbles","nybble","nyble","half-byte","half byte","tetrade","semi-octet","quadbit","quartet","B","byte","bytes","F","°F","Fahrenheit","°C","Celsius","K","kelvin","kelvins","RAD2DEG","PI","DEG2RAD","deg","°","degrees","degree","rad","radians","radian","tsp","ts","tsps","teaspoon","teaspoons","tbsp","tbsps","tablespoon","tablespoons","floz","fl-oz","fl oz","fluid ounce","fluid ounces","fl. oz","oz. fl","oz fl","cup","cups","pt","pint","pints","qt","quart","quarts","gal","gallon","gallons","gals","ml","millilitre","millilitres","milliliter","milliliters","cl","centilitre","centilitres","centiliter","centiliters","litre","litres","liter","liters","dl","decalitre","decalitres","decaliter","decaliters","kl","kilolitre","kilolitres","kiloliter","kiloliters","mm3","mm^3","mm³","millimeter3","millimeter^3","millimeter³","millimeters3","millimeters^3","millimeters³","cubic mm","cubic millimeter","cubic millimeters","cm3","cm^3","cm³","centimeter3","centimeter^3","centimeter³","centimeters3","centimeters^3","centimeters³","cubic cm","cubic centimeter","cubic centimeters","m3","m^3","m³","meter3","meter^3","meter³","meters3","meters^3","meters³","cubic m","cubic meter","cubic meters","km3","km^3","km³","kilometer3","kilometer^3","kilometer³","kilometers3","kilometers^3","kilometers³","cubic km","cubic kilometer","cubic kilometers","in3","in^3","in³","inch3","inch^3","inch³","inches3","inches^3","inches³","cubic in","cubic inch","cubic inches","ft3","ft^3","ft³","foot3","foot^3","foot³","feet3","feet^3","feet³","cubic ft","cubic foot","cubic feet","yd3","yd^3","yd³","yard3","yard^3","yard³","yards3","yards^3","yards³","cubic yd","cubic yard","cubic yards","in","inch","inches","\"","ft","foot","feet","'","yd","yard","yards","yds","mi","mile","miles","league","leagues","mm","millimeter","millimeters","cm","centimeter","centimeters","dc","decimeter","decimeters","meter","meters","km","kilometer","kilometers"],"mappings":"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","file":"unitz.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Unitz\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Unitz\"] = factory();\n\telse\n\t\troot[\"Unitz\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Unitz\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Unitz\"] = factory();\n\telse\n\t\troot[\"Unitz\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(1);\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n\n// CONCATENATED MODULE: ./src/Plurality.ts\n\r\n/**\r\n * An enumeration which specifies whether a unit represents a singular value (1),\r\n * a plural value, or might represent either.\r\n */\r\nvar Plurality;\r\n(function (Plurality) {\r\n    /**\r\n     * The unit is only a singular representation.\r\n     */\r\n    Plurality[Plurality[\"SINGULAR\"] = 0] = \"SINGULAR\";\r\n    /**\r\n     * The unit is only a plural representation.\r\n     */\r\n    Plurality[Plurality[\"PLURAL\"] = 1] = \"PLURAL\";\r\n    /**\r\n     * The unit can be used as singular and plural.\r\n     */\r\n    Plurality[Plurality[\"EITHER\"] = 2] = \"EITHER\";\r\n})(Plurality = Plurality || (Plurality = {}));\r\n\n// CONCATENATED MODULE: ./src/System.ts\n\r\nvar System;\r\n(function (System) {\r\n    System[System[\"METRIC\"] = 0] = \"METRIC\";\r\n    System[System[\"US\"] = 1] = \"US\";\r\n    System[System[\"NONE\"] = 2] = \"NONE\";\r\n    System[System[\"ANY\"] = 3] = \"ANY\";\r\n    System[System[\"GIVEN\"] = 4] = \"GIVEN\";\r\n})(System = System || (System = {}));\r\n\n// CONCATENATED MODULE: ./src/Functions.ts\n\r\n/**\r\n * The class which contains commonly used functions by the library. These\r\n * functions and variables exist in a class so they may be overridden if\r\n * desired.\r\n */\r\nvar Functions = (function () {\r\n    function Functions() {\r\n    }\r\n    /**\r\n     * Determines if the given number is zero.\r\n     *\r\n     * @param x The number to test.\r\n     * @return True if the number is zero, otherwise false.\r\n     * @see [[Functions.EPSILON]]\r\n     */\r\n    Functions.isZero = function (x) {\r\n        return this.abs(x) < this.EPSILON;\r\n    };\r\n    /**\r\n     * Determines if the given number is equal to another.\r\n     *\r\n     * @param a The first number to compare.\r\n     * @param b The second number to compare.\r\n     * @return True if the two numbers are equal.\r\n     * @see [[Functions.EPSILON]]\r\n     */\r\n    Functions.isEqual = function (a, b) {\r\n        return this.abs(a - b) < this.EPSILON;\r\n    };\r\n    /**\r\n     * Determines if the given number is a whole number (integer).\r\n     *\r\n     * @param x The number to test.\r\n     * @return True if the number is whole, otherwise false.\r\n     * @see [[Functions.EPSILON]]\r\n     */\r\n    Functions.isWhole = function (x) {\r\n        return this.abs(Math.floor(x) - x) < this.EPSILON;\r\n    };\r\n    /**\r\n     * Determines if the given number is singular. A singular number is 1 or -1.\r\n     *\r\n     * @param x The number to test.\r\n     * @return True if the number is singular, otherwise false.\r\n     * @see [[Functions.EPSILON]]\r\n     */\r\n    Functions.isSingular = function (x) {\r\n        return this.isNumber(x) && this.abs(this.abs(x) - 1) < this.EPSILON;\r\n    };\r\n    /**\r\n     * Determines if the given number is valid. A valid number is finite and not\r\n     * NaN or Infinity.\r\n     *\r\n     * @param x The number to test.\r\n     * @return True if the input is finite number.\r\n     */\r\n    Functions.isNumber = function (x) {\r\n        return isFinite(x);\r\n    };\r\n    /**\r\n     * Trims the given input if its a string.\r\n     *\r\n     * @param x The string to remove space from the beginning and end.\r\n     * @return A trimmed string.\r\n     */\r\n    Functions.trim = function (x) {\r\n        return x ? x.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '') : x;\r\n    };\r\n    /**\r\n     * Calculates the greatest common denominator between the two numbers. If\r\n     * either of the numbers are not whole (integers) then 1 is immediately\r\n     * returned.\r\n     *\r\n     * @param a The first number.\r\n     * @param b The second number.\r\n     * @return The greatest common denominator between the two numbers.\r\n     */\r\n    Functions.gcd = function (a, b) {\r\n        if (!this.isWhole(a) || !this.isWhole(b)) {\r\n            return 1;\r\n        }\r\n        var x = a < b ? a : b;\r\n        var y = a < b ? b : a;\r\n        x = this.abs(x);\r\n        y = this.abs(y);\r\n        while (y) {\r\n            var t = y;\r\n            y = x % y;\r\n            x = t;\r\n        }\r\n        return x;\r\n    };\r\n    /**\r\n     * Determines the absolute value of the given number.\r\n     *\r\n     * @param x The number to return the positive version of.\r\n     * @return The absolute value of x.\r\n     */\r\n    Functions.abs = function (x) {\r\n        return x < 0 ? -x : x;\r\n    };\r\n    /**\r\n     * Determines the sign of the given number. One of three values will be\r\n     * returned: 1, 0, or -1.\r\n     *\r\n     * @param x The number to determine the sign of.\r\n     * @return The sign of the given number.\r\n     */\r\n    Functions.sign = function (x) {\r\n        return x < 0 ? -1 : (x > 0 ? 1 : 0);\r\n    };\r\n    /**\r\n     * Appends an element or array of elements to the end of the given array.\r\n     *\r\n     * @param array The array to append values to the end of.\r\n     * @param input The element or array of elements to append to the end.\r\n     * @return The reference to the `array` given.\r\n     */\r\n    Functions.appendTo = function (array, input) {\r\n        if (input instanceof Array) {\r\n            array.push.apply(array, input);\r\n        }\r\n        else if (input) {\r\n            array.push(input);\r\n        }\r\n        return array;\r\n    };\r\n    /**\r\n     * Determines whether the given input looks like a [[GroupDefinition]].\r\n     *\r\n     * @param input The variable to inspect.\r\n     * @return True if the variable appears to be a [[GroupDefinition]].\r\n     */\r\n    Functions.isGroupDefinition = function (input) {\r\n        return !!(input && input.system && input.unit && input.denominators && input.units);\r\n    };\r\n    /**\r\n     * Determines whether the given input looks like a [[ValueDefinition]].\r\n     *\r\n     * @param input The variable to inspect.\r\n     * @return True if the variable appears to be a [[ValueDefinition]].\r\n     */\r\n    Functions.isValueDefinition = function (input) {\r\n        return !!(input && (input.value || input.unit || input.num || input.den));\r\n    };\r\n    /**\r\n     * Determines whether the given input looks like a [[RangeDefinition]].\r\n     *\r\n     * @param input The variable to inspect.\r\n     * @return True if the variable appears to be a [[RangeDefinition]].\r\n     */\r\n    Functions.isRangeDefinition = function (input) {\r\n        return !!(input && input.min && input.max);\r\n    };\r\n    /**\r\n     * Determines whether the given input is an array.\r\n     *\r\n     * @param input The variable to test.\r\n     * @return True if the variable is an array, otherwise false.\r\n     */\r\n    Functions.isArray = function (input) {\r\n        return input instanceof Array;\r\n    };\r\n    /**\r\n     * Determines whether the given input is a string.\r\n     *\r\n     * @param input The variable to test.\r\n     * @return True if the variable is a string, otherwise false.\r\n     */\r\n    Functions.isString = function (input) {\r\n        return typeof (input) === 'string';\r\n    };\r\n    /**\r\n     * Determines whether the given input is defined.\r\n     *\r\n     * @param input The variable to test.\r\n     * @return True if the variable is defined, otherwise false.\r\n     */\r\n    Functions.isDefined = function (input) {\r\n        return typeof (input) !== 'undefined';\r\n    };\r\n    /**\r\n     * Returns the first argument which is defined.\r\n     *\r\n     * @param a The first argument to look at.\r\n     * @param b The second argument to look at.\r\n     * @return The first defined argument.\r\n     * @see [[Functions.isDefined]]\r\n     */\r\n    Functions.coalesce = function (a, b) {\r\n        return this.isDefined(a) ? a : b;\r\n    };\r\n    /**\r\n     * The maximum distance a number can be from another to be considered\r\n     * equivalent. This is to compensate for floating point precision issues.\r\n     */\r\n    Functions.EPSILON = 0.00001;\r\n    return Functions;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Group.ts\n\r\n\r\n\r\n/**\r\n * A unit and its aliases as well as their plurality.\r\n *\r\n * A group is relative to a base group or is a base group itself. As unit\r\n * aliases are added to the group it determines the appropriate plural and\r\n * singular long and short versions given the unit aliases in this group.\r\n */\r\nvar Group_Group = (function () {\r\n    /**\r\n     * Creates a new instance of Group given a definition and the parent class.\r\n     *\r\n     * @param definition The definition of the group.\r\n     * @param parent The class which contains this group.\r\n     */\r\n    function Group(definition, parent) {\r\n        /**\r\n         * The scale of this group relative to the base group. This is used for\r\n         * conversions of values with the same base group.\r\n         */\r\n        this.baseScale = 1;\r\n        /**\r\n         * The scale of this group relative to the first base group added to the\r\n         * class. This is used to compare numbers of the same class across all bases.\r\n         */\r\n        this.classScale = 0;\r\n        /**\r\n         * Whether this group was dynamically created by user input having units\r\n         * not mapped to groups by the developer.\r\n         */\r\n        this.dynamic = false;\r\n        this.system = definition.system;\r\n        this.common = !!definition.common;\r\n        this.unit = definition.unit;\r\n        this.baseUnit = definition.baseUnit;\r\n        this.preferredUnit = definition.preferredUnit || definition.unit;\r\n        this.relativeUnit = definition.relativeUnit;\r\n        this.relativeScale = definition.relativeScale || 1;\r\n        this.units = definition.units;\r\n        this.denominators = definition.denominators;\r\n        this.parent = parent;\r\n        this.updateUnits();\r\n    }\r\n    Object.defineProperty(Group.prototype, \"isBase\", {\r\n        /**\r\n         * True if this group is a base group, otherwise false.\r\n         */\r\n        get: function () {\r\n            return this.unit === this.baseUnit;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Sets the dynamic flag of this group.\r\n     *\r\n     * @param dynamic Whether this group is dynamic or not.\r\n     * @return The reference to this instance.\r\n     */\r\n    Group.prototype.setDynamic = function (dynamic) {\r\n        if (dynamic === void 0) { dynamic = true; }\r\n        this.dynamic = dynamic;\r\n        return this;\r\n    };\r\n    /**\r\n     * Adds a denominator or array of denominators to this group.\r\n     *\r\n     * @param denominators A denominator or an array of denominators to add.\r\n     * @return The reference to this instance.\r\n     */\r\n    Group.prototype.addDenominator = function (denominators) {\r\n        Functions.appendTo(this.denominators, denominators);\r\n        return this;\r\n    };\r\n    /**\r\n     * Sets the denominators of this group.\r\n     *\r\n     * @param denominators The new denominators for this group.\r\n     * @return The reference to this instance.\r\n     * @see [[Group.denominators]]\r\n     */\r\n    Group.prototype.setDenominators = function (denominators) {\r\n        this.denominators = denominators;\r\n        return this;\r\n    };\r\n    /**\r\n     * Sets the common flag of this group.\r\n     *\r\n     * @param common Whether this group is common or not.\r\n     * @return The reference to this instance.\r\n     * @see [[Group.common]]\r\n     */\r\n    Group.prototype.setCommon = function (common) {\r\n        if (common === void 0) { common = true; }\r\n        this.common = common;\r\n        return this;\r\n    };\r\n    /**\r\n     * Sets the preferred unit of this group.\r\n     *\r\n     * @param unit The preferred unit of this group.\r\n     * @return The reference to this instance.\r\n     * @see [[Group.preferredUnit]]\r\n     */\r\n    Group.prototype.setPreferred = function (unit) {\r\n        this.preferredUnit = unit;\r\n        return this;\r\n    };\r\n    /**\r\n     * Adds the given unit aliases to this group and the parent class.\r\n     *\r\n     * @param units The units to add to the group and class.\r\n     * @return The reference to this instance.\r\n     * @see [[Class.addGroupUnit]]\r\n     */\r\n    Group.prototype.addUnits = function (units) {\r\n        var parent = this.parent;\r\n        for (var unit in units) {\r\n            this.units[unit] = units[unit];\r\n            parent.addGroupUnit(unit, this);\r\n        }\r\n        this.updateUnits();\r\n        return this;\r\n    };\r\n    /**\r\n     * Removes the given unit aliases from this group and the parent class.\r\n     *\r\n     * @param units The array of unit aliases to remove.\r\n     * @return The reference to this instance.\r\n     * @see [[Class.removeGroupUnit]]\r\n     */\r\n    Group.prototype.removeUnits = function (units) {\r\n        var parent = this.parent;\r\n        var existing = this.units;\r\n        for (var i = 0; i < units.length; i++) {\r\n            var unit = units[i];\r\n            if (unit in existing) {\r\n                delete existing[unit];\r\n                parent.removeGroupUnit(unit, this);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Updates the singular and plural long and short form units for this group.\r\n     *\r\n     * @return The reference to this instance.\r\n     */\r\n    Group.prototype.updateUnits = function () {\r\n        this.singularShort = null;\r\n        this.singularLong = null;\r\n        this.pluralShort = null;\r\n        this.pluralLong = null;\r\n        for (var unit in this.units) {\r\n            var plurality = this.units[unit];\r\n            if (plurality !== Plurality.PLURAL) {\r\n                if (!this.singularShort || unit.length < this.singularShort.length) {\r\n                    this.singularShort = unit;\r\n                }\r\n                if (!this.singularLong || unit.length > this.singularLong.length) {\r\n                    this.singularLong = unit;\r\n                }\r\n            }\r\n            if (plurality !== Plurality.SINGULAR) {\r\n                if (!this.pluralShort || unit.length < this.pluralShort.length) {\r\n                    this.pluralShort = unit;\r\n                }\r\n                if (!this.pluralLong || unit.length > this.pluralLong.length) {\r\n                    this.pluralLong = unit;\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Invokes a callback for each group in the parent class that are visible\r\n     * based on the given transform relative to this group.\r\n     *\r\n     * @param transform The transform which decides what groups are visible.\r\n     * @param reverse If the groups of the class should be iterated in reverse.\r\n     * @param callback A function to invoke with all visible groups found and the\r\n     *  index of that group in the set of visible groups. If `false` is returned\r\n     *  by the function iteration of visible groups ceases.\r\n     * @param callback.group The current visible group.\r\n     * @param callback.index The index of the current visible group.\r\n     * @see [[Transform.isVisibleGroup]]\r\n     */\r\n    Group.prototype.matches = function (transform, reverse, callback) {\r\n        if (this.parent) {\r\n            this.parent.getVisibleGroups(transform, reverse, this, callback);\r\n        }\r\n    };\r\n    return Group;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Class.ts\n\r\n\r\n/**\r\n * A collection of groups and their units with the logic on how to convert\r\n * between groups with differing base units.\r\n *\r\n * A class is essentially something like \"Length\" where base units are \"inches\"\r\n * and \"millimeters\" and there are various other groups based off of these\r\n * base groups like \"feet\", \"centimeters\", and \"meters\".\r\n *\r\n * A class is responsible for being the sole place where conversion is done\r\n * between different groups in the same class.\r\n *\r\n * @see [[Class.convert]]\r\n */\r\nvar Class_Class = (function () {\r\n    /**\r\n     * Creates a new instance of Class given the name of the class and optionally\r\n     * the groups of the class.\r\n     *\r\n     * @param name The unique name of the class.\r\n     * @param groups The optional list of groups to populate the class with.\r\n     */\r\n    function Class(name, groups) {\r\n        this.name = name;\r\n        this.groupMap = {};\r\n        this.groups = [];\r\n        this.converters = {};\r\n        if (groups) {\r\n            this.addGroups(groups);\r\n        }\r\n    }\r\n    /**\r\n     * Adds the group definitions to this class.\r\n     *\r\n     * @param definitions The array of group definitions.\r\n     * @return The reference to this instance.\r\n     * @see [[Class.addGroup]]\r\n     */\r\n    Class.prototype.addGroups = function (definitions) {\r\n        for (var i = 0; i < definitions.length; i++) {\r\n            this.addGroup(definitions[i]);\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Adds a group definition to this class. If the group is relative to another\r\n     * group the [[Group.baseScale]] and [[Group.baseUnit]] are set to appropriate\r\n     * values.\r\n     *\r\n     * @param definition The group definition.\r\n     * @return The instance of the group created from the definition.\r\n     * @see [[Class.addGroupUnit]]\r\n     */\r\n    Class.prototype.addGroup = function (definition) {\r\n        var group = new Group_Group(definition, this);\r\n        var relativeUnit = group.relativeUnit, relativeScale = group.relativeScale, units = group.units;\r\n        if (relativeUnit) {\r\n            var relative = this.groupMap[relativeUnit];\r\n            group.baseScale = relativeScale * relative.baseScale;\r\n            group.baseUnit = relative.baseUnit;\r\n        }\r\n        for (var alias in units) {\r\n            this.addGroupUnit(alias, group);\r\n        }\r\n        this.groups.push(group);\r\n        return group;\r\n    };\r\n    /**\r\n     * Adds the unit to this class for the given group. If the lowercase version\r\n     * of the unit has not been mapped yet it will be mapped to the given group.\r\n     *\r\n     * @param unit The unit to map to the group.\r\n     * @param group The group which has the unit.\r\n     * @return The reference to this instance.\r\n     */\r\n    Class.prototype.addGroupUnit = function (unit, group) {\r\n        var lower = unit.toLowerCase();\r\n        this.groupMap[unit] = group;\r\n        if (!this.groupMap[lower]) {\r\n            this.groupMap[lower] = group;\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Removes the given unit associated to the given group from the class. If the\r\n     * group is not mapped to this unit then this has no effect.\r\n     *\r\n     * @param unit The unit to remove from this class.\r\n     * @param group The group which has the unit.\r\n     * @return The reference to this instance.\r\n     */\r\n    Class.prototype.removeGroupUnit = function (unit, group) {\r\n        var lower = unit.toLowerCase();\r\n        if (this.groupMap[unit] === group) {\r\n            delete this.groupMap[unit];\r\n        }\r\n        if (this.groupMap[lower] === group) {\r\n            delete this.groupMap[lower];\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Determines the first group in this class which is a base group.\r\n     *\r\n     * @see [[Group.isBase]]\r\n     */\r\n    Class.prototype.getFirstBase = function () {\r\n        var groups = this.groups;\r\n        for (var i = 0; i < groups.length; i++) {\r\n            var group = groups[i];\r\n            if (group.isBase) {\r\n                return group;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    /**\r\n     * Updates the [[Group.classScale]] value in each group in this class so that\r\n     * there is a baseline for comparing one group to another no matter the base\r\n     * unit. For comparing in the same base, you can use [[Group.baseScale]].\r\n     *\r\n     * @return The reference to this instance.\r\n     */\r\n    Class.prototype.setClassScales = function () {\r\n        var groups = this.groups;\r\n        var first = this.getFirstBase();\r\n        if (first) {\r\n            for (var i = 0; i < groups.length; i++) {\r\n                var group = groups[i];\r\n                if (group.baseUnit === first.baseUnit) {\r\n                    group.classScale = group.baseScale;\r\n                }\r\n                else if (group.baseUnit in this.converters) {\r\n                    group.classScale = this.converters[group.baseUnit][first.baseUnit](group.baseScale);\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Sets the conversion function between the two base units.\r\n     *\r\n     * @param fromUnit The base unit to convert from.\r\n     * @param toUnit The base unit to convert to.\r\n     * @param converter The function to pass the value to convert.\r\n     * @return The reference to this instance.\r\n     */\r\n    Class.prototype.setBaseConversion = function (fromUnit, toUnit, converter) {\r\n        var converters = this.converters;\r\n        converters[fromUnit] = converters[fromUnit] || {};\r\n        converters[fromUnit][toUnit] = converter;\r\n        return this;\r\n    };\r\n    /**\r\n     * Determines which groups in this class are visible according to the given\r\n     * transform. The groups can be iterated in reverse and can optionally take\r\n     * a related group into consideration (when the system is GIVEN, we want to\r\n     * return the groups with the same system).\r\n     *\r\n     * @param transform The transform which decides what groups are visible.\r\n     * @param reverse If the groups of this class should be iterated in reverse.\r\n     * @param relatedGroup A related group which may be used for visibility if the\r\n     *  [[Transform.system]] is [[System.GIVEN]].\r\n     * @param callback A function to invoke with all visible groups found and the\r\n     *  index of that group in the set of visible groups. If `false` is returned\r\n     *  by the function iteration of visible groups ceases.\r\n     * @param callback.group The current visible group.\r\n     * @param callback.index The index of the current visible group.\r\n     * @see [[Transform.isVisibleGroup]]\r\n     */\r\n    Class.prototype.getVisibleGroups = function (transform, reverse, relatedGroup, callback) {\r\n        var groups = this.groups;\r\n        var matched = 0;\r\n        var start = reverse ? groups.length - 1 : 0;\r\n        var stop = reverse ? -1 : groups.length;\r\n        var increment = reverse ? -1 : 1;\r\n        for (var i = start; i !== stop; i += increment) {\r\n            var group = groups[i];\r\n            if (transform.isVisibleGroup(group, relatedGroup)) {\r\n                var result = callback(group, matched++);\r\n                if (result === false) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    /**\r\n     * Converts the given number from a given group to a given group. If the two\r\n     * groups are the same or one or both of the groups are not provided then the\r\n     * `value` provided is returned. If the two groups have differing base units\r\n     * the [[Class.converters]] map is used to convert the `value` over to the\r\n     * proper base. If the [[Class.converters]] map is missing a base conversion\r\n     * zero is returned. This might happen if a group is passed to this function\r\n     * which does not belong to this class OR if the user has impromperly setup\r\n     * their own classes.\r\n     *\r\n     * @param value The number to convert.\r\n     * @param from The group of the number to convert from.\r\n     * @param to The group to convert to.\r\n     * @return The converted number or zero if a base conversion could not be found.\r\n     */\r\n    Class.prototype.convert = function (value, from, to) {\r\n        if (from === to || !from || !to) {\r\n            return value;\r\n        }\r\n        var converted = value * from.baseScale;\r\n        if (from.baseUnit !== to.baseUnit) {\r\n            var map = this.converters[from.baseUnit];\r\n            if (!map || !map[to.baseUnit]) {\r\n                return 0;\r\n            }\r\n            var converter = map[to.baseUnit];\r\n            converted = converter(converted);\r\n        }\r\n        return converted / to.baseScale;\r\n    };\r\n    return Class;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Output.ts\n\r\n\r\n/**\r\n * The enumeration which decides what unit to use when converting to a string.\r\n */\r\nvar OutputUnit;\r\n(function (OutputUnit) {\r\n    /**\r\n     * This value will keep units from being displayed.\r\n     */\r\n    OutputUnit[OutputUnit[\"NONE\"] = 0] = \"NONE\";\r\n    /**\r\n     * This value will ensure the unit exactly as the user entered it is used in\r\n     * the output no matter whether the value's plurality matches the given\r\n     * unit's plurality.\r\n     *\r\n     * @see [[Value.unit]]\r\n     */\r\n    OutputUnit[OutputUnit[\"GIVEN\"] = 1] = \"GIVEN\";\r\n    /**\r\n     * This value will force the short versions of the unit to be used.\r\n     *\r\n     * @see [[Group.singularShort]]\r\n     * @see [[Group.pluralShort]]\r\n     */\r\n    OutputUnit[OutputUnit[\"SHORT\"] = 2] = \"SHORT\";\r\n    /**\r\n     * This value will force the long versions of the unit to be used.\r\n     *\r\n     * @see [[Group.singularLong]]\r\n     * @see [[Group.pluralLong]]\r\n     */\r\n    OutputUnit[OutputUnit[\"LONG\"] = 3] = \"LONG\";\r\n})(OutputUnit = OutputUnit || (OutputUnit = {}));\r\n/**\r\n * The enumeration which decides how a value will be converted to a string.\r\n */\r\nvar OutputFormat;\r\n(function (OutputFormat) {\r\n    /**\r\n     * The format of the user input will be used if possible.\r\n     */\r\n    OutputFormat[OutputFormat[\"GIVEN\"] = 0] = \"GIVEN\";\r\n    /**\r\n     * All values will be displayed using their decimal representation.\r\n     */\r\n    OutputFormat[OutputFormat[\"NUMBER\"] = 1] = \"NUMBER\";\r\n    /**\r\n     * All values will be displayed as a mixed fraction if the value is a fraction.\r\n     * A mixed fraction has a whole number followed by a fraction where the\r\n     * numerator is smaller than the denominator.\r\n     *\r\n     * @see [[Value.isFraction]]\r\n     */\r\n    OutputFormat[OutputFormat[\"MIXED\"] = 2] = \"MIXED\";\r\n    /**\r\n     * All values will be displayed as an improper fraction if the value is a\r\n     * fraction and the numerator is larger than the denoninator.\r\n     *\r\n     * @see [[Value.isFraction]]\r\n     */\r\n    OutputFormat[OutputFormat[\"IMPROPER\"] = 3] = \"IMPROPER\";\r\n})(OutputFormat = OutputFormat || (OutputFormat = {}));\r\n/**\r\n * The class which converts Unitz objects to strings.\r\n */\r\nvar Output_Output = (function () {\r\n    /**\r\n     * Creates a new instance of Output with an optional set of options to\r\n     * override the default values.\r\n     *\r\n     * @param input The options to apply to the new instance.\r\n     */\r\n    function Output(input) {\r\n        /**\r\n         * The option that specifies which units are chosen.\r\n         */\r\n        this.unit = OutputUnit.GIVEN;\r\n        /**\r\n         * The option that specifies how values are displayed.\r\n         */\r\n        this.format = OutputFormat.GIVEN;\r\n        /**\r\n         * Whether or not a unit should be displayed for the minimum and maximum of a\r\n         * range when they have the same group.\r\n         */\r\n        this.repeatUnit = false;\r\n        /**\r\n         * The spacing used between the value and the unit.\r\n         */\r\n        this.unitSpacer = '';\r\n        /**\r\n         * The spacing used between the minimum and maximum values in a range.\r\n         */\r\n        this.rangeSpacer = ' - ';\r\n        /**\r\n         * The spacing used to separate the numerator and denominator of a fraction.\r\n         */\r\n        this.fractionSpacer = '/';\r\n        /**\r\n         * The spacing used to seperate a mixed number from the fraction.\r\n         */\r\n        this.mixedSpacer = ' ';\r\n        /**\r\n         * The delimiter used to separate ranges.\r\n         */\r\n        this.delimiter = ', ';\r\n        /**\r\n         * An option used to restrict numbers from displaying large decimal numbers.\r\n         * When this value is set to -1 numbers are displayed fully. If the value is\r\n         * set to zero all numbers will be truncated to the whole version.\r\n         */\r\n        this.significant = -1;\r\n        if (Functions.isDefined(input)) {\r\n            this.set(input);\r\n        }\r\n    }\r\n    /**\r\n     * Overrides values in this instance with ones specified in input.\r\n     *\r\n     * @param input The values to override.\r\n     * @return The reference to this instance.\r\n     */\r\n    Output.prototype.set = function (input) {\r\n        this.unit = Functions.coalesce(input.unit, this.unit);\r\n        this.format = Functions.coalesce(input.format, this.format);\r\n        this.repeatUnit = Functions.coalesce(input.repeatUnit, this.repeatUnit);\r\n        this.unitSpacer = Functions.coalesce(input.unitSpacer, this.unitSpacer);\r\n        this.rangeSpacer = Functions.coalesce(input.rangeSpacer, this.rangeSpacer);\r\n        this.fractionSpacer = Functions.coalesce(input.fractionSpacer, this.fractionSpacer);\r\n        this.mixedSpacer = Functions.coalesce(input.mixedSpacer, this.mixedSpacer);\r\n        this.delimiter = Functions.coalesce(input.delimiter, this.delimiter);\r\n        this.significant = Functions.coalesce(input.significant, this.significant);\r\n        return this;\r\n    };\r\n    /**\r\n     * Returns an output instance which matches the desired options. If no options\r\n     * are specified the reference to this instance is returned. If the options\r\n     * are already an instance of Output its returned. If options are specified\r\n     * a new instance is created with the options of this instance, and the given\r\n     * options applied with [[Output.set]].\r\n     *\r\n     * @param input The options desired.\r\n     * @return An instance of this class which matches the desired options.\r\n     */\r\n    Output.prototype.extend = function (input) {\r\n        var extended = this;\r\n        if (Functions.isDefined(input)) {\r\n            if (input instanceof Output) {\r\n                extended = input;\r\n            }\r\n            else {\r\n                extended = new Output(this);\r\n                extended.set(input);\r\n            }\r\n        }\r\n        return extended;\r\n    };\r\n    /**\r\n     * Converts the list of ranges to a string. If a range is not valid it is\r\n     * skipped.\r\n     *\r\n     * @param ranges The list of ranges to convert.\r\n     * @return The string representation of the input.\r\n     */\r\n    Output.prototype.ranges = function (ranges) {\r\n        var out = '';\r\n        for (var i = 0; i < ranges.length; i++) {\r\n            var range = ranges[i];\r\n            if (range.isValid) {\r\n                if (out.length) {\r\n                    out += this.delimiter;\r\n                }\r\n                out += this.range(range);\r\n            }\r\n        }\r\n        return out;\r\n    };\r\n    /**\r\n     * Converts the range to a string.\r\n     *\r\n     * @param ranges The range to convert.\r\n     * @return The string representation of the input.\r\n     */\r\n    Output.prototype.range = function (range) {\r\n        var out = '';\r\n        if (!range.isValid) {\r\n            // nothing\r\n        }\r\n        else if (range.isFixed) {\r\n            out += this.value(range.min);\r\n        }\r\n        else {\r\n            var minUnit = this.repeatUnit || range.min.unit !== range.max.unit;\r\n            out += this.value(range.min, minUnit);\r\n            out += this.rangeSpacer;\r\n            out += this.value(range.max);\r\n        }\r\n        return out;\r\n    };\r\n    /**\r\n     * Converts the value to the string optionally showing or hiding the unit.\r\n     *\r\n     * @param value The value to convert.\r\n     * @param showUnit Whether or not the unit should be added to the string.\r\n     * @return The string representation of the input.\r\n     */\r\n    Output.prototype.value = function (value, showUnit) {\r\n        if (showUnit === void 0) { showUnit = true; }\r\n        var out = '';\r\n        if (!value.isValid) {\r\n        }\r\n        else if (this.isFraction(value)) {\r\n            if (this.isMixed(value)) {\r\n                out += value.mixedWhole;\r\n                out += this.mixedSpacer;\r\n                out += value.mixedNum;\r\n                out += this.fractionSpacer;\r\n                out += value.den;\r\n            }\r\n            else {\r\n                out += value.num;\r\n                out += this.fractionSpacer;\r\n                out += value.den;\r\n            }\r\n        }\r\n        else {\r\n            out += this.number(value.value);\r\n        }\r\n        if (showUnit && this.unit !== OutputUnit.NONE && value.isValid) {\r\n            var group = value.group;\r\n            out += this.unitSpacer;\r\n            if (this.isLongUnit(value)) {\r\n                out += Functions.isSingular(value.value) ? group.singularLong : group.pluralLong;\r\n            }\r\n            else if (this.isShortUnit(value) || (group && group.dynamic)) {\r\n                out += Functions.isSingular(value.value) ? group.singularShort : group.pluralShort;\r\n            }\r\n            else {\r\n                out += value.unit;\r\n            }\r\n        }\r\n        return out;\r\n    };\r\n    /**\r\n     * Converts the number to a string.\r\n     *\r\n     * @param x The number to convert.\r\n     * @return The string representation of the input.\r\n     */\r\n    Output.prototype.number = function (x) {\r\n        var valueString = x + '';\r\n        if (this.significant >= 0 && valueString !== '0') {\r\n            var valueSignificant = x\r\n                .toFixed(this.significant)\r\n                .replace(/0*$/, '')\r\n                .replace(/\\.$/, '');\r\n            return valueSignificant.length < valueString.length ? valueSignificant : valueString;\r\n        }\r\n        return valueString;\r\n    };\r\n    /**\r\n     * Determines whether the value should be displayed as a fraction.\r\n     *\r\n     * @param value The value to look at.\r\n     * @return True if the value should be displayed as a fraction, otherwise false.\r\n     */\r\n    Output.prototype.isFraction = function (value) {\r\n        return value.isFraction && this.format !== OutputFormat.NUMBER;\r\n    };\r\n    /**\r\n     * Determines whether the value should be displayed as a number.\r\n     *\r\n     * @param value The value to look at.\r\n     * @return True if the value should be displayed as a number, otherwise false.\r\n     */\r\n    Output.prototype.isNumber = function (value) {\r\n        return value.isValid && !this.isFraction(value);\r\n    };\r\n    /**\r\n     * Determines whether the value should be displayed as a mixed fraction. This\r\n     * assumes [[Output.isFraction]] was already checked and returned true.\r\n     *\r\n     * @param value The value to look at.\r\n     * @return True if the value should be displayed as a mixed fraction, otherwise false.\r\n     */\r\n    Output.prototype.isMixed = function (value) {\r\n        return value.mixedWhole !== 0 && this.format !== OutputFormat.IMPROPER;\r\n    };\r\n    /**\r\n     * Determines whether the short unit should be displayed.\r\n     *\r\n     * @param value The value to look at.\r\n     * @return True if the short unit should be displayed, otherwise false.\r\n     */\r\n    Output.prototype.isShortUnit = function (value) {\r\n        return value.group && this.unit === OutputUnit.SHORT;\r\n    };\r\n    /**\r\n     * Determines whether the long unit should be displayed.\r\n     *\r\n     * @param value The value to look at.\r\n     * @return True if the short unit should be displayed, otherwise false.\r\n     */\r\n    Output.prototype.isLongUnit = function (value) {\r\n        return value.group && this.unit === OutputUnit.LONG;\r\n    };\r\n    return Output;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Transform.ts\n\r\n\r\n\r\nvar Transform_Transform = (function () {\r\n    function Transform(input) {\r\n        this.common = true;\r\n        this.system = System.GIVEN;\r\n        this.min = -Number.MAX_VALUE;\r\n        this.max = Number.MAX_VALUE;\r\n        this.convertWithMax = true;\r\n        this.groupless = true;\r\n        if (Functions.isDefined(input)) {\r\n            this.set(input);\r\n        }\r\n    }\r\n    Transform.prototype.set = function (input) {\r\n        this.common = Functions.coalesce(input.common, this.common);\r\n        this.system = Functions.coalesce(input.system, this.system);\r\n        this.min = Functions.coalesce(input.min, this.min);\r\n        this.max = Functions.coalesce(input.max, this.max);\r\n        this.groupless = Functions.coalesce(input.groupless, this.groupless);\r\n        this.convertWithMax = Functions.coalesce(input.convertWithMax, this.convertWithMax);\r\n        this.onlyUnits = Functions.coalesce(input.onlyUnits, this.onlyUnits);\r\n        this.notUnits = Functions.coalesce(input.notUnits, this.notUnits);\r\n        this.onlyClasses = Functions.coalesce(input.onlyClasses, this.onlyClasses);\r\n        this.notClasses = Functions.coalesce(input.notClasses, this.notClasses);\r\n        return this;\r\n    };\r\n    Transform.prototype.extend = function (input) {\r\n        var extended = this;\r\n        if (Functions.isDefined(input)) {\r\n            if (input instanceof Transform) {\r\n                extended = input;\r\n            }\r\n            else {\r\n                extended = new Transform(this);\r\n                extended.set(input);\r\n            }\r\n        }\r\n        return extended;\r\n    };\r\n    Transform.prototype.isValidRange = function (range) {\r\n        var group = this.convertWithMax ? range.max.group : range.min.group;\r\n        if (range.max.value < this.min) {\r\n            return false;\r\n        }\r\n        if (range.min.value > this.max) {\r\n            return false;\r\n        }\r\n        return this.isVisibleGroup(group);\r\n    };\r\n    Transform.prototype.isVisibleGroup = function (group, givenGroup) {\r\n        if (!group) {\r\n            return this.groupless;\r\n        }\r\n        return this.isCommonMatch(group) &&\r\n            this.isSystemMatch(group, givenGroup) &&\r\n            this.isUnitMatch(group) &&\r\n            this.isClassMatch(group.parent);\r\n    };\r\n    Transform.prototype.isCommonMatch = function (group) {\r\n        return !this.common || group.common;\r\n    };\r\n    Transform.prototype.isSystemMatch = function (group, givenGroup) {\r\n        switch (this.system) {\r\n            case System.METRIC:\r\n                return group.system === System.METRIC || group.system === System.ANY;\r\n            case System.US:\r\n                return group.system === System.US || group.system === System.ANY;\r\n            case System.NONE:\r\n                return false;\r\n            case System.ANY:\r\n                return true;\r\n            case System.GIVEN:\r\n                return !givenGroup || group.baseUnit === givenGroup.baseUnit;\r\n        }\r\n        return false;\r\n    };\r\n    Transform.prototype.isClassMatch = function (parent) {\r\n        if (this.onlyClasses) {\r\n            return this.onlyClasses.indexOf(parent.name) !== -1;\r\n        }\r\n        if (this.notClasses) {\r\n            return this.notClasses.indexOf(parent.name) === -1;\r\n        }\r\n        return true;\r\n    };\r\n    Transform.prototype.isUnitMatch = function (group) {\r\n        if (this.onlyUnits) {\r\n            return this.onlyUnits.indexOf(group.unit) !== -1;\r\n        }\r\n        if (this.notUnits) {\r\n            return this.notUnits.indexOf(group.unit) === -1;\r\n        }\r\n        return true;\r\n    };\r\n    return Transform;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Sort.ts\n\r\n\r\nvar SortType;\r\n(function (SortType) {\r\n    SortType[SortType[\"MIN\"] = 0] = \"MIN\";\r\n    SortType[SortType[\"MAX\"] = 1] = \"MAX\";\r\n    SortType[SortType[\"AVERAGE\"] = 2] = \"AVERAGE\";\r\n})(SortType = SortType || (SortType = {}));\r\nvar Sort_Sort = (function () {\r\n    function Sort(input) {\r\n        this.ascending = false;\r\n        this.type = SortType.MAX;\r\n        this.classes = {};\r\n        if (Functions.isDefined(input)) {\r\n            this.set(input);\r\n        }\r\n    }\r\n    Sort.prototype.set = function (input) {\r\n        this.ascending = Functions.coalesce(input.ascending, this.ascending);\r\n        this.type = Functions.coalesce(input.type, this.type);\r\n        if (Functions.isDefined(input.classes)) {\r\n            for (var className in input.classes) {\r\n                this.classes[className] = input.classes[className];\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    Sort.prototype.extend = function (input) {\r\n        var extended = this;\r\n        if (Functions.isDefined(input)) {\r\n            if (input instanceof Sort) {\r\n                extended = input;\r\n            }\r\n            else {\r\n                extended = new Sort(this);\r\n                extended.set(input);\r\n            }\r\n        }\r\n        return extended;\r\n    };\r\n    Sort.prototype.getSorter = function () {\r\n        var _this = this;\r\n        return function (a, b) {\r\n            var d = _this.getClassComparison(a, b);\r\n            if (d === 0) {\r\n                switch (_this.type) {\r\n                    case SortType.MIN:\r\n                        d = _this.getMinComparison(a, b);\r\n                        break;\r\n                    case SortType.MAX:\r\n                        d = _this.getMaxComparison(a, b);\r\n                        break;\r\n                    case SortType.AVERAGE:\r\n                        d = _this.getAverageComparison(a, b);\r\n                        break;\r\n                }\r\n            }\r\n            return _this.ascending ? d : -d;\r\n        };\r\n    };\r\n    Sort.prototype.getMinComparison = function (a, b) {\r\n        return Functions.sign(a.min.classScaled - b.min.classScaled);\r\n    };\r\n    Sort.prototype.getMaxComparison = function (a, b) {\r\n        return Functions.sign(a.max.classScaled - b.max.classScaled);\r\n    };\r\n    Sort.prototype.getAverageComparison = function (a, b) {\r\n        var avg = (a.min.classScaled + a.max.classScaled) * 0.5;\r\n        var bvg = (b.min.classScaled + b.max.classScaled) * 0.5;\r\n        return Functions.sign(avg - bvg);\r\n    };\r\n    Sort.prototype.getClassComparison = function (a, b) {\r\n        var ag = a.min.group ? 1 : -1;\r\n        var bg = b.min.group ? 1 : -1;\r\n        if (ag !== bg) {\r\n            return ag - bg;\r\n        }\r\n        var ac = this.classes[a.min.group.parent.name] || 0;\r\n        var bc = this.classes[b.min.group.parent.name] || 0;\r\n        return ac - bc;\r\n    };\r\n    return Sort;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Core.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * The global class which keeps track of all unit mappings and global options.\r\n *\r\n * This class is also responsible for creating dynamic classes and groups based\r\n * on approximation when a desired unit is not defined by the developer.\r\n */\r\nvar Core_Core = (function () {\r\n    function Core() {\r\n    }\r\n    /**\r\n     * Returns a [[Group]] instance mapped by the given unit. If no unit is given\r\n     * `null` is returned. If the unit isn't mapped to a group a dynamic group\r\n     * match is looked at and if none are found and `createDynamic` is true a new\r\n     * dynamic group is created.\r\n     *\r\n     * @param unit The unit of the group to get.\r\n     * @param createDynamic If creating a dynamic group should be created if an\r\n     *  existing group could not be found.\r\n     * @return The group matched to the unit or null if none was found.\r\n     * @see [[Core.getDynamicMatch]]\r\n     * @see [[Core.addDynamicUnit]]\r\n     * @see [[Core.newDynamicGroup]]\r\n     */\r\n    Core.getGroup = function (unit, createDynamic) {\r\n        if (createDynamic === void 0) { createDynamic = true; }\r\n        if (!unit) {\r\n            return null;\r\n        }\r\n        var exactGroup = Core.unitToGroup[unit];\r\n        if (exactGroup) {\r\n            return exactGroup;\r\n        }\r\n        var normalizedUnit = unit.toLowerCase();\r\n        var normalizedGroup = Core.unitToGroup[normalizedUnit];\r\n        if (normalizedGroup) {\r\n            return normalizedGroup;\r\n        }\r\n        if (!createDynamic) {\r\n            return null;\r\n        }\r\n        var dynamicUnit = Core.getDynamicMatch(unit);\r\n        var dynamicGroup = Core.dynamicMatches[dynamicUnit];\r\n        if (dynamicGroup) {\r\n            return Core.addDynamicUnit(unit, dynamicGroup);\r\n        }\r\n        return Core.newDynamicGroup(unit);\r\n    };\r\n    /**\r\n     * Sets the given unit as the preferred unit for the group it belongs to. If a\r\n     * group is not found then this has no affect.\r\n     *\r\n     * @param unit The unit to mark as the preferred unit.\r\n     * @see [[Core.getGroup]]\r\n     */\r\n    Core.setPreferred = function (unit) {\r\n        var group = this.getGroup(unit, false);\r\n        if (group) {\r\n            group.setPreferred(unit);\r\n        }\r\n    };\r\n    /**\r\n     * Sets whether the group associated with the given unit is common. A common\r\n     * group is one a user is familiar with and would be okay seeing values\r\n     * represented in. If a group is not found then this has no affect.\r\n     *\r\n     * @param unit The unit of a group to set the common flag.\r\n     * @param common Whether the associated group should be common.\r\n     * @see [[Core.getGroup]]\r\n     */\r\n    Core.setCommon = function (unit, common) {\r\n        if (common === void 0) { common = true; }\r\n        var group = this.getGroup(unit, false);\r\n        if (group) {\r\n            group.setCommon(common);\r\n        }\r\n    };\r\n    /**\r\n     * Sets the denominators for the group associated to the given unit.\r\n     * Denominators are useful for calculating a fraction from a value.\r\n     *\r\n     * @param unit The unit of a group to set the denominators of.\r\n     * @param denominators The new denominators for the group.\r\n     * @see [[Core.getGroup]]\r\n     */\r\n    Core.setDenominators = function (unit, denominators) {\r\n        var group = this.getGroup(unit, false);\r\n        if (group) {\r\n            group.setDenominators(denominators);\r\n        }\r\n    };\r\n    /**\r\n     * Adds the given class and all groups and units to the global state. If there\r\n     * are units mapped to other groups they are overwritten by the units in the\r\n     * given class.\r\n     *\r\n     * @param parent The class to add to the global state.\r\n     */\r\n    Core.addClass = function (parent) {\r\n        this.classMap[parent.name] = parent;\r\n        this.classes.push(parent);\r\n        var groups = parent.groupMap;\r\n        for (var unit in groups) {\r\n            this.unitToGroup[unit] = groups[unit];\r\n        }\r\n    };\r\n    /**\r\n     * Adds an array of classes to the global state.\r\n     *\r\n     * @see [[Core.addClass]]\r\n     */\r\n    Core.addClasses = function () {\r\n        var classes = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            classes[_i] = arguments[_i];\r\n        }\r\n        for (var i = 0; i < classes.length; i++) {\r\n            this.addClass(classes[i]);\r\n        }\r\n    };\r\n    /**\r\n     * Adds the unit to the given dynamic group. This function also updates the\r\n     * plurality of all the units currently in the group.\r\n     *\r\n     * @param unit The unit to add to the given group.\r\n     * @param group The dynamically created group.\r\n     * @return The instance of the given group.\r\n     */\r\n    Core.addDynamicUnit = function (unit, group) {\r\n        group.units[unit] = Plurality.EITHER;\r\n        var unitCount = 0;\r\n        for (var groupUnit in group.units) {\r\n            if (groupUnit) {\r\n                unitCount++;\r\n            }\r\n        }\r\n        if (unitCount > 1) {\r\n            var longest = void 0;\r\n            for (var groupUnit in group.units) {\r\n                group.units[groupUnit] = Plurality.SINGULAR;\r\n                if (!longest || groupUnit.length > longest.length) {\r\n                    longest = groupUnit;\r\n                }\r\n            }\r\n            if (longest) {\r\n                group.units[longest] = Plurality.PLURAL;\r\n            }\r\n        }\r\n        group.updateUnits();\r\n        this.unitToGroup[unit] = group;\r\n        this.unitToGroup[unit.toLowerCase()] = group;\r\n        this.dynamicMatches[this.getDynamicMatch(unit)] = group;\r\n        return group;\r\n    };\r\n    /**\r\n     * Creates a dynamic class & group based on the given unit and adds it to the\r\n     * global state. By default the group is marked with [[System.ANY]], is\r\n     * common, and has the valid denominators 2, 3, 4, 5, 6, 8, 10.\r\n     *\r\n     * @param unit The initial unit of the group to use as the name of the class\r\n     *  and the base unit of the group.\r\n     * @return An instance of a new Group with a new parent Class.\r\n     */\r\n    Core.newDynamicGroup = function (unit) {\r\n        var parent = new Class_Class(unit);\r\n        var group = parent.addGroup({\r\n            system: System.ANY,\r\n            unit: unit,\r\n            common: true,\r\n            baseUnit: unit,\r\n            denominators: [2, 3, 4, 5, 6, 8, 10],\r\n            units: {}\r\n        });\r\n        group.setDynamic();\r\n        this.addDynamicUnit(unit, group);\r\n        this.dynamicGroups.push(group);\r\n        return group;\r\n    };\r\n    /**\r\n     * The function which takes a unit and generates a string which should be used\r\n     * to mark similarly spelled units under the same dynamic group.\r\n     *\r\n     * @param unit The unit to build a key from.\r\n     * @return The key which identifies the dynamic group.\r\n     */\r\n    Core.getDynamicMatch = function (unit) {\r\n        return unit.substring(0, this.dynamicMatchLength).toLowerCase();\r\n    };\r\n    /**\r\n     * The function which takes to values and determines which one is more\r\n     * \"normal\" or \"human friendly\".\r\n     *\r\n     * @param fromValue The most normal value found so far.\r\n     * @param toValue The value to compare to.\r\n     * @param transform The transformation rules to guide the function to choose\r\n     *  the more normal value.\r\n     * @param forOutput The output options to guide the function to choose the\r\n     *  more normal value.\r\n     * @return True if `toValue` appears more normal than `fromValue`.\r\n     */\r\n    // @ts-ignore\r\n    Core.isMoreNormal = function (fromValue, toValue, transform, forOutput) {\r\n        var fromString = forOutput.value(fromValue);\r\n        var toString = forOutput.value(toValue);\r\n        return toString.length <= fromString.length;\r\n    };\r\n    /**\r\n     * The map of defined classes by their name.\r\n     */\r\n    Core.classMap = {};\r\n    /**\r\n     * An array of the defined classes.\r\n     */\r\n    Core.classes = [];\r\n    /**\r\n     * A map of groups by their acceptable units.\r\n     */\r\n    Core.unitToGroup = {};\r\n    /**\r\n     * A list of dynamically created groups based on units specified by a user\r\n     * which are not defined by the developer.\r\n     */\r\n    Core.dynamicGroups = [];\r\n    /**\r\n     * A map of the dynamically created groups by a key determined by\r\n     * [[Core.getDynamicMatch]].\r\n     */\r\n    Core.dynamicMatches = {};\r\n    /**\r\n     * Dynamic groups are mapped together (by default) by looking at the first few\r\n     * characters.\r\n     *\r\n     * @see [[Core.getDynamicMatch]]\r\n     */\r\n    Core.dynamicMatchLength = 3;\r\n    /**\r\n     * The global options used for outputting [[Base]], [[Range]], and [[Value]]s\r\n     * which may be overridden by specifying any number of options.\r\n     *\r\n     * @see [[Base.output]]\r\n     * @see [[Range.output]]\r\n     * @see [[Value.output]]\r\n     */\r\n    Core.globalOutput = new Output_Output();\r\n    /**\r\n     * The global transform options used for transforming a [[Base]] instance\r\n     * by specifying what sort of units/groups are visible to the user.\r\n     *\r\n     * @see [[Base.normalize]]\r\n     * @see [[Base.compact]]\r\n     * @see [[Base.expand]]\r\n     * @see [[Base.conversions]]\r\n     * @see [[Base.filter]]\r\n     */\r\n    Core.globalTransform = new Transform_Transform();\r\n    /**\r\n     * The global sort options used for ordering ranges in a [[Base]] instance.\r\n     *\r\n     * @see [[Base.sort]]\r\n     */\r\n    Core.globalSort = new Sort_Sort();\r\n    return Core;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Value.ts\n\r\n\r\n\r\nvar Value_Value = (function () {\r\n    function Value(value, num, den, unit, group) {\r\n        var divisor = Functions.gcd(num, den);\r\n        this.value = value;\r\n        this.num = num / divisor;\r\n        this.den = den / divisor;\r\n        this.unit = unit;\r\n        this.group = group;\r\n    }\r\n    Object.defineProperty(Value.prototype, \"isValid\", {\r\n        get: function () {\r\n            return isFinite(this.value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"isFraction\", {\r\n        get: function () {\r\n            return this.den !== 1;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"isDecimal\", {\r\n        get: function () {\r\n            return this.den === 1;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"isZero\", {\r\n        get: function () {\r\n            return Functions.isZero(this.value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"isSingular\", {\r\n        get: function () {\r\n            return Functions.isSingular(this.value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"scaled\", {\r\n        get: function () {\r\n            return this.group ? this.value * this.group.baseScale : this.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"classScaled\", {\r\n        get: function () {\r\n            return this.group ? this.value * this.group.classScale : this.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"actual\", {\r\n        get: function () {\r\n            return this.num / this.den;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"mixedWhole\", {\r\n        get: function () {\r\n            return this.den !== 1 ? Math.floor(this.num / this.den) : 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"mixedNum\", {\r\n        get: function () {\r\n            return this.den !== 1 ? this.num % this.den : this.num;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"floor\", {\r\n        get: function () {\r\n            return Math.floor(this.value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"ceil\", {\r\n        get: function () {\r\n            return Math.ceil(this.value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"truncate\", {\r\n        get: function () {\r\n            return this.value < 0 ? this.ceil : this.floor;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"remainder\", {\r\n        get: function () {\r\n            return this.value - this.floor;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"error\", {\r\n        get: function () {\r\n            return this.actual - this.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"distance\", {\r\n        get: function () {\r\n            return Functions.abs(this.error);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Value.prototype.preferred = function () {\r\n        return this.group ? new Value(this.value, this.num, this.den, this.group.preferredUnit, this.group) : this;\r\n    };\r\n    Value.prototype.copy = function () {\r\n        return new Value(this.value, this.num, this.den, this.unit, this.group);\r\n    };\r\n    Value.prototype.zero = function () {\r\n        return new Value(0, 0, 1, this.unit, this.group);\r\n    };\r\n    Value.prototype.truncated = function () {\r\n        return new Value(this.truncate, this.truncate, 1, this.unit, this.group);\r\n    };\r\n    Value.prototype.fractioned = function () {\r\n        if (this.isFraction) {\r\n            return this;\r\n        }\r\n        if (this.group) {\r\n            return Value.fromNumberWithDenominators(this.value, this.group.denominators, this.unit, this.group);\r\n        }\r\n        return this;\r\n    };\r\n    Value.prototype.numbered = function () {\r\n        if (this.isFraction) {\r\n            return new Value(this.value, this.value, 1, this.unit, this.group);\r\n        }\r\n        return this;\r\n    };\r\n    Value.prototype.convertTo = function (to) {\r\n        var group = this.group;\r\n        return group ? group.parent.convert(this.value, group, to) : this.value;\r\n    };\r\n    Value.prototype.convertToValue = function (group) {\r\n        return Value.fromNumberForGroup(this.convertTo(group), group);\r\n    };\r\n    Value.prototype.conversions = function (transform, reverse, callback) {\r\n        var _this = this;\r\n        if (this.group) {\r\n            this.group.matches(transform, reverse, function (group, index) {\r\n                callback(_this.convertToValue(group), index);\r\n            });\r\n        }\r\n    };\r\n    Value.prototype.normalize = function (transform, forOutput) {\r\n        var closest;\r\n        this.conversions(transform, false, function (convert) {\r\n            var acceptable = !forOutput.isNumber(convert);\r\n            if (!acceptable) {\r\n                var number = forOutput.number(convert.value);\r\n                acceptable = number !== '0';\r\n            }\r\n            if (acceptable) {\r\n                if (!closest || Core_Core.isMoreNormal(closest, convert, transform, forOutput)) {\r\n                    closest = convert;\r\n                }\r\n            }\r\n        });\r\n        return closest || this;\r\n    };\r\n    Value.prototype.add = function (addend, scale) {\r\n        if (scale === void 0) { scale = 1; }\r\n        var num = this.num * addend.den + addend.num * this.den * scale;\r\n        var den = this.den * addend.den;\r\n        var result = this.value + addend.value * scale;\r\n        return new Value(result, num, den, this.unit, this.group);\r\n    };\r\n    Value.prototype.sub = function (subtrahend, scale) {\r\n        if (scale === void 0) { scale = 1; }\r\n        var num = this.num * subtrahend.den - subtrahend.num * this.den * scale;\r\n        var den = this.den * subtrahend.den;\r\n        var result = this.value - subtrahend.value * scale;\r\n        return new Value(result, num, den, this.unit, this.group);\r\n    };\r\n    Value.prototype.mul = function (scale) {\r\n        return new Value(this.value * scale, this.num * scale, this.den, this.unit, this.group);\r\n    };\r\n    /**\r\n     * Converts this range to a string with the given output options taking into\r\n     * account the global options.\r\n     *\r\n     * @param options The options to override the global output options.\r\n     * @return The string representation of this instance.\r\n     * @see [[Output]]\r\n     */\r\n    Value.prototype.output = function (options) {\r\n        var output = Core_Core.globalOutput.extend(options);\r\n        return output.value(this);\r\n    };\r\n    Value.fromNumber = function (value, unit, group) {\r\n        if (unit === void 0) { unit = ''; }\r\n        if (group === void 0) { group = null; }\r\n        return new Value(value, value, 1, unit, group);\r\n    };\r\n    Value.fromNumberWithRange = function (value, unit, group, minDen, maxDen) {\r\n        if (unit === void 0) { unit = ''; }\r\n        if (group === void 0) { group = null; }\r\n        if (minDen === void 0) { minDen = 1; }\r\n        if (maxDen === void 0) { maxDen = 100; }\r\n        var closestDenominator = 0;\r\n        var closestDistance = -1;\r\n        for (var i = minDen; i <= maxDen; i++) {\r\n            var den = i;\r\n            var num = Math.floor(den * value);\r\n            var actual = num / den;\r\n            var distance = Functions.abs(value - actual);\r\n            if (closestDistance === -1 || distance < closestDistance) {\r\n                closestDistance = distance;\r\n                closestDenominator = den;\r\n            }\r\n        }\r\n        if (closestDistance > Functions.EPSILON) {\r\n            return new Value(value, value, 1, unit, group);\r\n        }\r\n        if (closestDenominator === 0) {\r\n            closestDenominator = 1;\r\n        }\r\n        return new Value(value, Math.floor(value * closestDenominator), closestDenominator, unit, group);\r\n    };\r\n    Value.fromNumberForGroup = function (value, group) {\r\n        return this.fromNumberWithDenominators(value, group.denominators, group.preferredUnit, group);\r\n    };\r\n    Value.fromNumberWithDenominators = function (value, denominators, unit, group) {\r\n        if (unit === void 0) { unit = ''; }\r\n        if (group === void 0) { group = null; }\r\n        var closestDenominator = 0;\r\n        var closestDistance = -1;\r\n        for (var i = 0; i < denominators.length; i++) {\r\n            var den = denominators[i];\r\n            var num = Math.floor(den * value);\r\n            var actual = num / den;\r\n            var distance = Functions.abs(value - actual);\r\n            if (closestDistance === -1 || distance < closestDistance) {\r\n                closestDistance = distance;\r\n                closestDenominator = den;\r\n            }\r\n        }\r\n        if (closestDistance > Functions.EPSILON) {\r\n            return new Value(value, value, 1, unit, group);\r\n        }\r\n        if (closestDenominator === 0) {\r\n            closestDenominator = 1;\r\n        }\r\n        return new Value(value, Math.floor(value * closestDenominator), closestDenominator, unit, group);\r\n    };\r\n    Value.fromFraction = function (num, den, unit, group) {\r\n        if (unit === void 0) { unit = ''; }\r\n        if (group === void 0) { group = null; }\r\n        return new Value(num / den, num, den, unit, group);\r\n    };\r\n    Value.INVALID = new Value(Number.NaN, Number.NaN, 1, '', null);\r\n    return Value;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Range.ts\n\r\n\r\n\r\n/**\r\n * A pair of minimum and maximum values. A range can be fixed which means the\r\n * minimum and maximum are equivalent - in which case the range behaves like\r\n * a [[Value]].\r\n */\r\nvar Range_Range = (function () {\r\n    /**\r\n     * Creates a new instance of Range given the minimum and maximum values.\r\n     *\r\n     * @param min The minimum value for the range.\r\n     * @param max The maximum value for the range.\r\n     */\r\n    function Range(min, max) {\r\n        this.min = min.value < max.value ? min : max;\r\n        this.max = max.value > min.value ? max : min;\r\n    }\r\n    Object.defineProperty(Range.prototype, \"isValid\", {\r\n        /**\r\n         * True if the min and max are both valid.\r\n         */\r\n        get: function () {\r\n            return this.min.isValid && this.max.isValid;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"isFraction\", {\r\n        /**\r\n         * True if the min or max are a fraction.\r\n         */\r\n        get: function () {\r\n            return this.min.isFraction || this.max.isFraction;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"isDecimal\", {\r\n        /**\r\n         * True if the min and max are decimal.\r\n         */\r\n        get: function () {\r\n            return this.min.isDecimal && this.max.isDecimal;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"isRange\", {\r\n        /**\r\n         * True if the min and max are not the same value.\r\n         */\r\n        get: function () {\r\n            return this.min.value !== this.max.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"isFixed\", {\r\n        /**\r\n         * True if the min and max are the same value.\r\n         */\r\n        get: function () {\r\n            return this.min.value === this.max.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"isZero\", {\r\n        /**\r\n         * True if the min and max are both equal to zero.\r\n         */\r\n        get: function () {\r\n            return this.min.isZero && this.max.isZero;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"isSingular\", {\r\n        /**\r\n         * True if the min and max are both singular (1 or -1).\r\n         */\r\n        get: function () {\r\n            return this.min.isSingular && this.max.isSingular;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"average\", {\r\n        /**\r\n         * The average number between the min and max.\r\n         */\r\n        get: function () {\r\n            return (this.min.value + this.max.value) * 0.5;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"value\", {\r\n        /**\r\n         * The minimum value of this range.\r\n         */\r\n        get: function () {\r\n            return this.min.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"minimum\", {\r\n        /**\r\n         * The minimum value of this range.\r\n         */\r\n        get: function () {\r\n            return this.min.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"maximum\", {\r\n        /**\r\n         * The maximum value of this range.\r\n         */\r\n        get: function () {\r\n            return this.max.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"unit\", {\r\n        /**\r\n         * The unit which identifies the group of the minimum value or `null` if the\r\n         * minimum value does not have a group.\r\n         */\r\n        get: function () {\r\n            return this.min.group ? this.min.group.unit : null;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Determines if the given range matches this range enough to provide a\r\n     * mathematical operation between the two ranges.\r\n     *\r\n     * @param range The range to test.\r\n     * @return True if the groups of the given range match this range.\r\n     */\r\n    Range.prototype.isMatch = function (range) {\r\n        return this.min.group === range.min.group &&\r\n            this.max.group === range.max.group;\r\n    };\r\n    /**\r\n     * @return A range which has the min and max converted to their preferred units.\r\n     * @see [[Value.preferred]]\r\n     */\r\n    Range.prototype.preferred = function () {\r\n        var min = this.min.preferred();\r\n        var max = this.max.preferred();\r\n        return new Range(min, max);\r\n    };\r\n    Range.prototype.positive = function () {\r\n        var minNegative = this.min.value < 0;\r\n        var maxNegative = this.max.value < 0;\r\n        if (maxNegative) {\r\n            return null;\r\n        }\r\n        var min = minNegative ? this.min.zero() : this.min.copy();\r\n        var max = this.max.copy();\r\n        return new Range(min, max);\r\n    };\r\n    Range.prototype.negative = function () {\r\n        var minPositive = this.min.value >= 0;\r\n        var maxPositive = this.max.value >= 0;\r\n        if (minPositive) {\r\n            return null;\r\n        }\r\n        var min = this.min.copy();\r\n        var max = maxPositive ? this.max.zero() : this.max.copy();\r\n        return new Range(min, max);\r\n    };\r\n    Range.prototype.nonzero = function () {\r\n        var minZero = this.min.value === 0;\r\n        var maxZero = this.max.value === 0;\r\n        if (minZero && maxZero) {\r\n            return null;\r\n        }\r\n        var min = this.min.copy();\r\n        var max = this.max.copy();\r\n        return new Range(min, max);\r\n    };\r\n    Range.prototype.maxd = function () {\r\n        var fixed = this.max.copy();\r\n        return new Range(fixed, fixed);\r\n    };\r\n    Range.prototype.mind = function () {\r\n        var fixed = this.min.copy();\r\n        return new Range(fixed, fixed);\r\n    };\r\n    Range.prototype.normalize = function (transform, forOutput) {\r\n        var min = this.min.normalize(transform, forOutput);\r\n        var max = this.max.normalize(transform, forOutput);\r\n        return new Range(min, max);\r\n    };\r\n    Range.prototype.add = function (addend, scale) {\r\n        if (scale === void 0) { scale = 1; }\r\n        var min = this.min.add(addend.min, scale);\r\n        var max = this.max.add(addend.max, scale);\r\n        return new Range(min, max);\r\n    };\r\n    Range.prototype.sub = function (subtrahend, scale) {\r\n        if (scale === void 0) { scale = 1; }\r\n        var min = this.min.sub(subtrahend.min, scale);\r\n        var max = this.max.sub(subtrahend.max, scale);\r\n        return new Range(min, max);\r\n    };\r\n    Range.prototype.mul = function (scale) {\r\n        var min = this.min.mul(scale);\r\n        var max = this.max.mul(scale);\r\n        return new Range(min, max);\r\n    };\r\n    Range.prototype.fractioned = function () {\r\n        if (this.min.isFraction && this.max.isFraction) {\r\n            return this;\r\n        }\r\n        var min = this.min.fractioned();\r\n        var max = this.max.fractioned();\r\n        return new Range(min, max);\r\n    };\r\n    Range.prototype.numbered = function () {\r\n        if (!this.min.isFraction && !this.max.isFraction) {\r\n            return this;\r\n        }\r\n        var min = this.min.numbered();\r\n        var max = this.max.numbered();\r\n        return new Range(min, max);\r\n    };\r\n    /**\r\n     * Converts this range to a string with the given output options taking into\r\n     * account the global options.\r\n     *\r\n     * @param options The options to override the global output options.\r\n     * @return The string representation of this instance.\r\n     * @see [[Output]]\r\n     */\r\n    Range.prototype.output = function (options) {\r\n        var output = Core_Core.globalOutput.extend(options);\r\n        return output.range(this);\r\n    };\r\n    Range.fromFixed = function (fixed) {\r\n        return new Range(fixed, fixed);\r\n    };\r\n    /**\r\n     * A range instance which contains invalid values.\r\n     */\r\n    Range.INVALID = new Range(Value_Value.INVALID, Value_Value.INVALID);\r\n    return Range;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Base.ts\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Takes user input and returns a new instance of [Base].\r\n */\r\nfunction uz(input) {\r\n    return new Base_Base(input);\r\n}\r\n/**\r\n * The main class which contains a list of ranges and the user input.\r\n */\r\nvar Base_Base = (function () {\r\n    /**\r\n     * Creates a new instance of Base given some user input to parse or an\r\n     * existing list of ranges to use instead.\r\n     *\r\n     * @param input The input to parse if ranges is not provided.\r\n     * @param ranges The already parsed ranges to use for this instance.\r\n     */\r\n    function Base(input, ranges) {\r\n        this.input = input;\r\n        this.ranges = ranges || Parse_Parse.ranges(input, Core_Core.getGroup);\r\n    }\r\n    /**\r\n     * Scales the ranges in this instance by the given factor and returns a\r\n     * new instance.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('1c, 2.3m').scale(2); // '2c, 4.6m'\r\n     * ```\r\n     *\r\n     * @param amount The factor to scale the ranges in this instance by.\r\n     * @return A new instance.\r\n     * @see [[Range.mul]]\r\n     * @see [[Base.mutate]]\r\n     */\r\n    Base.prototype.scale = function (amount) {\r\n        return this.mutate(function (r) { return r.mul(amount); });\r\n    };\r\n    // 1c, 3m SCALE TO 1/2c = 1/2c, 1.5m\r\n    /**\r\n     * Scales the ranges in this instance up to some value with a unit and returns\r\n     * a new instance. Because this instance might contain ranges, a rangeDelta\r\n     * can be specified to instruct on which value (min or max) to use when\r\n     * calculating how much to scale by.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('1m, 2 - 3c').scaleTo('6c'); // '2m, 4 - 6c'\r\n     * uz('1m, 2 - 3c').scaleTo('6c', 0); // '3m, 6 - 9c'\r\n     * uz('1m, 2 - 3c').scaleTo('6c', 0.5); // '2.4m, 4.8 - 6c'\r\n     * ```\r\n     *\r\n     * @param unitValue A value & unit pair to scale the ranges in this instance to.\r\n     * @param rangeDelta When this instance contains ranges this value instructs\r\n     *  how the scale factor is calculated. A value of 0 means it looks at the\r\n     *  minimum, 1 is the maximum, and 0.5 is the average.\r\n     * @return A new instance.\r\n     * @see [[Base.getScaleTo]]\r\n     * @see [[Base.scale]]\r\n     */\r\n    Base.prototype.scaleTo = function (unitValue, rangeDelta) {\r\n        if (rangeDelta === void 0) { rangeDelta = 1.0; }\r\n        return this.scale(this.getScaleTo(unitValue, rangeDelta));\r\n    };\r\n    /**\r\n     * Changes the units used on each of the ranges in this instance to the\r\n     * preferred unit for each group.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('5 kilos').preferred(); // '5 kg'\r\n     * ```\r\n     *\r\n     * @return A new instance.\r\n     * @see [[Core.setPreferred]]\r\n     * @see [[Range.preferred]]\r\n     * @see [[Base.mutate]]\r\n     */\r\n    Base.prototype.preferred = function () {\r\n        return this.mutate(function (r) { return r.preferred(); });\r\n    };\r\n    /**\r\n     * Drops negative ranges and modifies partially negative ranges so that all\r\n     * values are greater than or equal to zero.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('0c, 2tbsp, -4tbsp').positive(); // '0c, 2tbsp'\r\n     * uz('-2 - 3 in').positive(); // '0 - 3in'\r\n     * ```\r\n     *\r\n     * @return A new instance.\r\n     * @see [[Range.positive]]\r\n     * @see [[Base.mutate]]\r\n     */\r\n    Base.prototype.positive = function () {\r\n        return this.mutate(function (r) { return r.positive(); });\r\n    };\r\n    /**\r\n     * Drops positive ranges and modifies partially positive ranges so that all\r\n     * values are less than zero.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('0c, 2tbsp, -4tbsp').negative(); // '-4tbsp'\r\n     * uz('-2 - 3 in').negative(); // '-2 - 0in'\r\n     * ```\r\n     *\r\n     * @return A new instance.\r\n     * @see [[Range.negative]]\r\n     * @see [[Base.mutate]]\r\n     */\r\n    Base.prototype.negative = function () {\r\n        return this.mutate(function (r) { return r.negative(); });\r\n    };\r\n    /**\r\n     * Drops ranges that are equal to zero.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('0c, 2tbsp').negative(); // '2tbsp'\r\n     * ```\r\n     *\r\n     * @return A new instance.\r\n     * @see [[Range.nonzero]]\r\n     * @see [[Base.mutate]]\r\n     */\r\n    Base.prototype.nonzero = function () {\r\n        return this.mutate(function (r) { return r.nonzero(); });\r\n    };\r\n    /**\r\n     * Converts each range to fractions if a denominator for the specified units\r\n     * yields a fraction close enough to the original value.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('1/2 cup').fractions(); // '1/2 cup'\r\n     * uz('0.3cm').fractions(); // '3/10 cm'\r\n     * uz('0.33 decades').fractions(); // '0.33 decades' closest is 3/10 but that's not close enough\r\n     * ```\r\n     *\r\n     * @return A new instance.\r\n     * @see [[Range.fractioned]]\r\n     * @see [[Base.mutate]]\r\n     */\r\n    Base.prototype.fractions = function () {\r\n        return this.mutate(function (r) { return r.fractioned(); });\r\n    };\r\n    /**\r\n     * Converts each range to numbers if they are fractions.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('1/2 cup').fractions(); // '0.5 cup'\r\n     * uz('0.3cm').fractions(); // '0.3 cm'\r\n     * ```\r\n     *\r\n     * @return A new instance.\r\n     * @see [[Range.numbered]]\r\n     * @see [[Base.mutate]]\r\n     */\r\n    Base.prototype.numbers = function () {\r\n        return this.mutate(function (r) { return r.numbered(); });\r\n    };\r\n    /**\r\n     * Flattens any ranges to their maximum values.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('1 - 3c, 5m').max(); // '3c, 5m'\r\n     * ```\r\n     *\r\n     * @return A new instance or this if this instance has no ranges.\r\n     * @see [[Range.maxd]]\r\n     * @see [[Base.mutate]]\r\n     */\r\n    Base.prototype.max = function () {\r\n        return this.hasRanges ? this.mutate(function (r) { return r.maxd(); }) : this;\r\n    };\r\n    /**\r\n     * Flattens any ranges to their minimum values.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('1 - 3c, 5m').max(); // '1c, 5m'\r\n     * ```\r\n     *\r\n     * @return A new instance or this if this instance has no ranges.\r\n     * @see [[Range.mind]]\r\n     * @see [[Base.mutate]]\r\n     */\r\n    Base.prototype.min = function () {\r\n        return this.hasRanges ? this.mutate(function (r) { return r.mind(); }) : this;\r\n    };\r\n    /**\r\n     * Converts each range to units that best represent the value.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('1.5pt, 12in, 3.14159rad').normalize(); // '3c, 1ft, 180deg'\r\n     * ```\r\n     *\r\n     * @param options Options to control which units and values are acceptable.\r\n     * @param forOutput The output options that should be used to determine which\r\n     *  value & unit is best.\r\n     * @return A new instance.\r\n     * @see [[Transform]]\r\n     * @see [[Output]]\r\n     * @see [[Core.isMoreNormal]]\r\n     * @see [[Core.globalTransform]]\r\n     * @see [[Core.globalOutput]]\r\n     * @see [[Range.normalize]]\r\n     * @see [[Base.mutate]]\r\n     */\r\n    Base.prototype.normalize = function (options, forOutput) {\r\n        var output = Core_Core.globalOutput.extend(forOutput);\r\n        var transform = Core_Core.globalTransform.extend(options);\r\n        return this.mutate(function (r) { return r.normalize(transform, output); });\r\n    };\r\n    /**\r\n     * Joins all ranges of the same classes together and uses the largest unit\r\n     * to represent the sum for the class.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('1c, 1pt').compact(); // '1.5pt'\r\n     * ```\r\n     *\r\n     * @param options Options to control which units and values are acceptable.\r\n     * @return A new instance.\r\n     * @see [[Transform]]\r\n     * @see [[Core.globalTransform]]\r\n     */\r\n    Base.prototype.compact = function (options) {\r\n        var compacted = [];\r\n        var transform = Core_Core.globalTransform.extend(options);\r\n        var _a = this.groupByClass(), classes = _a.classes, groupless = _a.groupless;\r\n        var _loop_1 = function (className) {\r\n            var entry = classes[className];\r\n            var ranges = entry.ranges;\r\n            var parent_1 = entry.parent;\r\n            var minGroupChosen = null;\r\n            var maxGroupChosen = null;\r\n            var minSum = 0;\r\n            var maxSum = 0;\r\n            // If the transformation options ignores this class, skip it.\r\n            if (!transform.isClassMatch(parent_1)) {\r\n                return \"continue\";\r\n            }\r\n            // Determine the smallest visible group we can use.\r\n            parent_1.getVisibleGroups(transform, false, null, function (group) {\r\n                minGroupChosen = maxGroupChosen = group;\r\n                return false;\r\n            });\r\n            // If we can't find one, then no groups are valid. Skip them.\r\n            if (!minGroupChosen) {\r\n                return \"continue\";\r\n            }\r\n            // For each range, sum up the minimums and maximums while also determining\r\n            // the largest min & max that should be used to represent the sums.\r\n            for (var i = 0; i < ranges.length; i++) {\r\n                var range = ranges[i];\r\n                var minGroup = range.min.group;\r\n                var maxGroup = range.max.group;\r\n                if (minGroup.classScale > minGroupChosen.classScale && transform.isVisibleGroup(minGroup)) {\r\n                    if (i !== 0) {\r\n                        minSum = parent_1.convert(minSum, minGroupChosen, minGroup);\r\n                    }\r\n                    minGroupChosen = minGroup;\r\n                }\r\n                if (maxGroup.classScale > maxGroupChosen.classScale && transform.isVisibleGroup(maxGroup)) {\r\n                    if (i !== 0) {\r\n                        maxSum = parent_1.convert(maxSum, maxGroupChosen, maxGroup);\r\n                    }\r\n                    maxGroupChosen = maxGroup;\r\n                }\r\n                minSum += range.min.convertTo(minGroupChosen);\r\n                maxSum += range.max.convertTo(maxGroupChosen);\r\n            }\r\n            var min = Value_Value.fromNumberForGroup(minSum, minGroupChosen);\r\n            var max = Value_Value.fromNumberForGroup(maxSum, maxGroupChosen);\r\n            compacted.push(new Range_Range(min, max));\r\n        };\r\n        for (var className in classes) {\r\n            _loop_1(className);\r\n        }\r\n        // If the transform options permit groupless results and there are ranges\r\n        // without groups - sum them all.\r\n        if (transform.groupless && groupless.length) {\r\n            var minSum = new Value_Value(0, 0, 1, '', null);\r\n            var maxSum = new Value_Value(0, 0, 1, '', null);\r\n            for (var i = 0; i < groupless.length; i++) {\r\n                minSum = minSum.add(groupless[i].min);\r\n                maxSum = maxSum.add(groupless[i].max);\r\n            }\r\n            compacted.push(new Range_Range(minSum, maxSum));\r\n        }\r\n        return new Base(this.input, compacted);\r\n    };\r\n    /**\r\n     * Joins all ranges of the same classes together and then separates them\r\n     * into whole number ranges for better readability.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('1.5pt').expand(); // '1pt, 1c'\r\n     * uz('53in').expand(); // '4ft, 5in'\r\n     * uz('2ft, 29in').expand(); // '4ft, 5in'\r\n     * uz('6543mm').expand(); // '6 m, 54 cm, 3 mm'\r\n     * ```\r\n     *\r\n     * @param options Options to control which units and values are acceptable.\r\n     * @return A new instance.\r\n     * @see [[Transform]]\r\n     * @see [[Core.globalTransform]]\r\n     */\r\n    Base.prototype.expand = function (options) {\r\n        var transform = Core_Core.globalTransform.extend(options);\r\n        var compacted = this.compact(transform);\r\n        var ranges = compacted.ranges;\r\n        var expanded = [];\r\n        var _loop_2 = function (i) {\r\n            var range = ranges[i];\r\n            var value = transform.convertWithMax ? range.max : range.min;\r\n            var valueGroup = value.group;\r\n            var valueSign = Functions.sign(value.value);\r\n            if (valueGroup) {\r\n                valueGroup.matches(transform, true, function (group) {\r\n                    if (!Functions.isZero(value.value)) {\r\n                        var transformed = value.convertToValue(group);\r\n                        if (group.isBase) {\r\n                            value = value.zero();\r\n                            expanded.push(Range_Range.fromFixed(transformed));\r\n                        }\r\n                        else if (Functions.abs(transformed.value) >= 1 && Functions.sign(transformed.value) === valueSign) {\r\n                            var truncated = transformed.truncated();\r\n                            value = value.sub(truncated.convertToValue(valueGroup));\r\n                            expanded.push(Range_Range.fromFixed(truncated));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                expanded.push(range);\r\n            }\r\n        };\r\n        for (var i = 0; i < ranges.length; i++) {\r\n            _loop_2(i);\r\n        }\r\n        return new Base(this.input, expanded);\r\n    };\r\n    /**\r\n     * Adds the ranges of this instance and the given input together. When the\r\n     * ranges use the same units they are added together, otherwise they are\r\n     * added to the end of the range list.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('1pt').add('2pt, 1c'); // '3pt, 1c'\r\n     * uz('1pt').add('2pt, 1c', 2); // '5pt, 2c'\r\n     * ```\r\n     *\r\n     * @param input An instance or input which can be parsed into an instance.\r\n     * @param scale A number to multiple the input by when adding it to this instance.\r\n     * @return A new instance.\r\n     * @see [[Base.operate]]\r\n     * @see [[Range.add]]\r\n     * @see [[Range.mul]]\r\n     */\r\n    Base.prototype.add = function (input, scale) {\r\n        if (scale === void 0) { scale = 1; }\r\n        return this.operate(input, function (a, b) { return a.add(b, scale); }, function (a) { return a.mul(scale); });\r\n    };\r\n    /**\r\n     * Subtracts the given input from the ranges of this instance. When the ranges\r\n     * use the same units they are subtracted, otherwise they are added to the\r\n     * end of the range list and negated.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('3pt').sub('2pt, 1c'); // '1pt, -1c'\r\n     * uz('1pt').add('2pt, 1c', 2); // '-3pt, -2c'\r\n     * ```\r\n     *\r\n     * @param input An instance or input which can be parsed into an instance.\r\n     * @param scale A number to multiple the input by when subtracting it from this instance.\r\n     * @return A new instance.\r\n     * @see [[Base.operate]]\r\n     * @see [[Range.sub]]\r\n     * @see [[Range.mul]]\r\n     */\r\n    Base.prototype.sub = function (input, scale) {\r\n        if (scale === void 0) { scale = 1; }\r\n        return this.operate(input, function (a, b) { return a.sub(b, scale); }, function (a) { return a.mul(-scale); });\r\n    };\r\n    /**\r\n     * Subtracts the given input from the ranges of this instance. When the ranges\r\n     * use the same units they are subtracted, otherwise they are added to the\r\n     * end of the range list and negated.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('3pt').sub('2pt, 1c'); // '1pt, -1c'\r\n     * uz('1pt').add('2pt, 1c', 2); // '-3pt, -2c'\r\n     * ```\r\n     *\r\n     * @param input An instance or input which can be parsed into an instance.\r\n     * @param operate A function to call when matching ranges are found and an\r\n     *  operation should be performed between them. The range returned by this\r\n     *  function ends up in the result.\r\n     * @param operate.a The first range to operate on.\r\n     * @param operate.b The second range to operate on.\r\n     * @param remainder A function to call on a range that did not have a match\r\n     *  in this instance where the range returned is added to the result.\r\n     * @param remainder.a The remaining range to operate on.\r\n     * @return A new instance.\r\n     * @see [[Range.isMatch]]\r\n     */\r\n    Base.prototype.operate = function (input, operate, remainder) {\r\n        var ranges = this.ranges;\r\n        var output = [];\r\n        var other = Parse_Parse.base(input);\r\n        var otherRanges = other.ranges;\r\n        var otherUsed = [];\r\n        for (var i = 0; i < ranges.length; i++) {\r\n            var range = ranges[i];\r\n            for (var k = 0; k < otherRanges.length; k++) {\r\n                if (!otherUsed[k]) {\r\n                    var otherRange = otherRanges[k];\r\n                    if (range.isMatch(otherRange)) {\r\n                        range = operate(range, otherRange);\r\n                        otherUsed[k] = true;\r\n                    }\r\n                }\r\n            }\r\n            output.push(range);\r\n        }\r\n        for (var k = 0; k < otherRanges.length; k++) {\r\n            if (!otherUsed[k]) {\r\n                output.push(remainder(otherRanges[k]));\r\n            }\r\n        }\r\n        return new Base(this.input, output);\r\n    };\r\n    /**\r\n     * Joins all ranges of the same classes together and then calculates all\r\n     * equivalent ranges for each range for each valid group according to the\r\n     * given options.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('1.5pt').conversions(); // '3/16gal, 3/4qt, 1 1/2pt, 3c, 24floz, 48tbsp, 144tsp'\r\n     * uz('20celsius, 45deg'); // '68F, 20celsius, 45deg, 0.785rad'\r\n     * ```\r\n     *\r\n     * @param options Options to control which units and values are acceptable.\r\n     * @return A new instance.\r\n     * @see [[Transform]]\r\n     * @see [[Core.globalTransform]]\r\n     * @see [[Value.conversions]]\r\n     */\r\n    Base.prototype.conversions = function (options) {\r\n        var transform = Core_Core.globalTransform.extend(options);\r\n        var compacted = this.compact(options);\r\n        var ranges = compacted.ranges;\r\n        var output = [];\r\n        var _loop_3 = function (i) {\r\n            var range = ranges[i];\r\n            var convert = transform.convertWithMax ? range.max : range.min;\r\n            convert.conversions(transform, false, function (transformed) {\r\n                var min = transform.convertWithMax ? range.min.convertToValue(transformed.group) : transformed;\r\n                var max = transform.convertWithMax ? transformed : range.max.convertToValue(transformed.group);\r\n                if (min.value <= transform.max && max.value >= transform.min) {\r\n                    output.push(new Range_Range(min, max));\r\n                }\r\n            });\r\n        };\r\n        for (var i = 0; i < ranges.length; i++) {\r\n            _loop_3(i);\r\n        }\r\n        return new Base(this.input, output);\r\n    };\r\n    /**\r\n     * Executes the given function on each range in this instance and if the\r\n     * function returns a valid range its added to the result.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('1.5pt').mutate(r => r.mul(2)); // '3pt'\r\n     * ```\r\n     *\r\n     * @param mutator The function which may return a range.\r\n     * @return A new instance.\r\n     */\r\n    Base.prototype.mutate = function (mutator) {\r\n        var ranges = [];\r\n        var source = this.ranges;\r\n        for (var i = 0; i < source.length; i++) {\r\n            var mutated = mutator(source[i]);\r\n            if (mutated && mutated.isValid) {\r\n                ranges.push(mutated);\r\n            }\r\n        }\r\n        return new Base(this.input, ranges);\r\n    };\r\n    /**\r\n     * Removes the ranges from this instance that aren't valid according to the\r\n     * transform options provided taking into account the global options.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('1in, 2m').filter({system: Unitz.System.METRIC}); // '2m'\r\n     * ```\r\n     *\r\n     * @param options Options to control which units and values are acceptable.\r\n     * @return A new instance.\r\n     * @see [[Transform]]\r\n     * @see [[Core.globalTransform]]\r\n     * @see [[Transform.isValidRange]]\r\n     */\r\n    Base.prototype.filter = function (options) {\r\n        var transform = Core_Core.globalTransform.extend(options);\r\n        var ranges = this.ranges;\r\n        var filtered = [];\r\n        for (var i = 0; i < ranges.length; i++) {\r\n            var range = ranges[i];\r\n            if (transform.isValidRange(range)) {\r\n                filtered.push(range);\r\n            }\r\n        }\r\n        return new Base(this.input, filtered);\r\n    };\r\n    /**\r\n     * Sorts the ranges in this instance based on the options provided taking into\r\n     * account the global options.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('1in, 3ft, 1.3yd, 1m').sort(); // 1.3yd, 1m, 3ft, 1in\r\n     * uz('1in, 3ft, 1.3yd, 1m').sort({ascending: true}); // 1in, 3ft, 1m, 1.3yd\r\n     * uz('1-3cups, 2-2.5cups, 4in').sort({\r\n     *  type: Unitz.SortType.MIN,\r\n     *  classes: {\r\n     *   Volume: 1,\r\n     *   Length: 2\r\n     *  }\r\n     * }); // 4in, 2 - 2.5cups, 1 - 3cups\r\n     * ```\r\n     *\r\n     * @param options Options to control how sorting is done.\r\n     * @return A new instance.\r\n     * @see [[Sort]]\r\n     * @see [[Core.globalSort]]\r\n     */\r\n    Base.prototype.sort = function (options) {\r\n        var sort = Core_Core.globalSort.extend(options);\r\n        var ranges = this.ranges.slice();\r\n        ranges.sort(sort.getSorter());\r\n        return new Base(this.input, ranges);\r\n    };\r\n    /**\r\n     * Returns the ranges in this instance grouped by their class. All groupless\r\n     * ranges are added to their own list.\r\n     */\r\n    Base.prototype.groupByClass = function () {\r\n        var ranges = this.ranges;\r\n        var classes = {};\r\n        var groupless = [];\r\n        for (var i = 0; i < ranges.length; i++) {\r\n            var range = ranges[i];\r\n            if (range.min.group) {\r\n                var parent_2 = range.min.group.parent;\r\n                var entry = classes[parent_2.name];\r\n                if (!entry) {\r\n                    entry = classes[parent_2.name] = {\r\n                        parent: parent_2,\r\n                        ranges: []\r\n                    };\r\n                }\r\n                entry.ranges.push(range);\r\n            }\r\n            else {\r\n                groupless.push(range);\r\n            }\r\n        }\r\n        return { classes: classes, groupless: groupless };\r\n    };\r\n    /**\r\n     * Calculates what this instance would need to be scaled by so that the given\r\n     * value & unit pair is equal to the sum of ranges in this instance of the\r\n     * same class. If there are no ranges with the same class then zero is\r\n     * returned. If the sum of ranges with the same class results in an actual\r\n     * range (where min != max) then you can specify how to pick a value from the\r\n     * range with rangeDetla. A value of 0 uses the min, 1 uses the max, and 0.5\r\n     * uses the average between them.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('1m, 2 - 3c').getScaleTo('6c'); // 2\r\n     * uz('1m, 2 - 3c').getScaleTo('6c', 0); // 3\r\n     * uz('1m, 2 - 3c').getScaleTo('6c', 0.5); // 2.4\r\n     * uz('1m, 2 - 3c').getScaleTo('45deg'); // 0\r\n     * ```\r\n  \n     * @param unitValue A value & unit pair to scale the ranges in this instance to.\r\n     * @param rangeDelta When this instance contains ranges this value instructs\r\n     *  how the scale factor is calculated. A value of 0 means it looks at the\r\n     *  minimum, 1 is the maximum, and 0.5 is the average.\r\n     * @return A value to scale by or zero if this instance cannot match the input.\r\n     * @see [[Base.convert]]\r\n     * @see [[Parse.value]]\r\n     */\r\n    Base.prototype.getScaleTo = function (unitValue, rangeDelta) {\r\n        if (rangeDelta === void 0) { rangeDelta = 1.0; }\r\n        var to = Parse_Parse.value(unitValue, Core_Core.getGroup);\r\n        if (!to.isValid) {\r\n            return 0;\r\n        }\r\n        var converted = this.convert(to.unit);\r\n        if (!converted || !converted.isValid) {\r\n            return 0;\r\n        }\r\n        var convertedValue = (converted.maximum - converted.minimum) * rangeDelta + converted.minimum;\r\n        var scale = to.value / convertedValue;\r\n        return scale;\r\n    };\r\n    /**\r\n     * Converts the ranges in this instance to a string with the given output\r\n     * options taking into account the global options.\r\n     *\r\n     * @param options The options to override the global output options.\r\n     * @return The string representation of this instance.\r\n     * @see [[Output]]\r\n     */\r\n    Base.prototype.output = function (options) {\r\n        var output = Core_Core.globalOutput.extend(options);\r\n        return output.ranges(this.ranges);\r\n    };\r\n    /**\r\n     * Converts the appropriate ranges in this instance into the desired unit\r\n     * and returns their converted sum. If the given unit does not map to a group\r\n     * then null is returned. If there are no ranges in this instance in the same\r\n     * class then the range returned is equivalent to zero.\r\n     *\r\n     * *For example:*\r\n     * ```javascript\r\n     * uz('1in, 1m, 1ft').convert('cm'); // '133.02 cm'\r\n     * ```\r\n     *\r\n     * @param unit The unit to calculate the sum of.\r\n     * @return A new range which is the sum of ranges in the same class converted\r\n     *  to the desired unit.\r\n     * @see [[Core.getGroup]]\r\n     * @see [[Range.isZero]]\r\n     */\r\n    Base.prototype.convert = function (unit) {\r\n        var group = Core_Core.getGroup(unit);\r\n        if (!group) {\r\n            return null;\r\n        }\r\n        var parent = group.parent;\r\n        var ranges = this.ranges;\r\n        var min = new Value_Value(0, 0, 1, unit, group);\r\n        var max = new Value_Value(0, 0, 1, unit, group);\r\n        for (var i = 0; i < ranges.length; i++) {\r\n            var range = ranges[i];\r\n            var rangeGroup = range.min.group;\r\n            if (rangeGroup && rangeGroup.parent === parent) {\r\n                min = min.add(range.min.convertToValue(group));\r\n                max = max.add(range.max.convertToValue(group));\r\n            }\r\n        }\r\n        return new Range_Range(min, max);\r\n    };\r\n    /**\r\n     * Iterates over each range in this instance in order or reversed and passes\r\n     * each one to the given iterate function. If the iterate function returns\r\n     * false the iteration will stop.\r\n     *\r\n     * @param iterate The function to invoke with each range and it's index.\r\n     * @param iterate.range The current range being iterated.\r\n     * @param iterate.index The index of the current range in this instance.\r\n     * @param reverse Whether the iteration should be done forward or backward.\r\n     * @return The reference to this instance.\r\n     */\r\n    Base.prototype.each = function (iterate, reverse) {\r\n        if (reverse === void 0) { reverse = false; }\r\n        var ranges = this.ranges;\r\n        var start = reverse ? ranges.length - 1 : 0;\r\n        var end = reverse ? -1 : ranges.length;\r\n        var move = reverse ? -1 : 1;\r\n        for (var i = start; i !== end; i += move) {\r\n            if (iterate(ranges[i], i) === false) {\r\n                break;\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    /**\r\n     * Returns an array of the classes represented in this instance. If there are\r\n     * no classes in this instance then an empty array is returned.\r\n     *\r\n     * @return An array of the classes in this instance.\r\n     */\r\n    Base.prototype.classes = function () {\r\n        var ranges = this.ranges;\r\n        var classMap = {};\r\n        var classes = [];\r\n        for (var i = 0; i < ranges.length; i++) {\r\n            var range = ranges[i];\r\n            var group = range.min.group;\r\n            if (group) {\r\n                classMap[group.parent.name] = group.parent;\r\n            }\r\n        }\r\n        for (var className in classMap) {\r\n            classes.push(classMap[className]);\r\n        }\r\n        return classes;\r\n    };\r\n    Object.defineProperty(Base.prototype, \"hasRanges\", {\r\n        /**\r\n         * Returns whether this instance has actual ranges. An actual range is where\r\n         * the minimum and maximum values differ.\r\n         *\r\n         * @see [[Range.isRange]]\r\n         */\r\n        get: function () {\r\n            var ranges = this.ranges;\r\n            for (var i = 0; i < ranges.length; i++) {\r\n                if (ranges[i].isRange) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Base.prototype, \"isValid\", {\r\n        /**\r\n         * Returns whether this instance only has valid ranges. If any of the ranges\r\n         * in this instance are not valid false is returned, otherwise true.\r\n         *\r\n         * @see [[Range.isValid]]\r\n         */\r\n        get: function () {\r\n            var ranges = this.ranges;\r\n            for (var i = 0; i < ranges.length; i++) {\r\n                if (!ranges[i].isValid) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Base;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Parse.ts\n\r\n\r\n\r\n\r\n\r\n/**\r\n * The class which takes user input and parses it to specific structures.\r\n */\r\nvar Parse_Parse = (function () {\r\n    function Parse() {\r\n    }\r\n    /**\r\n     * Parses user input into a [[Base]] instance.\r\n     *\r\n     * @param input The input to parse into a Base.\r\n     * @return The instance parsed from the input.\r\n     */\r\n    Parse.base = function (input) {\r\n        if (input instanceof Base_Base) {\r\n            return input;\r\n        }\r\n        return new Base_Base(input);\r\n    };\r\n    /**\r\n     * Parses user input into a an array of [[Range]]s.\r\n     *\r\n     * @param input The input to parse.\r\n     * @param groups A function which converts a unit to a [[Group]] instance.\r\n     * @return The instances parsed from the input.\r\n     */\r\n    Parse.ranges = function (input, groups) {\r\n        if (Functions.isArray(input)) {\r\n            return this.rangesFromArray(input, groups);\r\n        }\r\n        else if (Functions.isString(input)) {\r\n            return this.rangesFromString(input, groups);\r\n        }\r\n        else if (Functions.isRangeDefinition(input)) {\r\n            return this.rangesFromArray([input], groups);\r\n        }\r\n        else if (Functions.isValueDefinition(input)) {\r\n            return this.rangesFromArray([input], groups);\r\n        }\r\n        return [];\r\n    };\r\n    /**\r\n     * Parses user input into a an array of [[Range]]s.\r\n     *\r\n     * @param input The input to parse.\r\n     * @param groups A function which converts a unit to a [[Group]] instance.\r\n     * @return The instances parsed from the input.\r\n     */\r\n    Parse.rangesFromArray = function (input, groups) {\r\n        var ranges = [];\r\n        for (var i = 0; i < input.length; i++) {\r\n            var range = this.range(input[i], groups);\r\n            ranges.push(range);\r\n        }\r\n        return ranges;\r\n    };\r\n    /**\r\n     * Parses user input into a an array of [[Range]]s.\r\n     *\r\n     * @param input The input to parse.\r\n     * @param groups A function which converts a unit to a [[Group]] instance.\r\n     * @return The instances parsed from the input.\r\n     */\r\n    Parse.rangesFromString = function (input, groups) {\r\n        var ranges = input.split(this.REGEX_LIST);\r\n        return this.rangesFromArray(ranges, groups);\r\n    };\r\n    /**\r\n     * Parses user input into a [[Range]].\r\n     *\r\n     * @param input The input to parse.\r\n     * @param groups A function which converts a unit to a [[Group]] instance.\r\n     * @return The instance parsed from the input.\r\n     */\r\n    Parse.range = function (input, groups) {\r\n        if (Functions.isString(input)) {\r\n            return this.rangeFromString(input, groups);\r\n        }\r\n        else if (Functions.isRangeDefinition(input)) {\r\n            var range = input;\r\n            var min = this.value(range.min, groups);\r\n            var max = this.value(range.max, groups);\r\n            return new Range_Range(min, max);\r\n        }\r\n        return Range_Range.INVALID;\r\n    };\r\n    /**\r\n     * Parses user input into a [[Range]].\r\n     *\r\n     * @param input The input to parse.\r\n     * @param groups A function which converts a unit to a [[Group]] instance.\r\n     * @return The instance parsed from the input.\r\n     */\r\n    Parse.rangeFromString = function (input, groups) {\r\n        var matches = this.REGEX_RANGE.exec(input);\r\n        if (!matches) {\r\n            var fixed = this.valueFromString(input, groups);\r\n            return new Range_Range(fixed, fixed);\r\n        }\r\n        var minInput = matches[1];\r\n        var maxInput = matches[2];\r\n        var minParsed = this.input(minInput);\r\n        var maxParsed = this.input(maxInput);\r\n        if (!minParsed || !maxParsed) {\r\n            return Range_Range.INVALID;\r\n        }\r\n        var minUnit = minParsed.unit || maxParsed.unit;\r\n        var maxUnit = maxParsed.unit || minParsed.unit;\r\n        var min = this.valueFromResult(minParsed, minUnit, groups);\r\n        var max = this.valueFromResult(maxParsed, maxUnit, groups);\r\n        return new Range_Range(min, max);\r\n    };\r\n    /**\r\n     * Parses user input into a [[Value]].\r\n     *\r\n     * @param input The input to parse.\r\n     * @param groups A function which converts a unit to a [[Group]] instance.\r\n     * @return The instance parsed from the input.\r\n     */\r\n    Parse.value = function (input, groups) {\r\n        if (Functions.isString(input)) {\r\n            return this.valueFromString(input, groups);\r\n        }\r\n        else if (Functions.isValueDefinition(input)) {\r\n            return this.valueFromValue(input, groups);\r\n        }\r\n        return Value_Value.INVALID;\r\n    };\r\n    /**\r\n     * Parses user input into a [[Value]].\r\n     *\r\n     * @param input The input to parse.\r\n     * @param groups A function which converts a unit to a [[Group]] instance.\r\n     * @return The instance parsed from the input.\r\n     */\r\n    Parse.valueFromValue = function (input, groups) {\r\n        var givenValue = Functions.isDefined(input.value) ? input.value : 1;\r\n        var num = Functions.isDefined(input.num) ? input.num : givenValue;\r\n        var den = Functions.isDefined(input.den) ? input.den : 1;\r\n        var parsedValue = Functions.isDefined(input.value) ? input.value : num / den;\r\n        var unit = input.unit || '';\r\n        var group = groups(unit);\r\n        return new Value_Value(parsedValue, num, den, unit, group);\r\n    };\r\n    /**\r\n     * Parses user input into a [[Value]].\r\n     *\r\n     * @param input The input to parse.\r\n     * @param groups A function which converts a unit to a [[Group]] instance.\r\n     * @return The instance parsed from the input.\r\n     */\r\n    Parse.valueFromString = function (input, groups) {\r\n        var parsed = this.input(input);\r\n        return parsed ? this.valueFromResult(parsed, parsed.unit, groups) : Value_Value.INVALID;\r\n    };\r\n    /**\r\n     * Parses user input into a [[Value]].\r\n     *\r\n     * @param result The already parsed input.\r\n     * @param unit The unit parsed from the input.\r\n     * @param groups A function which converts a unit to a [[Group]] instance.\r\n     * @return The instance parsed from the input.\r\n     */\r\n    Parse.valueFromResult = function (result, unit, groups) {\r\n        var group = groups(unit);\r\n        return new Value_Value(result.value, result.valueNum, result.valueDen, unit, group);\r\n    };\r\n    /**\r\n     * Possible Values:\r\n     * 1tsp\r\n     * 1 tsp\r\n     * 1/2 tsp\r\n     * 1 1/2 tsp\r\n     * 1 - 2 tsp\r\n     * 1 tsp, 1 cup\r\n     * 2/3 - 1 c, 1 lb, 2.45 cats\r\n     */\r\n    /**\r\n     * Parses user input into a [[ParseResult]]. If the input is not valid null\r\n     * is returned.\r\n     *\r\n     * *Examples:*\r\n     * - 1tsp\r\n     * - 1 tsp\r\n     * - 1/2 tsp\r\n     * - 1 1/2 tsp\r\n     * - -2 cups\r\n     * - 2.35\"\r\n     *\r\n     * @param input The string to parse a value and unit from.\r\n     * @return The result of the parsing.\r\n     */\r\n    Parse.input = function (input) {\r\n        var matches = this.REGEX_PARSE.exec(input);\r\n        var whole = parseInt(matches[1]);\r\n        var hasWhole = isFinite(whole);\r\n        var sign = matches[1].charAt(0) === '-' ? -1 : 1;\r\n        var num = parseInt(matches[3]);\r\n        var den = parseInt(matches[5]);\r\n        var decimal = matches[6];\r\n        var hasDecimal = isFinite(parseFloat(decimal));\r\n        var unit = Functions.trim(matches[7]).replace(/\\.$/, '');\r\n        if (!hasWhole && hasDecimal) {\r\n            whole = 0;\r\n            hasWhole = true;\r\n        }\r\n        if (!hasWhole && !unit) {\r\n            return null;\r\n        }\r\n        var value = 1;\r\n        var valueDen = 1;\r\n        var valueNum = 1;\r\n        if (hasWhole) {\r\n            value = whole;\r\n            valueNum = whole;\r\n            if (isFinite(den)) {\r\n                valueDen = den;\r\n                if (isFinite(num)) {\r\n                    value += (num / den) * sign;\r\n                    valueNum *= den;\r\n                    valueNum += num;\r\n                }\r\n                else {\r\n                    value /= den;\r\n                }\r\n            }\r\n            else if (hasDecimal) {\r\n                var remainder = parseFloat('0.' + decimal);\r\n                value += remainder * sign;\r\n                valueNum += remainder;\r\n            }\r\n            valueNum *= sign;\r\n        }\r\n        return { value: value, valueNum: valueNum, valueDen: valueDen, num: num, den: den, unit: unit };\r\n    };\r\n    /**\r\n     * The regular expression used to split up a string into multiple ranges.\r\n     */\r\n    Parse.REGEX_LIST = /\\s*,\\s*/;\r\n    /**\r\n     * The regular expression used to split up a range string to determine the min\r\n     * and maximum values.\r\n     */\r\n    Parse.REGEX_RANGE = /\\s*(-?[^-]+)-(.+)/;\r\n    /**\r\n     * The regular expression used to parse a value number or fraction and\r\n     * possible unit from a string.\r\n     */\r\n    Parse.REGEX_PARSE = /^\\s*(-?\\d*)(\\s+(\\d+))?(\\s*\\/\\s*(\\d+)|\\.(\\d+)|)\\s*(.*)\\s*$/i;\r\n    return Parse;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/classes/Weight.ts\n\r\n\r\n\r\n\r\n/**\r\n * The Weight clas which contains the following groups.\r\n *\r\n * - milligram\r\n * - gram\r\n * - kilogram\r\n * - ounce\r\n * - pound\r\n * - ton\r\n */\r\nvar Weight = new Class_Class('Weight')\r\n    .setBaseConversion('mg', 'oz', function (x) { return x * 0.000035274; })\r\n    .setBaseConversion('oz', 'mg', function (x) { return x * 28349.5; })\r\n    .addGroups([\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'mg',\r\n        baseUnit: 'mg',\r\n        denominators: [2, 10],\r\n        units: {\r\n            'mg': Plurality.EITHER,\r\n            'milligram': Plurality.SINGULAR,\r\n            'milligrams': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'g',\r\n        relativeUnit: 'mg',\r\n        relativeScale: 1000,\r\n        denominators: [2, 10, 1000],\r\n        units: {\r\n            'g': Plurality.EITHER,\r\n            'gram': Plurality.SINGULAR,\r\n            'grams': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'kg',\r\n        relativeUnit: 'g',\r\n        relativeScale: 1000,\r\n        denominators: [2, 10, 1000],\r\n        units: {\r\n            'kg': Plurality.EITHER,\r\n            'kilo': Plurality.SINGULAR,\r\n            'kilos': Plurality.PLURAL,\r\n            'kilogram': Plurality.SINGULAR,\r\n            'kilograms': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.US,\r\n        common: true,\r\n        unit: 'oz',\r\n        baseUnit: 'oz',\r\n        denominators: [2, 3, 4, 16],\r\n        units: {\r\n            'oz': Plurality.EITHER,\r\n            'ounce': Plurality.SINGULAR,\r\n            'ounces': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.US,\r\n        common: true,\r\n        unit: 'lb',\r\n        relativeUnit: 'oz',\r\n        relativeScale: 16,\r\n        denominators: [2, 3, 4, 16],\r\n        units: {\r\n            'lb': Plurality.EITHER,\r\n            'lbs': Plurality.PLURAL,\r\n            'pound': Plurality.SINGULAR,\r\n            'pounds': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.US,\r\n        common: true,\r\n        unit: 'ton',\r\n        relativeUnit: 'lb',\r\n        relativeScale: 2000,\r\n        denominators: [2, 3, 4, 10],\r\n        units: {\r\n            'ton': Plurality.EITHER,\r\n            'tons': Plurality.PLURAL,\r\n            'tonnes': Plurality.PLURAL\r\n        }\r\n    }\r\n])\r\n    .setClassScales();\r\n\n// CONCATENATED MODULE: ./src/classes/Area.ts\n\r\n\r\n\r\n\r\n/**\r\n * The Area class which contains the following groups:\r\n *\r\n * - square inch\r\n * - square foot\r\n * - square yard\r\n * - acre\r\n * - square mile\r\n * - square millimeter\r\n * - square centimeter\r\n * - square meter\r\n * - square kilometer\r\n */\r\nvar Area = new Class_Class('Area')\r\n    .setBaseConversion('sqin', 'sqmm', function (x) { return x * 645.16; })\r\n    .setBaseConversion('sqmm', 'sqin', function (x) { return x * 0.00155; })\r\n    .addGroups([\r\n    {\r\n        system: System.US,\r\n        common: true,\r\n        unit: 'sqin',\r\n        baseUnit: 'sqin',\r\n        denominators: [2, 4, 8, 16],\r\n        units: {\r\n            'sqin': Plurality.EITHER,\r\n            'sq. in': Plurality.EITHER,\r\n            'sq in': Plurality.EITHER,\r\n            'in2': Plurality.EITHER,\r\n            'in^2': Plurality.EITHER,\r\n            'in\\xb2': Plurality.EITHER,\r\n            'inch2': Plurality.SINGULAR,\r\n            'inch^2': Plurality.SINGULAR,\r\n            'inch\\xb2': Plurality.SINGULAR,\r\n            'inches2': Plurality.PLURAL,\r\n            'inches^2': Plurality.PLURAL,\r\n            'inches\\xb2': Plurality.PLURAL,\r\n            'square in': Plurality.EITHER,\r\n            'square inch': Plurality.SINGULAR,\r\n            'square inches': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.US,\r\n        common: true,\r\n        unit: 'sqft',\r\n        relativeUnit: 'sqin',\r\n        relativeScale: 12 * 12,\r\n        denominators: [2, 4, 8, 16],\r\n        units: {\r\n            'sqft': Plurality.EITHER,\r\n            'sq. ft': Plurality.EITHER,\r\n            'sq ft': Plurality.EITHER,\r\n            'ft2': Plurality.EITHER,\r\n            'ft^2': Plurality.EITHER,\r\n            'ft\\xb2': Plurality.EITHER,\r\n            'foot2': Plurality.SINGULAR,\r\n            'foot^2': Plurality.SINGULAR,\r\n            'foot\\xb2': Plurality.SINGULAR,\r\n            'feet2': Plurality.PLURAL,\r\n            'feet^2': Plurality.PLURAL,\r\n            'feet\\xb2': Plurality.PLURAL,\r\n            'square ft': Plurality.EITHER,\r\n            'square foot': Plurality.SINGULAR,\r\n            'square feet': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.US,\r\n        unit: 'sqyd',\r\n        relativeUnit: 'sqft',\r\n        relativeScale: 3 * 3,\r\n        denominators: [2, 3, 4, 8, 9, 16],\r\n        units: {\r\n            'sqyd': Plurality.EITHER,\r\n            'sq. yd': Plurality.EITHER,\r\n            'sq yd': Plurality.EITHER,\r\n            'yd2': Plurality.EITHER,\r\n            'yd^2': Plurality.EITHER,\r\n            'yd\\xb2': Plurality.EITHER,\r\n            'yard2': Plurality.SINGULAR,\r\n            'yard^2': Plurality.SINGULAR,\r\n            'yard\\xb2': Plurality.SINGULAR,\r\n            'yards2': Plurality.PLURAL,\r\n            'yards^2': Plurality.PLURAL,\r\n            'yards\\xb2': Plurality.PLURAL,\r\n            'square yard': Plurality.SINGULAR,\r\n            'square yards': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.US,\r\n        common: true,\r\n        unit: 'acre',\r\n        relativeUnit: 'sqyd',\r\n        relativeScale: 4840,\r\n        denominators: [2, 3, 4, 8, 10],\r\n        units: {\r\n            'acre': Plurality.EITHER,\r\n            'acres': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.US,\r\n        common: true,\r\n        unit: 'sqmi',\r\n        relativeUnit: 'acre',\r\n        relativeScale: 640,\r\n        denominators: [2, 3, 4, 8, 10],\r\n        units: {\r\n            'sqmi': Plurality.EITHER,\r\n            'sq. mi': Plurality.EITHER,\r\n            'sq mi': Plurality.EITHER,\r\n            'mi2': Plurality.EITHER,\r\n            'mi^2': Plurality.EITHER,\r\n            'mi\\xb2': Plurality.EITHER,\r\n            'mile2': Plurality.SINGULAR,\r\n            'mile^2': Plurality.SINGULAR,\r\n            'mile\\xb2': Plurality.SINGULAR,\r\n            'miles2': Plurality.PLURAL,\r\n            'miles^2': Plurality.PLURAL,\r\n            'miles\\xb2': Plurality.PLURAL,\r\n            'square mi': Plurality.EITHER,\r\n            'square mile': Plurality.SINGULAR,\r\n            'square miles': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'sqmm',\r\n        baseUnit: 'sqmm',\r\n        denominators: [2, 4, 8, 16],\r\n        units: {\r\n            'sqmm': Plurality.EITHER,\r\n            'sq. mm': Plurality.EITHER,\r\n            'sq mm': Plurality.EITHER,\r\n            'mm2': Plurality.EITHER,\r\n            'mm^2': Plurality.EITHER,\r\n            'mm\\xb2': Plurality.EITHER,\r\n            'millimeter2': Plurality.SINGULAR,\r\n            'millimeter^2': Plurality.SINGULAR,\r\n            'millimeter\\xb2': Plurality.SINGULAR,\r\n            'millimeters2': Plurality.PLURAL,\r\n            'millimeters^2': Plurality.PLURAL,\r\n            'millimeters\\xb2': Plurality.PLURAL,\r\n            'square mm': Plurality.EITHER,\r\n            'square millimeter': Plurality.SINGULAR,\r\n            'square millimeters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'sqcm',\r\n        relativeUnit: 'sqmm',\r\n        relativeScale: 100,\r\n        denominators: [2, 4, 8, 16],\r\n        units: {\r\n            'sqcm': Plurality.EITHER,\r\n            'sq. cm': Plurality.EITHER,\r\n            'sq cm': Plurality.EITHER,\r\n            'cm2': Plurality.EITHER,\r\n            'cm^2': Plurality.EITHER,\r\n            'cm\\xb2': Plurality.EITHER,\r\n            'centimeter2': Plurality.SINGULAR,\r\n            'centimeter^2': Plurality.SINGULAR,\r\n            'centimeter\\xb2': Plurality.SINGULAR,\r\n            'centimeters2': Plurality.PLURAL,\r\n            'centimeters^2': Plurality.PLURAL,\r\n            'centimeters\\xb2': Plurality.PLURAL,\r\n            'square cm': Plurality.EITHER,\r\n            'square centimeter': Plurality.SINGULAR,\r\n            'square centimeters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'sqm',\r\n        relativeUnit: 'sqcm',\r\n        relativeScale: 10000,\r\n        denominators: [2, 4, 8, 16],\r\n        units: {\r\n            'sqm': Plurality.EITHER,\r\n            'sq. m': Plurality.EITHER,\r\n            'sq m': Plurality.EITHER,\r\n            'm2': Plurality.EITHER,\r\n            'm^2': Plurality.EITHER,\r\n            'm\\xb2': Plurality.EITHER,\r\n            'meter2': Plurality.SINGULAR,\r\n            'meter^2': Plurality.SINGULAR,\r\n            'meter\\xb2': Plurality.SINGULAR,\r\n            'meters2': Plurality.PLURAL,\r\n            'meters^2': Plurality.PLURAL,\r\n            'meters\\xb2': Plurality.PLURAL,\r\n            'square m': Plurality.EITHER,\r\n            'square meter': Plurality.SINGULAR,\r\n            'square meters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'sqkm',\r\n        relativeUnit: 'sqm',\r\n        relativeScale: 1000000,\r\n        denominators: [2, 4, 8, 16],\r\n        units: {\r\n            'sqkm': Plurality.EITHER,\r\n            'sq. km': Plurality.EITHER,\r\n            'sq km': Plurality.EITHER,\r\n            'km2': Plurality.EITHER,\r\n            'km^2': Plurality.EITHER,\r\n            'km\\xb2': Plurality.EITHER,\r\n            'kilometer2': Plurality.SINGULAR,\r\n            'kilometer^2': Plurality.SINGULAR,\r\n            'kilometer\\xb2': Plurality.SINGULAR,\r\n            'kilometers2': Plurality.PLURAL,\r\n            'kilometers^2': Plurality.PLURAL,\r\n            'kilometers\\xb2': Plurality.PLURAL,\r\n            'square km': Plurality.EITHER,\r\n            'square kilometer': Plurality.SINGULAR,\r\n            'square kilometers': Plurality.PLURAL\r\n        }\r\n    }\r\n])\r\n    .setClassScales();\r\n\n// CONCATENATED MODULE: ./src/classes/Time.ts\n\r\n\r\n\r\n\r\n/**\r\n * The Time class which contains the following groups.\r\n *\r\n * - nanosecond\r\n * - microsecond\r\n * - millisecond\r\n * - second\r\n * - hour\r\n * - day\r\n * - week\r\n * - year\r\n * - score\r\n * - decade\r\n * - centry\r\n * - millennium\r\n */\r\nvar Time = new Class_Class('Time')\r\n    .addGroups([\r\n    {\r\n        system: System.ANY,\r\n        unit: 'ns',\r\n        baseUnit: 'ns',\r\n        denominators: [10, 100],\r\n        units: {\r\n            'ns': Plurality.EITHER,\r\n            'nanosecond': Plurality.SINGULAR,\r\n            'nanoseconds': Plurality.PLURAL,\r\n            'nano': Plurality.SINGULAR,\r\n            'nanos': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        unit: 'us',\r\n        relativeUnit: 'ns',\r\n        relativeScale: 1000,\r\n        denominators: [10, 100, 1000],\r\n        units: {\r\n            'us': Plurality.EITHER,\r\n            'microsecond': Plurality.SINGULAR,\r\n            'microseconds': Plurality.PLURAL,\r\n            'micro': Plurality.SINGULAR,\r\n            'micros': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'ms',\r\n        relativeUnit: 'us',\r\n        relativeScale: 1000,\r\n        denominators: [10, 100, 1000],\r\n        units: {\r\n            'ms': Plurality.EITHER,\r\n            'millisecond': Plurality.SINGULAR,\r\n            'milliseconds': Plurality.PLURAL,\r\n            'milli': Plurality.SINGULAR,\r\n            'millis': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 's',\r\n        relativeUnit: 'ms',\r\n        relativeScale: 1000,\r\n        denominators: [10, 100, 1000],\r\n        units: {\r\n            's': Plurality.EITHER,\r\n            'second': Plurality.SINGULAR,\r\n            'seconds': Plurality.PLURAL,\r\n            'sec': Plurality.SINGULAR,\r\n            'secs': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'min',\r\n        relativeUnit: 's',\r\n        relativeScale: 60,\r\n        denominators: [2, 3, 4, 60],\r\n        units: {\r\n            'min': Plurality.EITHER,\r\n            'minute': Plurality.SINGULAR,\r\n            'minutes': Plurality.PLURAL,\r\n            'mins': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'hr',\r\n        relativeUnit: 'min',\r\n        relativeScale: 60,\r\n        denominators: [2, 3, 4, 60],\r\n        units: {\r\n            'hr': Plurality.EITHER,\r\n            'hour': Plurality.SINGULAR,\r\n            'hours': Plurality.PLURAL,\r\n            'hrs': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'day',\r\n        relativeUnit: 'hr',\r\n        relativeScale: 24,\r\n        denominators: [2, 3, 4, 6, 24],\r\n        units: {\r\n            'day': Plurality.EITHER,\r\n            'days': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'wk',\r\n        relativeUnit: 'day',\r\n        relativeScale: 7,\r\n        denominators: [7],\r\n        units: {\r\n            'wk': Plurality.EITHER,\r\n            'week': Plurality.SINGULAR,\r\n            'weeks': Plurality.PLURAL,\r\n            'wks': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'yr',\r\n        relativeUnit: 'day',\r\n        relativeScale: 365.2425,\r\n        denominators: [2, 3, 4, 6, 12, 52],\r\n        units: {\r\n            'yr': Plurality.EITHER,\r\n            'year': Plurality.SINGULAR,\r\n            'years': Plurality.PLURAL,\r\n            'yrs': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'score',\r\n        relativeUnit: 'yr',\r\n        relativeScale: 20,\r\n        denominators: [20],\r\n        units: {\r\n            'score': Plurality.EITHER\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'decade',\r\n        relativeUnit: 'yr',\r\n        relativeScale: 10,\r\n        denominators: [10],\r\n        units: {\r\n            'decade': Plurality.EITHER,\r\n            'decades': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        unit: 'biennium',\r\n        relativeUnit: 'yr',\r\n        relativeScale: 2,\r\n        denominators: [],\r\n        units: {\r\n            'biennium': Plurality.EITHER,\r\n            'bienniums': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        unit: 'triennium',\r\n        relativeUnit: 'yr',\r\n        relativeScale: 3,\r\n        denominators: [],\r\n        units: {\r\n            'triennium': Plurality.EITHER,\r\n            'trienniums': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        unit: 'quadrennium',\r\n        relativeUnit: 'yr',\r\n        relativeScale: 4,\r\n        denominators: [],\r\n        units: {\r\n            'quadrennium': Plurality.EITHER,\r\n            'quadrenniums': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        unit: 'lustrum',\r\n        relativeUnit: 'yr',\r\n        relativeScale: 5,\r\n        denominators: [],\r\n        units: {\r\n            'lustrum': Plurality.EITHER,\r\n            'lustrums': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'decade',\r\n        relativeUnit: 'yr',\r\n        relativeScale: 10,\r\n        denominators: [2, 10],\r\n        units: {\r\n            'decade': Plurality.EITHER,\r\n            'decades': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'century',\r\n        relativeUnit: 'yr',\r\n        relativeScale: 100,\r\n        denominators: [2, 10],\r\n        units: {\r\n            'century': Plurality.EITHER,\r\n            'centurys': Plurality.PLURAL,\r\n            'centuries': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'millennium',\r\n        relativeUnit: 'yr',\r\n        relativeScale: 1000,\r\n        denominators: [2, 3, 4],\r\n        units: {\r\n            'millennium': Plurality.EITHER,\r\n            'millenniums': Plurality.PLURAL,\r\n            'millennia': Plurality.PLURAL,\r\n            'millennias': Plurality.PLURAL\r\n        }\r\n    }\r\n])\r\n    .setClassScales();\r\n\n// CONCATENATED MODULE: ./src/classes/Digital.ts\n\r\n\r\n\r\n\r\n/**\r\n * The Digital class which contains the following groups:\r\n *\r\n * - bit\r\n * - nibble\r\n * - byte\r\n * - kilo/mego/giga/tera/peta/exa/zetta/yotta byte\r\n * - kibi/mebi/gibi/tebi/pebi/exbi/zebi/yobi byte\r\n * - kilo/mego/giga/tera/peta/exa/zetta/yotta bit\r\n * - ki/mi/gi/ti/pi/ez/zi/yi bit\r\n */\r\nvar Digital = new Class_Class('Digital')\r\n    .addGroups([\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'b',\r\n        baseUnit: 'b',\r\n        denominators: [],\r\n        units: {\r\n            'b': Plurality.EITHER,\r\n            'bit': Plurality.SINGULAR,\r\n            'bits': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        unit: 'nibble',\r\n        relativeUnit: 'b',\r\n        relativeScale: 4,\r\n        denominators: [],\r\n        units: {\r\n            'nibble': Plurality.EITHER,\r\n            'nibbles': Plurality.PLURAL,\r\n            'nybble': Plurality.EITHER,\r\n            'nyble': Plurality.EITHER,\r\n            'half-byte': Plurality.EITHER,\r\n            'half byte': Plurality.EITHER,\r\n            'tetrade': Plurality.EITHER,\r\n            'semi-octet': Plurality.EITHER,\r\n            'quadbit': Plurality.EITHER,\r\n            'quartet': Plurality.EITHER\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'B',\r\n        relativeUnit: 'b',\r\n        relativeScale: 8,\r\n        denominators: [2, 8],\r\n        units: {\r\n            'B': Plurality.EITHER,\r\n            'byte': Plurality.SINGULAR,\r\n            'bytes': Plurality.PLURAL\r\n        }\r\n    }\r\n]);\r\naddDigitalUnits(Digital, 'B', 1000, [2, 4, 5, 10], 'byte', 'bytes', [\r\n    ['kB', 'kilo'],\r\n    ['mB', 'mega'],\r\n    ['gB', 'giga'],\r\n    ['tB', 'tera'],\r\n    ['pB', 'peta'],\r\n    ['eB', 'exa'],\r\n    ['zB', 'zetta'],\r\n    ['yB', 'yotta']\r\n]);\r\naddDigitalUnits(Digital, 'B', 1024, [2, 4, 8, 16], 'byte', 'bytes', [\r\n    ['KB', 'kibi'],\r\n    ['MB', 'mebi'],\r\n    ['GB', 'gibi'],\r\n    ['TB', 'tebi'],\r\n    ['PB', 'pebi'],\r\n    ['EB', 'exbi'],\r\n    ['ZB', 'zebi'],\r\n    ['YB', 'yobi']\r\n]);\r\naddDigitalUnits(Digital, 'b', 1000, [2, 4, 5, 10], 'bit', 'bits', [\r\n    ['kb', 'kilo', 'kbit'],\r\n    ['mb', 'mega', 'mbit'],\r\n    ['gb', 'giga', 'gbit'],\r\n    ['tb', 'tera', 'tbit'],\r\n    ['pb', 'peta', 'pbit'],\r\n    ['eb', 'exa', 'ebit'],\r\n    ['zb', 'zetta', 'zbit'],\r\n    ['yb', 'yotta', 'ybit']\r\n]);\r\naddDigitalUnits(Digital, 'b', 1024, [2, 4, 8, 16], 'bit', 'bits', [\r\n    ['kibit', 'kibi'],\r\n    ['mibit', 'mebi'],\r\n    ['gibit', 'gibi'],\r\n    ['tibit', 'tebi'],\r\n    ['pibit', 'pebi'],\r\n    ['eibit', 'exbi'],\r\n    ['zibit', 'zebi'],\r\n    ['yibit', 'yobi']\r\n]);\r\nDigital.setClassScales();\r\nfunction addDigitalUnits(parent, relativeTo, relativeScales, denominators, suffixSingular, suffixPlural, unitAndPrefixes) {\r\n    for (var i = 0; i < unitAndPrefixes.length; i++) {\r\n        var _a = unitAndPrefixes[i], unit = _a[0], prefix = _a[1], extra = _a[2];\r\n        var units = {};\r\n        units[unit] = Plurality.EITHER;\r\n        units[prefix + suffixSingular] = Plurality.SINGULAR;\r\n        units[prefix + suffixPlural] = Plurality.PLURAL;\r\n        if (extra) {\r\n            units[extra] = Plurality.EITHER;\r\n        }\r\n        parent.addGroup({\r\n            system: System.ANY,\r\n            common: true,\r\n            unit: unit,\r\n            relativeUnit: relativeTo,\r\n            relativeScale: relativeScales,\r\n            denominators: denominators,\r\n            units: units\r\n        });\r\n        relativeTo = unit;\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/classes/Temperature.ts\n\r\n\r\n\r\n\r\nvar _C_ = '\\xb0C';\r\n/**\r\n * The Temperature class which contains the following groups.\r\n *\r\n * - celsius\r\n * - kelvin\r\n * - fahrenheit\r\n */\r\nvar Temperature = new Class_Class('Temperature')\r\n    .setBaseConversion('F', _C_, function (x) { return ((x - 32) * 5 / 9); })\r\n    .setBaseConversion('F', 'K', function (x) { return ((x + 459.67) * 5 / 9); })\r\n    .setBaseConversion(_C_, 'F', function (x) { return ((x * 9 / 5) + 32); })\r\n    .setBaseConversion(_C_, 'K', function (x) { return (x + 273.15); })\r\n    .setBaseConversion('K', _C_, function (x) { return (x - 273.15); })\r\n    .setBaseConversion('K', 'F', function (x) { return ((x * 9 / 5) - 459.67); })\r\n    .addGroups([\r\n    {\r\n        system: System.US,\r\n        common: true,\r\n        unit: 'F',\r\n        baseUnit: 'F',\r\n        denominators: [],\r\n        units: {\r\n            'F': Plurality.EITHER,\r\n            '\\xb0F': Plurality.EITHER,\r\n            'Fahrenheit': Plurality.EITHER\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: _C_,\r\n        baseUnit: _C_,\r\n        denominators: [],\r\n        units: {\r\n            '\\xb0C': Plurality.EITHER,\r\n            'Celsius': Plurality.EITHER\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        unit: 'K',\r\n        baseUnit: 'K',\r\n        denominators: [],\r\n        units: {\r\n            'K': Plurality.EITHER,\r\n            'kelvin': Plurality.SINGULAR,\r\n            'kelvins': Plurality.PLURAL\r\n        }\r\n    }\r\n])\r\n    .setClassScales();\r\n\n// CONCATENATED MODULE: ./src/classes/Angle.ts\n\r\n\r\n\r\n\r\nvar RAD2DEG = 180 / Math.PI;\r\nvar DEG2RAD = Math.PI / 180;\r\n/**\r\n * The Angle class which contains the following groups.\r\n *\r\n * - degree\r\n * - radian\r\n */\r\nvar Angle = new Class_Class('Angle')\r\n    .setBaseConversion('deg', 'rad', function (x) { return x * DEG2RAD; })\r\n    .setBaseConversion('rad', 'deg', function (x) { return x * RAD2DEG; })\r\n    .addGroups([\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'deg',\r\n        baseUnit: 'deg',\r\n        denominators: [],\r\n        units: {\r\n            'deg': Plurality.EITHER,\r\n            '\\xb0': Plurality.EITHER,\r\n            'degrees': Plurality.PLURAL,\r\n            'degree': Plurality.SINGULAR\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'rad',\r\n        baseUnit: 'rad',\r\n        denominators: [],\r\n        units: {\r\n            'rad': Plurality.EITHER,\r\n            'radians': Plurality.PLURAL,\r\n            'radian': Plurality.SINGULAR\r\n        }\r\n    }\r\n])\r\n    .setClassScales();\r\n\n// CONCATENATED MODULE: ./src/classes/Volume.ts\n\r\n\r\n\r\n\r\n/**\r\n * The Volume clas which contains the following groups.\r\n *\r\n * - teaspoon\r\n * - tablespoon\r\n * - fluid ounce\r\n * - cup\r\n * - pint\r\n * - quart\r\n * - gallon\r\n * - milliliter\r\n * - centiliter\r\n * - decaliter\r\n * - kiloliter\r\n * - cubic millimeter\r\n * - cubic centimeter\r\n * - cubic meter\r\n * - cubic kilometer\r\n * - cubic inch\r\n * - cubic foot\r\n * - cubic yard\r\n */\r\nvar Volume = new Class_Class('Volume')\r\n    .setBaseConversion('tsp', 'ml', function (x) { return x * 4.92892; })\r\n    .setBaseConversion('tsp', 'mm3', function (x) { return x * 4928.92; })\r\n    .setBaseConversion('tsp', 'in3', function (x) { return x * 0.300781; })\r\n    .setBaseConversion('ml', 'tsp', function (x) { return x * 0.202884; })\r\n    .setBaseConversion('ml', 'mm3', function (x) { return x * 1000; })\r\n    .setBaseConversion('ml', 'in3', function (x) { return x * 0.0610237; })\r\n    .setBaseConversion('mm3', 'tsp', function (x) { return x * 0.000202884; })\r\n    .setBaseConversion('mm3', 'ml', function (x) { return x * 0.001; })\r\n    .setBaseConversion('mm3', 'in3', function (x) { return x * 0.0000610237; })\r\n    .setBaseConversion('in3', 'tsp', function (x) { return x * 3.32468; })\r\n    .setBaseConversion('in3', 'ml', function (x) { return x * 16.3871; })\r\n    .setBaseConversion('in3', 'mm3', function (x) { return x * 16387.1; })\r\n    .addGroups([\r\n    {\r\n        system: System.US,\r\n        common: true,\r\n        unit: 'tsp',\r\n        baseUnit: 'tsp',\r\n        denominators: [2, 3, 4],\r\n        units: {\r\n            'tsp': Plurality.EITHER,\r\n            'ts': Plurality.EITHER,\r\n            'tsps': Plurality.PLURAL,\r\n            'teaspoon': Plurality.SINGULAR,\r\n            'teaspoons': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.US,\r\n        common: true,\r\n        unit: 'tbsp',\r\n        relativeUnit: 'tsp',\r\n        relativeScale: 3,\r\n        denominators: [2, 3, 4],\r\n        units: {\r\n            'tbsp': Plurality.EITHER,\r\n            'tbsps': Plurality.PLURAL,\r\n            'tablespoon': Plurality.SINGULAR,\r\n            'tablespoons': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.US,\r\n        common: true,\r\n        unit: 'floz',\r\n        relativeUnit: 'tsp',\r\n        relativeScale: 6,\r\n        denominators: [2, 3, 6],\r\n        units: {\r\n            // 'oz': Plurality.EITHER,\r\n            // 'ounce': Plurality.SINGULAR,\r\n            // 'ounces': Plurality.PLURAL,\r\n            'floz': Plurality.EITHER,\r\n            'fl-oz': Plurality.EITHER,\r\n            'fl oz': Plurality.EITHER,\r\n            'fluid ounce': Plurality.SINGULAR,\r\n            'fluid ounces': Plurality.PLURAL,\r\n            'fl. oz': Plurality.EITHER,\r\n            'oz. fl': Plurality.EITHER,\r\n            'oz fl': Plurality.EITHER\r\n        }\r\n    },\r\n    {\r\n        system: System.US,\r\n        common: true,\r\n        unit: 'c',\r\n        relativeUnit: 'floz',\r\n        relativeScale: 8,\r\n        denominators: [2, 3, 4],\r\n        units: {\r\n            'c': Plurality.EITHER,\r\n            'cup': Plurality.SINGULAR,\r\n            'cups': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.US,\r\n        common: true,\r\n        unit: 'pt',\r\n        relativeUnit: 'c',\r\n        relativeScale: 2,\r\n        denominators: [2, 4, 8],\r\n        units: {\r\n            'pt': Plurality.EITHER,\r\n            'pint': Plurality.SINGULAR,\r\n            'pints': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.US,\r\n        common: true,\r\n        unit: 'qt',\r\n        relativeUnit: 'c',\r\n        relativeScale: 4,\r\n        denominators: [2, 4, 8],\r\n        units: {\r\n            'qt': Plurality.EITHER,\r\n            'quart': Plurality.SINGULAR,\r\n            'quarts': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.US,\r\n        common: true,\r\n        unit: 'gal',\r\n        relativeUnit: 'qt',\r\n        relativeScale: 4,\r\n        denominators: [2, 4, 8, 16],\r\n        units: {\r\n            'gal': Plurality.EITHER,\r\n            'gallon': Plurality.SINGULAR,\r\n            'gallons': Plurality.PLURAL,\r\n            'gals': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'ml',\r\n        baseUnit: 'ml',\r\n        denominators: [2, 10],\r\n        units: {\r\n            'ml': Plurality.EITHER,\r\n            'millilitre': Plurality.SINGULAR,\r\n            'millilitres': Plurality.PLURAL,\r\n            'milliliter': Plurality.SINGULAR,\r\n            'milliliters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        unit: 'cl',\r\n        relativeUnit: 'ml',\r\n        relativeScale: 10,\r\n        denominators: [10],\r\n        units: {\r\n            'cl': Plurality.EITHER,\r\n            'centilitre': Plurality.SINGULAR,\r\n            'centilitres': Plurality.PLURAL,\r\n            'centiliter': Plurality.SINGULAR,\r\n            'centiliters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'l',\r\n        relativeUnit: 'ml',\r\n        relativeScale: 1000,\r\n        denominators: [2, 3, 4, 10],\r\n        units: {\r\n            'l': Plurality.EITHER,\r\n            'litre': Plurality.SINGULAR,\r\n            'litres': Plurality.PLURAL,\r\n            'liter': Plurality.SINGULAR,\r\n            'liters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        unit: 'dl',\r\n        relativeUnit: 'l',\r\n        relativeScale: 10,\r\n        denominators: [10, 100],\r\n        units: {\r\n            'dl': Plurality.EITHER,\r\n            'decalitre': Plurality.SINGULAR,\r\n            'decalitres': Plurality.PLURAL,\r\n            'decaliter': Plurality.SINGULAR,\r\n            'decaliters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'kl',\r\n        relativeUnit: 'l',\r\n        relativeScale: 1000,\r\n        denominators: [10, 100],\r\n        units: {\r\n            'kl': Plurality.EITHER,\r\n            'kilolitre': Plurality.SINGULAR,\r\n            'kilolitres': Plurality.PLURAL,\r\n            'kiloliter': Plurality.SINGULAR,\r\n            'kiloliters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        unit: 'mm3',\r\n        baseUnit: 'mm3',\r\n        denominators: [2, 4, 8],\r\n        units: {\r\n            'mm3': Plurality.EITHER,\r\n            'mm^3': Plurality.EITHER,\r\n            'mm\\xb3': Plurality.EITHER,\r\n            'millimeter3': Plurality.SINGULAR,\r\n            'millimeter^3': Plurality.SINGULAR,\r\n            'millimeter\\xb3': Plurality.SINGULAR,\r\n            'millimeters3': Plurality.PLURAL,\r\n            'millimeters^3': Plurality.PLURAL,\r\n            'millimeters\\xb3': Plurality.PLURAL,\r\n            'cubic mm': Plurality.EITHER,\r\n            'cubic millimeter': Plurality.SINGULAR,\r\n            'cubic millimeters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        unit: 'cm3',\r\n        relativeUnit: 'mm3',\r\n        relativeScale: 1000,\r\n        denominators: [2, 4, 8],\r\n        units: {\r\n            'cm3': Plurality.EITHER,\r\n            'cm^3': Plurality.EITHER,\r\n            'cm\\xb3': Plurality.EITHER,\r\n            'centimeter3': Plurality.SINGULAR,\r\n            'centimeter^3': Plurality.SINGULAR,\r\n            'centimeter\\xb3': Plurality.SINGULAR,\r\n            'centimeters3': Plurality.PLURAL,\r\n            'centimeters^3': Plurality.PLURAL,\r\n            'centimeters\\xb3': Plurality.PLURAL,\r\n            'cubic cm': Plurality.EITHER,\r\n            'cubic centimeter': Plurality.SINGULAR,\r\n            'cubic centimeters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        unit: 'm3',\r\n        relativeUnit: 'cm3',\r\n        relativeScale: 1000000,\r\n        denominators: [2, 4, 8],\r\n        units: {\r\n            'm3': Plurality.EITHER,\r\n            'm^3': Plurality.EITHER,\r\n            'm\\xb3': Plurality.EITHER,\r\n            'meter3': Plurality.SINGULAR,\r\n            'meter^3': Plurality.SINGULAR,\r\n            'meter\\xb3': Plurality.SINGULAR,\r\n            'meters3': Plurality.PLURAL,\r\n            'meters^3': Plurality.PLURAL,\r\n            'meters\\xb3': Plurality.PLURAL,\r\n            'cubic m': Plurality.EITHER,\r\n            'cubic meter': Plurality.SINGULAR,\r\n            'cubic meters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        unit: 'km3',\r\n        relativeUnit: 'm3',\r\n        relativeScale: 1000000000,\r\n        denominators: [2, 4, 8],\r\n        units: {\r\n            'km3': Plurality.EITHER,\r\n            'km^3': Plurality.EITHER,\r\n            'km\\xb3': Plurality.EITHER,\r\n            'kilometer3': Plurality.SINGULAR,\r\n            'kilometer^3': Plurality.SINGULAR,\r\n            'kilometer\\xb3': Plurality.SINGULAR,\r\n            'kilometers3': Plurality.PLURAL,\r\n            'kilometers^3': Plurality.PLURAL,\r\n            'kilometers\\xb3': Plurality.PLURAL,\r\n            'cubic km': Plurality.EITHER,\r\n            'cubic kilometer': Plurality.SINGULAR,\r\n            'cubic kilometers': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.US,\r\n        unit: 'in3',\r\n        baseUnit: 'in3',\r\n        denominators: [2, 4, 8],\r\n        units: {\r\n            'in3': Plurality.EITHER,\r\n            'in^3': Plurality.EITHER,\r\n            'in\\xb3': Plurality.EITHER,\r\n            'inch3': Plurality.SINGULAR,\r\n            'inch^3': Plurality.SINGULAR,\r\n            'inch\\xb3': Plurality.SINGULAR,\r\n            'inches3': Plurality.PLURAL,\r\n            'inches^3': Plurality.PLURAL,\r\n            'inches\\xb3': Plurality.PLURAL,\r\n            'cubic in': Plurality.EITHER,\r\n            'cubic inch': Plurality.SINGULAR,\r\n            'cubic inches': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        unit: 'ft3',\r\n        relativeUnit: 'in3',\r\n        relativeScale: 1728,\r\n        denominators: [2, 4, 8],\r\n        units: {\r\n            'ft3': Plurality.EITHER,\r\n            'ft^3': Plurality.EITHER,\r\n            'ft\\xb3': Plurality.EITHER,\r\n            'foot3': Plurality.SINGULAR,\r\n            'foot^3': Plurality.SINGULAR,\r\n            'foot\\xb3': Plurality.SINGULAR,\r\n            'feet3': Plurality.PLURAL,\r\n            'feet^3': Plurality.PLURAL,\r\n            'feet\\xb3': Plurality.PLURAL,\r\n            'cubic ft': Plurality.EITHER,\r\n            'cubic foot': Plurality.SINGULAR,\r\n            'cubic feet': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        unit: 'yd3',\r\n        relativeUnit: 'ft3',\r\n        relativeScale: 27,\r\n        denominators: [2, 4, 8],\r\n        units: {\r\n            'yd3': Plurality.EITHER,\r\n            'yd^3': Plurality.EITHER,\r\n            'yd\\xb3': Plurality.EITHER,\r\n            'yard3': Plurality.SINGULAR,\r\n            'yard^3': Plurality.SINGULAR,\r\n            'yard\\xb3': Plurality.SINGULAR,\r\n            'yards3': Plurality.PLURAL,\r\n            'yards^3': Plurality.PLURAL,\r\n            'yards\\xb3': Plurality.PLURAL,\r\n            'cubic yd': Plurality.EITHER,\r\n            'cubic yard': Plurality.SINGULAR,\r\n            'cubic yards': Plurality.PLURAL\r\n        }\r\n    }\r\n])\r\n    .setClassScales();\r\n\n// CONCATENATED MODULE: ./src/classes/Length.ts\n\r\n\r\n\r\n\r\n/**\r\n * The Length class which contains the following groups.\r\n *\r\n * - inch\r\n * - foot\r\n * - yard\r\n * - mile\r\n * - league\r\n * - millimeter\r\n * - centimeter\r\n * - decimeter\r\n * - meter\r\n * - kilometer\r\n */\r\nvar Length = new Class_Class('Length')\r\n    .setBaseConversion('in', 'mm', function (x) { return x * 25.4; })\r\n    .setBaseConversion('mm', 'in', function (x) { return x * 0.039370; })\r\n    .addGroups([\r\n    {\r\n        system: System.US,\r\n        common: true,\r\n        unit: 'in',\r\n        baseUnit: 'in',\r\n        denominators: [2, 4, 8, 16, 32],\r\n        units: {\r\n            'in': Plurality.EITHER,\r\n            'inch': Plurality.SINGULAR,\r\n            'inches': Plurality.PLURAL,\r\n            '\"': Plurality.EITHER\r\n        }\r\n    },\r\n    {\r\n        system: System.US,\r\n        common: true,\r\n        unit: 'ft',\r\n        relativeUnit: 'in',\r\n        relativeScale: 12,\r\n        denominators: [2],\r\n        units: {\r\n            'ft': Plurality.EITHER,\r\n            'foot': Plurality.SINGULAR,\r\n            'feet': Plurality.PLURAL,\r\n            '\\'': Plurality.EITHER\r\n        }\r\n    },\r\n    {\r\n        system: System.US,\r\n        unit: 'yd',\r\n        relativeUnit: 'ft',\r\n        relativeScale: 3,\r\n        denominators: [],\r\n        units: {\r\n            'yd': Plurality.EITHER,\r\n            'yard': Plurality.SINGULAR,\r\n            'yards': Plurality.PLURAL,\r\n            'yds': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.US,\r\n        common: true,\r\n        unit: 'mi',\r\n        relativeUnit: 'ft',\r\n        relativeScale: 5280,\r\n        denominators: [2, 3, 4, 10],\r\n        units: {\r\n            'mi': Plurality.EITHER,\r\n            'mile': Plurality.SINGULAR,\r\n            'miles': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.US,\r\n        unit: 'league',\r\n        relativeUnit: 'mi',\r\n        relativeScale: 3,\r\n        denominators: [2, 3, 4, 5, 6, 7, 8, 9, 10],\r\n        units: {\r\n            'league': Plurality.EITHER,\r\n            'leagues': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'mm',\r\n        baseUnit: 'mm',\r\n        denominators: [10],\r\n        units: {\r\n            'mm': Plurality.EITHER,\r\n            'millimeter': Plurality.SINGULAR,\r\n            'millimeters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'cm',\r\n        relativeUnit: 'mm',\r\n        relativeScale: 10,\r\n        denominators: [2, 4, 10],\r\n        units: {\r\n            'cm': Plurality.EITHER,\r\n            'centimeter': Plurality.SINGULAR,\r\n            'centimeters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        unit: 'dc',\r\n        relativeUnit: 'cm',\r\n        relativeScale: 10,\r\n        denominators: [10],\r\n        units: {\r\n            'dc': Plurality.EITHER,\r\n            'decimeter': Plurality.SINGULAR,\r\n            'decimeters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'm',\r\n        relativeUnit: 'cm',\r\n        relativeScale: 100,\r\n        denominators: [2, 3, 4, 5, 10],\r\n        units: {\r\n            'm': Plurality.EITHER,\r\n            'meter': Plurality.SINGULAR,\r\n            'meters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'km',\r\n        relativeUnit: 'm',\r\n        relativeScale: 1000,\r\n        denominators: [2, 3, 4, 5, 6, 7, 8, 9, 10],\r\n        units: {\r\n            'km': Plurality.EITHER,\r\n            'kilometer': Plurality.SINGULAR,\r\n            'kilometers': Plurality.PLURAL\r\n        }\r\n    }\r\n])\r\n    .setClassScales();\r\n\n// CONCATENATED MODULE: ./src/classes/index.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Adds all classes that come with Unitz to [Core].\r\n */\r\nfunction addDefaults() {\r\n    Core_Core.addClasses(Weight, Area, Time, Digital, Temperature, Angle, Volume, Length);\r\n}\r\n\n// CONCATENATED MODULE: ./src/index.ts\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Plurality\", function() { return Plurality; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"System\", function() { return System; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Functions\", function() { return Functions; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Parse\", function() { return Parse_Parse; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"OutputUnit\", function() { return OutputUnit; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"OutputFormat\", function() { return OutputFormat; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Output\", function() { return Output_Output; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Transform\", function() { return Transform_Transform; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"SortType\", function() { return SortType; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Sort\", function() { return Sort_Sort; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Core\", function() { return Core_Core; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Group\", function() { return Group_Group; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Class\", function() { return Class_Class; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Value\", function() { return Value_Value; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Range\", function() { return Range_Range; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"uz\", function() { return uz; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Base\", function() { return Base_Base; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"addDefaults\", function() { return addDefaults; });\n\r\n// Enums\r\n\r\n\r\n// Functions\r\n\r\n\r\n// Secondary\r\n\r\n\r\n\r\n// Core\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Classes\r\n\r\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// unitz.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 927230eff4f18890fc0b","\nimport { Functions as fn } from './Functions';\nimport { Core } from './Core';\nimport { Parse } from './Parse';\nimport { RangesInput, BaseInput } from './Types';\nimport { Range, RangeList, RangeMutator } from './Range';\nimport { Group } from './Group';\nimport { Transform, TransformInput } from './Transform';\nimport { Output, OutputInput } from './Output';\nimport { Sort, SortInput } from './Sort';\nimport { Value } from './Value';\nimport { Class, ClassGrouping } from './Class';\n\n\n/**\n * Takes user input and returns a new instance of [Base].\n */\nexport function uz(input: RangesInput)\n{\n  return new Base(input);\n}\n\n/**\n * The main class which contains a list of ranges and the user input.\n */\nexport class Base\n{\n\n  /**\n   * The input parsed to generate this instance or the input passed from the\n   * parent instance when an operation was performed on it.\n   */\n  public input: RangesInput;\n\n  /**\n   * The list of ranges in this instance.\n   */\n  public ranges: RangeList;\n\n  /**\n   * Creates a new instance of Base given some user input to parse or an\n   * existing list of ranges to use instead.\n   *\n   * @param input The input to parse if ranges is not provided.\n   * @param ranges The already parsed ranges to use for this instance.\n   */\n  public constructor(input: RangesInput, ranges?: RangeList )\n  {\n    this.input = input;\n    this.ranges = ranges || Parse.ranges( input, Core.getGroup );\n  }\n\n  /**\n   * Scales the ranges in this instance by the given factor and returns a\n   * new instance.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1c, 2.3m').scale(2); // '2c, 4.6m'\n   * ```\n   *\n   * @param amount The factor to scale the ranges in this instance by.\n   * @return A new instance.\n   * @see [[Range.mul]]\n   * @see [[Base.mutate]]\n   */\n  public scale(amount: number): Base\n  {\n    return this.mutate(r => r.mul( amount ));\n  }\n\n  // 1c, 3m SCALE TO 1/2c = 1/2c, 1.5m\n\n  /**\n   * Scales the ranges in this instance up to some value with a unit and returns\n   * a new instance. Because this instance might contain ranges, a rangeDelta\n   * can be specified to instruct on which value (min or max) to use when\n   * calculating how much to scale by.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1m, 2 - 3c').scaleTo('6c'); // '2m, 4 - 6c'\n   * uz('1m, 2 - 3c').scaleTo('6c', 0); // '3m, 6 - 9c'\n   * uz('1m, 2 - 3c').scaleTo('6c', 0.5); // '2.4m, 4.8 - 6c'\n   * ```\n   *\n   * @param unitValue A value & unit pair to scale the ranges in this instance to.\n   * @param rangeDelta When this instance contains ranges this value instructs\n   *  how the scale factor is calculated. A value of 0 means it looks at the\n   *  minimum, 1 is the maximum, and 0.5 is the average.\n   * @return A new instance.\n   * @see [[Base.getScaleTo]]\n   * @see [[Base.scale]]\n   */\n  public scaleTo(unitValue: string, rangeDelta: number = 1.0): Base\n  {\n    return this.scale( this.getScaleTo(unitValue, rangeDelta) );\n  }\n\n  /**\n   * Changes the units used on each of the ranges in this instance to the\n   * preferred unit for each group.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('5 kilos').preferred(); // '5 kg'\n   * ```\n   *\n   * @return A new instance.\n   * @see [[Core.setPreferred]]\n   * @see [[Range.preferred]]\n   * @see [[Base.mutate]]\n   */\n  public preferred(): Base\n  {\n    return this.mutate(r => r.preferred());\n  }\n\n  /**\n   * Drops negative ranges and modifies partially negative ranges so that all\n   * values are greater than or equal to zero.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('0c, 2tbsp, -4tbsp').positive(); // '0c, 2tbsp'\n   * uz('-2 - 3 in').positive(); // '0 - 3in'\n   * ```\n   *\n   * @return A new instance.\n   * @see [[Range.positive]]\n   * @see [[Base.mutate]]\n   */\n  public positive(): Base\n  {\n    return this.mutate(r => r.positive());\n  }\n\n  /**\n   * Drops positive ranges and modifies partially positive ranges so that all\n   * values are less than zero.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('0c, 2tbsp, -4tbsp').negative(); // '-4tbsp'\n   * uz('-2 - 3 in').negative(); // '-2 - 0in'\n   * ```\n   *\n   * @return A new instance.\n   * @see [[Range.negative]]\n   * @see [[Base.mutate]]\n   */\n  public negative(): Base\n  {\n    return this.mutate(r => r.negative());\n  }\n\n  /**\n   * Drops ranges that are equal to zero.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('0c, 2tbsp').negative(); // '2tbsp'\n   * ```\n   *\n   * @return A new instance.\n   * @see [[Range.nonzero]]\n   * @see [[Base.mutate]]\n   */\n  public nonzero(): Base\n  {\n    return this.mutate(r => r.nonzero());\n  }\n\n  /**\n   * Converts each range to fractions if a denominator for the specified units\n   * yields a fraction close enough to the original value.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1/2 cup').fractions(); // '1/2 cup'\n   * uz('0.3cm').fractions(); // '3/10 cm'\n   * uz('0.33 decades').fractions(); // '0.33 decades' closest is 3/10 but that's not close enough\n   * ```\n   *\n   * @return A new instance.\n   * @see [[Range.fractioned]]\n   * @see [[Base.mutate]]\n   */\n  public fractions(): Base\n  {\n    return this.mutate(r => r.fractioned());\n  }\n\n  /**\n   * Converts each range to numbers if they are fractions.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1/2 cup').fractions(); // '0.5 cup'\n   * uz('0.3cm').fractions(); // '0.3 cm'\n   * ```\n   *\n   * @return A new instance.\n   * @see [[Range.numbered]]\n   * @see [[Base.mutate]]\n   */\n  public numbers(): Base\n  {\n    return this.mutate(r => r.numbered());\n  }\n\n  /**\n   * Flattens any ranges to their maximum values.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1 - 3c, 5m').max(); // '3c, 5m'\n   * ```\n   *\n   * @return A new instance or this if this instance has no ranges.\n   * @see [[Range.maxd]]\n   * @see [[Base.mutate]]\n   */\n  public max(): Base\n  {\n    return this.hasRanges ? this.mutate(r => r.maxd()) : this;\n  }\n\n  /**\n   * Flattens any ranges to their minimum values.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1 - 3c, 5m').max(); // '1c, 5m'\n   * ```\n   *\n   * @return A new instance or this if this instance has no ranges.\n   * @see [[Range.mind]]\n   * @see [[Base.mutate]]\n   */\n  public min(): Base\n  {\n    return this.hasRanges ? this.mutate(r => r.mind()) : this;\n  }\n\n  /**\n   * Converts each range to units that best represent the value.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1.5pt, 12in, 3.14159rad').normalize(); // '3c, 1ft, 180deg'\n   * ```\n   *\n   * @param options Options to control which units and values are acceptable.\n   * @param forOutput The output options that should be used to determine which\n   *  value & unit is best.\n   * @return A new instance.\n   * @see [[Transform]]\n   * @see [[Output]]\n   * @see [[Core.isMoreNormal]]\n   * @see [[Core.globalTransform]]\n   * @see [[Core.globalOutput]]\n   * @see [[Range.normalize]]\n   * @see [[Base.mutate]]\n   */\n  public normalize(options?: TransformInput, forOutput?: OutputInput): Base\n  {\n    let output: Output = Core.globalOutput.extend( forOutput );\n    let transform: Transform = Core.globalTransform.extend( options );\n\n    return this.mutate(r => r.normalize( transform, output ));\n  }\n\n  /**\n   * Joins all ranges of the same classes together and uses the largest unit\n   * to represent the sum for the class.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1c, 1pt').compact(); // '1.5pt'\n   * ```\n   *\n   * @param options Options to control which units and values are acceptable.\n   * @return A new instance.\n   * @see [[Transform]]\n   * @see [[Core.globalTransform]]\n   */\n  public compact(options?: TransformInput): Base\n  {\n    let compacted: RangeList = [];\n    let transform: Transform = Core.globalTransform.extend( options );\n    let { classes, groupless } = this.groupByClass();\n\n    for (let className in classes)\n    {\n      let entry = classes[ className ];\n      let ranges: RangeList = entry.ranges;\n      let parent: Class = entry.parent;\n      let minGroupChosen: Group = <Group>null;\n      let maxGroupChosen: Group = <Group>null;\n      let minSum: number = 0;\n      let maxSum: number = 0;\n\n      // If the transformation options ignores this class, skip it.\n      if (!transform.isClassMatch( parent ))\n      {\n        continue;\n      }\n\n      // Determine the smallest visible group we can use.\n      parent.getVisibleGroups( transform, false, null, (group) =>\n      {\n        minGroupChosen = maxGroupChosen = group;\n        return false;\n      });\n\n      // If we can't find one, then no groups are valid. Skip them.\n      if (!minGroupChosen)\n      {\n        continue;\n      }\n\n      // For each range, sum up the minimums and maximums while also determining\n      // the largest min & max that should be used to represent the sums.\n      for (let i = 0; i < ranges.length; i++)\n      {\n        let range: Range = ranges[ i ];\n        let minGroup: Group = range.min.group;\n        let maxGroup: Group = range.max.group;\n\n        if (minGroup.classScale > minGroupChosen.classScale && transform.isVisibleGroup( minGroup ))\n        {\n          if (i !== 0)\n          {\n            minSum = parent.convert( minSum, minGroupChosen, minGroup );\n          }\n          minGroupChosen = minGroup;\n        }\n\n        if (maxGroup.classScale > maxGroupChosen.classScale && transform.isVisibleGroup( maxGroup ))\n        {\n          if (i !== 0)\n          {\n            maxSum = parent.convert( maxSum, maxGroupChosen, maxGroup );\n          }\n          maxGroupChosen = maxGroup;\n        }\n\n        minSum += range.min.convertTo( minGroupChosen );\n        maxSum += range.max.convertTo( maxGroupChosen );\n      }\n\n      let min: Value = Value.fromNumberForGroup( minSum, minGroupChosen );\n      let max: Value = Value.fromNumberForGroup( maxSum, maxGroupChosen );\n\n      compacted.push( new Range( min, max ) );\n    }\n\n    // If the transform options permit groupless results and there are ranges\n    // without groups - sum them all.\n    if (transform.groupless && groupless.length)\n    {\n      let minSum: Value = new Value(0, 0, 1, '', <Group>null);\n      let maxSum: Value = new Value(0, 0, 1, '', <Group>null);\n\n      for (let i = 0; i < groupless.length; i++)\n      {\n        minSum = minSum.add( groupless[ i ].min );\n        maxSum = maxSum.add( groupless[ i ].max );\n      }\n\n      compacted.push( new Range( minSum, maxSum ) );\n    }\n\n    return new Base( this.input, compacted );\n  }\n\n  /**\n   * Joins all ranges of the same classes together and then separates them\n   * into whole number ranges for better readability.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1.5pt').expand(); // '1pt, 1c'\n   * uz('53in').expand(); // '4ft, 5in'\n   * uz('2ft, 29in').expand(); // '4ft, 5in'\n   * uz('6543mm').expand(); // '6 m, 54 cm, 3 mm'\n   * ```\n   *\n   * @param options Options to control which units and values are acceptable.\n   * @return A new instance.\n   * @see [[Transform]]\n   * @see [[Core.globalTransform]]\n   */\n  public expand(options?: TransformInput): Base\n  {\n    let transform: Transform = Core.globalTransform.extend( options );\n    let compacted: Base = this.compact( transform );\n    let { ranges } = compacted;\n    let expanded: RangeList = [];\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n      let value: Value = transform.convertWithMax ? range.max : range.min;\n      let valueGroup: Group = value.group;\n      let valueSign: number = fn.sign( value.value );\n\n      if (valueGroup)\n      {\n        valueGroup.matches(transform, true, (group) =>\n        {\n          if (!fn.isZero( value.value ))\n          {\n            let transformed = value.convertToValue(group);\n\n            if (group.isBase)\n            {\n              value = value.zero();\n\n              expanded.push( Range.fromFixed( transformed ) )\n            }\n            else if (fn.abs( transformed.value ) >= 1 && fn.sign( transformed.value) === valueSign)\n            {\n              let truncated: Value = transformed.truncated();\n\n              value = value.sub( truncated.convertToValue( valueGroup ) );\n\n              expanded.push( Range.fromFixed( truncated ) );\n            }\n          }\n        });\n      }\n      else\n      {\n        expanded.push( range );\n      }\n    }\n\n    return new Base( this.input, expanded );\n  }\n\n  /**\n   * Adds the ranges of this instance and the given input together. When the\n   * ranges use the same units they are added together, otherwise they are\n   * added to the end of the range list.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1pt').add('2pt, 1c'); // '3pt, 1c'\n   * uz('1pt').add('2pt, 1c', 2); // '5pt, 2c'\n   * ```\n   *\n   * @param input An instance or input which can be parsed into an instance.\n   * @param scale A number to multiple the input by when adding it to this instance.\n   * @return A new instance.\n   * @see [[Base.operate]]\n   * @see [[Range.add]]\n   * @see [[Range.mul]]\n   */\n  public add(input: BaseInput, scale: number = 1): Base\n  {\n    return this.operate(input, (a, b) => a.add(b, scale), (a) => a.mul( scale ));\n  }\n\n  /**\n   * Subtracts the given input from the ranges of this instance. When the ranges\n   * use the same units they are subtracted, otherwise they are added to the\n   * end of the range list and negated.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('3pt').sub('2pt, 1c'); // '1pt, -1c'\n   * uz('1pt').add('2pt, 1c', 2); // '-3pt, -2c'\n   * ```\n   *\n   * @param input An instance or input which can be parsed into an instance.\n   * @param scale A number to multiple the input by when subtracting it from this instance.\n   * @return A new instance.\n   * @see [[Base.operate]]\n   * @see [[Range.sub]]\n   * @see [[Range.mul]]\n   */\n  public sub(input: BaseInput, scale: number = 1): Base\n  {\n    return this.operate(input, (a, b) => a.sub(b, scale), (a) => a.mul( -scale ));\n  }\n\n  /**\n   * Subtracts the given input from the ranges of this instance. When the ranges\n   * use the same units they are subtracted, otherwise they are added to the\n   * end of the range list and negated.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('3pt').sub('2pt, 1c'); // '1pt, -1c'\n   * uz('1pt').add('2pt, 1c', 2); // '-3pt, -2c'\n   * ```\n   *\n   * @param input An instance or input which can be parsed into an instance.\n   * @param operate A function to call when matching ranges are found and an\n   *  operation should be performed between them. The range returned by this\n   *  function ends up in the result.\n   * @param operate.a The first range to operate on.\n   * @param operate.b The second range to operate on.\n   * @param remainder A function to call on a range that did not have a match\n   *  in this instance where the range returned is added to the result.\n   * @param remainder.a The remaining range to operate on.\n   * @return A new instance.\n   * @see [[Range.isMatch]]\n   */\n  public operate(input: BaseInput,\n    operate: (a: Range, b: Range) => Range,\n    remainder: (a: Range) => Range): Base\n  {\n    let ranges: RangeList = this.ranges;\n    let output: RangeList = [];\n\n    let other: Base = Parse.base( input );\n    let otherRanges: RangeList = other.ranges;\n    let otherUsed: boolean[] = [];\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n\n      for (let k = 0; k < otherRanges.length; k++)\n      {\n        if (!otherUsed[ k ])\n        {\n          let otherRange: Range = otherRanges[ k ];\n\n          if (range.isMatch( otherRange ))\n          {\n            range = operate( range, otherRange );\n            otherUsed[ k ] = true;\n          }\n        }\n      }\n\n      output.push( range );\n    }\n\n    for (let k = 0; k < otherRanges.length; k++)\n    {\n      if (!otherUsed[ k ])\n      {\n        output.push( remainder( otherRanges[ k ] ) );\n      }\n    }\n\n    return new Base( this.input, output );\n  }\n\n  /**\n   * Joins all ranges of the same classes together and then calculates all\n   * equivalent ranges for each range for each valid group according to the\n   * given options.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1.5pt').conversions(); // '3/16gal, 3/4qt, 1 1/2pt, 3c, 24floz, 48tbsp, 144tsp'\n   * uz('20celsius, 45deg'); // '68F, 20celsius, 45deg, 0.785rad'\n   * ```\n   *\n   * @param options Options to control which units and values are acceptable.\n   * @return A new instance.\n   * @see [[Transform]]\n   * @see [[Core.globalTransform]]\n   * @see [[Value.conversions]]\n   */\n  public conversions(options?: TransformInput): Base\n  {\n    let transform: Transform = Core.globalTransform.extend( options );\n    let compacted: Base = this.compact( options );\n    let ranges: RangeList = compacted.ranges;\n    let output: RangeList = [];\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n      let convert: Value = transform.convertWithMax ? range.max : range.min;\n\n      convert.conversions(transform, false, (transformed) =>\n      {\n        let min: Value = transform.convertWithMax ? range.min.convertToValue( transformed.group ) : transformed;\n        let max: Value = transform.convertWithMax ? transformed : range.max.convertToValue( transformed.group );\n\n        if (min.value <= transform.max && max.value >= transform.min)\n        {\n          output.push( new Range( min, max ) );\n        }\n      });\n    }\n\n    return new Base( this.input, output );\n  }\n\n  /**\n   * Executes the given function on each range in this instance and if the\n   * function returns a valid range its added to the result.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1.5pt').mutate(r => r.mul(2)); // '3pt'\n   * ```\n   *\n   * @param mutator The function which may return a range.\n   * @return A new instance.\n   */\n  public mutate(mutator: RangeMutator): Base\n  {\n    let ranges: RangeList = [];\n    let source: RangeList = this.ranges;\n\n    for (let i = 0; i < source.length; i++)\n    {\n      let mutated: Range = mutator( source[ i ] ) ;\n\n      if (mutated && mutated.isValid)\n      {\n        ranges.push( mutated );\n      }\n    }\n\n    return new Base( this.input, ranges );\n  }\n\n  /**\n   * Removes the ranges from this instance that aren't valid according to the\n   * transform options provided taking into account the global options.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1in, 2m').filter({system: Unitz.System.METRIC}); // '2m'\n   * ```\n   *\n   * @param options Options to control which units and values are acceptable.\n   * @return A new instance.\n   * @see [[Transform]]\n   * @see [[Core.globalTransform]]\n   * @see [[Transform.isValidRange]]\n   */\n  public filter(options?: TransformInput): Base\n  {\n    let transform: Transform = Core.globalTransform.extend( options );\n    let ranges: RangeList = this.ranges;\n    let filtered: RangeList = [];\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n\n      if (transform.isValidRange( range ))\n      {\n        filtered.push( range );\n      }\n    }\n\n    return new Base( this.input, filtered );\n  }\n\n  /**\n   * Sorts the ranges in this instance based on the options provided taking into\n   * account the global options.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1in, 3ft, 1.3yd, 1m').sort(); // 1.3yd, 1m, 3ft, 1in\n   * uz('1in, 3ft, 1.3yd, 1m').sort({ascending: true}); // 1in, 3ft, 1m, 1.3yd\n   * uz('1-3cups, 2-2.5cups, 4in').sort({\n   *  type: Unitz.SortType.MIN,\n   *  classes: {\n   *   Volume: 1,\n   *   Length: 2\n   *  }\n   * }); // 4in, 2 - 2.5cups, 1 - 3cups\n   * ```\n   *\n   * @param options Options to control how sorting is done.\n   * @return A new instance.\n   * @see [[Sort]]\n   * @see [[Core.globalSort]]\n   */\n  public sort(options?: SortInput): Base\n  {\n    let sort: Sort = Core.globalSort.extend( options );\n    let ranges: RangeList = this.ranges.slice();\n\n    ranges.sort( sort.getSorter() );\n\n    return new Base( this.input, ranges );\n  }\n\n  /**\n   * Returns the ranges in this instance grouped by their class. All groupless\n   * ranges are added to their own list.\n   */\n  public groupByClass(): ClassGrouping\n  {\n    let ranges: RangeList = this.ranges;\n    let classes = {};\n    let groupless = [];\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n\n      if (range.min.group)\n      {\n        let parent: Class = range.min.group.parent;\n        let entry = classes[ parent.name ];\n\n        if (!entry)\n        {\n          entry = classes[ parent.name ] = {\n            parent: parent,\n            ranges: []\n          };\n        }\n\n        entry.ranges.push( range );\n      }\n      else\n      {\n        groupless.push( range );\n      }\n    }\n\n    return { classes, groupless };\n  }\n\n  /**\n   * Calculates what this instance would need to be scaled by so that the given\n   * value & unit pair is equal to the sum of ranges in this instance of the\n   * same class. If there are no ranges with the same class then zero is\n   * returned. If the sum of ranges with the same class results in an actual\n   * range (where min != max) then you can specify how to pick a value from the\n   * range with rangeDetla. A value of 0 uses the min, 1 uses the max, and 0.5\n   * uses the average between them.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1m, 2 - 3c').getScaleTo('6c'); // 2\n   * uz('1m, 2 - 3c').getScaleTo('6c', 0); // 3\n   * uz('1m, 2 - 3c').getScaleTo('6c', 0.5); // 2.4\n   * uz('1m, 2 - 3c').getScaleTo('45deg'); // 0\n   * ```\n\n   * @param unitValue A value & unit pair to scale the ranges in this instance to.\n   * @param rangeDelta When this instance contains ranges this value instructs\n   *  how the scale factor is calculated. A value of 0 means it looks at the\n   *  minimum, 1 is the maximum, and 0.5 is the average.\n   * @return A value to scale by or zero if this instance cannot match the input.\n   * @see [[Base.convert]]\n   * @see [[Parse.value]]\n   */\n  public getScaleTo(unitValue: string, rangeDelta: number = 1.0): number\n  {\n    let to: Value = Parse.value( unitValue, Core.getGroup );\n\n    if (!to.isValid)\n    {\n      return 0;\n    }\n\n    let converted: Range = this.convert( to.unit );\n\n    if (!converted || !converted.isValid)\n    {\n      return 0;\n    }\n\n    let convertedValue: number = (converted.maximum - converted.minimum) * rangeDelta + converted.minimum;\n    let scale: number = to.value / convertedValue;\n\n    return scale;\n  }\n\n  /**\n   * Converts the ranges in this instance to a string with the given output\n   * options taking into account the global options.\n   *\n   * @param options The options to override the global output options.\n   * @return The string representation of this instance.\n   * @see [[Output]]\n   */\n  public output(options?: OutputInput): string\n  {\n    let output: Output = Core.globalOutput.extend( options );\n\n    return output.ranges( this.ranges );\n  }\n\n  /**\n   * Converts the appropriate ranges in this instance into the desired unit\n   * and returns their converted sum. If the given unit does not map to a group\n   * then null is returned. If there are no ranges in this instance in the same\n   * class then the range returned is equivalent to zero.\n   *\n   * *For example:*\n   * ```javascript\n   * uz('1in, 1m, 1ft').convert('cm'); // '133.02 cm'\n   * ```\n   *\n   * @param unit The unit to calculate the sum of.\n   * @return A new range which is the sum of ranges in the same class converted\n   *  to the desired unit.\n   * @see [[Core.getGroup]]\n   * @see [[Range.isZero]]\n   */\n  public convert(unit: string): Range\n  {\n    let group: Group = Core.getGroup( unit );\n\n    if (!group)\n    {\n      return null;\n    }\n\n    let parent: Class = group.parent;\n    let ranges: RangeList = this.ranges;\n    let min: Value = new Value(0, 0, 1, unit, group);\n    let max: Value = new Value(0, 0, 1, unit, group);\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n      let rangeGroup: Group = range.min.group;\n\n      if (rangeGroup && rangeGroup.parent === parent)\n      {\n        min = min.add( range.min.convertToValue( group ) );\n        max = max.add( range.max.convertToValue( group ) );\n      }\n    }\n\n    return new Range( min, max );\n  }\n\n  /**\n   * Iterates over each range in this instance in order or reversed and passes\n   * each one to the given iterate function. If the iterate function returns\n   * false the iteration will stop.\n   *\n   * @param iterate The function to invoke with each range and it's index.\n   * @param iterate.range The current range being iterated.\n   * @param iterate.index The index of the current range in this instance.\n   * @param reverse Whether the iteration should be done forward or backward.\n   * @return The reference to this instance.\n   */\n  public each(iterate: (range: Range, index: number) => any, reverse: boolean = false): this\n  {\n    let ranges: RangeList = this.ranges;\n    let start = reverse ? ranges.length - 1 : 0;\n    let end = reverse ? -1 : ranges.length;\n    let move = reverse ? -1 : 1;\n\n    for (let i = start; i !== end; i += move)\n    {\n      if (iterate( ranges[ i ], i ) === false)\n      {\n        break;\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Returns an array of the classes represented in this instance. If there are\n   * no classes in this instance then an empty array is returned.\n   *\n   * @return An array of the classes in this instance.\n   */\n  public classes(): Class[]\n  {\n    let ranges: RangeList = this.ranges;\n    let classMap = {};\n    let classes: Class[] = [];\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n      let group: Group = range.min.group;\n\n      if (group)\n      {\n        classMap[ group.parent.name ] = group.parent;\n      }\n    }\n\n    for (let className in classMap)\n    {\n      classes.push( classMap[ className ] );\n    }\n\n    return classes;\n  }\n\n  /**\n   * Returns whether this instance has actual ranges. An actual range is where\n   * the minimum and maximum values differ.\n   *\n   * @see [[Range.isRange]]\n   */\n  public get hasRanges(): boolean\n  {\n    let ranges: RangeList = this.ranges;\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      if (ranges[ i ].isRange)\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Returns whether this instance only has valid ranges. If any of the ranges\n   * in this instance are not valid false is returned, otherwise true.\n   *\n   * @see [[Range.isValid]]\n   */\n  public get isValid(): boolean\n  {\n    let ranges: RangeList = this.ranges;\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      if (!ranges[ i ].isValid)\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Base.ts","\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n\n\n/**\n * The Digital class which contains the following groups:\n *\n * - bit\n * - nibble\n * - byte\n * - kilo/mego/giga/tera/peta/exa/zetta/yotta byte\n * - kibi/mebi/gibi/tebi/pebi/exbi/zebi/yobi byte\n * - kilo/mego/giga/tera/peta/exa/zetta/yotta bit\n * - ki/mi/gi/ti/pi/ez/zi/yi bit\n */\nexport let Digital = new Class('Digital')\n  .addGroups([\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'b',\n      baseUnit: 'b',\n      denominators: [],\n      units: {\n        'b': Plurality.EITHER,\n        'bit': Plurality.SINGULAR,\n        'bits': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      unit: 'nibble',\n      relativeUnit: 'b',\n      relativeScale: 4,\n      denominators: [],\n      units: {\n        'nibble': Plurality.EITHER,\n        'nibbles': Plurality.PLURAL,\n        'nybble': Plurality.EITHER,\n        'nyble': Plurality.EITHER,\n        'half-byte': Plurality.EITHER,\n        'half byte': Plurality.EITHER,\n        'tetrade': Plurality.EITHER,\n        'semi-octet': Plurality.EITHER,\n        'quadbit': Plurality.EITHER,\n        'quartet': Plurality.EITHER\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'B',\n      relativeUnit: 'b',\n      relativeScale: 8,\n      denominators: [2, 8],\n      units: {\n        'B': Plurality.EITHER,\n        'byte': Plurality.SINGULAR,\n        'bytes': Plurality.PLURAL\n      }\n    }\n  ])\n\naddDigitalUnits(\n  Digital,\n  'B',\n  1000,\n  [2, 4, 5, 10],\n  'byte', 'bytes',\n  [\n    ['kB', 'kilo'],\n    ['mB', 'mega'],\n    ['gB', 'giga'],\n    ['tB', 'tera'],\n    ['pB', 'peta'],\n    ['eB', 'exa'],\n    ['zB', 'zetta'],\n    ['yB', 'yotta']\n  ]\n);\n\naddDigitalUnits(\n  Digital,\n  'B',\n  1024,\n  [2, 4, 8, 16],\n  'byte', 'bytes',\n  [\n    ['KB', 'kibi'],\n    ['MB', 'mebi'],\n    ['GB', 'gibi'],\n    ['TB', 'tebi'],\n    ['PB', 'pebi'],\n    ['EB', 'exbi'],\n    ['ZB', 'zebi'],\n    ['YB', 'yobi']\n  ]\n);\n\naddDigitalUnits(\n  Digital,\n  'b',\n  1000,\n  [2, 4, 5, 10],\n  'bit', 'bits',\n  [\n    ['kb', 'kilo', 'kbit'],\n    ['mb', 'mega', 'mbit'],\n    ['gb', 'giga', 'gbit'],\n    ['tb', 'tera', 'tbit'],\n    ['pb', 'peta', 'pbit'],\n    ['eb', 'exa', 'ebit'],\n    ['zb', 'zetta', 'zbit'],\n    ['yb', 'yotta', 'ybit']\n  ]\n);\n\naddDigitalUnits(\n  Digital,\n  'b',\n  1024,\n  [2, 4, 8, 16],\n  'bit', 'bits',\n  [\n    ['kibit', 'kibi'],\n    ['mibit', 'mebi'],\n    ['gibit', 'gibi'],\n    ['tibit', 'tebi'],\n    ['pibit', 'pebi'],\n    ['eibit', 'exbi'],\n    ['zibit', 'zebi'],\n    ['yibit', 'yobi']\n  ]\n);\n\nDigital.setClassScales();\n\n\nfunction addDigitalUnits(parent: Class, relativeTo: string, relativeScales: number, denominators: number[], suffixSingular: string, suffixPlural: string, unitAndPrefixes: string[][])\n{\n  for (let i = 0; i < unitAndPrefixes.length; i++)\n  {\n    let [unit, prefix, extra] = unitAndPrefixes[ i ];\n\n    let units = {};\n    units[ unit ] = Plurality.EITHER;\n    units[ prefix + suffixSingular ] = Plurality.SINGULAR;\n    units[ prefix + suffixPlural ] = Plurality.PLURAL;\n\n    if (extra)\n    {\n      units[ extra ] = Plurality.EITHER;\n    }\n\n    parent.addGroup({\n      system: System.ANY,\n      common: true,\n      unit: unit,\n      relativeUnit: relativeTo,\n      relativeScale: relativeScales,\n      denominators: denominators,\n      units: units\n    });\n\n    relativeTo = unit;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Digital.ts","\nimport { Core } from '../Core';\nimport { Weight } from './Weight';\nimport { Area } from './Area';\nimport { Time } from './Time';\nimport { Digital } from './Digital';\nimport { Temperature } from './Temperature';\nimport { Angle } from './Angle';\nimport { Volume } from './Volume';\nimport { Length } from './Length';\n\n/**\n * Adds all classes that come with Unitz to [Core].\n */\nexport function addDefaults()\n{\n  Core.addClasses(\n    Weight,\n    Area,\n    Time,\n    Digital,\n    Temperature,\n    Angle,\n    Volume,\n    Length\n  );\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/index.ts","\n\n/**\n * An enumeration which specifies whether a unit represents a singular value (1),\n * a plural value, or might represent either.\n */\nexport enum Plurality\n{\n\n  /**\n   * The unit is only a singular representation.\n   */\n  SINGULAR,\n\n  /**\n   * The unit is only a plural representation.\n   */\n  PLURAL,\n\n  /**\n   * The unit can be used as singular and plural.\n   */\n  EITHER\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Plurality.ts","\n\nexport enum System\n{\n  METRIC,\n  US,\n  NONE,\n  ANY,\n  GIVEN\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/System.ts","\n\n/**\n * The class which contains commonly used functions by the library. These\n * functions and variables exist in a class so they may be overridden if\n * desired.\n */\nexport class Functions\n{\n\n  /**\n   * The maximum distance a number can be from another to be considered\n   * equivalent. This is to compensate for floating point precision issues.\n   */\n  public static EPSILON: number = 0.00001;\n\n  /**\n   * Determines if the given number is zero.\n   *\n   * @param x The number to test.\n   * @return True if the number is zero, otherwise false.\n   * @see [[Functions.EPSILON]]\n   */\n  public static isZero(x: number): boolean\n  {\n    return this.abs( x ) < this.EPSILON;\n  }\n\n  /**\n   * Determines if the given number is equal to another.\n   *\n   * @param a The first number to compare.\n   * @param b The second number to compare.\n   * @return True if the two numbers are equal.\n   * @see [[Functions.EPSILON]]\n   */\n  public static isEqual(a: number, b: number): boolean\n  {\n    return this.abs( a - b ) < this.EPSILON;\n  }\n\n  /**\n   * Determines if the given number is a whole number (integer).\n   *\n   * @param x The number to test.\n   * @return True if the number is whole, otherwise false.\n   * @see [[Functions.EPSILON]]\n   */\n  public static isWhole(x: number): boolean\n  {\n    return this.abs( Math.floor( x ) - x ) < this.EPSILON;\n  }\n\n  /**\n   * Determines if the given number is singular. A singular number is 1 or -1.\n   *\n   * @param x The number to test.\n   * @return True if the number is singular, otherwise false.\n   * @see [[Functions.EPSILON]]\n   */\n  public static isSingular(x: any): boolean\n  {\n    return this.isNumber( x ) && this.abs( this.abs( x ) - 1 ) < this.EPSILON;\n  }\n\n  /**\n   * Determines if the given number is valid. A valid number is finite and not\n   * NaN or Infinity.\n   *\n   * @param x The number to test.\n   * @return True if the input is finite number.\n   */\n  public static isNumber(x: any): boolean\n  {\n    return isFinite(x);\n  }\n\n  /**\n   * Trims the given input if its a string.\n   *\n   * @param x The string to remove space from the beginning and end.\n   * @return A trimmed string.\n   */\n  public static trim(x: string): string\n  {\n    return x ? x.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '') : x;\n  }\n\n  /**\n   * Calculates the greatest common denominator between the two numbers. If\n   * either of the numbers are not whole (integers) then 1 is immediately\n   * returned.\n   *\n   * @param a The first number.\n   * @param b The second number.\n   * @return The greatest common denominator between the two numbers.\n   */\n  public static gcd(a: number, b: number): number\n  {\n    if (!this.isWhole(a) || !this.isWhole(b))\n    {\n      return 1;\n    }\n\n    let x: number = a < b ? a : b;\n    let y: number = a < b ? b : a;\n    x = this.abs(x);\n    y = this.abs(y);\n\n    while(y)\n    {\n      let t = y;\n      y = x % y;\n      x = t;\n    }\n\n    return x;\n  }\n\n  /**\n   * Determines the absolute value of the given number.\n   *\n   * @param x The number to return the positive version of.\n   * @return The absolute value of x.\n   */\n  public static abs(x: number): number\n  {\n    return x < 0 ? -x : x;\n  }\n\n  /**\n   * Determines the sign of the given number. One of three values will be\n   * returned: 1, 0, or -1.\n   *\n   * @param x The number to determine the sign of.\n   * @return The sign of the given number.\n   */\n  public static sign(x: number): number\n  {\n    return x < 0 ? -1 : (x > 0 ? 1 : 0);\n  }\n\n  /**\n   * Appends an element or array of elements to the end of the given array.\n   *\n   * @param array The array to append values to the end of.\n   * @param input The element or array of elements to append to the end.\n   * @return The reference to the `array` given.\n   */\n  public static appendTo<T>(array: T[], input: T | T[]): T[]\n  {\n    if (input instanceof Array)\n    {\n      array.push.apply( array, input );\n    }\n    else if (input)\n    {\n      array.push( input );\n    }\n\n    return array;\n  }\n\n  /**\n   * Determines whether the given input looks like a [[GroupDefinition]].\n   *\n   * @param input The variable to inspect.\n   * @return True if the variable appears to be a [[GroupDefinition]].\n   */\n  public static isGroupDefinition(input: any): boolean\n  {\n    return !!(input && input.system && input.unit && input.denominators && input.units);\n  }\n\n  /**\n   * Determines whether the given input looks like a [[ValueDefinition]].\n   *\n   * @param input The variable to inspect.\n   * @return True if the variable appears to be a [[ValueDefinition]].\n   */\n  public static isValueDefinition(input: any): boolean\n  {\n    return !!(input && (input.value || input.unit || input.num || input.den));\n  }\n\n  /**\n   * Determines whether the given input looks like a [[RangeDefinition]].\n   *\n   * @param input The variable to inspect.\n   * @return True if the variable appears to be a [[RangeDefinition]].\n   */\n  public static isRangeDefinition(input: any): boolean\n  {\n    return !!(input && input.min && input.max);\n  }\n\n  /**\n   * Determines whether the given input is an array.\n   *\n   * @param input The variable to test.\n   * @return True if the variable is an array, otherwise false.\n   */\n  public static isArray(input: any): boolean\n  {\n    return input instanceof Array;\n  }\n\n  /**\n   * Determines whether the given input is a string.\n   *\n   * @param input The variable to test.\n   * @return True if the variable is a string, otherwise false.\n   */\n  public static isString(input: any): boolean\n  {\n    return typeof(input) === 'string';\n  }\n\n  /**\n   * Determines whether the given input is defined.\n   *\n   * @param input The variable to test.\n   * @return True if the variable is defined, otherwise false.\n   */\n  public static isDefined(input: any): boolean\n  {\n    return typeof(input) !== 'undefined';\n  }\n\n  /**\n   * Returns the first argument which is defined.\n   *\n   * @param a The first argument to look at.\n   * @param b The second argument to look at.\n   * @return The first defined argument.\n   * @see [[Functions.isDefined]]\n   */\n  public static coalesce(a: any, b: any): any\n  {\n    return this.isDefined( a ) ? a : b;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Functions.ts","\nimport { Value } from './Value';\nimport { Range, RangeList } from './Range';\nimport { Functions as fn } from './Functions';\n\n\n/**\n * The enumeration which decides what unit to use when converting to a string.\n */\nexport enum OutputUnit\n{\n\n  /**\n   * This value will keep units from being displayed.\n   */\n  NONE,\n\n  /**\n   * This value will ensure the unit exactly as the user entered it is used in\n   * the output no matter whether the value's plurality matches the given\n   * unit's plurality.\n   *\n   * @see [[Value.unit]]\n   */\n  GIVEN,\n\n  /**\n   * This value will force the short versions of the unit to be used.\n   *\n   * @see [[Group.singularShort]]\n   * @see [[Group.pluralShort]]\n   */\n  SHORT,\n\n  /**\n   * This value will force the long versions of the unit to be used.\n   *\n   * @see [[Group.singularLong]]\n   * @see [[Group.pluralLong]]\n   */\n  LONG\n}\n\n/**\n * The enumeration which decides how a value will be converted to a string.\n */\nexport enum OutputFormat\n{\n\n  /**\n   * The format of the user input will be used if possible.\n   */\n  GIVEN,\n\n  /**\n   * All values will be displayed using their decimal representation.\n   */\n  NUMBER,\n\n  /**\n   * All values will be displayed as a mixed fraction if the value is a fraction.\n   * A mixed fraction has a whole number followed by a fraction where the\n   * numerator is smaller than the denominator.\n   *\n   * @see [[Value.isFraction]]\n   */\n  MIXED,\n\n  /**\n   * All values will be displayed as an improper fraction if the value is a\n   * fraction and the numerator is larger than the denoninator.\n   *\n   * @see [[Value.isFraction]]\n   */\n  IMPROPER\n}\n\n\n/**\n * Developer input which can be passed to an Output constructor or all the\n * various functions that use the [[Output]] object.\n *\n * @see [[Base.output]]\n * @see [[Range.output]]\n * @see [[Value.output]]\n */\nexport interface OutputInput\n{\n  /**\n   * @see [[Output.unit]]\n   */\n  unit?: OutputUnit;\n\n  /**\n   * @see [[Output.format]]\n   */\n  format?: OutputFormat;\n\n  /**\n   * @see [[Output.repeatUnit]]\n   */\n  repeatUnit?: boolean;\n\n  /**\n   * @see [[Output.unitSpacer]]\n   */\n  unitSpacer?: string;\n\n  /**\n   * @see [[Output.rangeSpacer]]\n   */\n  rangeSpacer?: string;\n\n  /**\n   * @see [[Output.fractionSpacer]]\n   */\n  fractionSpacer?: string;\n\n  /**\n   * @see [[Output.mixedSpacer]]\n   */\n  mixedSpacer?: string;\n\n  /**\n   * @see [[Output.delimiter]]\n   */\n  delimiter?: string;\n\n  /**\n   * @see [[Output.significant]]\n   */\n  significant?: number;\n}\n\n\n/**\n * The class which converts Unitz objects to strings.\n */\nexport class Output implements OutputInput\n{\n\n  /**\n   * The option that specifies which units are chosen.\n   */\n  public unit: OutputUnit = OutputUnit.GIVEN;\n\n  /**\n   * The option that specifies how values are displayed.\n   */\n  public format: OutputFormat = OutputFormat.GIVEN;\n\n  /**\n   * Whether or not a unit should be displayed for the minimum and maximum of a\n   * range when they have the same group.\n   */\n  public repeatUnit: boolean = false;\n\n  /**\n   * The spacing used between the value and the unit.\n   */\n  public unitSpacer: string = '';\n\n  /**\n   * The spacing used between the minimum and maximum values in a range.\n   */\n  public rangeSpacer: string = ' - ';\n\n  /**\n   * The spacing used to separate the numerator and denominator of a fraction.\n   */\n  public fractionSpacer: string = '/';\n\n  /**\n   * The spacing used to seperate a mixed number from the fraction.\n   */\n  public mixedSpacer: string = ' ';\n\n  /**\n   * The delimiter used to separate ranges.\n   */\n  public delimiter: string = ', ';\n\n  /**\n   * An option used to restrict numbers from displaying large decimal numbers.\n   * When this value is set to -1 numbers are displayed fully. If the value is\n   * set to zero all numbers will be truncated to the whole version.\n   */\n  public significant: number = -1;\n\n\n  /**\n   * Creates a new instance of Output with an optional set of options to\n   * override the default values.\n   *\n   * @param input The options to apply to the new instance.\n   */\n  public constructor(input?: OutputInput)\n  {\n    if (fn.isDefined(input))\n    {\n      this.set( input );\n    }\n  }\n\n  /**\n   * Overrides values in this instance with ones specified in input.\n   *\n   * @param input The values to override.\n   * @return The reference to this instance.\n   */\n  public set(input: OutputInput): this\n  {\n    this.unit = fn.coalesce( input.unit, this.unit );\n    this.format = fn.coalesce( input.format, this.format );\n    this.repeatUnit = fn.coalesce( input.repeatUnit, this.repeatUnit );\n    this.unitSpacer = fn.coalesce( input.unitSpacer, this.unitSpacer );\n    this.rangeSpacer = fn.coalesce( input.rangeSpacer, this.rangeSpacer );\n    this.fractionSpacer = fn.coalesce( input.fractionSpacer, this.fractionSpacer );\n    this.mixedSpacer = fn.coalesce( input.mixedSpacer, this.mixedSpacer );\n    this.delimiter = fn.coalesce( input.delimiter, this.delimiter );\n    this.significant = fn.coalesce( input.significant, this.significant );\n\n    return this;\n  }\n\n  /**\n   * Returns an output instance which matches the desired options. If no options\n   * are specified the reference to this instance is returned. If the options\n   * are already an instance of Output its returned. If options are specified\n   * a new instance is created with the options of this instance, and the given\n   * options applied with [[Output.set]].\n   *\n   * @param input The options desired.\n   * @return An instance of this class which matches the desired options.\n   */\n  public extend(input?: OutputInput): Output\n  {\n    let extended: Output = this;\n\n    if (fn.isDefined(input))\n    {\n      if (input instanceof Output)\n      {\n        extended = input;\n      }\n      else\n      {\n        extended = new Output( this );\n        extended.set( input );\n      }\n    }\n\n    return extended;\n  }\n\n  /**\n   * Converts the list of ranges to a string. If a range is not valid it is\n   * skipped.\n   *\n   * @param ranges The list of ranges to convert.\n   * @return The string representation of the input.\n   */\n  public ranges(ranges: RangeList): string\n  {\n    let out = '';\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n\n      if (range.isValid)\n      {\n        if (out.length)\n        {\n          out += this.delimiter;\n        }\n\n        out += this.range( range );\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Converts the range to a string.\n   *\n   * @param ranges The range to convert.\n   * @return The string representation of the input.\n   */\n  public range(range: Range): string\n  {\n    let out = '';\n\n    if (!range.isValid)\n    {\n      // nothing\n    }\n    else if (range.isFixed)\n    {\n      out += this.value( range.min );\n    }\n    else\n    {\n      let minUnit: boolean = this.repeatUnit || range.min.unit !== range.max.unit;\n\n      out += this.value( range.min, minUnit );\n      out += this.rangeSpacer;\n      out += this.value( range.max );\n    }\n\n    return out;\n  }\n\n  /**\n   * Converts the value to the string optionally showing or hiding the unit.\n   *\n   * @param value The value to convert.\n   * @param showUnit Whether or not the unit should be added to the string.\n   * @return The string representation of the input.\n   */\n  public value(value: Value, showUnit: boolean = true): string\n  {\n    let out = '';\n\n    if (!value.isValid)\n    {\n\n    }\n    else if (this.isFraction( value ))\n    {\n      if (this.isMixed( value ))\n      {\n        out += value.mixedWhole;\n        out += this.mixedSpacer;\n        out += value.mixedNum;\n        out += this.fractionSpacer;\n        out += value.den;\n      }\n      else\n      {\n        out += value.num;\n        out += this.fractionSpacer;\n        out += value.den;\n      }\n    }\n    else\n    {\n      out += this.number( value.value );\n    }\n\n    if (showUnit && this.unit !== OutputUnit.NONE && value.isValid)\n    {\n      let group = value.group;\n\n      out += this.unitSpacer;\n\n      if (this.isLongUnit( value ))\n      {\n        out += fn.isSingular( value.value ) ? group.singularLong : group.pluralLong;\n      }\n      else if (this.isShortUnit( value ) || (group && group.dynamic))\n      {\n        out += fn.isSingular( value.value ) ? group.singularShort : group.pluralShort;\n      }\n      else\n      {\n        out += value.unit;\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Converts the number to a string.\n   *\n   * @param x The number to convert.\n   * @return The string representation of the input.\n   */\n  public number(x: number): string\n  {\n    let valueString: string = x + '';\n\n    if (this.significant >= 0 && valueString !== '0')\n    {\n      let valueSignificant: string = x\n        .toFixed(this.significant)\n        .replace(/0*$/, '')\n        .replace(/\\.$/, '');\n\n      return valueSignificant.length < valueString.length ? valueSignificant : valueString;\n    }\n\n    return valueString;\n  }\n\n  /**\n   * Determines whether the value should be displayed as a fraction.\n   *\n   * @param value The value to look at.\n   * @return True if the value should be displayed as a fraction, otherwise false.\n   */\n  public isFraction(value: Value): boolean\n  {\n    return value.isFraction && this.format !== OutputFormat.NUMBER;\n  }\n\n  /**\n   * Determines whether the value should be displayed as a number.\n   *\n   * @param value The value to look at.\n   * @return True if the value should be displayed as a number, otherwise false.\n   */\n  public isNumber(value: Value): boolean\n  {\n    return value.isValid && !this.isFraction( value );\n  }\n\n  /**\n   * Determines whether the value should be displayed as a mixed fraction. This\n   * assumes [[Output.isFraction]] was already checked and returned true.\n   *\n   * @param value The value to look at.\n   * @return True if the value should be displayed as a mixed fraction, otherwise false.\n   */\n  public isMixed(value: Value): boolean\n  {\n    return value.mixedWhole !== 0 && this.format !== OutputFormat.IMPROPER;\n  }\n\n  /**\n   * Determines whether the short unit should be displayed.\n   *\n   * @param value The value to look at.\n   * @return True if the short unit should be displayed, otherwise false.\n   */\n  public isShortUnit(value: Value)\n  {\n    return value.group && this.unit === OutputUnit.SHORT;\n  }\n\n  /**\n   * Determines whether the long unit should be displayed.\n   *\n   * @param value The value to look at.\n   * @return True if the short unit should be displayed, otherwise false.\n   */\n  public isLongUnit(value: Value)\n  {\n    return value.group && this.unit === OutputUnit.LONG;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Output.ts","\nimport { Plurality } from './Plurality';\nimport { System } from './System';\nimport { Class } from './Class';\nimport { GroupDefinition, UnitDefinitionMap, Numbers } from './Types';\nimport { Functions as fn } from './Functions';\nimport { Transform } from './Transform';\n\n\n/**\n * An array of groups.\n */\nexport type GroupList = Group[];\n\n/**\n * An object of groups keyed by their units.\n */\nexport type GroupMap = { [key: string]: Group };\n\n/**\n * A function which takes a unit and returns a Group instance.\n */\nexport type GroupFactory = (unit: string) => Group;\n\n\n/**\n * A unit and its aliases as well as their plurality.\n *\n * A group is relative to a base group or is a base group itself. As unit\n * aliases are added to the group it determines the appropriate plural and\n * singular long and short versions given the unit aliases in this group.\n */\nexport class Group\n{\n\n  /**\n   * The System this group belongs in. One of [[System.METRIC]],\n   * [[System.US]], or [[System.ANY]].\n   */\n  public system: System;\n\n  /**\n   * Whether this group is considered common. A common group is one a\n   * developer has decided the user will be familiar with and would be okay\n   * seeing values in this unit.\n   */\n  public common: boolean;\n\n  /**\n   * The main unit for this group. This is the preferred unit if one is not\n   * specified in the definition.\n   */\n  public unit: string;\n\n  /**\n   * The unit of the base group. The base group is typically the smallest value\n   * and is also where the baseUnit matches unit.\n   */\n  public baseUnit: string;\n\n  /**\n   * The scale of this group relative to the base group. This is used for\n   * conversions of values with the same base group.\n   */\n  public baseScale: number = 1;\n\n  /**\n   * The scale of this group relative to the first base group added to the\n   * class. This is used to compare numbers of the same class across all bases.\n   */\n  public classScale: number = 0;\n\n  /**\n   * The unit the developer prefers for their users.\n   *\n   * @see [[Base.preferred]]\n   */\n  public preferredUnit: string;\n\n  /**\n   * The unit this group is relative to.\n   */\n  public relativeUnit: string;\n\n  /**\n   * This defines how to calculate the scale of the group by multiplying it by\n   * the group of `relativeUnit`.\n   */\n  public relativeScale: number;\n\n  /**\n   * A map of all valid units and whether they are singular, plural, or either.\n   */\n  public units: UnitDefinitionMap;\n\n  /**\n   * The list of valid denominators for this group. Values when converted to\n   * fractions look at this list to ensure that fractions are not produced that\n   * are not user friendly. For example, no one would say 5/23 a meter.\n   */\n  public denominators: number[];\n\n  /**\n   * Whether this group was dynamically created by user input having units\n   * not mapped to groups by the developer.\n   */\n  public dynamic: boolean = false;\n\n  /**\n   * The class this group belongs to.\n   */\n  public parent: Class;\n\n  /**\n   * The shortest unit in this group that is used for singular values.\n   */\n  public singularShort: string;\n\n  /**\n   * The longest unit in this group that is used for singular values.\n   */\n  public singularLong: string;\n\n  /**\n   * The longest unit in this group that is used for plural values.\n   */\n  public pluralShort: string;\n\n  /**\n   * The longest unit in this group that is used for plural values.\n   */\n  public pluralLong: string;\n\n\n  /**\n   * Creates a new instance of Group given a definition and the parent class.\n   *\n   * @param definition The definition of the group.\n   * @param parent The class which contains this group.\n   */\n  public constructor(definition: GroupDefinition, parent: Class)\n  {\n    this.system = definition.system;\n    this.common = !!definition.common;\n    this.unit = definition.unit;\n    this.baseUnit = definition.baseUnit;\n    this.preferredUnit = definition.preferredUnit || definition.unit;\n    this.relativeUnit = definition.relativeUnit;\n    this.relativeScale = definition.relativeScale || 1;\n    this.units = definition.units;\n    this.denominators = definition.denominators;\n    this.parent = parent;\n\n    this.updateUnits();\n  }\n\n  /**\n   * True if this group is a base group, otherwise false.\n   */\n  public get isBase(): boolean\n  {\n    return this.unit === this.baseUnit;\n  }\n\n  /**\n   * Sets the dynamic flag of this group.\n   *\n   * @param dynamic Whether this group is dynamic or not.\n   * @return The reference to this instance.\n   */\n  public setDynamic(dynamic: boolean = true): this\n  {\n    this.dynamic = dynamic;\n\n    return this;\n  }\n\n  /**\n   * Adds a denominator or array of denominators to this group.\n   *\n   * @param denominators A denominator or an array of denominators to add.\n   * @return The reference to this instance.\n   */\n  public addDenominator(denominators: Numbers): this\n  {\n    fn.appendTo( this.denominators, denominators );\n\n    return this;\n  }\n\n  /**\n   * Sets the denominators of this group.\n   *\n   * @param denominators The new denominators for this group.\n   * @return The reference to this instance.\n   * @see [[Group.denominators]]\n   */\n  public setDenominators(denominators: number[]): this\n  {\n    this.denominators = denominators;\n\n    return this;\n  }\n\n  /**\n   * Sets the common flag of this group.\n   *\n   * @param common Whether this group is common or not.\n   * @return The reference to this instance.\n   * @see [[Group.common]]\n   */\n  public setCommon(common: boolean = true): this\n  {\n    this.common = common;\n\n    return this;\n  }\n\n  /**\n   * Sets the preferred unit of this group.\n   *\n   * @param unit The preferred unit of this group.\n   * @return The reference to this instance.\n   * @see [[Group.preferredUnit]]\n   */\n  public setPreferred(unit: string): this\n  {\n    this.preferredUnit = unit;\n\n    return this;\n  }\n\n  /**\n   * Adds the given unit aliases to this group and the parent class.\n   *\n   * @param units The units to add to the group and class.\n   * @return The reference to this instance.\n   * @see [[Class.addGroupUnit]]\n   */\n  public addUnits(units: UnitDefinitionMap): this\n  {\n    let parent: Class = this.parent;\n\n    for (let unit in units)\n    {\n      this.units[ unit ] = units[ unit ];\n\n      parent.addGroupUnit( unit, this );\n    }\n\n    this.updateUnits();\n\n    return this;\n  }\n\n  /**\n   * Removes the given unit aliases from this group and the parent class.\n   *\n   * @param units The array of unit aliases to remove.\n   * @return The reference to this instance.\n   * @see [[Class.removeGroupUnit]]\n   */\n  public removeUnits(units: string[]): this\n  {\n    let parent: Class = this.parent;\n    let existing: UnitDefinitionMap = this.units;\n\n    for (let i = 0; i < units.length; i++)\n    {\n      let unit = units[ i ];\n\n      if (unit in existing)\n      {\n        delete existing[ unit ];\n\n        parent.removeGroupUnit( unit, this );\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Updates the singular and plural long and short form units for this group.\n   *\n   * @return The reference to this instance.\n   */\n  public updateUnits(): this\n  {\n    this.singularShort = null;\n    this.singularLong = null;\n    this.pluralShort = null;\n    this.pluralLong = null;\n\n    for (let unit in this.units)\n    {\n      var plurality = this.units[ unit ];\n\n      if (plurality !== Plurality.PLURAL)\n      {\n        if (!this.singularShort || unit.length < this.singularShort.length)\n        {\n          this.singularShort = unit;\n        }\n\n        if (!this.singularLong || unit.length > this.singularLong.length)\n        {\n          this.singularLong = unit;\n        }\n      }\n\n      if (plurality !== Plurality.SINGULAR)\n      {\n        if (!this.pluralShort || unit.length < this.pluralShort.length)\n        {\n          this.pluralShort = unit;\n        }\n\n        if (!this.pluralLong || unit.length > this.pluralLong.length)\n        {\n          this.pluralLong = unit;\n        }\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Invokes a callback for each group in the parent class that are visible\n   * based on the given transform relative to this group.\n   *\n   * @param transform The transform which decides what groups are visible.\n   * @param reverse If the groups of the class should be iterated in reverse.\n   * @param callback A function to invoke with all visible groups found and the\n   *  index of that group in the set of visible groups. If `false` is returned\n   *  by the function iteration of visible groups ceases.\n   * @param callback.group The current visible group.\n   * @param callback.index The index of the current visible group.\n   * @see [[Transform.isVisibleGroup]]\n   */\n  public matches(transform: Transform, reverse: boolean, callback: (group: Group, index: number) => any): void\n  {\n    if (this.parent)\n    {\n      this.parent.getVisibleGroups( transform, reverse, this, callback );\n    }\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Group.ts","\nimport { GroupDefinition, Converter, ConverterMap, ConverterDoubleMap } from './Types';\nimport { Group, GroupMap, GroupList } from './Group';\nimport { Transform } from './Transform';\nimport { RangeList } from './Range';\n\n/**\n * A map of classes is an object where the key is a unit and the value is a class.\n */\nexport type ClassMap = { [unit: string]: Class };\n\n/**\n * A group of ranges by class name and a list of ranges without classes.\n */\nexport type ClassGrouping = {\n  /** The list of groups which don't have classes **/\n  groupless: RangeList,\n  /** The object of entries keyed by class name. **/\n  classes: {\n    /** An entry keyed by the class naem **/\n    [className: string]: {\n      /** The class of the entry **/\n      parent: Class,\n      /** The list of ranges in the entry with the same class **/\n      ranges: RangeList\n    }\n  }\n}\n\n/**\n * A collection of groups and their units with the logic on how to convert\n * between groups with differing base units.\n *\n * A class is essentially something like \"Length\" where base units are \"inches\"\n * and \"millimeters\" and there are various other groups based off of these\n * base groups like \"feet\", \"centimeters\", and \"meters\".\n *\n * A class is responsible for being the sole place where conversion is done\n * between different groups in the same class.\n *\n * @see [[Class.convert]]\n */\nexport class Class\n{\n\n  /**\n   * The name of the class.\n   */\n  public name: string;\n\n  /**\n   * A map of groups by their units. This map contains the expected case of each\n   * unit as well as the lowercase version of the unit as long as it doesn't\n   * overwrite another group. Unit case may be important so it has priority.\n   */\n  public groupMap: GroupMap;\n\n  /**\n   * A list of the groups in this class.\n   */\n  public groups: GroupList;\n\n  /**\n   * A map of functions which convert one unit value to another unit value.\n   * It is used by invoking `converters[ fromUnit ][ toUnit ]( value )`.\n   *\n   * @see [[Class.setBaseConversion]]\n   * @see [[Class.convert]]\n   */\n  public converters: ConverterDoubleMap;\n\n  /**\n   * Creates a new instance of Class given the name of the class and optionally\n   * the groups of the class.\n   *\n   * @param name The unique name of the class.\n   * @param groups The optional list of groups to populate the class with.\n   */\n  public constructor(name: string, groups?: GroupDefinition[])\n  {\n    this.name = name;\n    this.groupMap = {};\n    this.groups = [];\n    this.converters = {};\n\n    if (groups)\n    {\n      this.addGroups(groups);\n    }\n  }\n\n  /**\n   * Adds the group definitions to this class.\n   *\n   * @param definitions The array of group definitions.\n   * @return The reference to this instance.\n   * @see [[Class.addGroup]]\n   */\n  public addGroups(definitions: GroupDefinition[]): this\n  {\n    for (let i = 0; i < definitions.length; i++)\n    {\n      this.addGroup(definitions[i]);\n    }\n\n    return this;\n  }\n\n  /**\n   * Adds a group definition to this class. If the group is relative to another\n   * group the [[Group.baseScale]] and [[Group.baseUnit]] are set to appropriate\n   * values.\n   *\n   * @param definition The group definition.\n   * @return The instance of the group created from the definition.\n   * @see [[Class.addGroupUnit]]\n   */\n  public addGroup(definition: GroupDefinition): Group\n  {\n    let group = new Group(definition, this);\n    let { relativeUnit, relativeScale, units } = group;\n\n    if (relativeUnit)\n    {\n      let relative: Group = this.groupMap[ relativeUnit ];\n\n      group.baseScale = relativeScale * relative.baseScale;\n      group.baseUnit = relative.baseUnit;\n    }\n\n    for (let alias in units)\n    {\n      this.addGroupUnit( alias, group );\n    }\n\n    this.groups.push( group );\n\n    return group;\n  }\n\n  /**\n   * Adds the unit to this class for the given group. If the lowercase version\n   * of the unit has not been mapped yet it will be mapped to the given group.\n   *\n   * @param unit The unit to map to the group.\n   * @param group The group which has the unit.\n   * @return The reference to this instance.\n   */\n  public addGroupUnit(unit: string, group: Group): this\n  {\n    let lower: string = unit.toLowerCase();\n\n    this.groupMap[ unit ] = group;\n\n    if (!this.groupMap[ lower ])\n    {\n      this.groupMap[ lower ] = group;\n    }\n\n    return this;\n  }\n\n  /**\n   * Removes the given unit associated to the given group from the class. If the\n   * group is not mapped to this unit then this has no effect.\n   *\n   * @param unit The unit to remove from this class.\n   * @param group The group which has the unit.\n   * @return The reference to this instance.\n   */\n  public removeGroupUnit(unit: string, group: Group): this\n  {\n    let lower: string = unit.toLowerCase();\n\n    if (this.groupMap[ unit ] === group)\n    {\n      delete this.groupMap[ unit ];\n    }\n\n    if (this.groupMap[ lower ] === group)\n    {\n      delete this.groupMap[ lower ];\n    }\n\n    return this;\n  }\n\n  /**\n   * Determines the first group in this class which is a base group.\n   *\n   * @see [[Group.isBase]]\n   */\n  private getFirstBase(): Group\n  {\n    let groups: GroupList = this.groups;\n\n    for (let i = 0; i < groups.length; i++)\n    {\n      let group: Group = groups[ i ];\n\n      if (group.isBase)\n      {\n        return group;\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Updates the [[Group.classScale]] value in each group in this class so that\n   * there is a baseline for comparing one group to another no matter the base\n   * unit. For comparing in the same base, you can use [[Group.baseScale]].\n   *\n   * @return The reference to this instance.\n   */\n  public setClassScales(): this\n  {\n    let groups: GroupList = this.groups;\n    let first: Group = this.getFirstBase();\n\n    if (first)\n    {\n      for (let i = 0; i < groups.length; i++)\n      {\n        let group: Group = groups[ i ];\n\n        if (group.baseUnit === first.baseUnit)\n        {\n          group.classScale = group.baseScale;\n        }\n        else if (group.baseUnit in this.converters)\n        {\n          group.classScale = this.converters[ group.baseUnit ][ first.baseUnit ]( group.baseScale );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  /**\n   * Sets the conversion function between the two base units.\n   *\n   * @param fromUnit The base unit to convert from.\n   * @param toUnit The base unit to convert to.\n   * @param converter The function to pass the value to convert.\n   * @return The reference to this instance.\n   */\n  public setBaseConversion(fromUnit: string, toUnit: string, converter: Converter): this\n  {\n    let converters = this.converters;\n    converters[ fromUnit ] = converters[ fromUnit ] || {};\n    converters[ fromUnit ][ toUnit ] = converter;\n\n    return this;\n  }\n\n  /**\n   * Determines which groups in this class are visible according to the given\n   * transform. The groups can be iterated in reverse and can optionally take\n   * a related group into consideration (when the system is GIVEN, we want to\n   * return the groups with the same system).\n   *\n   * @param transform The transform which decides what groups are visible.\n   * @param reverse If the groups of this class should be iterated in reverse.\n   * @param relatedGroup A related group which may be used for visibility if the\n   *  [[Transform.system]] is [[System.GIVEN]].\n   * @param callback A function to invoke with all visible groups found and the\n   *  index of that group in the set of visible groups. If `false` is returned\n   *  by the function iteration of visible groups ceases.\n   * @param callback.group The current visible group.\n   * @param callback.index The index of the current visible group.\n   * @see [[Transform.isVisibleGroup]]\n   */\n  public getVisibleGroups(transform: Transform, reverse: boolean, relatedGroup: Group, callback: (group: Group, index: number) => any): void\n  {\n    let groups: GroupList = this.groups;\n    let matched: number = 0;\n\n    let start = reverse ? groups.length - 1 : 0;\n    let stop = reverse ? -1 : groups.length;\n    let increment = reverse ? -1 : 1;\n\n    for (let i = start; i !== stop; i += increment)\n    {\n      let group: Group = groups[ i ];\n\n      if (transform.isVisibleGroup( group, relatedGroup ))\n      {\n        let result: any = callback( group, matched++ );\n\n        if (result === false)\n        {\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * Converts the given number from a given group to a given group. If the two\n   * groups are the same or one or both of the groups are not provided then the\n   * `value` provided is returned. If the two groups have differing base units\n   * the [[Class.converters]] map is used to convert the `value` over to the\n   * proper base. If the [[Class.converters]] map is missing a base conversion\n   * zero is returned. This might happen if a group is passed to this function\n   * which does not belong to this class OR if the user has impromperly setup\n   * their own classes.\n   *\n   * @param value The number to convert.\n   * @param from The group of the number to convert from.\n   * @param to The group to convert to.\n   * @return The converted number or zero if a base conversion could not be found.\n   */\n  public convert(value: number, from: Group, to: Group): number\n  {\n    if (from === to || !from || !to)\n    {\n      return value;\n    }\n\n    let converted: number = value * from.baseScale;\n\n    if (from.baseUnit !== to.baseUnit)\n    {\n      let map: ConverterMap = this.converters[ from.baseUnit ];\n\n      if (!map || !map[ to.baseUnit ])\n      {\n        return 0;\n      }\n\n      let converter: Converter = map[ to.baseUnit ];\n\n      converted = converter( converted );\n    }\n\n    return converted / to.baseScale;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Class.ts","\nimport { Functions as fn } from './Functions';\nimport { Range } from './Range';\n\n\nexport enum SortType {\n  MIN,\n  MAX,\n  AVERAGE\n}\n\nexport interface SortInput {\n  ascending?: boolean;\n  type?: SortType;\n  classes?: SortClassMap;\n}\n\nexport type SortClassMap = { [className: string]: number };\n\nexport type Sorter = (a: Range, b: Range) => number;\n\nexport class Sort implements SortInput\n{\n\n  public ascending: boolean = false;\n  public type: SortType = SortType.MAX;\n  public classes: SortClassMap = {};\n\n  public constructor(input?: SortInput)\n  {\n    if (fn.isDefined(input))\n    {\n      this.set( input );\n    }\n  }\n\n  public set(input: SortInput): this\n  {\n    this.ascending = fn.coalesce( input.ascending, this.ascending );\n    this.type = fn.coalesce( input.type, this.type );\n\n    if (fn.isDefined( input.classes ))\n    {\n      for (let className in input.classes)\n      {\n        this.classes[ className ] = input.classes[ className ];\n      }\n    }\n\n    return this;\n  }\n\n  public extend(input?: SortInput): Sort\n  {\n    let extended: Sort = this;\n\n    if (fn.isDefined(input))\n    {\n      if (input instanceof Sort)\n      {\n        extended = input;\n      }\n      else\n      {\n        extended = new Sort( this );\n        extended.set( input );\n      }\n    }\n\n    return extended;\n  }\n\n  public getSorter(): Sorter\n  {\n    return (a: Range, b: Range) =>\n    {\n      let d: number = this.getClassComparison(a, b);\n\n      if (d === 0)\n      {\n        switch (this.type)\n        {\n          case SortType.MIN:\n            d = this.getMinComparison(a, b);\n            break;\n          case SortType.MAX:\n            d = this.getMaxComparison(a, b);\n            break;\n          case SortType.AVERAGE:\n            d = this.getAverageComparison(a, b);\n            break;\n        }\n      }\n\n      return this.ascending ? d : -d;\n    };\n  }\n\n  private getMinComparison(a: Range, b: Range): number\n  {\n    return fn.sign( a.min.classScaled - b.min.classScaled );\n  }\n\n  private getMaxComparison(a: Range, b: Range): number\n  {\n    return fn.sign( a.max.classScaled - b.max.classScaled );\n  }\n\n  private getAverageComparison(a: Range, b: Range): number\n  {\n    let avg: number = (a.min.classScaled + a.max.classScaled) * 0.5;\n    let bvg: number = (b.min.classScaled + b.max.classScaled) * 0.5;\n\n    return fn.sign( avg - bvg );\n  }\n\n  private getClassComparison(a: Range, b: Range): number\n  {\n    let ag: number = a.min.group ? 1 : -1;\n    let bg: number = b.min.group ? 1 : -1;\n\n    if (ag !== bg)\n    {\n      return ag - bg;\n    }\n\n    let ac: number = this.classes[ a.min.group.parent.name ] || 0;\n    let bc: number = this.classes[ b.min.group.parent.name ] || 0;\n\n    return ac - bc;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Sort.ts","\nimport { Functions as fn } from './Functions';\nimport { System } from './System';\nimport { Group } from './Group';\nimport { Class } from './Class';\nimport { Range } from './Range';\n\n\nexport interface TransformInput {\n  common?: boolean;\n  system?: System;\n  min?: number;\n  max?: number;\n  groupless?: boolean;\n  convertWithMax?: boolean;\n  onlyUnits?: string[];\n  notUnits?: string[];\n  onlyClasses?: string[];\n  notClasses?: string[];\n}\n\nexport class Transform implements TransformInput\n{\n\n  public common: boolean = true;\n  public system: System = System.GIVEN;\n  public min: number = -Number.MAX_VALUE;\n  public max: number = Number.MAX_VALUE;\n  public convertWithMax: boolean = true;\n  public groupless: boolean = true;\n  public onlyUnits: string[];\n  public notUnits: string[];\n  public onlyClasses: string[];\n  public notClasses: string[];\n\n  public constructor(input?: TransformInput)\n  {\n    if (fn.isDefined(input))\n    {\n      this.set( input );\n    }\n  }\n\n  public set(input: TransformInput): this\n  {\n    this.common = fn.coalesce( input.common, this.common );\n    this.system = fn.coalesce( input.system, this.system );\n    this.min = fn.coalesce( input.min, this.min );\n    this.max = fn.coalesce( input.max, this.max );\n    this.groupless = fn.coalesce( input.groupless, this.groupless );\n    this.convertWithMax = fn.coalesce( input.convertWithMax, this.convertWithMax );\n    this.onlyUnits = fn.coalesce( input.onlyUnits, this.onlyUnits );\n    this.notUnits = fn.coalesce( input.notUnits, this.notUnits );\n    this.onlyClasses = fn.coalesce( input.onlyClasses, this.onlyClasses );\n    this.notClasses = fn.coalesce( input.notClasses, this.notClasses );\n\n    return this;\n  }\n\n  public extend(input?: TransformInput): Transform\n  {\n    let extended: Transform = this;\n\n    if (fn.isDefined(input))\n    {\n      if (input instanceof Transform)\n      {\n        extended = input;\n      }\n      else\n      {\n        extended = new Transform( this );\n        extended.set( input );\n      }\n    }\n\n    return extended;\n  }\n\n  public isValidRange(range: Range): boolean\n  {\n    let group: Group = this.convertWithMax ? range.max.group : range.min.group;\n\n    if (range.max.value < this.min)\n    {\n      return false;\n    }\n\n    if (range.min.value > this.max)\n    {\n      return false;\n    }\n\n    return this.isVisibleGroup(group);\n  }\n\n  public isVisibleGroup(group: Group, givenGroup?: Group): boolean\n  {\n    if (!group)\n    {\n      return this.groupless;\n    }\n\n    return this.isCommonMatch( group ) &&\n      this.isSystemMatch( group, givenGroup ) &&\n      this.isUnitMatch( group ) &&\n      this.isClassMatch( group.parent );\n  }\n\n  public isCommonMatch(group: Group): boolean\n  {\n    return !this.common || group.common;\n  }\n\n  public isSystemMatch(group: Group, givenGroup?: Group): boolean\n  {\n    switch (this.system)\n    {\n      case System.METRIC:\n        return group.system === System.METRIC || group.system === System.ANY;\n      case System.US:\n        return group.system === System.US || group.system === System.ANY;\n      case System.NONE:\n        return false;\n      case System.ANY:\n        return true;\n      case System.GIVEN:\n        return !givenGroup || group.baseUnit === givenGroup.baseUnit;\n    }\n\n    return false;\n  }\n\n  public isClassMatch(parent: Class): boolean\n  {\n    if (this.onlyClasses)\n    {\n      return this.onlyClasses.indexOf( parent.name ) !== -1;\n    }\n\n    if (this.notClasses)\n    {\n      return this.notClasses.indexOf( parent.name ) === -1;\n    }\n\n    return true;\n  }\n\n  public isUnitMatch(group: Group): boolean\n  {\n    if (this.onlyUnits)\n    {\n      return this.onlyUnits.indexOf( group.unit ) !== -1;\n    }\n\n    if (this.notUnits)\n    {\n      return this.notUnits.indexOf( group.unit ) === -1;\n    }\n\n    return true;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Transform.ts","\nimport { Plurality } from './Plurality';\nimport { System } from './System';\nimport { Class, ClassMap } from './Class';\nimport { Output } from './Output';\nimport { Group, GroupMap, GroupList } from './Group';\nimport { Transform } from './Transform';\nimport { Value } from './Value';\nimport { Sort } from './Sort';\n\n\n/**\n * The global class which keeps track of all unit mappings and global options.\n *\n * This class is also responsible for creating dynamic classes and groups based\n * on approximation when a desired unit is not defined by the developer.\n */\nexport class Core\n{\n\n  /**\n   * The map of defined classes by their name.\n   */\n  public static classMap: ClassMap = {};\n\n  /**\n   * An array of the defined classes.\n   */\n  public static classes: Class[] = [];\n\n  /**\n   * A map of groups by their acceptable units.\n   */\n  public static unitToGroup: GroupMap = {};\n\n  /**\n   * A list of dynamically created groups based on units specified by a user\n   * which are not defined by the developer.\n   */\n  public static dynamicGroups: GroupList = [];\n\n  /**\n   * A map of the dynamically created groups by a key determined by\n   * [[Core.getDynamicMatch]].\n   */\n  public static dynamicMatches: GroupMap = {};\n\n  /**\n   * Dynamic groups are mapped together (by default) by looking at the first few\n   * characters.\n   *\n   * @see [[Core.getDynamicMatch]]\n   */\n  public static dynamicMatchLength: number = 3;\n\n\n  /**\n   * The global options used for outputting [[Base]], [[Range]], and [[Value]]s\n   * which may be overridden by specifying any number of options.\n   *\n   * @see [[Base.output]]\n   * @see [[Range.output]]\n   * @see [[Value.output]]\n   */\n  public static globalOutput: Output = new Output();\n\n  /**\n   * The global transform options used for transforming a [[Base]] instance\n   * by specifying what sort of units/groups are visible to the user.\n   *\n   * @see [[Base.normalize]]\n   * @see [[Base.compact]]\n   * @see [[Base.expand]]\n   * @see [[Base.conversions]]\n   * @see [[Base.filter]]\n   */\n  public static globalTransform: Transform = new Transform();\n\n  /**\n   * The global sort options used for ordering ranges in a [[Base]] instance.\n   *\n   * @see [[Base.sort]]\n   */\n  public static globalSort: Sort = new Sort();\n\n\n  /**\n   * Returns a [[Group]] instance mapped by the given unit. If no unit is given\n   * `null` is returned. If the unit isn't mapped to a group a dynamic group\n   * match is looked at and if none are found and `createDynamic` is true a new\n   * dynamic group is created.\n   *\n   * @param unit The unit of the group to get.\n   * @param createDynamic If creating a dynamic group should be created if an\n   *  existing group could not be found.\n   * @return The group matched to the unit or null if none was found.\n   * @see [[Core.getDynamicMatch]]\n   * @see [[Core.addDynamicUnit]]\n   * @see [[Core.newDynamicGroup]]\n   */\n  public static getGroup(unit: string, createDynamic: boolean = true): Group\n  {\n    if (!unit)\n    {\n      return null;\n    }\n\n    let exactGroup: Group = Core.unitToGroup[ unit ];\n\n    if (exactGroup)\n    {\n      return exactGroup;\n    }\n\n    let normalizedUnit: string = unit.toLowerCase();\n    let normalizedGroup: Group = Core.unitToGroup[ normalizedUnit ];\n\n    if (normalizedGroup)\n    {\n      return normalizedGroup;\n    }\n\n    if (!createDynamic)\n    {\n      return null;\n    }\n\n    let dynamicUnit: string = Core.getDynamicMatch( unit );\n    let dynamicGroup: Group = Core.dynamicMatches[ dynamicUnit ];\n\n    if (dynamicGroup)\n    {\n      return Core.addDynamicUnit( unit, dynamicGroup );\n    }\n\n    return Core.newDynamicGroup( unit );\n  }\n\n  /**\n   * Sets the given unit as the preferred unit for the group it belongs to. If a\n   * group is not found then this has no affect.\n   *\n   * @param unit The unit to mark as the preferred unit.\n   * @see [[Core.getGroup]]\n   */\n  public static setPreferred(unit: string): void\n  {\n    let group: Group = this.getGroup( unit, false );\n\n    if (group)\n    {\n      group.setPreferred( unit );\n    }\n  }\n\n  /**\n   * Sets whether the group associated with the given unit is common. A common\n   * group is one a user is familiar with and would be okay seeing values\n   * represented in. If a group is not found then this has no affect.\n   *\n   * @param unit The unit of a group to set the common flag.\n   * @param common Whether the associated group should be common.\n   * @see [[Core.getGroup]]\n   */\n  public static setCommon(unit: string, common: boolean = true): void\n  {\n    let group: Group = this.getGroup( unit, false );\n\n    if (group)\n    {\n      group.setCommon( common );\n    }\n  }\n\n  /**\n   * Sets the denominators for the group associated to the given unit.\n   * Denominators are useful for calculating a fraction from a value.\n   *\n   * @param unit The unit of a group to set the denominators of.\n   * @param denominators The new denominators for the group.\n   * @see [[Core.getGroup]]\n   */\n  public static setDenominators(unit: string, denominators: number[]): void\n  {\n    let group: Group = this.getGroup( unit, false );\n\n    if (group)\n    {\n      group.setDenominators( denominators );\n    }\n  }\n\n  /**\n   * Adds the given class and all groups and units to the global state. If there\n   * are units mapped to other groups they are overwritten by the units in the\n   * given class.\n   *\n   * @param parent The class to add to the global state.\n   */\n  public static addClass(parent: Class): void\n  {\n    this.classMap[ parent.name ] = parent;\n    this.classes.push( parent );\n\n    let groups: GroupMap = parent.groupMap;\n\n    for (let unit in groups)\n    {\n      this.unitToGroup[ unit ] = groups[ unit ];\n    }\n  }\n\n  /**\n   * Adds an array of classes to the global state.\n   *\n   * @see [[Core.addClass]]\n   */\n  public static addClasses(...classes: Class[]): void\n  {\n    for (let i = 0; i < classes.length; i++)\n    {\n      this.addClass( classes[ i ] );\n    }\n  }\n\n  /**\n   * Adds the unit to the given dynamic group. This function also updates the\n   * plurality of all the units currently in the group.\n   *\n   * @param unit The unit to add to the given group.\n   * @param group The dynamically created group.\n   * @return The instance of the given group.\n   */\n  public static addDynamicUnit(unit: string, group: Group): Group\n  {\n    group.units[ unit ] = Plurality.EITHER;\n\n    let unitCount: number = 0;\n\n    for (let groupUnit in group.units)\n    {\n      if (groupUnit)\n      {\n        unitCount++;\n      }\n    }\n\n    if (unitCount > 1)\n    {\n      let longest: string;\n\n      for (let groupUnit in group.units)\n      {\n        group.units[ groupUnit ] = Plurality.SINGULAR;\n\n        if (!longest || groupUnit.length > longest.length)\n        {\n          longest = groupUnit;\n        }\n      }\n\n      if (longest)\n      {\n        group.units[ longest ] = Plurality.PLURAL;\n      }\n    }\n\n    group.updateUnits();\n\n    this.unitToGroup[ unit ] = group;\n    this.unitToGroup[ unit.toLowerCase() ] = group;\n\n    this.dynamicMatches[ this.getDynamicMatch( unit ) ] = group;\n\n    return group;\n  }\n\n  /**\n   * Creates a dynamic class & group based on the given unit and adds it to the\n   * global state. By default the group is marked with [[System.ANY]], is\n   * common, and has the valid denominators 2, 3, 4, 5, 6, 8, 10.\n   *\n   * @param unit The initial unit of the group to use as the name of the class\n   *  and the base unit of the group.\n   * @return An instance of a new Group with a new parent Class.\n   */\n  public static newDynamicGroup(unit: string): Group\n  {\n    let parent: Class = new Class(unit);\n\n    let group: Group = parent.addGroup({\n      system: System.ANY,\n      unit: unit,\n      common: true,\n      baseUnit: unit,\n      denominators: [2, 3, 4, 5, 6, 8, 10],\n      units: {}\n    });\n\n    group.setDynamic();\n\n    this.addDynamicUnit( unit, group );\n    this.dynamicGroups.push( group );\n\n    return group;\n  }\n\n  /**\n   * The function which takes a unit and generates a string which should be used\n   * to mark similarly spelled units under the same dynamic group.\n   *\n   * @param unit The unit to build a key from.\n   * @return The key which identifies the dynamic group.\n   */\n  public static getDynamicMatch(unit: string): string\n  {\n    return unit.substring( 0, this.dynamicMatchLength ).toLowerCase();\n  }\n\n  /**\n   * The function which takes to values and determines which one is more\n   * \"normal\" or \"human friendly\".\n   *\n   * @param fromValue The most normal value found so far.\n   * @param toValue The value to compare to.\n   * @param transform The transformation rules to guide the function to choose\n   *  the more normal value.\n   * @param forOutput The output options to guide the function to choose the\n   *  more normal value.\n   * @return True if `toValue` appears more normal than `fromValue`.\n   */\n  // @ts-ignore\n  public static isMoreNormal(fromValue: Value, toValue: Value, transform: Transform, forOutput: Output): boolean\n  {\n    let fromString: string = forOutput.value( fromValue );\n    let toString: string = forOutput.value( toValue );\n\n    return toString.length <= fromString.length;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Core.ts","\nimport { Functions as fn } from './Functions';\nimport { Transform } from './Transform';\nimport { Output, OutputInput } from './Output';\nimport { Group } from './Group';\nimport { Core } from './Core';\n\n\n// TODO perUnit & perGroup (or: rateUnit & rateGroup)\n\nexport type ValueMap = { [unit: string]: Value };\n\nexport class Value\n{\n\n  public static INVALID: Value = new Value(Number.NaN, Number.NaN, 1, '', null);\n\n  public readonly value: number;\n  public readonly num: number;\n  public readonly den: number;\n  public readonly group: Group;\n  public unit: string;\n\n  public constructor(value: number, num: number, den: number, unit: string, group: Group)\n  {\n    let divisor: number = fn.gcd(num, den);\n    this.value = value;\n    this.num = num / divisor;\n    this.den = den / divisor;\n    this.unit = unit;\n    this.group = group;\n  }\n\n  public get isValid(): boolean\n  {\n    return isFinite(this.value);\n  }\n\n  public get isFraction(): boolean\n  {\n    return this.den !== 1;\n  }\n\n  public get isDecimal(): boolean\n  {\n    return this.den === 1;\n  }\n\n  public get isZero(): boolean\n  {\n    return fn.isZero( this.value );\n  }\n\n  public get isSingular(): boolean\n  {\n    return fn.isSingular( this.value );\n  }\n\n  public get scaled(): number\n  {\n    return this.group ? this.value * this.group.baseScale : this.value;\n  }\n\n  public get classScaled(): number\n  {\n    return this.group ? this.value * this.group.classScale : this.value;\n  }\n\n  public get actual(): number\n  {\n    return this.num / this.den;\n  }\n\n  public get mixedWhole(): number\n  {\n    return this.den !== 1 ? Math.floor(this.num / this.den) : 0;\n  }\n\n  public get mixedNum(): number\n  {\n    return this.den !== 1 ? this.num % this.den : this.num;\n  }\n\n  public get floor(): number\n  {\n    return Math.floor(this.value);\n  }\n\n  public get ceil(): number\n  {\n    return Math.ceil(this.value);\n  }\n\n  public get truncate(): number\n  {\n    return this.value < 0 ? this.ceil : this.floor;\n  }\n\n  public get remainder(): number\n  {\n    return this.value - this.floor;\n  }\n\n  public get error(): number\n  {\n    return this.actual - this.value;\n  }\n\n  public get distance(): number\n  {\n    return fn.abs(this.error);\n  }\n\n  public preferred(): Value\n  {\n    return this.group ? new Value(this.value, this.num, this.den, this.group.preferredUnit, this.group) : this;\n  }\n\n  public copy(): Value\n  {\n    return new Value(this.value, this.num, this.den, this.unit, this.group);\n  }\n\n  public zero(): Value\n  {\n    return new Value(0, 0, 1, this.unit, this.group);\n  }\n\n  public truncated(): Value\n  {\n    return new Value(this.truncate, this.truncate, 1, this.unit, this.group);\n  }\n\n  public fractioned(): Value\n  {\n    if (this.isFraction)\n    {\n      return this;\n    }\n\n    if (this.group)\n    {\n      return Value.fromNumberWithDenominators(this.value, this.group.denominators, this.unit, this.group);\n    }\n\n    return this;\n  }\n\n  public numbered(): Value\n  {\n    if (this.isFraction)\n    {\n      return new Value(this.value, this.value, 1, this.unit, this.group);\n    }\n\n    return this;\n  }\n\n  public convertTo(to: Group): number\n  {\n    let group: Group = this.group;\n\n    return group ? group.parent.convert( this.value, group, to ) : this.value;\n  }\n\n  public convertToValue(group: Group): Value\n  {\n    return Value.fromNumberForGroup( this.convertTo( group ), group );\n  }\n\n  public conversions(transform: Transform, reverse: boolean, callback: (transformed: Value, index: number) => void): void\n  {\n    if (this.group)\n    {\n      this.group.matches(transform, reverse, (group, index) =>\n      {\n        callback( this.convertToValue( group ), index );\n      });\n    }\n  }\n\n  public normalize(transform: Transform, forOutput: Output): Value\n  {\n    let closest: Value;\n\n    this.conversions(transform, false, (convert) =>\n    {\n      let acceptable: boolean = !forOutput.isNumber( convert );\n\n      if (!acceptable)\n      {\n        let number: string = forOutput.number( convert.value );\n\n        acceptable = number !== '0';\n      }\n\n      if (acceptable)\n      {\n        if (!closest || Core.isMoreNormal(closest, convert, transform, forOutput))\n        {\n          closest = convert;\n        }\n      }\n    });\n\n    return closest || this;\n  }\n\n  public add(addend: Value, scale: number = 1): Value\n  {\n    let num = this.num * addend.den + addend.num * this.den * scale;\n    let den = this.den * addend.den;\n    let result = this.value + addend.value * scale;\n\n    return new Value(result, num, den, this.unit, this.group);\n  }\n\n  public sub(subtrahend: Value, scale: number = 1): Value\n  {\n    let num = this.num * subtrahend.den - subtrahend.num * this.den * scale;\n    let den = this.den * subtrahend.den;\n    let result = this.value - subtrahend.value * scale;\n\n    return new Value(result, num, den, this.unit, this.group);\n  }\n\n  public mul(scale: number): Value\n  {\n    return new Value(this.value * scale, this.num * scale, this.den, this.unit, this.group);\n  }\n\n  /**\n   * Converts this range to a string with the given output options taking into\n   * account the global options.\n   *\n   * @param options The options to override the global output options.\n   * @return The string representation of this instance.\n   * @see [[Output]]\n   */\n  public output(options?: OutputInput): string\n  {\n    let output: Output = Core.globalOutput.extend( options );\n\n    return output.value( this );\n  }\n\n  public static fromNumber(value: number, unit: string = '', group: Group = null): Value\n  {\n    return new Value(value, value, 1, unit, group);\n  }\n\n  public static fromNumberWithRange(value: number, unit: string = '', group: Group = null, minDen: number = 1, maxDen: number = 100): Value\n  {\n    let closestDenominator: number = 0;\n    let closestDistance: number = -1;\n\n    for (let i = minDen; i <= maxDen; i++)\n    {\n      let den = i;\n      let num = Math.floor( den * value );\n      let actual = num / den;\n      let distance = fn.abs(value - actual);\n\n      if (closestDistance === -1 || distance < closestDistance)\n      {\n        closestDistance = distance;\n        closestDenominator = den;\n      }\n    }\n\n    if (closestDistance > fn.EPSILON)\n    {\n      return new Value(value, value, 1, unit, group);\n    }\n\n    if (closestDenominator === 0)\n    {\n      closestDenominator = 1;\n    }\n\n    return new Value(value, Math.floor(value * closestDenominator), closestDenominator, unit, group);\n  }\n\n  public static fromNumberForGroup(value: number, group: Group): Value\n  {\n    return this.fromNumberWithDenominators( value, group.denominators, group.preferredUnit, group );\n  }\n\n  public static fromNumberWithDenominators(value: number, denominators: number[], unit: string = '', group: Group = null): Value\n  {\n    let closestDenominator: number = 0;\n    let closestDistance: number = -1;\n\n    for (let i = 0; i < denominators.length; i++)\n    {\n      let den = denominators[ i ];\n      let num = Math.floor( den * value );\n      let actual = num / den;\n      let distance = fn.abs(value - actual);\n\n      if (closestDistance === -1 || distance < closestDistance)\n      {\n        closestDistance = distance;\n        closestDenominator = den;\n      }\n    }\n\n    if (closestDistance > fn.EPSILON)\n    {\n      return new Value(value, value, 1, unit, group);\n    }\n\n    if (closestDenominator === 0)\n    {\n      closestDenominator = 1;\n    }\n\n    return new Value(value, Math.floor(value * closestDenominator), closestDenominator, unit, group);\n  }\n\n  public static fromFraction(num: number, den: number, unit: string = '', group: Group = null): Value\n  {\n    return new Value(num / den, num, den, unit, group);\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Value.ts","\nimport { Value } from './Value';\nimport { Transform } from './Transform';\nimport { Output, OutputInput } from './Output';\nimport { Core } from './Core';\n\n\n/**\n * An array of ranges.\n */\nexport type RangeList = Range[];\n\n/**\n * A function which takes a range and might return a range based on the given.\n */\nexport type RangeMutator = (range: Range) => Range;\n\n\n/**\n * A pair of minimum and maximum values. A range can be fixed which means the\n * minimum and maximum are equivalent - in which case the range behaves like\n * a [[Value]].\n */\nexport class Range\n{\n\n  /**\n   * A range instance which contains invalid values.\n   */\n  public static INVALID: Range = new Range( Value.INVALID, Value.INVALID );\n\n\n  /**\n   * The minimum value in the range.\n   */\n  public readonly min: Value;\n\n  /**\n   * The maximum value in the range.\n   */\n  public readonly max: Value;\n\n\n  /**\n   * Creates a new instance of Range given the minimum and maximum values.\n   *\n   * @param min The minimum value for the range.\n   * @param max The maximum value for the range.\n   */\n  public constructor(min: Value, max: Value)\n  {\n    this.min = min.value < max.value ? min : max;\n    this.max = max.value > min.value ? max : min;\n  }\n\n  /**\n   * True if the min and max are both valid.\n   */\n  public get isValid(): boolean\n  {\n    return this.min.isValid && this.max.isValid;\n  }\n\n  /**\n   * True if the min or max are a fraction.\n   */\n  public get isFraction(): boolean\n  {\n    return this.min.isFraction || this.max.isFraction;\n  }\n\n  /**\n   * True if the min and max are decimal.\n   */\n  public get isDecimal(): boolean\n  {\n    return this.min.isDecimal && this.max.isDecimal;\n  }\n\n  /**\n   * True if the min and max are not the same value.\n   */\n  public get isRange(): boolean\n  {\n    return this.min.value !== this.max.value;\n  }\n\n  /**\n   * True if the min and max are the same value.\n   */\n  public get isFixed(): boolean\n  {\n    return this.min.value === this.max.value;\n  }\n\n  /**\n   * True if the min and max are both equal to zero.\n   */\n  public get isZero(): boolean\n  {\n    return this.min.isZero && this.max.isZero;\n  }\n\n  /**\n   * True if the min and max are both singular (1 or -1).\n   */\n  public get isSingular(): boolean\n  {\n    return this.min.isSingular && this.max.isSingular;\n  }\n\n  /**\n   * The average number between the min and max.\n   */\n  public get average(): number\n  {\n    return (this.min.value + this.max.value) * 0.5;\n  }\n\n  /**\n   * The minimum value of this range.\n   */\n  public get value(): number\n  {\n    return this.min.value;\n  }\n\n  /**\n   * The minimum value of this range.\n   */\n  public get minimum(): number\n  {\n    return this.min.value;\n  }\n\n  /**\n   * The maximum value of this range.\n   */\n  public get maximum(): number\n  {\n    return this.max.value;\n  }\n\n  /**\n   * The unit which identifies the group of the minimum value or `null` if the\n   * minimum value does not have a group.\n   */\n  public get unit(): string\n  {\n    return this.min.group ? this.min.group.unit : null;\n  }\n\n  /**\n   * Determines if the given range matches this range enough to provide a\n   * mathematical operation between the two ranges.\n   *\n   * @param range The range to test.\n   * @return True if the groups of the given range match this range.\n   */\n  public isMatch(range: Range): boolean\n  {\n    return this.min.group === range.min.group &&\n      this.max.group === range.max.group;\n  }\n\n  /**\n   * @return A range which has the min and max converted to their preferred units.\n   * @see [[Value.preferred]]\n   */\n  public preferred(): Range\n  {\n    let min: Value = this.min.preferred();\n    let max: Value = this.max.preferred();\n\n    return new Range( min, max );\n  }\n\n  public positive(): Range\n  {\n    let minNegative: boolean = this.min.value < 0;\n    let maxNegative: boolean = this.max.value < 0;\n\n    if (maxNegative)\n    {\n      return null;\n    }\n\n    let min: Value = minNegative ? this.min.zero() : this.min.copy();\n    let max: Value = this.max.copy();\n\n    return new Range( min, max );\n  }\n\n  public negative(): Range\n  {\n    let minPositive: boolean = this.min.value >= 0;\n    let maxPositive: boolean = this.max.value >= 0;\n\n    if (minPositive)\n    {\n      return null;\n    }\n\n    let min: Value = this.min.copy();\n    let max: Value = maxPositive ? this.max.zero() : this.max.copy();\n\n    return new Range( min, max );\n  }\n\n  public nonzero(): Range\n  {\n    let minZero: boolean = this.min.value === 0;\n    let maxZero: boolean = this.max.value === 0;\n\n    if (minZero && maxZero)\n    {\n      return null;\n    }\n\n    let min: Value = this.min.copy();\n    let max: Value = this.max.copy();\n\n    return new Range( min, max );\n  }\n\n  public maxd(): Range\n  {\n    let fixed: Value = this.max.copy();\n\n    return new Range(fixed, fixed);\n  }\n\n  public mind(): Range\n  {\n    let fixed: Value = this.min.copy();\n\n    return new Range(fixed, fixed);\n  }\n\n  public normalize(transform: Transform, forOutput: Output): Range\n  {\n    let min: Value = this.min.normalize( transform, forOutput );\n    let max: Value = this.max.normalize( transform, forOutput );\n\n    return new Range(min, max)\n  }\n\n  public add(addend: Range, scale: number = 1): Range\n  {\n    let min: Value = this.min.add(addend.min, scale);\n    let max: Value = this.max.add(addend.max, scale);\n\n    return new Range(min, max);\n  }\n\n  public sub(subtrahend: Range, scale: number = 1): Range\n  {\n    let min: Value = this.min.sub(subtrahend.min, scale);\n    let max: Value = this.max.sub(subtrahend.max, scale);\n\n    return new Range(min, max);\n  }\n\n  public mul(scale: number): Range\n  {\n    let min: Value = this.min.mul(scale);\n    let max: Value = this.max.mul(scale);\n\n    return new Range(min, max);\n  }\n\n  public fractioned(): Range\n  {\n    if (this.min.isFraction && this.max.isFraction)\n    {\n      return this;\n    }\n\n    let min: Value = this.min.fractioned();\n    let max: Value = this.max.fractioned();\n\n    return new Range(min, max);\n  }\n\n  public numbered(): Range\n  {\n    if (!this.min.isFraction && !this.max.isFraction)\n    {\n      return this;\n    }\n\n    let min: Value = this.min.numbered();\n    let max: Value = this.max.numbered();\n\n    return new Range(min, max);\n  }\n\n  /**\n   * Converts this range to a string with the given output options taking into\n   * account the global options.\n   *\n   * @param options The options to override the global output options.\n   * @return The string representation of this instance.\n   * @see [[Output]]\n   */\n  public output(options?: OutputInput): string\n  {\n    let output: Output = Core.globalOutput.extend( options );\n\n    return output.range( this );\n  }\n\n  public static fromFixed(fixed: Value): Range\n  {\n    return new Range(fixed, fixed);\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Range.ts","\nimport { Functions as fn } from './Functions';\nimport { BaseInput, RangeInput, RangesInput, RangeDefinition, ValueInput, ValueDefinition, ParseResult } from './Types';\nimport { Group, GroupFactory } from './Group';\nimport { Range, RangeList } from './Range';\nimport { Value } from './Value';\nimport { Base } from './Base';\n\n\n/**\n * The class which takes user input and parses it to specific structures.\n */\nexport class Parse\n{\n\n  /**\n   * The regular expression used to split up a string into multiple ranges.\n   */\n  public static REGEX_LIST: RegExp = /\\s*,\\s*/;\n\n  /**\n   * The regular expression used to split up a range string to determine the min\n   * and maximum values.\n   */\n  public static REGEX_RANGE: RegExp = /\\s*(-?[^-]+)-(.+)/;\n\n  /**\n   * The regular expression used to parse a value number or fraction and\n   * possible unit from a string.\n   */\n  public static REGEX_PARSE: RegExp = /^\\s*(-?\\d*)(\\s+(\\d+))?(\\s*\\/\\s*(\\d+)|\\.(\\d+)|)\\s*(.*)\\s*$/i;\n\n  /**\n   * Parses user input into a [[Base]] instance.\n   *\n   * @param input The input to parse into a Base.\n   * @return The instance parsed from the input.\n   */\n  public static base(input: BaseInput): Base\n  {\n    if (input instanceof Base)\n    {\n      return <Base>input;\n    }\n\n    return new Base( <RangesInput>input );\n  }\n\n  /**\n   * Parses user input into a an array of [[Range]]s.\n   *\n   * @param input The input to parse.\n   * @param groups A function which converts a unit to a [[Group]] instance.\n   * @return The instances parsed from the input.\n   */\n  public static ranges(input: RangesInput, groups: GroupFactory): RangeList\n  {\n    if (fn.isArray(input))\n    {\n      return this.rangesFromArray( <RangeInput[]>input, groups );\n    }\n    else if (fn.isString(input))\n    {\n      return this.rangesFromString( <string>input, groups );\n    }\n    else if (fn.isRangeDefinition(input))\n    {\n      return this.rangesFromArray( [ <RangeDefinition>input ], groups );\n    }\n    else if (fn.isValueDefinition(input))\n    {\n      return this.rangesFromArray( [ <ValueDefinition>input ], groups );\n    }\n\n    return [];\n  }\n\n  /**\n   * Parses user input into a an array of [[Range]]s.\n   *\n   * @param input The input to parse.\n   * @param groups A function which converts a unit to a [[Group]] instance.\n   * @return The instances parsed from the input.\n   */\n  public static rangesFromArray(input: RangeInput[], groups: GroupFactory): RangeList\n  {\n    let ranges = [];\n\n    for (let i = 0; i < input.length; i++)\n    {\n      let range: Range = this.range( input[ i ], groups );\n\n      ranges.push( range );\n    }\n\n    return ranges;\n  }\n\n  /**\n   * Parses user input into a an array of [[Range]]s.\n   *\n   * @param input The input to parse.\n   * @param groups A function which converts a unit to a [[Group]] instance.\n   * @return The instances parsed from the input.\n   */\n  public static rangesFromString(input: string, groups: GroupFactory): RangeList\n  {\n    let ranges: string[] = input.split( this.REGEX_LIST );\n\n    return this.rangesFromArray( ranges, groups );\n  }\n\n  /**\n   * Parses user input into a [[Range]].\n   *\n   * @param input The input to parse.\n   * @param groups A function which converts a unit to a [[Group]] instance.\n   * @return The instance parsed from the input.\n   */\n  public static range(input: RangeInput, groups: GroupFactory): Range\n  {\n    if (fn.isString(input))\n    {\n      return this.rangeFromString( <string>input, groups );\n    }\n    else if (fn.isRangeDefinition(input))\n    {\n      let range: RangeDefinition = <RangeDefinition>input;\n      let min: Value = this.value( range.min, groups );\n      let max: Value = this.value( range.max, groups );\n\n      return new Range( min, max );\n    }\n\n    return Range.INVALID;\n  }\n\n  /**\n   * Parses user input into a [[Range]].\n   *\n   * @param input The input to parse.\n   * @param groups A function which converts a unit to a [[Group]] instance.\n   * @return The instance parsed from the input.\n   */\n  public static rangeFromString(input: string, groups: GroupFactory): Range\n  {\n    let matches: string[] = this.REGEX_RANGE.exec( input );\n\n    if (!matches)\n    {\n      let fixed: Value = this.valueFromString(input, groups);\n\n      return new Range(fixed, fixed);\n    }\n\n    let minInput: string = matches[1];\n    let maxInput: string = matches[2];\n\n    let minParsed: ParseResult = this.input( minInput );\n    let maxParsed: ParseResult = this.input( maxInput );\n\n    if (!minParsed || !maxParsed)\n    {\n      return Range.INVALID;\n    }\n\n    let minUnit: string = minParsed.unit || maxParsed.unit;\n    let maxUnit: string = maxParsed.unit || minParsed.unit;\n\n    let min: Value = this.valueFromResult(minParsed, minUnit, groups);\n    let max: Value = this.valueFromResult(maxParsed, maxUnit, groups);\n\n    return new Range( min, max );\n  }\n\n  /**\n   * Parses user input into a [[Value]].\n   *\n   * @param input The input to parse.\n   * @param groups A function which converts a unit to a [[Group]] instance.\n   * @return The instance parsed from the input.\n   */\n  public static value(input: ValueInput, groups: GroupFactory): Value\n  {\n    if (fn.isString(input))\n    {\n      return this.valueFromString( <string>input, groups );\n    }\n    else if (fn.isValueDefinition(input))\n    {\n      return this.valueFromValue( <ValueDefinition>input, groups );\n    }\n\n    return Value.INVALID;\n  }\n\n  /**\n   * Parses user input into a [[Value]].\n   *\n   * @param input The input to parse.\n   * @param groups A function which converts a unit to a [[Group]] instance.\n   * @return The instance parsed from the input.\n   */\n  public static valueFromValue(input: ValueDefinition, groups: GroupFactory): Value\n  {\n    let givenValue: number = fn.isDefined( input.value ) ? input.value : 1;\n    let num: number = fn.isDefined( input.num ) ? input.num : givenValue;\n    let den: number = fn.isDefined( input.den ) ? input.den : 1;\n    let parsedValue: number = fn.isDefined( input.value ) ? input.value : num / den;\n    let unit: string = input.unit || '';\n    let group: Group = groups( unit );\n\n    return new Value( parsedValue, num, den, unit, group );\n  }\n\n  /**\n   * Parses user input into a [[Value]].\n   *\n   * @param input The input to parse.\n   * @param groups A function which converts a unit to a [[Group]] instance.\n   * @return The instance parsed from the input.\n   */\n  public static valueFromString(input: string, groups: GroupFactory): Value\n  {\n    let parsed: ParseResult = this.input( input );\n\n    return parsed ? this.valueFromResult(parsed, parsed.unit, groups) : Value.INVALID;\n  }\n\n  /**\n   * Parses user input into a [[Value]].\n   *\n   * @param result The already parsed input.\n   * @param unit The unit parsed from the input.\n   * @param groups A function which converts a unit to a [[Group]] instance.\n   * @return The instance parsed from the input.\n   */\n  public static valueFromResult(result: ParseResult, unit: string, groups: GroupFactory): Value\n  {\n    let group: Group = groups( unit );\n\n    return new Value(result.value, result.valueNum, result.valueDen, unit, group);\n  }\n\n  /**\n   * Possible Values:\n   * 1tsp\n   * 1 tsp\n   * 1/2 tsp\n   * 1 1/2 tsp\n   * 1 - 2 tsp\n   * 1 tsp, 1 cup\n   * 2/3 - 1 c, 1 lb, 2.45 cats\n   */\n\n\n  /**\n   * Parses user input into a [[ParseResult]]. If the input is not valid null\n   * is returned.\n   *\n   * *Examples:*\n   * - 1tsp\n   * - 1 tsp\n   * - 1/2 tsp\n   * - 1 1/2 tsp\n   * - -2 cups\n   * - 2.35\"\n   *\n   * @param input The string to parse a value and unit from.\n   * @return The result of the parsing.\n   */\n  public static input(input: string): ParseResult\n  {\n    let matches: string[] = this.REGEX_PARSE.exec( input );\n    let whole: number = parseInt( matches[1] );\n    let hasWhole: boolean = isFinite( whole );\n    let sign: number = matches[1].charAt(0) === '-' ? -1 : 1;\n    let num: number = parseInt( matches[3] );\n    let den: number = parseInt( matches[5] );\n    let decimal: string = matches[6];\n    let hasDecimal: boolean = isFinite( parseFloat( decimal ) );\n    let unit: string = fn.trim( matches[7] ).replace( /\\.$/, '' );\n\n    if ( !hasWhole && hasDecimal )\n    {\n      whole = 0;\n      hasWhole = true;\n    }\n\n    if ( !hasWhole && !unit )\n    {\n      return null;\n    }\n\n    let value: number = 1;\n    let valueDen: number = 1;\n    let valueNum: number = 1;\n\n    if ( hasWhole )\n    {\n      value = whole;\n      valueNum = whole;\n\n      if ( isFinite( den ) )\n      {\n        valueDen = den;\n\n        if ( isFinite( num ) )\n        {\n          value += ( num / den ) * sign;\n          valueNum *= den;\n          valueNum += num;\n        }\n        else\n        {\n          value /= den;\n        }\n      }\n      else if ( hasDecimal )\n      {\n        let remainder = parseFloat( '0.' + decimal );\n\n        value += remainder * sign;\n        valueNum += remainder;\n      }\n\n      valueNum *= sign;\n    }\n\n    return { value, valueNum, valueDen, num, den, unit };\n  }\n\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Parse.ts","\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n\n\n/**\n * The Weight clas which contains the following groups.\n *\n * - milligram\n * - gram\n * - kilogram\n * - ounce\n * - pound\n * - ton\n */\nexport let Weight = new Class('Weight')\n  .setBaseConversion('mg', 'oz', (x) => x * 0.000035274)\n\n  .setBaseConversion('oz', 'mg', (x) => x * 28349.5)\n\n  .addGroups([\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'mg',\n      baseUnit: 'mg',\n      denominators: [2, 10],\n      units: {\n        'mg': Plurality.EITHER,\n        'milligram': Plurality.SINGULAR,\n        'milligrams': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'g',\n      relativeUnit: 'mg',\n      relativeScale: 1000,\n      denominators: [2, 10, 1000],\n      units: {\n        'g': Plurality.EITHER,\n        'gram': Plurality.SINGULAR,\n        'grams': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'kg',\n      relativeUnit: 'g',\n      relativeScale: 1000,\n      denominators: [2, 10, 1000],\n      units: {\n        'kg': Plurality.EITHER,\n        'kilo': Plurality.SINGULAR,\n        'kilos': Plurality.PLURAL,\n        'kilogram': Plurality.SINGULAR,\n        'kilograms': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'oz',\n      baseUnit: 'oz',\n      denominators: [2, 3, 4, 16],\n      units: {\n        'oz': Plurality.EITHER,\n        'ounce': Plurality.SINGULAR,\n        'ounces': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'lb',\n      relativeUnit: 'oz',\n      relativeScale: 16,\n      denominators: [2, 3, 4, 16],\n      units: {\n        'lb': Plurality.EITHER,\n        'lbs': Plurality.PLURAL,\n        'pound': Plurality.SINGULAR,\n        'pounds': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'ton',\n      relativeUnit: 'lb',\n      relativeScale: 2000,\n      denominators: [2, 3, 4, 10],\n      units: {\n        'ton': Plurality.EITHER,\n        'tons': Plurality.PLURAL,\n        'tonnes': Plurality.PLURAL\n      }\n    }\n  ])\n  .setClassScales();\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Weight.ts","\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n\n\n/**\n * The Area class which contains the following groups:\n *\n * - square inch\n * - square foot\n * - square yard\n * - acre\n * - square mile\n * - square millimeter\n * - square centimeter\n * - square meter\n * - square kilometer\n */\nexport let Area = new Class('Area')\n  .setBaseConversion('sqin', 'sqmm', (x) => x * 645.16)\n\n  .setBaseConversion('sqmm', 'sqin', (x) => x * 0.00155)\n\n  .addGroups([\n    {\n      system: System.US,\n      common: true,\n      unit: 'sqin',\n      baseUnit: 'sqin',\n      denominators: [2, 4, 8, 16],\n      units: {\n        'sqin': Plurality.EITHER,\n        'sq. in': Plurality.EITHER,\n        'sq in': Plurality.EITHER,\n        'in2': Plurality.EITHER,\n        'in^2': Plurality.EITHER,\n        'in\\xb2': Plurality.EITHER,\n        'inch2': Plurality.SINGULAR,\n        'inch^2': Plurality.SINGULAR,\n        'inch\\xb2': Plurality.SINGULAR,\n        'inches2': Plurality.PLURAL,\n        'inches^2': Plurality.PLURAL,\n        'inches\\xb2': Plurality.PLURAL,\n        'square in': Plurality.EITHER,\n        'square inch': Plurality.SINGULAR,\n        'square inches': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'sqft',\n      relativeUnit: 'sqin',\n      relativeScale: 12 * 12,\n      denominators: [2, 4, 8, 16],\n      units: {\n        'sqft': Plurality.EITHER,\n        'sq. ft': Plurality.EITHER,\n        'sq ft': Plurality.EITHER,\n        'ft2': Plurality.EITHER,\n        'ft^2': Plurality.EITHER,\n        'ft\\xb2': Plurality.EITHER,\n        'foot2': Plurality.SINGULAR,\n        'foot^2': Plurality.SINGULAR,\n        'foot\\xb2': Plurality.SINGULAR,\n        'feet2': Plurality.PLURAL,\n        'feet^2': Plurality.PLURAL,\n        'feet\\xb2': Plurality.PLURAL,\n        'square ft': Plurality.EITHER,\n        'square foot': Plurality.SINGULAR,\n        'square feet': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      unit: 'sqyd',\n      relativeUnit: 'sqft',\n      relativeScale: 3 * 3,\n      denominators: [2, 3, 4, 8, 9, 16],\n      units: {\n        'sqyd': Plurality.EITHER,\n        'sq. yd': Plurality.EITHER,\n        'sq yd': Plurality.EITHER,\n        'yd2': Plurality.EITHER,\n        'yd^2': Plurality.EITHER,\n        'yd\\xb2': Plurality.EITHER,\n        'yard2': Plurality.SINGULAR,\n        'yard^2': Plurality.SINGULAR,\n        'yard\\xb2': Plurality.SINGULAR,\n        'yards2': Plurality.PLURAL,\n        'yards^2': Plurality.PLURAL,\n        'yards\\xb2': Plurality.PLURAL,\n        'square yard': Plurality.SINGULAR,\n        'square yards': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'acre',\n      relativeUnit: 'sqyd',\n      relativeScale: 4840,\n      denominators: [2, 3, 4, 8, 10],\n      units: {\n        'acre': Plurality.EITHER,\n        'acres': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'sqmi',\n      relativeUnit: 'acre',\n      relativeScale: 640,\n      denominators: [2, 3, 4, 8, 10],\n      units: {\n        'sqmi': Plurality.EITHER,\n        'sq. mi': Plurality.EITHER,\n        'sq mi': Plurality.EITHER,\n        'mi2': Plurality.EITHER,\n        'mi^2': Plurality.EITHER,\n        'mi\\xb2': Plurality.EITHER,\n        'mile2': Plurality.SINGULAR,\n        'mile^2': Plurality.SINGULAR,\n        'mile\\xb2': Plurality.SINGULAR,\n        'miles2': Plurality.PLURAL,\n        'miles^2': Plurality.PLURAL,\n        'miles\\xb2': Plurality.PLURAL,\n        'square mi': Plurality.EITHER,\n        'square mile': Plurality.SINGULAR,\n        'square miles': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'sqmm',\n      baseUnit: 'sqmm',\n      denominators: [2, 4, 8, 16],\n      units: {\n        'sqmm': Plurality.EITHER,\n        'sq. mm': Plurality.EITHER,\n        'sq mm': Plurality.EITHER,\n        'mm2': Plurality.EITHER,\n        'mm^2': Plurality.EITHER,\n        'mm\\xb2': Plurality.EITHER,\n        'millimeter2': Plurality.SINGULAR,\n        'millimeter^2': Plurality.SINGULAR,\n        'millimeter\\xb2': Plurality.SINGULAR,\n        'millimeters2': Plurality.PLURAL,\n        'millimeters^2': Plurality.PLURAL,\n        'millimeters\\xb2': Plurality.PLURAL,\n        'square mm': Plurality.EITHER,\n        'square millimeter': Plurality.SINGULAR,\n        'square millimeters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'sqcm',\n      relativeUnit: 'sqmm',\n      relativeScale: 100,\n      denominators: [2, 4, 8, 16],\n      units: {\n        'sqcm': Plurality.EITHER,\n        'sq. cm': Plurality.EITHER,\n        'sq cm': Plurality.EITHER,\n        'cm2': Plurality.EITHER,\n        'cm^2': Plurality.EITHER,\n        'cm\\xb2': Plurality.EITHER,\n        'centimeter2': Plurality.SINGULAR,\n        'centimeter^2': Plurality.SINGULAR,\n        'centimeter\\xb2': Plurality.SINGULAR,\n        'centimeters2': Plurality.PLURAL,\n        'centimeters^2': Plurality.PLURAL,\n        'centimeters\\xb2': Plurality.PLURAL,\n        'square cm': Plurality.EITHER,\n        'square centimeter': Plurality.SINGULAR,\n        'square centimeters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'sqm',\n      relativeUnit: 'sqcm',\n      relativeScale: 10000,\n      denominators: [2, 4, 8, 16],\n      units: {\n        'sqm': Plurality.EITHER,\n        'sq. m': Plurality.EITHER,\n        'sq m': Plurality.EITHER,\n        'm2': Plurality.EITHER,\n        'm^2': Plurality.EITHER,\n        'm\\xb2': Plurality.EITHER,\n        'meter2': Plurality.SINGULAR,\n        'meter^2': Plurality.SINGULAR,\n        'meter\\xb2': Plurality.SINGULAR,\n        'meters2': Plurality.PLURAL,\n        'meters^2': Plurality.PLURAL,\n        'meters\\xb2': Plurality.PLURAL,\n        'square m': Plurality.EITHER,\n        'square meter': Plurality.SINGULAR,\n        'square meters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'sqkm',\n      relativeUnit: 'sqm',\n      relativeScale: 1000000,\n      denominators: [2, 4, 8, 16],\n      units: {\n        'sqkm': Plurality.EITHER,\n        'sq. km': Plurality.EITHER,\n        'sq km': Plurality.EITHER,\n        'km2': Plurality.EITHER,\n        'km^2': Plurality.EITHER,\n        'km\\xb2': Plurality.EITHER,\n        'kilometer2': Plurality.SINGULAR,\n        'kilometer^2': Plurality.SINGULAR,\n        'kilometer\\xb2': Plurality.SINGULAR,\n        'kilometers2': Plurality.PLURAL,\n        'kilometers^2': Plurality.PLURAL,\n        'kilometers\\xb2': Plurality.PLURAL,\n        'square km': Plurality.EITHER,\n        'square kilometer': Plurality.SINGULAR,\n        'square kilometers': Plurality.PLURAL\n      }\n    }\n  ])\n  .setClassScales()\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Area.ts","\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n\n\n/**\n * The Time class which contains the following groups.\n *\n * - nanosecond\n * - microsecond\n * - millisecond\n * - second\n * - hour\n * - day\n * - week\n * - year\n * - score\n * - decade\n * - centry\n * - millennium\n */\nexport let Time = new Class('Time')\n  .addGroups([\n    {\n      system: System.ANY,\n      unit: 'ns',\n      baseUnit: 'ns',\n      denominators: [10, 100],\n      units: {\n        'ns': Plurality.EITHER,\n        'nanosecond': Plurality.SINGULAR,\n        'nanoseconds': Plurality.PLURAL,\n        'nano': Plurality.SINGULAR,\n        'nanos': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      unit: 'us',\n      relativeUnit: 'ns',\n      relativeScale: 1000,\n      denominators: [10, 100, 1000],\n      units: {\n        'us': Plurality.EITHER,\n        'microsecond': Plurality.SINGULAR,\n        'microseconds': Plurality.PLURAL,\n        'micro': Plurality.SINGULAR,\n        'micros': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'ms',\n      relativeUnit: 'us',\n      relativeScale: 1000,\n      denominators: [10, 100, 1000],\n      units: {\n        'ms': Plurality.EITHER,\n        'millisecond': Plurality.SINGULAR,\n        'milliseconds': Plurality.PLURAL,\n        'milli': Plurality.SINGULAR,\n        'millis': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 's',\n      relativeUnit: 'ms',\n      relativeScale: 1000,\n      denominators: [10, 100, 1000],\n      units: {\n        's': Plurality.EITHER,\n        'second': Plurality.SINGULAR,\n        'seconds': Plurality.PLURAL,\n        'sec': Plurality.SINGULAR,\n        'secs': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'min',\n      relativeUnit: 's',\n      relativeScale: 60,\n      denominators: [2, 3, 4, 60],\n      units: {\n        'min': Plurality.EITHER,\n        'minute': Plurality.SINGULAR,\n        'minutes': Plurality.PLURAL,\n        'mins': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'hr',\n      relativeUnit: 'min',\n      relativeScale: 60,\n      denominators: [2, 3, 4, 60],\n      units: {\n        'hr': Plurality.EITHER,\n        'hour': Plurality.SINGULAR,\n        'hours': Plurality.PLURAL,\n        'hrs': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'day',\n      relativeUnit: 'hr',\n      relativeScale: 24,\n      denominators: [2, 3, 4, 6, 24],\n      units: {\n        'day': Plurality.EITHER,\n        'days': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'wk',\n      relativeUnit: 'day',\n      relativeScale: 7,\n      denominators: [7],\n      units: {\n        'wk': Plurality.EITHER,\n        'week': Plurality.SINGULAR,\n        'weeks': Plurality.PLURAL,\n        'wks': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'yr',\n      relativeUnit: 'day',\n      relativeScale: 365.2425,\n      denominators: [2, 3, 4, 6, 12, 52],\n      units: {\n        'yr': Plurality.EITHER,\n        'year': Plurality.SINGULAR,\n        'years': Plurality.PLURAL,\n        'yrs': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'score',\n      relativeUnit: 'yr',\n      relativeScale: 20,\n      denominators: [20],\n      units: {\n        'score': Plurality.EITHER\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'decade',\n      relativeUnit: 'yr',\n      relativeScale: 10,\n      denominators: [10],\n      units: {\n        'decade': Plurality.EITHER,\n        'decades': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      unit: 'biennium',\n      relativeUnit: 'yr',\n      relativeScale: 2,\n      denominators: [],\n      units: {\n        'biennium': Plurality.EITHER,\n        'bienniums': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      unit: 'triennium',\n      relativeUnit: 'yr',\n      relativeScale: 3,\n      denominators: [],\n      units: {\n        'triennium': Plurality.EITHER,\n        'trienniums': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      unit: 'quadrennium',\n      relativeUnit: 'yr',\n      relativeScale: 4,\n      denominators: [],\n      units: {\n        'quadrennium': Plurality.EITHER,\n        'quadrenniums': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      unit: 'lustrum',\n      relativeUnit: 'yr',\n      relativeScale: 5,\n      denominators: [],\n      units: {\n        'lustrum': Plurality.EITHER,\n        'lustrums': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'decade',\n      relativeUnit: 'yr',\n      relativeScale: 10,\n      denominators: [2, 10],\n      units: {\n        'decade': Plurality.EITHER,\n        'decades': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'century',\n      relativeUnit: 'yr',\n      relativeScale: 100,\n      denominators: [2, 10],\n      units: {\n        'century': Plurality.EITHER,\n        'centurys': Plurality.PLURAL,\n        'centuries': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'millennium',\n      relativeUnit: 'yr',\n      relativeScale: 1000,\n      denominators: [2, 3, 4],\n      units: {\n        'millennium': Plurality.EITHER,\n        'millenniums': Plurality.PLURAL,\n        'millennia': Plurality.PLURAL,\n        'millennias': Plurality.PLURAL\n      }\n    }\n  ])\n  .setClassScales();\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Time.ts","\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n\n\nlet _C_: string = '\\xb0C';\n\n/**\n * The Temperature class which contains the following groups.\n *\n * - celsius\n * - kelvin\n * - fahrenheit\n */\nexport let Temperature = new Class('Temperature')\n  .setBaseConversion('F', _C_, x => ((x - 32) * 5 / 9))\n  .setBaseConversion('F', 'K', x => ((x + 459.67) * 5 / 9))\n\n  .setBaseConversion(_C_, 'F', x => ((x * 9 / 5) + 32))\n  .setBaseConversion(_C_, 'K', x => (x + 273.15))\n\n  .setBaseConversion('K', _C_, x => (x - 273.15))\n  .setBaseConversion('K', 'F', x => ((x * 9 / 5) - 459.67))\n\n  .addGroups([\n    {\n      system: System.US,\n      common: true,\n      unit: 'F',\n      baseUnit: 'F',\n      denominators: [],\n      units: {\n        'F': Plurality.EITHER,\n        '\\xb0F': Plurality.EITHER,\n        'Fahrenheit': Plurality.EITHER\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: _C_,\n      baseUnit: _C_,\n      denominators: [],\n      units: {\n        '\\xb0C': Plurality.EITHER,\n        'Celsius': Plurality.EITHER\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'K',\n      baseUnit: 'K',\n      denominators: [],\n      units: {\n        'K': Plurality.EITHER,\n        'kelvin': Plurality.SINGULAR,\n        'kelvins': Plurality.PLURAL\n      }\n    }\n  ])\n  .setClassScales()\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Temperature.ts","\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n\nlet RAD2DEG = 180 / Math.PI;\nlet DEG2RAD = Math.PI / 180;\n\n/**\n * The Angle class which contains the following groups.\n *\n * - degree\n * - radian\n */\nexport let Angle = new Class('Angle')\n  .setBaseConversion('deg', 'rad', (x) => x * DEG2RAD)\n\n  .setBaseConversion('rad', 'deg', (x) => x * RAD2DEG)\n\n  .addGroups([\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'deg',\n      baseUnit: 'deg',\n      denominators: [],\n      units: {\n        'deg': Plurality.EITHER,\n        '\\xb0': Plurality.EITHER,\n        'degrees': Plurality.PLURAL,\n        'degree': Plurality.SINGULAR\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'rad',\n      baseUnit: 'rad',\n      denominators: [],\n      units: {\n        'rad': Plurality.EITHER,\n        'radians': Plurality.PLURAL,\n        'radian': Plurality.SINGULAR\n      }\n    }\n  ])\n  .setClassScales()\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Angle.ts","\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n\n\n/**\n * The Volume clas which contains the following groups.\n *\n * - teaspoon\n * - tablespoon\n * - fluid ounce\n * - cup\n * - pint\n * - quart\n * - gallon\n * - milliliter\n * - centiliter\n * - decaliter\n * - kiloliter\n * - cubic millimeter\n * - cubic centimeter\n * - cubic meter\n * - cubic kilometer\n * - cubic inch\n * - cubic foot\n * - cubic yard\n */\nexport let Volume = new Class('Volume')\n  .setBaseConversion('tsp', 'ml', (x) => x * 4.92892)\n  .setBaseConversion('tsp', 'mm3', (x) => x * 4928.92)\n  .setBaseConversion('tsp', 'in3', (x) => x * 0.300781)\n\n  .setBaseConversion('ml', 'tsp', (x) => x * 0.202884)\n  .setBaseConversion('ml', 'mm3', (x) => x * 1000)\n  .setBaseConversion('ml', 'in3', (x) => x * 0.0610237)\n\n  .setBaseConversion('mm3', 'tsp', (x) => x * 0.000202884)\n  .setBaseConversion('mm3', 'ml', (x) => x * 0.001)\n  .setBaseConversion('mm3', 'in3', (x) => x * 0.0000610237)\n\n  .setBaseConversion('in3', 'tsp', (x) => x * 3.32468)\n  .setBaseConversion('in3', 'ml', (x) => x * 16.3871)\n  .setBaseConversion('in3', 'mm3', (x) => x * 16387.1)\n\n  .addGroups([\n    {\n      system: System.US,\n      common: true,\n      unit: 'tsp',\n      baseUnit: 'tsp',\n      denominators: [2, 3, 4],\n      units: {\n        'tsp': Plurality.EITHER,\n        'ts': Plurality.EITHER,\n        'tsps': Plurality.PLURAL,\n        'teaspoon': Plurality.SINGULAR,\n        'teaspoons': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'tbsp',\n      relativeUnit: 'tsp',\n      relativeScale: 3,\n      denominators: [2, 3, 4],\n      units: {\n        'tbsp': Plurality.EITHER,\n        'tbsps': Plurality.PLURAL,\n        'tablespoon': Plurality.SINGULAR,\n        'tablespoons': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'floz',\n      relativeUnit: 'tsp',\n      relativeScale: 6,\n      denominators: [2, 3, 6],\n      units: {\n        // 'oz': Plurality.EITHER,\n        // 'ounce': Plurality.SINGULAR,\n        // 'ounces': Plurality.PLURAL,\n        'floz': Plurality.EITHER,\n        'fl-oz': Plurality.EITHER,\n        'fl oz': Plurality.EITHER,\n        'fluid ounce': Plurality.SINGULAR,\n        'fluid ounces': Plurality.PLURAL,\n        'fl. oz': Plurality.EITHER,\n        'oz. fl': Plurality.EITHER,\n        'oz fl': Plurality.EITHER\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'c',\n      relativeUnit: 'floz',\n      relativeScale: 8,\n      denominators: [2, 3, 4],\n      units: {\n        'c': Plurality.EITHER,\n        'cup': Plurality.SINGULAR,\n        'cups': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'pt',\n      relativeUnit: 'c',\n      relativeScale: 2,\n      denominators: [2, 4, 8],\n      units: {\n        'pt': Plurality.EITHER,\n        'pint': Plurality.SINGULAR,\n        'pints': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'qt',\n      relativeUnit: 'c',\n      relativeScale: 4,\n      denominators: [2, 4, 8],\n      units: {\n        'qt': Plurality.EITHER,\n        'quart': Plurality.SINGULAR,\n        'quarts': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'gal',\n      relativeUnit: 'qt',\n      relativeScale: 4,\n      denominators: [2, 4, 8, 16],\n      units: {\n        'gal': Plurality.EITHER,\n        'gallon': Plurality.SINGULAR,\n        'gallons': Plurality.PLURAL,\n        'gals': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'ml',\n      baseUnit: 'ml',\n      denominators: [2, 10],\n      units: {\n        'ml': Plurality.EITHER,\n        'millilitre': Plurality.SINGULAR,\n        'millilitres': Plurality.PLURAL,\n        'milliliter': Plurality.SINGULAR,\n        'milliliters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'cl',\n      relativeUnit: 'ml',\n      relativeScale: 10,\n      denominators: [10],\n      units: {\n        'cl': Plurality.EITHER,\n        'centilitre': Plurality.SINGULAR,\n        'centilitres': Plurality.PLURAL,\n        'centiliter': Plurality.SINGULAR,\n        'centiliters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'l',\n      relativeUnit: 'ml',\n      relativeScale: 1000,\n      denominators: [2, 3, 4, 10],\n      units: {\n        'l': Plurality.EITHER,\n        'litre': Plurality.SINGULAR,\n        'litres': Plurality.PLURAL,\n        'liter': Plurality.SINGULAR,\n        'liters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'dl',\n      relativeUnit: 'l',\n      relativeScale: 10,\n      denominators: [10, 100],\n      units: {\n        'dl': Plurality.EITHER,\n        'decalitre': Plurality.SINGULAR,\n        'decalitres': Plurality.PLURAL,\n        'decaliter': Plurality.SINGULAR,\n        'decaliters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'kl',\n      relativeUnit: 'l',\n      relativeScale: 1000,\n      denominators: [10, 100],\n      units: {\n        'kl': Plurality.EITHER,\n        'kilolitre': Plurality.SINGULAR,\n        'kilolitres': Plurality.PLURAL,\n        'kiloliter': Plurality.SINGULAR,\n        'kiloliters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'mm3',\n      baseUnit: 'mm3',\n      denominators: [2, 4, 8],\n      units: {\n        'mm3': Plurality.EITHER,\n        'mm^3': Plurality.EITHER,\n        'mm\\xb3': Plurality.EITHER,\n        'millimeter3': Plurality.SINGULAR,\n        'millimeter^3': Plurality.SINGULAR,\n        'millimeter\\xb3': Plurality.SINGULAR,\n        'millimeters3': Plurality.PLURAL,\n        'millimeters^3': Plurality.PLURAL,\n        'millimeters\\xb3': Plurality.PLURAL,\n        'cubic mm': Plurality.EITHER,\n        'cubic millimeter': Plurality.SINGULAR,\n        'cubic millimeters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'cm3',\n      relativeUnit: 'mm3',\n      relativeScale: 1000,\n      denominators: [2, 4, 8],\n      units: {\n        'cm3': Plurality.EITHER,\n        'cm^3': Plurality.EITHER,\n        'cm\\xb3': Plurality.EITHER,\n        'centimeter3': Plurality.SINGULAR,\n        'centimeter^3': Plurality.SINGULAR,\n        'centimeter\\xb3': Plurality.SINGULAR,\n        'centimeters3': Plurality.PLURAL,\n        'centimeters^3': Plurality.PLURAL,\n        'centimeters\\xb3': Plurality.PLURAL,\n        'cubic cm': Plurality.EITHER,\n        'cubic centimeter': Plurality.SINGULAR,\n        'cubic centimeters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'm3',\n      relativeUnit: 'cm3',\n      relativeScale: 1000000,\n      denominators: [2, 4, 8],\n      units: {\n        'm3': Plurality.EITHER,\n        'm^3': Plurality.EITHER,\n        'm\\xb3': Plurality.EITHER,\n        'meter3': Plurality.SINGULAR,\n        'meter^3': Plurality.SINGULAR,\n        'meter\\xb3': Plurality.SINGULAR,\n        'meters3': Plurality.PLURAL,\n        'meters^3': Plurality.PLURAL,\n        'meters\\xb3': Plurality.PLURAL,\n        'cubic m': Plurality.EITHER,\n        'cubic meter': Plurality.SINGULAR,\n        'cubic meters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'km3',\n      relativeUnit: 'm3',\n      relativeScale: 1000000000,\n      denominators: [2, 4, 8],\n      units: {\n        'km3': Plurality.EITHER,\n        'km^3': Plurality.EITHER,\n        'km\\xb3': Plurality.EITHER,\n        'kilometer3': Plurality.SINGULAR,\n        'kilometer^3': Plurality.SINGULAR,\n        'kilometer\\xb3': Plurality.SINGULAR,\n        'kilometers3': Plurality.PLURAL,\n        'kilometers^3': Plurality.PLURAL,\n        'kilometers\\xb3': Plurality.PLURAL,\n        'cubic km': Plurality.EITHER,\n        'cubic kilometer': Plurality.SINGULAR,\n        'cubic kilometers': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      unit: 'in3',\n      baseUnit: 'in3',\n      denominators: [2, 4, 8],\n      units: {\n        'in3': Plurality.EITHER,\n        'in^3': Plurality.EITHER,\n        'in\\xb3': Plurality.EITHER,\n        'inch3': Plurality.SINGULAR,\n        'inch^3': Plurality.SINGULAR,\n        'inch\\xb3': Plurality.SINGULAR,\n        'inches3': Plurality.PLURAL,\n        'inches^3': Plurality.PLURAL,\n        'inches\\xb3': Plurality.PLURAL,\n        'cubic in': Plurality.EITHER,\n        'cubic inch': Plurality.SINGULAR,\n        'cubic inches': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'ft3',\n      relativeUnit: 'in3',\n      relativeScale: 1728,\n      denominators: [2, 4, 8],\n      units: {\n        'ft3': Plurality.EITHER,\n        'ft^3': Plurality.EITHER,\n        'ft\\xb3': Plurality.EITHER,\n        'foot3': Plurality.SINGULAR,\n        'foot^3': Plurality.SINGULAR,\n        'foot\\xb3': Plurality.SINGULAR,\n        'feet3': Plurality.PLURAL,\n        'feet^3': Plurality.PLURAL,\n        'feet\\xb3': Plurality.PLURAL,\n        'cubic ft': Plurality.EITHER,\n        'cubic foot': Plurality.SINGULAR,\n        'cubic feet': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'yd3',\n      relativeUnit: 'ft3',\n      relativeScale: 27,\n      denominators: [2, 4, 8],\n      units: {\n        'yd3': Plurality.EITHER,\n        'yd^3': Plurality.EITHER,\n        'yd\\xb3': Plurality.EITHER,\n        'yard3': Plurality.SINGULAR,\n        'yard^3': Plurality.SINGULAR,\n        'yard\\xb3': Plurality.SINGULAR,\n        'yards3': Plurality.PLURAL,\n        'yards^3': Plurality.PLURAL,\n        'yards\\xb3': Plurality.PLURAL,\n        'cubic yd': Plurality.EITHER,\n        'cubic yard': Plurality.SINGULAR,\n        'cubic yards': Plurality.PLURAL\n      }\n    }\n  ])\n  .setClassScales()\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Volume.ts","\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n\n\n/**\n * The Length class which contains the following groups.\n *\n * - inch\n * - foot\n * - yard\n * - mile\n * - league\n * - millimeter\n * - centimeter\n * - decimeter\n * - meter\n * - kilometer\n */\nexport let Length = new Class('Length')\n  .setBaseConversion('in', 'mm', (x) => x * 25.4)\n\n  .setBaseConversion('mm', 'in', (x) => x * 0.039370)\n\n  .addGroups([\n    {\n      system: System.US,\n      common: true,\n      unit: 'in',\n      baseUnit: 'in',\n      denominators: [2, 4, 8, 16, 32],\n      units: {\n        'in': Plurality.EITHER,\n        'inch': Plurality.SINGULAR,\n        'inches': Plurality.PLURAL,\n        '\"': Plurality.EITHER\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'ft',\n      relativeUnit: 'in',\n      relativeScale: 12,\n      denominators: [2],\n      units: {\n        'ft': Plurality.EITHER,\n        'foot': Plurality.SINGULAR,\n        'feet': Plurality.PLURAL,\n        '\\'': Plurality.EITHER\n      }\n    },\n    {\n      system: System.US,\n      unit: 'yd',\n      relativeUnit: 'ft',\n      relativeScale: 3,\n      denominators: [],\n      units: {\n        'yd': Plurality.EITHER,\n        'yard': Plurality.SINGULAR,\n        'yards': Plurality.PLURAL,\n        'yds': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      common: true,\n      unit: 'mi',\n      relativeUnit: 'ft',\n      relativeScale: 5280,\n      denominators: [2, 3, 4, 10],\n      units: {\n        'mi': Plurality.EITHER,\n        'mile': Plurality.SINGULAR,\n        'miles': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.US,\n      unit: 'league',\n      relativeUnit: 'mi',\n      relativeScale: 3,\n      denominators: [2, 3, 4, 5, 6, 7, 8, 9, 10],\n      units: {\n        'league': Plurality.EITHER,\n        'leagues': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'mm',\n      baseUnit: 'mm',\n      denominators: [10],\n      units: {\n        'mm': Plurality.EITHER,\n        'millimeter': Plurality.SINGULAR,\n        'millimeters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'cm',\n      relativeUnit: 'mm',\n      relativeScale: 10,\n      denominators: [2, 4, 10],\n      units: {\n        'cm': Plurality.EITHER,\n        'centimeter': Plurality.SINGULAR,\n        'centimeters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'dc',\n      relativeUnit: 'cm',\n      relativeScale: 10,\n      denominators: [10],\n      units: {\n        'dc': Plurality.EITHER,\n        'decimeter': Plurality.SINGULAR,\n        'decimeters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'm',\n      relativeUnit: 'cm',\n      relativeScale: 100,\n      denominators: [2, 3, 4, 5, 10],\n      units: {\n        'm': Plurality.EITHER,\n        'meter': Plurality.SINGULAR,\n        'meters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'km',\n      relativeUnit: 'm',\n      relativeScale: 1000,\n      denominators: [2, 3, 4, 5, 6, 7, 8, 9, 10],\n      units: {\n        'km': Plurality.EITHER,\n        'kilometer': Plurality.SINGULAR,\n        'kilometers': Plurality.PLURAL\n      }\n    }\n  ])\n  .setClassScales()\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Length.ts"],"sourceRoot":""}