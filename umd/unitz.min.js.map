{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///unitz.min.js","webpack:///webpack/bootstrap 26489d530da7417eec80","webpack:///./src/Base.ts","webpack:///./src/classes/Digital.ts","webpack:///./src/classes/index.ts","webpack:///./src/Plurality.ts","webpack:///./src/System.ts","webpack:///./src/Functions.ts","webpack:///./src/Output.ts","webpack:///./src/Group.ts","webpack:///./src/Class.ts","webpack:///./src/Sort.ts","webpack:///./src/Transform.ts","webpack:///./src/Core.ts","webpack:///./src/Value.ts","webpack:///./src/Range.ts","webpack:///./src/Parse.ts","webpack:///./src/classes/Weight.ts","webpack:///./src/classes/Area.ts","webpack:///./src/classes/Time.ts","webpack:///./src/classes/Temperature.ts","webpack:///./src/classes/Angle.ts","webpack:///./src/classes/Volume.ts","webpack:///./src/classes/Length.ts"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","uz","input","Base_Base","addDigitalUnits","parent","relativeTo","relativeScales","denominators","suffixSingular","suffixPlural","unitAndPrefixes","length","_a","unit","prefix","extra","units","Plurality","EITHER","SINGULAR","PLURAL","addGroup","system","System","ANY","common","relativeUnit","relativeScale","addDefaults","Core_Core","addClasses","Weight","Area","Time","Digital","Temperature","Angle","Volume","Length","value","OutputUnit","Functions","isZero","x","abs","EPSILON","isEqual","a","b","isWhole","Math","floor","isSingular","isNumber","isPlural","isFinite","trim","replace","gcd","y","t","sign","appendTo","array","Array","push","apply","isGroupDefinition","isValueDefinition","num","den","isRangeDefinition","min","max","isArray","isString","isDefined","coalesce","Group_Group","Group","definition","baseScale","classScale","dynamic","baseUnit","preferredUnit","updateUnits","setDynamic","addUnits","addGroupUnit","removeUnits","existing","removeGroupUnit","addDenominator","setDenominators","setCommon","setPreferred","singularShort","singularLong","pluralShort","pluralLong","plurality","getPluralLong","getPluralShort","getSingularLong","getSingularShort","matches","transform","reverse","callback","getVisibleGroups","Class_Class","Class","groups","groupMap","converters","addGroups","definitions","group","relative","alias","lower","toLowerCase","getFirstBase","setClassScales","first","setBaseConversion","fromUnit","toUnit","converter","relatedGroup","matched","start","stop","increment","isVisibleGroup","convert","from","to","converted","map","OutputFormat","SortType","Output_Output","Output","GIVEN","format","repeatUnit","unitSpacer","rangeSpacer","fractionSpacer","mixedSpacer","delimiter","significant","set","extend","extended","ranges","out","range","isValid","isFixed","minUnit","showUnit","isFraction","isMixed","mixedWhole","mixedNum","number","NONE","isLongUnit","isShortUnit","valueString","valueSignificant","toFixed","NUMBER","IMPROPER","SHORT","LONG","Transform_Transform","Transform","Number","MAX_VALUE","convertWithMax","groupless","onlyUnits","notUnits","onlyClasses","notClasses","givenGroup","isCommonMatch","isSystemMatch","isUnitMatch","isClassMatch","METRIC","IMPERIAL","indexOf","Sort_Sort","Sort","ascending","type","MAX","classes","className","getSorter","_this","getClassComparison","MIN","getMinComparison","getMaxComparison","AVERAGE","getAverageComparison","classScaled","avg","bvg","ag","bg","Core","getGroup","createDynamic","exactGroup","unitToGroup","normalizedUnit","normalizedGroup","dynamicUnit","getDynamicMatch","dynamicGroup","dynamicMatches","addDynamicUnit","newDynamicGroup","addClass","classMap","_i","arguments","unitCount","groupUnit","longest","dynamicGroups","substring","dynamicMatchLength","isMoreNormal","fromValue","toValue","forOutput","fromString","toString","globalOutput","globalTransform","globalSort","Value_Value","Value","divisor","ceil","actual","error","SEPARATOR_MIXED","SEPARATOR_FRACTION","preferred","copy","zero","truncated","truncate","fractioned","fromNumberWithDenominators","numbered","convertTo","convertToValue","fromNumberForGroup","conversions","index","normalize","closest","acceptable","add","addend","scale","sub","subtrahend","mul","fromNumber","fromNumberWithRange","minDen","maxDen","closestDenominator","closestDistance","distance","fromFraction","INVALID","NaN","Range_Range","Range","isDecimal","asString","SEPARATOR","isMatch","positive","minNegative","negative","minPositive","maxPositive","nonzero","minZero","maxZero","maxd","fixed","mind","fromFixed","Base","Parse_Parse","amount","mutate","r","scaleTo","unitValue","rangeDelta","getScaleTo","fractions","numbers","hasRanges","options","output","compact","compacted","groupByClass","entry","parent_1","minGroupChosen","maxGroupChosen","minSum","maxSum","minGroup","maxGroup","expand","expanded","valueGroup","valueSign","transformed","isBase","operate","remainder","other","base","otherRanges","otherUsed","k","otherRange","mutator","source","mutated","filter","filtered","sort","slice","parent_2","convertedValue","maximum","minimum","rangeGroup","each","iterate","end","move","isRange","Parse","rangesFromArray","rangesFromString","split","REGEX_LIST","rangeFromString","REGEX_RANGE","exec","valueFromString","minInput","maxInput","minParsed","maxParsed","maxUnit","valueFromResult","valueFromValue","givenValue","parsedValue","parsed","result","valueNum","valueDen","REGEX_PARSE","whole","parseInt","hasWhole","charAt","decimal","hasDecimal","parseFloat","mg","milligram","milligrams","g","gram","grams","kg","kilogram","kilograms","oz","ounce","ounces","lb","lbs","pound","pounds","ton","tons","tonnes","sqin","sq. in","sq in","in2","in^2","in²","inch2","inch^2","inch²","inches2","inches^2","inches²","square in","square inch","square inches","sqft","sq. ft","sq ft","ft2","ft^2","ft²","foot2","foot^2","foot²","feet2","feet^2","feet²","square ft","square foot","square feet","sqyd","sq. yd","sq yd","yd2","yd^2","yd²","yard2","yard^2","yard²","yards2","yards^2","yards²","square yard","square yards","acre","acres","sqmi","sq. mi","sq mi","mi2","mi^2","mi²","mile2","mile^2","mile²","miles2","miles^2","miles²","square mi","square mile","square miles","sqmm","sq. mm","sq mm","mm2","mm^2","mm²","millimeter2","millimeter^2","millimeter²","millimeters2","millimeters^2","millimeters²","square mm","square millimeter","square millimeters","sqcm","sq. cm","sq cm","cm2","cm^2","cm²","centimeter2","centimeter^2","centimeter²","centimeters2","centimeters^2","centimeters²","square cm","square centimeter","square centimeters","sqm","sq. m","sq m","m2","m^2","m²","meter2","meter^2","meter²","meters2","meters^2","meters²","square m","square meter","square meters","sqkm","sq. km","sq km","km2","km^2","km²","kilometer2","kilometer^2","kilometer²","kilometers2","kilometers^2","kilometers²","square km","square kilometer","square kilometers","ns","nanosecond","nanoseconds","nano","nanos","us","microsecond","microseconds","micro","micros","ms","millisecond","milliseconds","milli","millis","second","seconds","sec","secs","minute","minutes","mins","hr","hour","hours","hrs","day","days","wk","week","weeks","wks","yr","year","years","yrs","score","decade","decades","biennium","bienniums","triennium","trienniums","quadrennium","quadrenniums","lustrum","lustrums","century","centurys","centuries","millennium","millenniums","millennia","millennias","bit","bits","nibble","nibbles","nybble","nyble","half-byte","half byte","tetrade","semi-octet","quadbit","quartet","B","byte","bytes","F","°F","Fahrenheit","°C","Celsius","K","kelvin","kelvins","RAD2DEG","PI","DEG2RAD","deg","°","degrees","degree","rad","radians","radian","tsp","ts","tsps","teaspoon","teaspoons","tbsp","tbsps","tablespoon","tablespoons","floz","fl-oz","fl oz","fluid ounce","fluid ounces","fl. oz","oz. fl","oz fl","cup","cups","pt","pint","pints","qt","quart","quarts","gal","gallon","gallons","gals","ml","millilitre","millilitres","milliliter","milliliters","cl","centilitre","centilitres","centiliter","centiliters","litre","litres","liter","liters","dl","decalitre","decalitres","decaliter","decaliters","kl","kilolitre","kilolitres","kiloliter","kiloliters","mm3","mm^3","mm³","millimeter3","millimeter^3","millimeter³","millimeters3","millimeters^3","millimeters³","cubic mm","cubic millimeter","cubic millimeters","cm3","cm^3","cm³","centimeter3","centimeter^3","centimeter³","centimeters3","centimeters^3","centimeters³","cubic cm","cubic centimeter","cubic centimeters","m3","m^3","m³","meter3","meter^3","meter³","meters3","meters^3","meters³","cubic m","cubic meter","cubic meters","km3","km^3","km³","kilometer3","kilometer^3","kilometer³","kilometers3","kilometers^3","kilometers³","cubic km","cubic kilometer","cubic kilometers","in3","in^3","in³","inch3","inch^3","inch³","inches3","inches^3","inches³","cubic in","cubic inch","cubic inches","ft3","ft^3","ft³","foot3","foot^3","foot³","feet3","feet^3","feet³","cubic ft","cubic foot","cubic feet","yd3","yd^3","yd³","yard3","yard^3","yard³","yards3","yards^3","yards³","cubic yd","cubic yard","cubic yards","in","inch","inches","\"","ft","foot","feet","'","yd","yard","yards","yds","mi","mile","miles","league","leagues","mm","millimeter","millimeters","cm","centimeter","centimeters","dc","decimeter","decimeters","meter","meters","km","kilometer","kilometers"],"mappings":"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","file":"unitz.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Unitz\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Unitz\"] = factory();\n\telse\n\t\troot[\"Unitz\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Unitz\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Unitz\"] = factory();\n\telse\n\t\troot[\"Unitz\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(1);\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n\n// CONCATENATED MODULE: ./src/Plurality.ts\n\r\nvar Plurality;\r\n(function (Plurality) {\r\n    Plurality[Plurality[\"SINGULAR\"] = 0] = \"SINGULAR\";\r\n    Plurality[Plurality[\"PLURAL\"] = 1] = \"PLURAL\";\r\n    Plurality[Plurality[\"EITHER\"] = 2] = \"EITHER\";\r\n})(Plurality = Plurality || (Plurality = {}));\r\n\n// CONCATENATED MODULE: ./src/System.ts\n\r\nvar System;\r\n(function (System) {\r\n    System[System[\"METRIC\"] = 0] = \"METRIC\";\r\n    System[System[\"IMPERIAL\"] = 1] = \"IMPERIAL\";\r\n    System[System[\"NONE\"] = 2] = \"NONE\";\r\n    System[System[\"ANY\"] = 3] = \"ANY\";\r\n    System[System[\"GIVEN\"] = 4] = \"GIVEN\";\r\n})(System = System || (System = {}));\r\n\n// CONCATENATED MODULE: ./src/Functions.ts\n\r\nvar Functions = (function () {\r\n    function Functions() {\r\n    }\r\n    Functions.isZero = function (x) {\r\n        return this.abs(x) < this.EPSILON;\r\n    };\r\n    Functions.isEqual = function (a, b) {\r\n        return this.abs(a - b) < this.EPSILON;\r\n    };\r\n    Functions.isWhole = function (x) {\r\n        return this.abs(Math.floor(x) - x) < this.EPSILON;\r\n    };\r\n    Functions.isSingular = function (x) {\r\n        return this.isNumber(x) && this.abs(this.abs(x) - 1) < this.EPSILON;\r\n    };\r\n    Functions.isPlural = function (x) {\r\n        return x !== 1 && x !== -1;\r\n    };\r\n    Functions.isNumber = function (x) {\r\n        return isFinite(x);\r\n    };\r\n    Functions.trim = function (x) {\r\n        return x ? x.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '') : x;\r\n    };\r\n    Functions.gcd = function (a, b) {\r\n        if (!this.isWhole(a) || !this.isWhole(b)) {\r\n            return 1;\r\n        }\r\n        var x = a < b ? a : b;\r\n        var y = a < b ? b : a;\r\n        x = this.abs(x);\r\n        y = this.abs(y);\r\n        while (y) {\r\n            var t = y;\r\n            y = x % y;\r\n            x = t;\r\n        }\r\n        return x;\r\n    };\r\n    Functions.abs = function (x) {\r\n        return x < 0 ? -x : x;\r\n    };\r\n    Functions.sign = function (x) {\r\n        return x < 0 ? -1 : (x === 0 ? 0 : 1);\r\n    };\r\n    Functions.appendTo = function (array, input) {\r\n        if (input instanceof Array) {\r\n            array.push.apply(array, input);\r\n        }\r\n        else if (input) {\r\n            array.push(input);\r\n        }\r\n        return array;\r\n    };\r\n    Functions.isGroupDefinition = function (input) {\r\n        return !!(input && input.system && input.unit && input.denominators && input.units);\r\n    };\r\n    Functions.isValueDefinition = function (input) {\r\n        return !!(input && (input.value || input.unit || input.num || input.den));\r\n    };\r\n    Functions.isRangeDefinition = function (input) {\r\n        return !!(input && input.min && input.max);\r\n    };\r\n    Functions.isArray = function (input) {\r\n        return input instanceof Array;\r\n    };\r\n    Functions.isString = function (input) {\r\n        return typeof (input) === 'string';\r\n    };\r\n    Functions.isDefined = function (input) {\r\n        return typeof (input) !== 'undefined';\r\n    };\r\n    Functions.coalesce = function (a, b) {\r\n        return this.isDefined(a) ? a : b;\r\n    };\r\n    Functions.EPSILON = 0.00001;\r\n    return Functions;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Group.ts\n\r\n\r\n\r\nvar Group_Group = (function () {\r\n    function Group(definition, parent) {\r\n        this.baseScale = 1;\r\n        this.classScale = 0;\r\n        this.dynamic = false;\r\n        this.system = definition.system;\r\n        this.common = !!definition.common;\r\n        this.unit = definition.unit;\r\n        this.baseUnit = definition.baseUnit;\r\n        this.preferredUnit = definition.preferredUnit || definition.unit;\r\n        this.relativeUnit = definition.relativeUnit;\r\n        this.relativeScale = definition.relativeScale || 1;\r\n        this.units = definition.units;\r\n        this.denominators = definition.denominators;\r\n        this.parent = parent;\r\n        this.updateUnits();\r\n    }\r\n    Object.defineProperty(Group.prototype, \"isBase\", {\r\n        get: function () {\r\n            return this.unit === this.baseUnit;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Group.prototype.setDynamic = function (dynamic) {\r\n        if (dynamic === void 0) { dynamic = true; }\r\n        this.dynamic = dynamic;\r\n        return this;\r\n    };\r\n    Group.prototype.addUnits = function (units) {\r\n        var parent = this.parent;\r\n        for (var unit in units) {\r\n            this.units[unit] = units[unit];\r\n            parent.addGroupUnit(unit, this);\r\n        }\r\n        this.updateUnits();\r\n        return this;\r\n    };\r\n    Group.prototype.removeUnits = function (units) {\r\n        var parent = this.parent;\r\n        var existing = this.units;\r\n        for (var i = 0; i < units.length; i++) {\r\n            var unit = units[i];\r\n            if (unit in existing) {\r\n                delete existing[unit];\r\n                parent.removeGroupUnit(unit, this);\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    Group.prototype.addDenominator = function (denominators) {\r\n        Functions.appendTo(this.denominators, denominators);\r\n        return this;\r\n    };\r\n    Group.prototype.setDenominators = function (denominators) {\r\n        this.denominators = denominators;\r\n        return this;\r\n    };\r\n    Group.prototype.setCommon = function (common) {\r\n        if (common === void 0) { common = true; }\r\n        this.common = common;\r\n        return this;\r\n    };\r\n    Group.prototype.setPreferred = function (unit) {\r\n        this.preferredUnit = unit;\r\n        return this;\r\n    };\r\n    Group.prototype.updateUnits = function () {\r\n        this.singularShort = null;\r\n        this.singularLong = null;\r\n        this.pluralShort = null;\r\n        this.pluralLong = null;\r\n        for (var unit in this.units) {\r\n            var plurality = this.units[unit];\r\n            if (plurality !== Plurality.PLURAL) {\r\n                if (!this.singularShort || unit.length < this.singularShort.length) {\r\n                    this.singularShort = unit;\r\n                }\r\n                if (!this.singularLong || unit.length > this.singularLong.length) {\r\n                    this.singularLong = unit;\r\n                }\r\n            }\r\n            if (plurality !== Plurality.SINGULAR) {\r\n                if (!this.pluralShort || unit.length < this.pluralShort.length) {\r\n                    this.pluralShort = unit;\r\n                }\r\n                if (!this.pluralLong || unit.length > this.pluralLong.length) {\r\n                    this.pluralLong = unit;\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    Group.prototype.getPluralLong = function () {\r\n        return this.pluralLong;\r\n    };\r\n    Group.prototype.getPluralShort = function () {\r\n        return this.pluralShort;\r\n    };\r\n    Group.prototype.getSingularLong = function () {\r\n        return this.singularLong;\r\n    };\r\n    Group.prototype.getSingularShort = function () {\r\n        return this.singularShort;\r\n    };\r\n    Group.prototype.matches = function (transform, reverse, callback) {\r\n        if (this.parent) {\r\n            this.parent.getVisibleGroups(transform, reverse, this, callback);\r\n        }\r\n    };\r\n    return Group;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Class.ts\n\r\n\r\nvar Class_Class = (function () {\r\n    function Class(name, groups) {\r\n        this.name = name;\r\n        this.groupMap = {};\r\n        this.groups = [];\r\n        this.converters = {};\r\n        if (groups) {\r\n            this.addGroups(groups);\r\n        }\r\n    }\r\n    Class.prototype.addGroups = function (definitions) {\r\n        for (var i = 0; i < definitions.length; i++) {\r\n            this.addGroup(definitions[i]);\r\n        }\r\n        return this;\r\n    };\r\n    Class.prototype.addGroup = function (definition) {\r\n        var group = new Group_Group(definition, this);\r\n        var relativeUnit = group.relativeUnit, relativeScale = group.relativeScale, units = group.units;\r\n        if (relativeUnit) {\r\n            var relative = this.groupMap[relativeUnit];\r\n            group.baseScale = relativeScale * relative.baseScale;\r\n            group.baseUnit = relative.baseUnit;\r\n        }\r\n        for (var alias in units) {\r\n            this.addGroupUnit(alias, group);\r\n        }\r\n        this.groups.push(group);\r\n        return group;\r\n    };\r\n    Class.prototype.addGroupUnit = function (unit, group) {\r\n        var lower = unit.toLowerCase();\r\n        this.groupMap[unit] = group;\r\n        if (!this.groupMap[lower]) {\r\n            this.groupMap[lower] = group;\r\n        }\r\n        return this;\r\n    };\r\n    Class.prototype.removeGroupUnit = function (unit, group) {\r\n        var lower = unit.toLowerCase();\r\n        if (this.groupMap[unit] === group) {\r\n            delete this.groupMap[unit];\r\n        }\r\n        if (this.groupMap[lower] === group) {\r\n            delete this.groupMap[lower];\r\n        }\r\n        return this;\r\n    };\r\n    Class.prototype.getFirstBase = function () {\r\n        var groups = this.groups;\r\n        for (var i = 0; i < groups.length; i++) {\r\n            var group = groups[i];\r\n            if (group.unit === group.baseUnit) {\r\n                return group;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    Class.prototype.setClassScales = function () {\r\n        var groups = this.groups;\r\n        var first = this.getFirstBase();\r\n        if (first) {\r\n            for (var i = 0; i < groups.length; i++) {\r\n                var group = groups[i];\r\n                if (group.baseUnit === first.baseUnit) {\r\n                    group.classScale = group.baseScale;\r\n                }\r\n                else if (group.baseUnit in this.converters) {\r\n                    group.classScale = this.converters[group.baseUnit][first.baseUnit](group.baseScale);\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    Class.prototype.setBaseConversion = function (fromUnit, toUnit, converter) {\r\n        var converters = this.converters;\r\n        converters[fromUnit] = converters[fromUnit] || {};\r\n        converters[fromUnit][toUnit] = converter;\r\n        return this;\r\n    };\r\n    Class.prototype.getVisibleGroups = function (transform, reverse, relatedGroup, callback) {\r\n        var groups = this.groups;\r\n        var matched = 0;\r\n        var start = reverse ? groups.length - 1 : 0;\r\n        var stop = reverse ? -1 : groups.length;\r\n        var increment = reverse ? -1 : 1;\r\n        for (var i = start; i !== stop; i += increment) {\r\n            var group = groups[i];\r\n            if (transform.isVisibleGroup(group, relatedGroup)) {\r\n                var result = callback(group, matched++);\r\n                if (result === false) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    };\r\n    Class.prototype.convert = function (value, from, to) {\r\n        if (from === to || !from || !to) {\r\n            return value;\r\n        }\r\n        var converted = value * from.baseScale;\r\n        if (from.baseUnit !== to.baseUnit) {\r\n            var map = this.converters[from.baseUnit];\r\n            if (!map || !map[to.baseUnit]) {\r\n                return 0;\r\n            }\r\n            var converter = map[to.baseUnit];\r\n            converted = converter(converted);\r\n        }\r\n        return converted / to.baseScale;\r\n    };\r\n    return Class;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Output.ts\n\r\n\r\nvar OutputUnit;\r\n(function (OutputUnit) {\r\n    OutputUnit[OutputUnit[\"NONE\"] = 0] = \"NONE\";\r\n    OutputUnit[OutputUnit[\"GIVEN\"] = 1] = \"GIVEN\";\r\n    OutputUnit[OutputUnit[\"SHORT\"] = 2] = \"SHORT\";\r\n    OutputUnit[OutputUnit[\"LONG\"] = 3] = \"LONG\";\r\n})(OutputUnit = OutputUnit || (OutputUnit = {}));\r\nvar OutputFormat;\r\n(function (OutputFormat) {\r\n    OutputFormat[OutputFormat[\"GIVEN\"] = 0] = \"GIVEN\";\r\n    OutputFormat[OutputFormat[\"NUMBER\"] = 1] = \"NUMBER\";\r\n    OutputFormat[OutputFormat[\"MIXED\"] = 2] = \"MIXED\";\r\n    OutputFormat[OutputFormat[\"FRACTION\"] = 3] = \"FRACTION\";\r\n    OutputFormat[OutputFormat[\"IMPROPER\"] = 4] = \"IMPROPER\";\r\n})(OutputFormat = OutputFormat || (OutputFormat = {}));\r\nvar Output_Output = (function () {\r\n    function Output(input) {\r\n        this.unit = OutputUnit.GIVEN;\r\n        this.format = OutputFormat.GIVEN;\r\n        this.repeatUnit = false;\r\n        this.unitSpacer = '';\r\n        this.rangeSpacer = ' - ';\r\n        this.fractionSpacer = '/';\r\n        this.mixedSpacer = ' ';\r\n        this.delimiter = ', ';\r\n        this.significant = -1;\r\n        if (Functions.isDefined(input)) {\r\n            this.set(input);\r\n        }\r\n    }\r\n    Output.prototype.set = function (input) {\r\n        this.unit = Functions.coalesce(input.unit, this.unit);\r\n        this.format = Functions.coalesce(input.format, this.format);\r\n        this.repeatUnit = Functions.coalesce(input.repeatUnit, this.repeatUnit);\r\n        this.unitSpacer = Functions.coalesce(input.unitSpacer, this.unitSpacer);\r\n        this.rangeSpacer = Functions.coalesce(input.rangeSpacer, this.rangeSpacer);\r\n        this.fractionSpacer = Functions.coalesce(input.fractionSpacer, this.fractionSpacer);\r\n        this.mixedSpacer = Functions.coalesce(input.mixedSpacer, this.mixedSpacer);\r\n        this.delimiter = Functions.coalesce(input.delimiter, this.delimiter);\r\n        this.significant = Functions.coalesce(input.significant, this.significant);\r\n        return this;\r\n    };\r\n    Output.prototype.extend = function (input) {\r\n        var extended = this;\r\n        if (Functions.isDefined(input)) {\r\n            if (input instanceof Output) {\r\n                extended = input;\r\n            }\r\n            else {\r\n                extended = new Output(this);\r\n                extended.set(input);\r\n            }\r\n        }\r\n        return extended;\r\n    };\r\n    Output.prototype.ranges = function (ranges) {\r\n        var out = '';\r\n        for (var i = 0; i < ranges.length; i++) {\r\n            var range = ranges[i];\r\n            if (range.isValid) {\r\n                if (out.length) {\r\n                    out += this.delimiter;\r\n                }\r\n                out += this.range(range);\r\n            }\r\n        }\r\n        return out;\r\n    };\r\n    Output.prototype.range = function (range) {\r\n        var out = '';\r\n        if (!range.isValid) {\r\n            // nothing\r\n        }\r\n        else if (range.isFixed) {\r\n            out += this.value(range.min);\r\n        }\r\n        else {\r\n            var minUnit = this.repeatUnit || range.min.unit !== range.max.unit;\r\n            out += this.value(range.min, minUnit);\r\n            out += this.rangeSpacer;\r\n            out += this.value(range.max);\r\n        }\r\n        return out;\r\n    };\r\n    Output.prototype.value = function (value, showUnit) {\r\n        if (showUnit === void 0) { showUnit = true; }\r\n        var out = '';\r\n        if (!value.isValid) {\r\n        }\r\n        else if (this.isFraction(value)) {\r\n            if (this.isMixed(value)) {\r\n                out += value.mixedWhole;\r\n                out += this.mixedSpacer;\r\n                out += value.mixedNum;\r\n                out += this.fractionSpacer;\r\n                out += value.den;\r\n            }\r\n            else {\r\n                out += value.num;\r\n                out += this.fractionSpacer;\r\n                out += value.den;\r\n            }\r\n        }\r\n        else {\r\n            out += this.number(value.value);\r\n        }\r\n        if (value.isValid && this.unit !== OutputUnit.NONE && showUnit) {\r\n            var group = value.group;\r\n            out += this.unitSpacer;\r\n            if (this.isLongUnit(value)) {\r\n                out += Functions.isSingular(value.value) ? group.getSingularLong() : group.getPluralLong();\r\n            }\r\n            else if (this.isShortUnit(value) || (group && group.dynamic)) {\r\n                out += Functions.isSingular(value.value) ? group.getSingularShort() : group.getPluralShort();\r\n            }\r\n            else {\r\n                out += value.unit;\r\n            }\r\n        }\r\n        return out;\r\n    };\r\n    Output.prototype.number = function (x) {\r\n        var valueString = x + '';\r\n        if (this.significant >= 0 && valueString !== '0') {\r\n            var valueSignificant = x\r\n                .toFixed(this.significant)\r\n                .replace(/0*$/, '')\r\n                .replace(/\\.$/, '');\r\n            return valueSignificant.length < valueString.length ? valueSignificant : valueString;\r\n        }\r\n        return valueString;\r\n    };\r\n    Output.prototype.isFraction = function (value) {\r\n        return value.isFraction && this.format !== OutputFormat.NUMBER;\r\n    };\r\n    Output.prototype.isNumber = function (value) {\r\n        return value.isValid && !this.isFraction(value);\r\n    };\r\n    Output.prototype.isMixed = function (value) {\r\n        return value.mixedWhole !== 0 && this.format !== OutputFormat.IMPROPER;\r\n    };\r\n    Output.prototype.isShortUnit = function (value) {\r\n        return value.group && this.unit === OutputUnit.SHORT;\r\n    };\r\n    Output.prototype.isLongUnit = function (value) {\r\n        return value.group && this.unit === OutputUnit.LONG;\r\n    };\r\n    return Output;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Transform.ts\n\r\n\r\n\r\nvar Transform_Transform = (function () {\r\n    function Transform(input) {\r\n        this.common = true;\r\n        this.system = System.GIVEN;\r\n        this.min = -Number.MAX_VALUE;\r\n        this.max = Number.MAX_VALUE;\r\n        this.convertWithMax = true;\r\n        this.groupless = true;\r\n        if (Functions.isDefined(input)) {\r\n            this.set(input);\r\n        }\r\n    }\r\n    Transform.prototype.set = function (input) {\r\n        this.common = Functions.coalesce(input.common, this.common);\r\n        this.system = Functions.coalesce(input.system, this.system);\r\n        this.min = Functions.coalesce(input.min, this.min);\r\n        this.max = Functions.coalesce(input.max, this.max);\r\n        this.groupless = Functions.coalesce(input.groupless, this.groupless);\r\n        this.convertWithMax = Functions.coalesce(input.convertWithMax, this.convertWithMax);\r\n        this.onlyUnits = Functions.coalesce(input.onlyUnits, this.onlyUnits);\r\n        this.notUnits = Functions.coalesce(input.notUnits, this.notUnits);\r\n        this.onlyClasses = Functions.coalesce(input.onlyClasses, this.onlyClasses);\r\n        this.notClasses = Functions.coalesce(input.notClasses, this.notClasses);\r\n        return this;\r\n    };\r\n    Transform.prototype.extend = function (input) {\r\n        var extended = this;\r\n        if (Functions.isDefined(input)) {\r\n            if (input instanceof Transform) {\r\n                extended = input;\r\n            }\r\n            else {\r\n                extended = new Transform(this);\r\n                extended.set(input);\r\n            }\r\n        }\r\n        return extended;\r\n    };\r\n    Transform.prototype.isVisibleGroup = function (group, givenGroup) {\r\n        return this.isCommonMatch(group) &&\r\n            this.isSystemMatch(group, givenGroup) &&\r\n            this.isUnitMatch(group) &&\r\n            this.isClassMatch(group.parent);\r\n    };\r\n    Transform.prototype.isCommonMatch = function (group) {\r\n        return !this.common || group.common;\r\n    };\r\n    Transform.prototype.isSystemMatch = function (group, givenGroup) {\r\n        switch (this.system) {\r\n            case System.METRIC:\r\n                return group.system === System.METRIC || group.system === System.ANY;\r\n            case System.IMPERIAL:\r\n                return group.system === System.IMPERIAL || group.system === System.ANY;\r\n            case System.NONE:\r\n                return false;\r\n            case System.ANY:\r\n                return true;\r\n            case System.GIVEN:\r\n                return !givenGroup || group.baseUnit === givenGroup.baseUnit;\r\n        }\r\n        return false;\r\n    };\r\n    Transform.prototype.isClassMatch = function (parent) {\r\n        if (this.onlyClasses) {\r\n            return this.onlyClasses.indexOf(parent.name) !== -1;\r\n        }\r\n        if (this.notClasses) {\r\n            return this.notClasses.indexOf(parent.name) === -1;\r\n        }\r\n        return true;\r\n    };\r\n    Transform.prototype.isUnitMatch = function (group) {\r\n        if (this.onlyUnits) {\r\n            return this.onlyUnits.indexOf(group.unit) !== -1;\r\n        }\r\n        if (this.notUnits) {\r\n            return this.notUnits.indexOf(group.unit) === -1;\r\n        }\r\n        return true;\r\n    };\r\n    return Transform;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Sort.ts\n\r\n\r\nvar SortType;\r\n(function (SortType) {\r\n    SortType[SortType[\"MIN\"] = 0] = \"MIN\";\r\n    SortType[SortType[\"MAX\"] = 1] = \"MAX\";\r\n    SortType[SortType[\"AVERAGE\"] = 2] = \"AVERAGE\";\r\n})(SortType = SortType || (SortType = {}));\r\nvar Sort_Sort = (function () {\r\n    function Sort(input) {\r\n        this.ascending = false;\r\n        this.type = SortType.MAX;\r\n        this.classes = {};\r\n        if (Functions.isDefined(input)) {\r\n            this.set(input);\r\n        }\r\n    }\r\n    Sort.prototype.set = function (input) {\r\n        this.ascending = Functions.coalesce(input.ascending, this.ascending);\r\n        this.type = Functions.coalesce(input.type, this.type);\r\n        if (Functions.isDefined(input.classes)) {\r\n            for (var className in input.classes) {\r\n                this.classes[className] = input.classes[className];\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    Sort.prototype.extend = function (input) {\r\n        var extended = this;\r\n        if (Functions.isDefined(input)) {\r\n            if (input instanceof Sort) {\r\n                extended = input;\r\n            }\r\n            else {\r\n                extended = new Sort(this);\r\n                extended.set(input);\r\n            }\r\n        }\r\n        return extended;\r\n    };\r\n    Sort.prototype.getSorter = function () {\r\n        var _this = this;\r\n        return function (a, b) {\r\n            var d = _this.getClassComparison(a, b);\r\n            if (d === 0) {\r\n                switch (_this.type) {\r\n                    case SortType.MIN:\r\n                        d = _this.getMinComparison(a, b);\r\n                        break;\r\n                    case SortType.MAX:\r\n                        d = _this.getMaxComparison(a, b);\r\n                        break;\r\n                    case SortType.AVERAGE:\r\n                        d = _this.getAverageComparison(a, b);\r\n                        break;\r\n                }\r\n            }\r\n            return _this.ascending ? d : -d;\r\n        };\r\n    };\r\n    Sort.prototype.getMinComparison = function (a, b) {\r\n        return Functions.sign(a.min.classScaled - b.min.classScaled);\r\n    };\r\n    Sort.prototype.getMaxComparison = function (a, b) {\r\n        return Functions.sign(a.max.classScaled - b.max.classScaled);\r\n    };\r\n    Sort.prototype.getAverageComparison = function (a, b) {\r\n        var avg = (a.min.classScaled + a.max.classScaled) * 0.5;\r\n        var bvg = (b.min.classScaled + b.max.classScaled) * 0.5;\r\n        return Functions.sign(avg - bvg);\r\n    };\r\n    Sort.prototype.getClassComparison = function (a, b) {\r\n        var ag = a.min.group ? 1 : -1;\r\n        var bg = b.min.group ? 1 : -1;\r\n        if (ag !== bg) {\r\n            return ag - bg;\r\n        }\r\n        var ac = this.classes[a.min.group.parent.name] || 0;\r\n        var bc = this.classes[b.min.group.parent.name] || 0;\r\n        return ac - bc;\r\n    };\r\n    return Sort;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Core.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nvar Core_Core = (function () {\r\n    function Core() {\r\n    }\r\n    Core.getGroup = function (unit, createDynamic) {\r\n        if (createDynamic === void 0) { createDynamic = true; }\r\n        if (!unit) {\r\n            return null;\r\n        }\r\n        var exactGroup = Core.unitToGroup[unit];\r\n        if (exactGroup) {\r\n            return exactGroup;\r\n        }\r\n        var normalizedUnit = unit.toLowerCase();\r\n        var normalizedGroup = Core.unitToGroup[normalizedUnit];\r\n        if (normalizedGroup) {\r\n            return normalizedGroup;\r\n        }\r\n        if (!createDynamic) {\r\n            return null;\r\n        }\r\n        var dynamicUnit = Core.getDynamicMatch(unit);\r\n        var dynamicGroup = Core.dynamicMatches[dynamicUnit];\r\n        if (dynamicGroup) {\r\n            return Core.addDynamicUnit(unit, dynamicGroup);\r\n        }\r\n        return Core.newDynamicGroup(unit);\r\n    };\r\n    Core.setPreferred = function (unit) {\r\n        var group = this.getGroup(unit, false);\r\n        if (group) {\r\n            group.setPreferred(unit);\r\n        }\r\n    };\r\n    Core.setCommon = function (unit, common) {\r\n        if (common === void 0) { common = true; }\r\n        var group = this.getGroup(unit, false);\r\n        if (group) {\r\n            group.setCommon(common);\r\n        }\r\n    };\r\n    Core.setDenominators = function (unit, denominators) {\r\n        var group = this.getGroup(unit, false);\r\n        if (group) {\r\n            group.setDenominators(denominators);\r\n        }\r\n    };\r\n    Core.addClass = function (parent) {\r\n        this.classMap[parent.name] = parent;\r\n        this.classes.push(parent);\r\n        var groups = parent.groupMap;\r\n        for (var unit in groups) {\r\n            this.unitToGroup[unit] = groups[unit];\r\n        }\r\n    };\r\n    Core.addClasses = function () {\r\n        var classes = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            classes[_i] = arguments[_i];\r\n        }\r\n        for (var i = 0; i < classes.length; i++) {\r\n            this.addClass(classes[i]);\r\n        }\r\n    };\r\n    Core.addDynamicUnit = function (unit, group) {\r\n        group.units[unit] = Plurality.EITHER;\r\n        var unitCount = 0;\r\n        for (var groupUnit in group.units) {\r\n            if (groupUnit) {\r\n                unitCount++;\r\n            }\r\n        }\r\n        if (unitCount > 1) {\r\n            var longest = void 0;\r\n            for (var groupUnit in group.units) {\r\n                group.units[groupUnit] = Plurality.SINGULAR;\r\n                if (!longest || groupUnit.length > longest.length) {\r\n                    longest = groupUnit;\r\n                }\r\n            }\r\n            if (longest) {\r\n                group.units[longest] = Plurality.PLURAL;\r\n            }\r\n        }\r\n        group.updateUnits();\r\n        this.unitToGroup[unit] = group;\r\n        this.unitToGroup[unit.toLowerCase()] = group;\r\n        this.dynamicMatches[this.getDynamicMatch(unit)] = group;\r\n        return group;\r\n    };\r\n    Core.newDynamicGroup = function (unit) {\r\n        var parent = new Class_Class(unit);\r\n        var group = parent.addGroup({\r\n            system: System.ANY,\r\n            unit: unit,\r\n            common: true,\r\n            baseUnit: unit,\r\n            denominators: [2, 3, 4, 5, 6, 8, 10],\r\n            units: {}\r\n        });\r\n        group.setDynamic();\r\n        this.addDynamicUnit(unit, group);\r\n        this.dynamicGroups.push(group);\r\n        return group;\r\n    };\r\n    Core.getDynamicMatch = function (unit) {\r\n        return unit.substring(0, this.dynamicMatchLength).toLowerCase();\r\n    };\r\n    // @ts-ignore\r\n    Core.isMoreNormal = function (fromValue, toValue, transform, forOutput) {\r\n        if (!fromValue) {\r\n            return true;\r\n        }\r\n        var fromString = forOutput.value(fromValue);\r\n        var toString = forOutput.value(toValue);\r\n        return toString.length <= fromString.length;\r\n    };\r\n    Core.classMap = {};\r\n    Core.classes = [];\r\n    Core.unitToGroup = {};\r\n    Core.dynamicGroups = [];\r\n    Core.dynamicMatches = {};\r\n    Core.dynamicMatchLength = 3;\r\n    Core.globalOutput = new Output_Output();\r\n    Core.globalTransform = new Transform_Transform();\r\n    Core.globalSort = new Sort_Sort();\r\n    return Core;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Value.ts\n\r\n\r\n\r\nvar Value_Value = (function () {\r\n    function Value(value, num, den, unit, group) {\r\n        var divisor = Functions.gcd(num, den);\r\n        this.value = value;\r\n        this.num = num / divisor;\r\n        this.den = den / divisor;\r\n        this.unit = unit;\r\n        this.group = group;\r\n    }\r\n    Object.defineProperty(Value.prototype, \"isValid\", {\r\n        get: function () {\r\n            return isFinite(this.value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"isFraction\", {\r\n        get: function () {\r\n            return this.den !== 1;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"isDecimal\", {\r\n        get: function () {\r\n            return this.den === 1;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"scaled\", {\r\n        get: function () {\r\n            return this.group ? this.value * this.group.baseScale : this.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"classScaled\", {\r\n        get: function () {\r\n            return this.group ? this.value * this.group.classScale : this.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"actual\", {\r\n        get: function () {\r\n            return this.num / this.den;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"mixedWhole\", {\r\n        get: function () {\r\n            return this.den !== 1 ? Math.floor(this.num / this.den) : 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"mixedNum\", {\r\n        get: function () {\r\n            return this.den !== 1 ? this.num % this.den : this.num;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"floor\", {\r\n        get: function () {\r\n            return Math.floor(this.value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"ceil\", {\r\n        get: function () {\r\n            return Math.ceil(this.value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"truncate\", {\r\n        get: function () {\r\n            return this.value < 0 ? this.ceil : this.floor;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"remainder\", {\r\n        get: function () {\r\n            return this.value - this.floor;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"error\", {\r\n        get: function () {\r\n            return this.actual - this.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"distance\", {\r\n        get: function () {\r\n            return Functions.abs(this.error);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"asString\", {\r\n        get: function () {\r\n            return (this.den === 1) ?\r\n                (this.value + '') :\r\n                (this.mixedWhole !== 0 ?\r\n                    (this.mixedWhole + Value.SEPARATOR_MIXED + this.mixedNum + Value.SEPARATOR_FRACTION + this.den) :\r\n                    (this.num + Value.SEPARATOR_FRACTION + this.den));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Value.prototype.preferred = function () {\r\n        return this.group ? new Value(this.value, this.num, this.den, this.group.preferredUnit, this.group) : this;\r\n    };\r\n    Value.prototype.copy = function () {\r\n        return new Value(this.value, this.num, this.den, this.unit, this.group);\r\n    };\r\n    Value.prototype.zero = function () {\r\n        return new Value(0, 0, 1, this.unit, this.group);\r\n    };\r\n    Value.prototype.truncated = function () {\r\n        return new Value(this.truncate, this.truncate, 1, this.unit, this.group);\r\n    };\r\n    Value.prototype.fractioned = function () {\r\n        if (this.isFraction) {\r\n            return this;\r\n        }\r\n        if (this.group) {\r\n            return Value.fromNumberWithDenominators(this.value, this.group.denominators, this.unit, this.group);\r\n        }\r\n        return this;\r\n    };\r\n    Value.prototype.numbered = function () {\r\n        if (this.isFraction) {\r\n            return new Value(this.value, this.value, 1, this.unit, this.group);\r\n        }\r\n        return this;\r\n    };\r\n    Value.prototype.convertTo = function (to) {\r\n        var group = this.group;\r\n        return group ? group.parent.convert(this.value, group, to) : this.value;\r\n    };\r\n    Value.prototype.convertToValue = function (group) {\r\n        return Value.fromNumberForGroup(this.convertTo(group), group);\r\n    };\r\n    Value.prototype.conversions = function (transform, reverse, callback) {\r\n        var _this = this;\r\n        if (this.group) {\r\n            this.group.matches(transform, reverse, function (group, index) {\r\n                callback(_this.convertToValue(group), index);\r\n            });\r\n        }\r\n    };\r\n    Value.prototype.normalize = function (transform, forOutput) {\r\n        var closest;\r\n        this.conversions(transform, false, function (convert) {\r\n            var acceptable = !forOutput.isNumber(convert);\r\n            if (!acceptable) {\r\n                var number = forOutput.number(convert.value);\r\n                acceptable = number !== '0';\r\n            }\r\n            if (acceptable && Core_Core.isMoreNormal(closest, convert, transform, forOutput)) {\r\n                closest = convert;\r\n            }\r\n        });\r\n        return closest || this;\r\n    };\r\n    Value.prototype.add = function (addend, scale) {\r\n        if (scale === void 0) { scale = 1; }\r\n        var num = this.num * addend.den + addend.num * this.den * scale;\r\n        var den = this.den * addend.den;\r\n        var result = this.value + addend.value * scale;\r\n        return new Value(result, num, den, this.unit, this.group);\r\n    };\r\n    Value.prototype.sub = function (subtrahend, scale) {\r\n        if (scale === void 0) { scale = 1; }\r\n        var num = this.num * subtrahend.den - subtrahend.num * this.den * scale;\r\n        var den = this.den * subtrahend.den;\r\n        var result = this.value - subtrahend.value * scale;\r\n        return new Value(result, num, den, this.unit, this.group);\r\n    };\r\n    Value.prototype.mul = function (scale) {\r\n        return new Value(this.value * scale, this.num * scale, this.den, this.unit, this.group);\r\n    };\r\n    Value.fromNumber = function (value, unit, group) {\r\n        if (unit === void 0) { unit = ''; }\r\n        if (group === void 0) { group = null; }\r\n        return new Value(value, value, 1, unit, group);\r\n    };\r\n    Value.fromNumberWithRange = function (value, unit, group, minDen, maxDen) {\r\n        if (unit === void 0) { unit = ''; }\r\n        if (group === void 0) { group = null; }\r\n        if (minDen === void 0) { minDen = 1; }\r\n        if (maxDen === void 0) { maxDen = 100; }\r\n        var closestDenominator = 0;\r\n        var closestDistance = -1;\r\n        for (var i = minDen; i <= maxDen; i++) {\r\n            var den = i;\r\n            var num = Math.floor(den * value);\r\n            var actual = num / den;\r\n            var distance = Functions.abs(value - actual);\r\n            if (closestDistance === -1 || distance < closestDistance) {\r\n                closestDistance = distance;\r\n                closestDenominator = den;\r\n            }\r\n        }\r\n        if (closestDistance > Functions.EPSILON) {\r\n            return new Value(value, value, 1, unit, group);\r\n        }\r\n        if (closestDenominator === 0) {\r\n            closestDenominator = 1;\r\n        }\r\n        return new Value(value, Math.floor(value * closestDenominator), closestDenominator, unit, group);\r\n    };\r\n    Value.fromNumberForGroup = function (value, group) {\r\n        return this.fromNumberWithDenominators(value, group.denominators, group.preferredUnit, group);\r\n    };\r\n    Value.fromNumberWithDenominators = function (value, denominators, unit, group) {\r\n        if (unit === void 0) { unit = ''; }\r\n        if (group === void 0) { group = null; }\r\n        var closestDenominator = 0;\r\n        var closestDistance = -1;\r\n        for (var i = 0; i < denominators.length; i++) {\r\n            var den = denominators[i];\r\n            var num = Math.floor(den * value);\r\n            var actual = num / den;\r\n            var distance = Functions.abs(value - actual);\r\n            if (closestDistance === -1 || distance < closestDistance) {\r\n                closestDistance = distance;\r\n                closestDenominator = den;\r\n            }\r\n        }\r\n        if (closestDistance > Functions.EPSILON) {\r\n            return new Value(value, value, 1, unit, group);\r\n        }\r\n        if (closestDenominator === 0) {\r\n            closestDenominator = 1;\r\n        }\r\n        return new Value(value, Math.floor(value * closestDenominator), closestDenominator, unit, group);\r\n    };\r\n    Value.fromFraction = function (num, den, unit, group) {\r\n        if (unit === void 0) { unit = ''; }\r\n        if (group === void 0) { group = null; }\r\n        return new Value(num / den, num, den, unit, group);\r\n    };\r\n    Value.INVALID = new Value(Number.NaN, Number.NaN, 1, '', null);\r\n    Value.SEPARATOR_FRACTION = '/';\r\n    Value.SEPARATOR_MIXED = ' ';\r\n    return Value;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Range.ts\n\r\n\r\nvar Range_Range = (function () {\r\n    function Range(min, max) {\r\n        this.min = min.value < max.value ? min : max;\r\n        this.max = max.value > min.value ? max : min;\r\n    }\r\n    Object.defineProperty(Range.prototype, \"isValid\", {\r\n        get: function () {\r\n            return this.min.isValid && this.max.isValid;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"isFraction\", {\r\n        get: function () {\r\n            return this.min.isFraction || this.max.isFraction;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"isDecimal\", {\r\n        get: function () {\r\n            return this.min.isDecimal && this.max.isDecimal;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"isRange\", {\r\n        get: function () {\r\n            return this.min.value !== this.max.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"isFixed\", {\r\n        get: function () {\r\n            return this.min.value === this.max.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"average\", {\r\n        get: function () {\r\n            return (this.min.value + this.max.value) * 0.5;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"value\", {\r\n        get: function () {\r\n            return this.min.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"minimum\", {\r\n        get: function () {\r\n            return this.min.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"maximum\", {\r\n        get: function () {\r\n            return this.max.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"unit\", {\r\n        get: function () {\r\n            return this.min.group.unit;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"asString\", {\r\n        get: function () {\r\n            return (this.min.value === this.max.value) ?\r\n                (this.min.asString) :\r\n                (this.min.asString + Range.SEPARATOR + this.max.asString);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Range.prototype.isMatch = function (range) {\r\n        return this.min.group === range.min.group &&\r\n            this.max.group === range.max.group;\r\n    };\r\n    Range.prototype.preferred = function () {\r\n        var min = this.min.preferred();\r\n        var max = this.max.preferred();\r\n        return new Range(min, max);\r\n    };\r\n    Range.prototype.positive = function () {\r\n        var minNegative = this.min.value < 0;\r\n        var maxNegative = this.max.value < 0;\r\n        if (maxNegative) {\r\n            return null;\r\n        }\r\n        var min = minNegative ? this.min.zero() : this.min.copy();\r\n        var max = this.max.copy();\r\n        return new Range(min, max);\r\n    };\r\n    Range.prototype.negative = function () {\r\n        var minPositive = this.min.value >= 0;\r\n        var maxPositive = this.max.value >= 0;\r\n        if (minPositive) {\r\n            return null;\r\n        }\r\n        var min = this.min.copy();\r\n        var max = maxPositive ? this.max.zero() : this.max.copy();\r\n        return new Range(min, max);\r\n    };\r\n    Range.prototype.nonzero = function () {\r\n        var minZero = this.min.value === 0;\r\n        var maxZero = this.max.value === 0;\r\n        if (minZero && maxZero) {\r\n            return null;\r\n        }\r\n        var min = this.min.copy();\r\n        var max = this.max.copy();\r\n        return new Range(min, max);\r\n    };\r\n    Range.prototype.maxd = function () {\r\n        var fixed = this.max.copy();\r\n        return new Range(fixed, fixed);\r\n    };\r\n    Range.prototype.mind = function () {\r\n        var fixed = this.min.copy();\r\n        return new Range(fixed, fixed);\r\n    };\r\n    Range.prototype.normalize = function (transform, forOutput) {\r\n        var min = this.min.normalize(transform, forOutput);\r\n        var max = this.max.normalize(transform, forOutput);\r\n        return new Range(min, max);\r\n    };\r\n    Range.prototype.add = function (addend, scale) {\r\n        if (scale === void 0) { scale = 1; }\r\n        var min = this.min.add(addend.min, scale);\r\n        var max = this.max.add(addend.max, scale);\r\n        return new Range(min, max);\r\n    };\r\n    Range.prototype.sub = function (subtrahend, scale) {\r\n        if (scale === void 0) { scale = 1; }\r\n        var min = this.min.sub(subtrahend.min, scale);\r\n        var max = this.max.sub(subtrahend.max, scale);\r\n        return new Range(min, max);\r\n    };\r\n    Range.prototype.mul = function (scale) {\r\n        var min = this.min.mul(scale);\r\n        var max = this.max.mul(scale);\r\n        return new Range(min, max);\r\n    };\r\n    Range.prototype.fractioned = function () {\r\n        if (this.min.isFraction && this.max.isFraction) {\r\n            return this;\r\n        }\r\n        var min = this.min.fractioned();\r\n        var max = this.max.fractioned();\r\n        return new Range(min, max);\r\n    };\r\n    Range.prototype.numbered = function () {\r\n        if (!this.min.isFraction && !this.max.isFraction) {\r\n            return this;\r\n        }\r\n        var min = this.min.numbered();\r\n        var max = this.max.numbered();\r\n        return new Range(min, max);\r\n    };\r\n    Range.fromFixed = function (fixed) {\r\n        return new Range(fixed, fixed);\r\n    };\r\n    Range.INVALID = new Range(Value_Value.INVALID, Value_Value.INVALID);\r\n    Range.SEPARATOR = ' - ';\r\n    return Range;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Base.ts\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Takes user input and returns a new instance of [Base].\r\n */\r\nfunction uz(input) {\r\n    return new Base_Base(input);\r\n}\r\n/**\r\n * The main class which contains a list of ranges and the user input.\r\n */\r\nvar Base_Base = (function () {\r\n    function Base(input, ranges) {\r\n        this.input = input;\r\n        this.ranges = ranges || Parse_Parse.ranges(input, Core_Core.getGroup);\r\n    }\r\n    // 1c, 2.3m SCALE BY 2 = 2c, 4.6m\r\n    Base.prototype.scale = function (amount) {\r\n        return this.mutate(function (r) { return r.mul(amount); });\r\n    };\r\n    // 1c, 3m SCALE TO 1/2c = 1/2c, 1.5m\r\n    Base.prototype.scaleTo = function (unitValue, rangeDelta) {\r\n        if (rangeDelta === void 0) { rangeDelta = 0.5; }\r\n        return this.scale(this.getScaleTo(unitValue, rangeDelta));\r\n    };\r\n    // 5 kilograms = 5kg\r\n    Base.prototype.preferred = function () {\r\n        return this.mutate(function (r) { return r.preferred(); });\r\n    };\r\n    // 0c, 2tbsp, -4tbsp = 0c, 2tbsp\r\n    Base.prototype.positive = function () {\r\n        return this.mutate(function (r) { return r.positive(); });\r\n    };\r\n    // 0c, 2tbsp, -4tbsp = -4tbsp\r\n    Base.prototype.negative = function () {\r\n        return this.mutate(function (r) { return r.negative(); });\r\n    };\r\n    // 0c, 2tbsp = 2tbsp\r\n    Base.prototype.nonzero = function () {\r\n        return this.mutate(function (r) { return r.nonzero(); });\r\n    };\r\n    // 1/2, 0.3 = 1/2, 3/10\r\n    Base.prototype.fractions = function () {\r\n        return this.mutate(function (r) { return r.fractioned(); });\r\n    };\r\n    // 1/2, 0.3 = 0.5, 0.3\r\n    Base.prototype.numbers = function () {\r\n        return this.mutate(function (r) { return r.numbered(); });\r\n    };\r\n    // 1 - 3c = 3c\r\n    Base.prototype.max = function () {\r\n        return this.hasRanges ? this.mutate(function (r) { return r.maxd(); }) : this;\r\n    };\r\n    // 1 - 3c = 1c\r\n    Base.prototype.min = function () {\r\n        return this.hasRanges ? this.mutate(function (r) { return r.mind(); }) : this;\r\n    };\r\n    // 1.5pt = 3c\r\n    Base.prototype.normalize = function (options, forOutput) {\r\n        var output = Core_Core.globalOutput.extend(forOutput);\r\n        var transform = Core_Core.globalTransform.extend(options);\r\n        return this.mutate(function (r) { return r.normalize(transform, output); });\r\n    };\r\n    // 1c, 1pt = 1.5pt\r\n    Base.prototype.compact = function (options) {\r\n        var compacted = [];\r\n        var transform = Core_Core.globalTransform.extend(options);\r\n        var _a = this.groupByClass(), classes = _a.classes, groupless = _a.groupless;\r\n        var _loop_1 = function (className) {\r\n            var entry = classes[className];\r\n            var ranges = entry.ranges;\r\n            var parent_1 = entry.parent;\r\n            var minGroupChosen = null;\r\n            var maxGroupChosen = null;\r\n            var minSum = 0;\r\n            var maxSum = 0;\r\n            // If the transformation options ignores this class, skip it.\r\n            if (!transform.isClassMatch(parent_1)) {\r\n                return \"continue\";\r\n            }\r\n            // Determine the smallest visible group we can use.\r\n            parent_1.getVisibleGroups(transform, false, null, function (group) {\r\n                minGroupChosen = maxGroupChosen = group;\r\n                return false;\r\n            });\r\n            // If we can't find one, then no groups are valid. Skip them.\r\n            if (!minGroupChosen) {\r\n                return \"continue\";\r\n            }\r\n            // For each range, sum up the minimums and maximums while also determining\r\n            // the largest min & max that should be used to represent the sums.\r\n            for (var i = 0; i < ranges.length; i++) {\r\n                var range = ranges[i];\r\n                var minGroup = range.min.group;\r\n                var maxGroup = range.max.group;\r\n                if (minGroup.classScale > minGroupChosen.classScale && transform.isVisibleGroup(minGroup)) {\r\n                    if (i !== 0) {\r\n                        minSum = parent_1.convert(minSum, minGroupChosen, minGroup);\r\n                    }\r\n                    minGroupChosen = minGroup;\r\n                }\r\n                if (maxGroup.classScale > maxGroupChosen.classScale && transform.isVisibleGroup(maxGroup)) {\r\n                    if (i !== 0) {\r\n                        maxSum = parent_1.convert(maxSum, maxGroupChosen, maxGroup);\r\n                    }\r\n                    maxGroupChosen = maxGroup;\r\n                }\r\n                minSum += range.min.convertTo(minGroupChosen);\r\n                maxSum += range.max.convertTo(maxGroupChosen);\r\n            }\r\n            var min = Value_Value.fromNumberForGroup(minSum, minGroupChosen);\r\n            var max = Value_Value.fromNumberForGroup(maxSum, maxGroupChosen);\r\n            compacted.push(new Range_Range(min, max));\r\n        };\r\n        for (var className in classes) {\r\n            _loop_1(className);\r\n        }\r\n        // If the transform options permit groupless results and there are ranges\r\n        // without groups - sum them all.\r\n        if (transform.groupless && groupless.length) {\r\n            var minSum = new Value_Value(0, 0, 1, '', null);\r\n            var maxSum = new Value_Value(0, 0, 1, '', null);\r\n            for (var i = 0; i < groupless.length; i++) {\r\n                minSum = minSum.add(groupless[i].min);\r\n                maxSum = maxSum.add(groupless[i].max);\r\n            }\r\n            compacted.push(new Range_Range(minSum, maxSum));\r\n        }\r\n        return new Base(this.input, compacted);\r\n    };\r\n    // 1.5pt = 1c, 1pt\r\n    Base.prototype.expand = function (options) {\r\n        var transform = Core_Core.globalTransform.extend(options);\r\n        var compacted = this.compact(transform);\r\n        var ranges = compacted.ranges;\r\n        var expanded = [];\r\n        var _loop_2 = function (i) {\r\n            var range = ranges[i];\r\n            var value = transform.convertWithMax ? range.max : range.min;\r\n            var valueGroup = value.group;\r\n            var valueSign = Functions.sign(value.value);\r\n            if (valueGroup) {\r\n                valueGroup.matches(transform, true, function (group) {\r\n                    if (!Functions.isZero(value.value)) {\r\n                        var transformed = value.convertToValue(group);\r\n                        if (group.isBase) {\r\n                            value = value.zero();\r\n                            expanded.push(Range_Range.fromFixed(transformed));\r\n                        }\r\n                        else if (Functions.abs(transformed.value) >= 1 && Functions.sign(transformed.value) === valueSign) {\r\n                            var truncated = transformed.truncated();\r\n                            value = value.sub(truncated.convertToValue(valueGroup));\r\n                            expanded.push(Range_Range.fromFixed(truncated));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                expanded.push(range);\r\n            }\r\n        };\r\n        for (var i = 0; i < ranges.length; i++) {\r\n            _loop_2(i);\r\n        }\r\n        return new Base(this.input, expanded);\r\n    };\r\n    Base.prototype.add = function (input, scale) {\r\n        if (scale === void 0) { scale = 1; }\r\n        return this.operate(input, function (a, b) { return a.add(b, scale); }, function (a) { return a.mul(scale); });\r\n    };\r\n    Base.prototype.sub = function (input, scale) {\r\n        if (scale === void 0) { scale = 1; }\r\n        return this.operate(input, function (a, b) { return a.sub(b, scale); }, function (a) { return a.mul(-scale); });\r\n    };\r\n    Base.prototype.operate = function (input, operate, remainder) {\r\n        var ranges = this.ranges;\r\n        var output = [];\r\n        var other = Parse_Parse.base(input);\r\n        var otherRanges = other.ranges;\r\n        var otherUsed = [];\r\n        for (var i = 0; i < ranges.length; i++) {\r\n            var range = ranges[i];\r\n            for (var k = 0; k < otherRanges.length; k++) {\r\n                if (!otherUsed[k]) {\r\n                    var otherRange = otherRanges[k];\r\n                    if (range.isMatch(otherRange)) {\r\n                        range = operate(range, otherRange);\r\n                        otherUsed[k] = true;\r\n                    }\r\n                }\r\n            }\r\n            output.push(range);\r\n        }\r\n        for (var k = 0; k < otherRanges.length; k++) {\r\n            if (!otherUsed[k]) {\r\n                output.push(remainder(otherRanges[k]));\r\n            }\r\n        }\r\n        return new Base(this.input, output);\r\n    };\r\n    Base.prototype.conversions = function (options) {\r\n        var transform = Core_Core.globalTransform.extend(options);\r\n        var compacted = this.compact(options);\r\n        var ranges = compacted.ranges;\r\n        var output = [];\r\n        var _loop_3 = function (i) {\r\n            var range = ranges[i];\r\n            var convert = transform.convertWithMax ? range.max : range.min;\r\n            convert.conversions(transform, false, function (transformed) {\r\n                var min = transform.convertWithMax ? range.min.convertToValue(transformed.group) : transformed;\r\n                var max = transform.convertWithMax ? transformed : range.max.convertToValue(transformed.group);\r\n                if (min.value <= transform.max && max.value >= transform.min) {\r\n                    output.push(new Range_Range(min, max));\r\n                }\r\n            });\r\n        };\r\n        for (var i = 0; i < ranges.length; i++) {\r\n            _loop_3(i);\r\n        }\r\n        return new Base(this.input, output);\r\n    };\r\n    Base.prototype.mutate = function (mutator) {\r\n        var ranges = [];\r\n        var source = this.ranges;\r\n        for (var i = 0; i < source.length; i++) {\r\n            var mutated = mutator(source[i]);\r\n            if (mutated) {\r\n                ranges.push(mutated);\r\n            }\r\n        }\r\n        return new Base(this.input, ranges);\r\n    };\r\n    Base.prototype.filter = function (options) {\r\n        var transform = Core_Core.globalTransform.extend(options);\r\n        var ranges = this.ranges;\r\n        var filtered = [];\r\n        for (var i = 0; i < ranges.length; i++) {\r\n            var range = ranges[i];\r\n            var group = transform.convertWithMax ? range.max.group : range.min.group;\r\n            if ((group && transform.isVisibleGroup(group)) || (!group && transform.groupless)) {\r\n                filtered.push(range);\r\n            }\r\n        }\r\n        return new Base(this.input, filtered);\r\n    };\r\n    Base.prototype.sort = function (options) {\r\n        var sort = Core_Core.globalSort.extend(options);\r\n        var ranges = this.ranges.slice();\r\n        ranges.sort(sort.getSorter());\r\n        return new Base(this.input, ranges);\r\n    };\r\n    Base.prototype.groupByClass = function () {\r\n        var ranges = this.ranges;\r\n        var classes = {};\r\n        var groupless = [];\r\n        for (var i = 0; i < ranges.length; i++) {\r\n            var range = ranges[i];\r\n            if (range.min.group) {\r\n                var parent_2 = range.min.group.parent;\r\n                var entry = classes[parent_2.name];\r\n                if (!entry) {\r\n                    entry = classes[parent_2.name] = {\r\n                        parent: parent_2,\r\n                        ranges: []\r\n                    };\r\n                }\r\n                entry.ranges.push(range);\r\n            }\r\n            else {\r\n                groupless.push(range);\r\n            }\r\n        }\r\n        return { classes: classes, groupless: groupless };\r\n    };\r\n    Base.prototype.getScaleTo = function (unitValue, rangeDelta) {\r\n        if (rangeDelta === void 0) { rangeDelta = 0.5; }\r\n        var to = Parse_Parse.value(unitValue, Core_Core.getGroup);\r\n        if (!to.isValid) {\r\n            return 0;\r\n        }\r\n        var converted = this.convert(to.unit);\r\n        if (!converted || !converted.isValid) {\r\n            return 0;\r\n        }\r\n        var convertedValue = (converted.maximum - converted.minimum) * rangeDelta + converted.minimum;\r\n        var scale = to.value / convertedValue;\r\n        return scale;\r\n    };\r\n    Base.prototype.output = function (options) {\r\n        var output = Core_Core.globalOutput.extend(options);\r\n        return output.ranges(this.ranges);\r\n    };\r\n    Base.prototype.convert = function (unit) {\r\n        var group = Core_Core.getGroup(unit);\r\n        if (!group) {\r\n            return null;\r\n        }\r\n        var parent = group.parent;\r\n        var ranges = this.ranges;\r\n        var min = new Value_Value(0, 0, 1, unit, group);\r\n        var max = new Value_Value(0, 0, 1, unit, group);\r\n        for (var i = 0; i < ranges.length; i++) {\r\n            var range = ranges[i];\r\n            var rangeGroup = range.min.group;\r\n            if (rangeGroup && rangeGroup.parent === parent) {\r\n                min = min.add(range.min.convertToValue(group));\r\n                max = max.add(range.max.convertToValue(group));\r\n            }\r\n        }\r\n        return new Range_Range(min, max);\r\n    };\r\n    Base.prototype.each = function (iterate, reverse) {\r\n        if (reverse === void 0) { reverse = false; }\r\n        var ranges = this.ranges;\r\n        var start = reverse ? ranges.length - 1 : 0;\r\n        var end = reverse ? -1 : ranges.length;\r\n        var move = reverse ? -1 : 1;\r\n        for (var i = start; i !== end; i += move) {\r\n            if (iterate(ranges[i]) === false) {\r\n                break;\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    Base.prototype.classes = function () {\r\n        var ranges = this.ranges;\r\n        var classMap = {};\r\n        var classes = [];\r\n        for (var i = 0; i < ranges.length; i++) {\r\n            var range = ranges[i];\r\n            var group = range.min.group;\r\n            if (group) {\r\n                classMap[group.parent.name] = group.parent;\r\n            }\r\n        }\r\n        for (var className in classMap) {\r\n            classes.push(classMap[className]);\r\n        }\r\n        return classes;\r\n    };\r\n    Object.defineProperty(Base.prototype, \"hasRanges\", {\r\n        get: function () {\r\n            var ranges = this.ranges;\r\n            for (var i = 0; i < ranges.length; i++) {\r\n                if (ranges[i].isRange) {\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Base.prototype, \"isValid\", {\r\n        get: function () {\r\n            var ranges = this.ranges;\r\n            for (var i = 0; i < ranges.length; i++) {\r\n                if (!ranges[i].isValid) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    return Base;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Parse.ts\n\r\n\r\n\r\n\r\n\r\n/** The class which takes user input and parses it to specific structures. **/\r\nvar Parse_Parse = (function () {\r\n    function Parse() {\r\n    }\r\n    /**\r\n     * Parses user input into a base.\r\n     *\r\n     * @param input The input to parse into a Base.\r\n     */\r\n    Parse.base = function (input) {\r\n        if (input instanceof Base_Base) {\r\n            return input;\r\n        }\r\n        return new Base_Base(input);\r\n    };\r\n    Parse.ranges = function (input, groups) {\r\n        if (Functions.isArray(input)) {\r\n            return this.rangesFromArray(input, groups);\r\n        }\r\n        else if (Functions.isString(input)) {\r\n            return this.rangesFromString(input, groups);\r\n        }\r\n        else if (Functions.isRangeDefinition(input)) {\r\n            return this.rangesFromArray([input], groups);\r\n        }\r\n        else if (Functions.isValueDefinition(input)) {\r\n            return this.rangesFromArray([input], groups);\r\n        }\r\n        return [];\r\n    };\r\n    Parse.rangesFromArray = function (input, groups) {\r\n        var ranges = [];\r\n        for (var i = 0; i < input.length; i++) {\r\n            var range = this.range(input[i], groups);\r\n            ranges.push(range);\r\n        }\r\n        return ranges;\r\n    };\r\n    Parse.rangesFromString = function (input, groups) {\r\n        var ranges = input.split(this.REGEX_LIST);\r\n        return this.rangesFromArray(ranges, groups);\r\n    };\r\n    Parse.range = function (input, groups) {\r\n        if (Functions.isString(input)) {\r\n            return this.rangeFromString(input, groups);\r\n        }\r\n        else if (Functions.isRangeDefinition(input)) {\r\n            var range = input;\r\n            var min = this.value(range.min, groups);\r\n            var max = this.value(range.max, groups);\r\n            return new Range_Range(min, max);\r\n        }\r\n        return Range_Range.INVALID;\r\n    };\r\n    Parse.rangeFromString = function (input, groups) {\r\n        var matches = this.REGEX_RANGE.exec(input);\r\n        if (!matches) {\r\n            var fixed = this.valueFromString(input, groups);\r\n            return new Range_Range(fixed, fixed);\r\n        }\r\n        var minInput = matches[1];\r\n        var maxInput = matches[2];\r\n        var minParsed = this.input(minInput);\r\n        var maxParsed = this.input(maxInput);\r\n        if (!minParsed || !maxParsed) {\r\n            return Range_Range.INVALID;\r\n        }\r\n        var minUnit = minParsed.unit || maxParsed.unit;\r\n        var maxUnit = maxParsed.unit || minParsed.unit;\r\n        var min = this.valueFromResult(minParsed, minUnit, groups);\r\n        var max = this.valueFromResult(maxParsed, maxUnit, groups);\r\n        return new Range_Range(min, max);\r\n    };\r\n    Parse.value = function (input, groups) {\r\n        if (Functions.isString(input)) {\r\n            return this.valueFromString(input, groups);\r\n        }\r\n        else if (Functions.isValueDefinition(input)) {\r\n            return this.valueFromValue(input, groups);\r\n        }\r\n        return Value_Value.INVALID;\r\n    };\r\n    Parse.valueFromValue = function (input, groups) {\r\n        var givenValue = Functions.isDefined(input.value) ? input.value : 1;\r\n        var num = Functions.isDefined(input.num) ? input.num : givenValue;\r\n        var den = Functions.isDefined(input.den) ? input.den : 1;\r\n        var parsedValue = Functions.isDefined(input.value) ? input.value : num / den;\r\n        var unit = input.unit || '';\r\n        var group = groups(unit);\r\n        return new Value_Value(parsedValue, num, den, unit, group);\r\n    };\r\n    Parse.valueFromString = function (input, groups) {\r\n        var parsed = this.input(input);\r\n        return parsed ? this.valueFromResult(parsed, parsed.unit, groups) : Value_Value.INVALID;\r\n    };\r\n    Parse.valueFromResult = function (result, unit, groups) {\r\n        var group = groups(unit);\r\n        return new Value_Value(result.value, result.valueNum, result.valueDen, unit, group);\r\n    };\r\n    /**\r\n     * Possible Values:\r\n     * 1tsp\r\n     * 1 tsp\r\n     * 1/2 tsp\r\n     * 1 1/2 tsp\r\n     * 1 - 2 tsp\r\n     * 1 tsp, 1 cup\r\n     * 2/3 - 1 c, 1 lb, 2.45 cats\r\n     */\r\n    Parse.input = function (input) {\r\n        var matches = this.REGEX_PARSE.exec(input);\r\n        var whole = parseInt(matches[1]);\r\n        var hasWhole = isFinite(whole);\r\n        var sign = matches[1].charAt(0) === '-' ? -1 : 1;\r\n        var num = parseInt(matches[3]);\r\n        var den = parseInt(matches[5]);\r\n        var decimal = matches[6];\r\n        var hasDecimal = isFinite(parseFloat(decimal));\r\n        var unit = Functions.trim(matches[7]).replace(/\\.$/, '');\r\n        if (!hasWhole && hasDecimal) {\r\n            whole = 0;\r\n            hasWhole = true;\r\n        }\r\n        if (!hasWhole && !unit) {\r\n            return null;\r\n        }\r\n        var value = 1;\r\n        var valueDen = 1;\r\n        var valueNum = 1;\r\n        if (hasWhole) {\r\n            value = whole;\r\n            valueNum = whole;\r\n            if (isFinite(den)) {\r\n                valueDen = den;\r\n                if (isFinite(num)) {\r\n                    value += (num / den) * sign;\r\n                    valueNum *= den;\r\n                    valueNum += num;\r\n                }\r\n                else {\r\n                    value /= den;\r\n                }\r\n            }\r\n            else if (hasDecimal) {\r\n                var remainder = parseFloat('0.' + decimal);\r\n                value += remainder * sign;\r\n                valueNum += remainder;\r\n            }\r\n            valueNum *= sign;\r\n        }\r\n        return { value: value, valueNum: valueNum, valueDen: valueDen, num: num, den: den, unit: unit };\r\n    };\r\n    /** The regular expression used to split up a string into multiple ranges. **/\r\n    Parse.REGEX_LIST = /\\s*,\\s*/;\r\n    /** The regular expression used to split up a range string to determine the min and maximum values. **/\r\n    Parse.REGEX_RANGE = /\\s*(-?[^-]+)-(.+)/;\r\n    /** The regular expression used to parse a value number or fraction and possible unit from a string. **/\r\n    Parse.REGEX_PARSE = /^\\s*(-?\\d*)(\\s+(\\d+))?(\\s*\\/\\s*(\\d+)|\\.(\\d+)|)\\s*(.*)\\s*$/i;\r\n    return Parse;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/classes/Weight.ts\n\r\n\r\n\r\n\r\n/**\r\n * The Weight clas which contains the following groups.\r\n *\r\n * - milligram\r\n * - gram\r\n * - kilogram\r\n * - ounce\r\n * - pound\r\n * - ton\r\n */\r\nvar Weight = new Class_Class('Weight')\r\n    .setBaseConversion('mg', 'oz', function (x) { return x * 0.000035274; })\r\n    .setBaseConversion('oz', 'mg', function (x) { return x * 28349.5; })\r\n    .addGroups([\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'mg',\r\n        baseUnit: 'mg',\r\n        denominators: [2, 10],\r\n        units: {\r\n            'mg': Plurality.EITHER,\r\n            'milligram': Plurality.SINGULAR,\r\n            'milligrams': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'g',\r\n        relativeUnit: 'mg',\r\n        relativeScale: 1000,\r\n        denominators: [2, 10, 1000],\r\n        units: {\r\n            'g': Plurality.EITHER,\r\n            'gram': Plurality.SINGULAR,\r\n            'grams': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'kg',\r\n        relativeUnit: 'g',\r\n        relativeScale: 1000,\r\n        denominators: [2, 10, 1000],\r\n        units: {\r\n            'kg': Plurality.EITHER,\r\n            'kilogram': Plurality.SINGULAR,\r\n            'kilograms': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.IMPERIAL,\r\n        common: true,\r\n        unit: 'oz',\r\n        baseUnit: 'oz',\r\n        denominators: [2, 3, 4, 16],\r\n        units: {\r\n            'oz': Plurality.EITHER,\r\n            'ounce': Plurality.SINGULAR,\r\n            'ounces': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.IMPERIAL,\r\n        common: true,\r\n        unit: 'lb',\r\n        relativeUnit: 'oz',\r\n        relativeScale: 16,\r\n        denominators: [2, 3, 4, 16],\r\n        units: {\r\n            'lb': Plurality.EITHER,\r\n            'lbs': Plurality.PLURAL,\r\n            'pound': Plurality.SINGULAR,\r\n            'pounds': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.IMPERIAL,\r\n        common: true,\r\n        unit: 'ton',\r\n        relativeUnit: 'lb',\r\n        relativeScale: 2000,\r\n        denominators: [2, 3, 4, 10],\r\n        units: {\r\n            'ton': Plurality.EITHER,\r\n            'tons': Plurality.PLURAL,\r\n            'tonnes': Plurality.PLURAL\r\n        }\r\n    }\r\n])\r\n    .setClassScales();\r\n\n// CONCATENATED MODULE: ./src/classes/Area.ts\n\r\n\r\n\r\n\r\n/**\r\n * The Area class which contains the following groups:\r\n *\r\n * - square inch\r\n * - square foot\r\n * - square yard\r\n * - acre\r\n * - square mile\r\n * - square millimeter\r\n * - square centimeter\r\n * - square meter\r\n * - square kilometer\r\n */\r\nvar Area = new Class_Class('Area')\r\n    .setBaseConversion('sqin', 'sqmm', function (x) { return x * 645.16; })\r\n    .setBaseConversion('sqmm', 'sqin', function (x) { return x * 0.00155; })\r\n    .addGroups([\r\n    {\r\n        system: System.IMPERIAL,\r\n        common: true,\r\n        unit: 'sqin',\r\n        baseUnit: 'sqin',\r\n        denominators: [2, 4, 8, 16],\r\n        units: {\r\n            'sqin': Plurality.EITHER,\r\n            'sq. in': Plurality.EITHER,\r\n            'sq in': Plurality.EITHER,\r\n            'in2': Plurality.EITHER,\r\n            'in^2': Plurality.EITHER,\r\n            'in\\xb2': Plurality.EITHER,\r\n            'inch2': Plurality.SINGULAR,\r\n            'inch^2': Plurality.SINGULAR,\r\n            'inch\\xb2': Plurality.SINGULAR,\r\n            'inches2': Plurality.PLURAL,\r\n            'inches^2': Plurality.PLURAL,\r\n            'inches\\xb2': Plurality.PLURAL,\r\n            'square in': Plurality.EITHER,\r\n            'square inch': Plurality.SINGULAR,\r\n            'square inches': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.IMPERIAL,\r\n        common: true,\r\n        unit: 'sqft',\r\n        relativeUnit: 'sqin',\r\n        relativeScale: 12 * 12,\r\n        denominators: [2, 4, 8, 16],\r\n        units: {\r\n            'sqft': Plurality.EITHER,\r\n            'sq. ft': Plurality.EITHER,\r\n            'sq ft': Plurality.EITHER,\r\n            'ft2': Plurality.EITHER,\r\n            'ft^2': Plurality.EITHER,\r\n            'ft\\xb2': Plurality.EITHER,\r\n            'foot2': Plurality.SINGULAR,\r\n            'foot^2': Plurality.SINGULAR,\r\n            'foot\\xb2': Plurality.SINGULAR,\r\n            'feet2': Plurality.PLURAL,\r\n            'feet^2': Plurality.PLURAL,\r\n            'feet\\xb2': Plurality.PLURAL,\r\n            'square ft': Plurality.EITHER,\r\n            'square foot': Plurality.SINGULAR,\r\n            'square feet': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.IMPERIAL,\r\n        unit: 'sqyd',\r\n        relativeUnit: 'sqft',\r\n        relativeScale: 3 * 3,\r\n        denominators: [2, 3, 4, 8, 9, 16],\r\n        units: {\r\n            'sqyd': Plurality.EITHER,\r\n            'sq. yd': Plurality.EITHER,\r\n            'sq yd': Plurality.EITHER,\r\n            'yd2': Plurality.EITHER,\r\n            'yd^2': Plurality.EITHER,\r\n            'yd\\xb2': Plurality.EITHER,\r\n            'yard2': Plurality.SINGULAR,\r\n            'yard^2': Plurality.SINGULAR,\r\n            'yard\\xb2': Plurality.SINGULAR,\r\n            'yards2': Plurality.PLURAL,\r\n            'yards^2': Plurality.PLURAL,\r\n            'yards\\xb2': Plurality.PLURAL,\r\n            'square yard': Plurality.SINGULAR,\r\n            'square yards': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.IMPERIAL,\r\n        common: true,\r\n        unit: 'acre',\r\n        relativeUnit: 'sqyd',\r\n        relativeScale: 4840,\r\n        denominators: [2, 3, 4, 8, 10],\r\n        units: {\r\n            'acre': Plurality.EITHER,\r\n            'acres': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.IMPERIAL,\r\n        common: true,\r\n        unit: 'sqmi',\r\n        relativeUnit: 'acre',\r\n        relativeScale: 640,\r\n        denominators: [2, 3, 4, 8, 10],\r\n        units: {\r\n            'sqmi': Plurality.EITHER,\r\n            'sq. mi': Plurality.EITHER,\r\n            'sq mi': Plurality.EITHER,\r\n            'mi2': Plurality.EITHER,\r\n            'mi^2': Plurality.EITHER,\r\n            'mi\\xb2': Plurality.EITHER,\r\n            'mile2': Plurality.SINGULAR,\r\n            'mile^2': Plurality.SINGULAR,\r\n            'mile\\xb2': Plurality.SINGULAR,\r\n            'miles2': Plurality.PLURAL,\r\n            'miles^2': Plurality.PLURAL,\r\n            'miles\\xb2': Plurality.PLURAL,\r\n            'square mi': Plurality.EITHER,\r\n            'square mile': Plurality.SINGULAR,\r\n            'square miles': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'sqmm',\r\n        baseUnit: 'sqmm',\r\n        denominators: [2, 4, 8, 16],\r\n        units: {\r\n            'sqmm': Plurality.EITHER,\r\n            'sq. mm': Plurality.EITHER,\r\n            'sq mm': Plurality.EITHER,\r\n            'mm2': Plurality.EITHER,\r\n            'mm^2': Plurality.EITHER,\r\n            'mm\\xb2': Plurality.EITHER,\r\n            'millimeter2': Plurality.SINGULAR,\r\n            'millimeter^2': Plurality.SINGULAR,\r\n            'millimeter\\xb2': Plurality.SINGULAR,\r\n            'millimeters2': Plurality.PLURAL,\r\n            'millimeters^2': Plurality.PLURAL,\r\n            'millimeters\\xb2': Plurality.PLURAL,\r\n            'square mm': Plurality.EITHER,\r\n            'square millimeter': Plurality.SINGULAR,\r\n            'square millimeters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'sqcm',\r\n        relativeUnit: 'sqmm',\r\n        relativeScale: 100,\r\n        denominators: [2, 4, 8, 16],\r\n        units: {\r\n            'sqcm': Plurality.EITHER,\r\n            'sq. cm': Plurality.EITHER,\r\n            'sq cm': Plurality.EITHER,\r\n            'cm2': Plurality.EITHER,\r\n            'cm^2': Plurality.EITHER,\r\n            'cm\\xb2': Plurality.EITHER,\r\n            'centimeter2': Plurality.SINGULAR,\r\n            'centimeter^2': Plurality.SINGULAR,\r\n            'centimeter\\xb2': Plurality.SINGULAR,\r\n            'centimeters2': Plurality.PLURAL,\r\n            'centimeters^2': Plurality.PLURAL,\r\n            'centimeters\\xb2': Plurality.PLURAL,\r\n            'square cm': Plurality.EITHER,\r\n            'square centimeter': Plurality.SINGULAR,\r\n            'square centimeters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'sqm',\r\n        relativeUnit: 'sqcm',\r\n        relativeScale: 10000,\r\n        denominators: [2, 4, 8, 16],\r\n        units: {\r\n            'sqm': Plurality.EITHER,\r\n            'sq. m': Plurality.EITHER,\r\n            'sq m': Plurality.EITHER,\r\n            'm2': Plurality.EITHER,\r\n            'm^2': Plurality.EITHER,\r\n            'm\\xb2': Plurality.EITHER,\r\n            'meter2': Plurality.SINGULAR,\r\n            'meter^2': Plurality.SINGULAR,\r\n            'meter\\xb2': Plurality.SINGULAR,\r\n            'meters2': Plurality.PLURAL,\r\n            'meters^2': Plurality.PLURAL,\r\n            'meters\\xb2': Plurality.PLURAL,\r\n            'square m': Plurality.EITHER,\r\n            'square meter': Plurality.SINGULAR,\r\n            'square meters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'sqkm',\r\n        relativeUnit: 'sqm',\r\n        relativeScale: 1000000,\r\n        denominators: [2, 4, 8, 16],\r\n        units: {\r\n            'sqkm': Plurality.EITHER,\r\n            'sq. km': Plurality.EITHER,\r\n            'sq km': Plurality.EITHER,\r\n            'km2': Plurality.EITHER,\r\n            'km^2': Plurality.EITHER,\r\n            'km\\xb2': Plurality.EITHER,\r\n            'kilometer2': Plurality.SINGULAR,\r\n            'kilometer^2': Plurality.SINGULAR,\r\n            'kilometer\\xb2': Plurality.SINGULAR,\r\n            'kilometers2': Plurality.PLURAL,\r\n            'kilometers^2': Plurality.PLURAL,\r\n            'kilometers\\xb2': Plurality.PLURAL,\r\n            'square km': Plurality.EITHER,\r\n            'square kilometer': Plurality.SINGULAR,\r\n            'square kilometers': Plurality.PLURAL\r\n        }\r\n    }\r\n])\r\n    .setClassScales();\r\n\n// CONCATENATED MODULE: ./src/classes/Time.ts\n\r\n\r\n\r\n\r\n/**\r\n * The Time class which contains the following groups.\r\n *\r\n * - nanosecond\r\n * - microsecond\r\n * - millisecond\r\n * - second\r\n * - hour\r\n * - day\r\n * - week\r\n * - year\r\n * - score\r\n * - decade\r\n * - centry\r\n * - millennium\r\n */\r\nvar Time = new Class_Class('Time')\r\n    .addGroups([\r\n    {\r\n        system: System.ANY,\r\n        unit: 'ns',\r\n        baseUnit: 'ns',\r\n        denominators: [10, 100],\r\n        units: {\r\n            'ns': Plurality.EITHER,\r\n            'nanosecond': Plurality.SINGULAR,\r\n            'nanoseconds': Plurality.PLURAL,\r\n            'nano': Plurality.SINGULAR,\r\n            'nanos': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        unit: 'us',\r\n        relativeUnit: 'ns',\r\n        relativeScale: 1000,\r\n        denominators: [10, 100, 1000],\r\n        units: {\r\n            'us': Plurality.EITHER,\r\n            'microsecond': Plurality.SINGULAR,\r\n            'microseconds': Plurality.PLURAL,\r\n            'micro': Plurality.SINGULAR,\r\n            'micros': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'ms',\r\n        relativeUnit: 'us',\r\n        relativeScale: 1000,\r\n        denominators: [10, 100, 1000],\r\n        units: {\r\n            'ms': Plurality.EITHER,\r\n            'millisecond': Plurality.SINGULAR,\r\n            'milliseconds': Plurality.PLURAL,\r\n            'milli': Plurality.SINGULAR,\r\n            'millis': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 's',\r\n        relativeUnit: 'ms',\r\n        relativeScale: 1000,\r\n        denominators: [10, 100, 1000],\r\n        units: {\r\n            's': Plurality.EITHER,\r\n            'second': Plurality.SINGULAR,\r\n            'seconds': Plurality.PLURAL,\r\n            'sec': Plurality.SINGULAR,\r\n            'secs': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'min',\r\n        relativeUnit: 's',\r\n        relativeScale: 60,\r\n        denominators: [2, 3, 4, 60],\r\n        units: {\r\n            'min': Plurality.EITHER,\r\n            'minute': Plurality.SINGULAR,\r\n            'minutes': Plurality.PLURAL,\r\n            'mins': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'hr',\r\n        relativeUnit: 'min',\r\n        relativeScale: 60,\r\n        denominators: [2, 3, 4, 60],\r\n        units: {\r\n            'hr': Plurality.EITHER,\r\n            'hour': Plurality.SINGULAR,\r\n            'hours': Plurality.PLURAL,\r\n            'hrs': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'day',\r\n        relativeUnit: 'hr',\r\n        relativeScale: 24,\r\n        denominators: [2, 3, 4, 6, 24],\r\n        units: {\r\n            'day': Plurality.EITHER,\r\n            'days': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'wk',\r\n        relativeUnit: 'day',\r\n        relativeScale: 7,\r\n        denominators: [7],\r\n        units: {\r\n            'wk': Plurality.EITHER,\r\n            'week': Plurality.SINGULAR,\r\n            'weeks': Plurality.PLURAL,\r\n            'wks': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'yr',\r\n        relativeUnit: 'day',\r\n        relativeScale: 365.2425,\r\n        denominators: [2, 3, 4, 6, 12, 52],\r\n        units: {\r\n            'yr': Plurality.EITHER,\r\n            'year': Plurality.SINGULAR,\r\n            'years': Plurality.PLURAL,\r\n            'yrs': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'score',\r\n        relativeUnit: 'yr',\r\n        relativeScale: 20,\r\n        denominators: [20],\r\n        units: {\r\n            'score': Plurality.EITHER\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'decade',\r\n        relativeUnit: 'yr',\r\n        relativeScale: 10,\r\n        denominators: [10],\r\n        units: {\r\n            'decade': Plurality.EITHER,\r\n            'decades': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        unit: 'biennium',\r\n        relativeUnit: 'yr',\r\n        relativeScale: 2,\r\n        denominators: [],\r\n        units: {\r\n            'biennium': Plurality.EITHER,\r\n            'bienniums': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        unit: 'triennium',\r\n        relativeUnit: 'yr',\r\n        relativeScale: 3,\r\n        denominators: [],\r\n        units: {\r\n            'triennium': Plurality.EITHER,\r\n            'trienniums': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        unit: 'quadrennium',\r\n        relativeUnit: 'yr',\r\n        relativeScale: 4,\r\n        denominators: [],\r\n        units: {\r\n            'quadrennium': Plurality.EITHER,\r\n            'quadrenniums': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        unit: 'lustrum',\r\n        relativeUnit: 'yr',\r\n        relativeScale: 5,\r\n        denominators: [],\r\n        units: {\r\n            'lustrum': Plurality.EITHER,\r\n            'lustrums': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'decade',\r\n        relativeUnit: 'yr',\r\n        relativeScale: 10,\r\n        denominators: [2, 10],\r\n        units: {\r\n            'decade': Plurality.EITHER,\r\n            'decades': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'century',\r\n        relativeUnit: 'yr',\r\n        relativeScale: 100,\r\n        denominators: [2, 10],\r\n        units: {\r\n            'century': Plurality.EITHER,\r\n            'centurys': Plurality.PLURAL,\r\n            'centuries': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'millennium',\r\n        relativeUnit: 'yr',\r\n        relativeScale: 1000,\r\n        denominators: [2, 3, 4],\r\n        units: {\r\n            'millennium': Plurality.EITHER,\r\n            'millenniums': Plurality.PLURAL,\r\n            'millennia': Plurality.PLURAL,\r\n            'millennias': Plurality.PLURAL\r\n        }\r\n    }\r\n])\r\n    .setClassScales();\r\n\n// CONCATENATED MODULE: ./src/classes/Digital.ts\n\r\n\r\n\r\n\r\n/**\r\n * The Digital class which contains the following groups:\r\n *\r\n * - bit\r\n * - nibble\r\n * - byte\r\n * - kilo/mego/giga/tera/peta/exa/zetta/yotta byte\r\n * - kibi/mebi/gibi/tebi/pebi/exbi/zebi/yobi byte\r\n * - kilo/mego/giga/tera/peta/exa/zetta/yotta bit\r\n * - ki/mi/gi/ti/pi/ez/zi/yi bit\r\n */\r\nvar Digital = new Class_Class('Digital')\r\n    .addGroups([\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'b',\r\n        baseUnit: 'b',\r\n        denominators: [],\r\n        units: {\r\n            'b': Plurality.EITHER,\r\n            'bit': Plurality.SINGULAR,\r\n            'bits': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        unit: 'nibble',\r\n        relativeUnit: 'b',\r\n        relativeScale: 4,\r\n        denominators: [],\r\n        units: {\r\n            'nibble': Plurality.EITHER,\r\n            'nibbles': Plurality.PLURAL,\r\n            'nybble': Plurality.EITHER,\r\n            'nyble': Plurality.EITHER,\r\n            'half-byte': Plurality.EITHER,\r\n            'half byte': Plurality.EITHER,\r\n            'tetrade': Plurality.EITHER,\r\n            'semi-octet': Plurality.EITHER,\r\n            'quadbit': Plurality.EITHER,\r\n            'quartet': Plurality.EITHER\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'B',\r\n        relativeUnit: 'b',\r\n        relativeScale: 8,\r\n        denominators: [2, 8],\r\n        units: {\r\n            'B': Plurality.EITHER,\r\n            'byte': Plurality.SINGULAR,\r\n            'bytes': Plurality.PLURAL\r\n        }\r\n    }\r\n]);\r\naddDigitalUnits(Digital, 'B', 1000, [2, 4, 5, 10], 'byte', 'bytes', [\r\n    ['kB', 'kilo'],\r\n    ['mB', 'mega'],\r\n    ['gB', 'giga'],\r\n    ['tB', 'tera'],\r\n    ['pB', 'peta'],\r\n    ['eB', 'exa'],\r\n    ['zB', 'zetta'],\r\n    ['yB', 'yotta']\r\n]);\r\naddDigitalUnits(Digital, 'B', 1024, [2, 4, 8, 16], 'byte', 'bytes', [\r\n    ['KB', 'kibi'],\r\n    ['MB', 'mebi'],\r\n    ['GB', 'gibi'],\r\n    ['TB', 'tebi'],\r\n    ['PB', 'pebi'],\r\n    ['EB', 'exbi'],\r\n    ['ZB', 'zebi'],\r\n    ['YB', 'yobi']\r\n]);\r\naddDigitalUnits(Digital, 'b', 1000, [2, 4, 5, 10], 'bit', 'bits', [\r\n    ['kb', 'kilo', 'kbit'],\r\n    ['mb', 'mega', 'mbit'],\r\n    ['gb', 'giga', 'gbit'],\r\n    ['tb', 'tera', 'tbit'],\r\n    ['pb', 'peta', 'pbit'],\r\n    ['eb', 'exa', 'ebit'],\r\n    ['zb', 'zetta', 'zbit'],\r\n    ['yb', 'yotta', 'ybit']\r\n]);\r\naddDigitalUnits(Digital, 'b', 1024, [2, 4, 8, 16], 'bit', 'bits', [\r\n    ['kibit', 'kibi'],\r\n    ['mibit', 'mebi'],\r\n    ['gibit', 'gibi'],\r\n    ['tibit', 'tebi'],\r\n    ['pibit', 'pebi'],\r\n    ['eibit', 'exbi'],\r\n    ['zibit', 'zebi'],\r\n    ['yibit', 'yobi']\r\n]);\r\nDigital.setClassScales();\r\nfunction addDigitalUnits(parent, relativeTo, relativeScales, denominators, suffixSingular, suffixPlural, unitAndPrefixes) {\r\n    for (var i = 0; i < unitAndPrefixes.length; i++) {\r\n        var _a = unitAndPrefixes[i], unit = _a[0], prefix = _a[1], extra = _a[2];\r\n        var units = {};\r\n        units[unit] = Plurality.EITHER;\r\n        units[prefix + suffixSingular] = Plurality.SINGULAR;\r\n        units[prefix + suffixPlural] = Plurality.PLURAL;\r\n        if (extra) {\r\n            units[extra] = Plurality.EITHER;\r\n        }\r\n        parent.addGroup({\r\n            system: System.ANY,\r\n            common: true,\r\n            unit: unit,\r\n            relativeUnit: relativeTo,\r\n            relativeScale: relativeScales,\r\n            denominators: denominators,\r\n            units: units\r\n        });\r\n        relativeTo = unit;\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/classes/Temperature.ts\n\r\n\r\n\r\n\r\nvar _C_ = '\\xb0C';\r\n/**\r\n * The Temperature class which contains the following groups.\r\n *\r\n * - celsius\r\n * - kelvin\r\n * - fahrenheit\r\n */\r\nvar Temperature = new Class_Class('Temperature')\r\n    .setBaseConversion('F', _C_, function (x) { return ((x - 32) * 5 / 9); })\r\n    .setBaseConversion('F', 'K', function (x) { return ((x + 459.67) * 5 / 9); })\r\n    .setBaseConversion(_C_, 'F', function (x) { return ((x * 9 / 5) + 32); })\r\n    .setBaseConversion(_C_, 'K', function (x) { return (x + 273.15); })\r\n    .setBaseConversion('K', _C_, function (x) { return (x - 273.15); })\r\n    .setBaseConversion('K', 'F', function (x) { return ((x * 9 / 5) - 459.67); })\r\n    .addGroups([\r\n    {\r\n        system: System.IMPERIAL,\r\n        common: true,\r\n        unit: 'F',\r\n        baseUnit: 'F',\r\n        denominators: [],\r\n        units: {\r\n            'F': Plurality.EITHER,\r\n            '\\xb0F': Plurality.EITHER,\r\n            'Fahrenheit': Plurality.EITHER\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: _C_,\r\n        baseUnit: _C_,\r\n        denominators: [],\r\n        units: {\r\n            '\\xb0C': Plurality.EITHER,\r\n            'Celsius': Plurality.EITHER\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        unit: 'K',\r\n        baseUnit: 'K',\r\n        denominators: [],\r\n        units: {\r\n            'K': Plurality.EITHER,\r\n            'kelvin': Plurality.SINGULAR,\r\n            'kelvins': Plurality.PLURAL\r\n        }\r\n    }\r\n])\r\n    .setClassScales();\r\n\n// CONCATENATED MODULE: ./src/classes/Angle.ts\n\r\n\r\n\r\n\r\nvar RAD2DEG = 180 / Math.PI;\r\nvar DEG2RAD = Math.PI / 180;\r\n/**\r\n * The Angle class which contains the following groups.\r\n *\r\n * - degree\r\n * - radian\r\n */\r\nvar Angle = new Class_Class('Angle')\r\n    .setBaseConversion('deg', 'rad', function (x) { return x * DEG2RAD; })\r\n    .setBaseConversion('rad', 'deg', function (x) { return x * RAD2DEG; })\r\n    .addGroups([\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'deg',\r\n        baseUnit: 'deg',\r\n        denominators: [],\r\n        units: {\r\n            'deg': Plurality.EITHER,\r\n            '\\xb0': Plurality.EITHER,\r\n            'degrees': Plurality.PLURAL,\r\n            'degree': Plurality.SINGULAR\r\n        }\r\n    },\r\n    {\r\n        system: System.ANY,\r\n        common: true,\r\n        unit: 'rad',\r\n        baseUnit: 'rad',\r\n        denominators: [],\r\n        units: {\r\n            'rad': Plurality.EITHER,\r\n            'radians': Plurality.PLURAL,\r\n            'radian': Plurality.SINGULAR\r\n        }\r\n    }\r\n])\r\n    .setClassScales();\r\n\n// CONCATENATED MODULE: ./src/classes/Volume.ts\n\r\n\r\n\r\n\r\n/**\r\n * The Volume clas which contains the following groups.\r\n *\r\n * - teaspoon\r\n * - tablespoon\r\n * - fluid ounce\r\n * - cup\r\n * - pint\r\n * - quart\r\n * - gallon\r\n * - milliliter\r\n * - centiliter\r\n * - decaliter\r\n * - kiloliter\r\n * - cubic millimeter\r\n * - cubic centimeter\r\n * - cubic meter\r\n * - cubic kilometer\r\n * - cubic inch\r\n * - cubic foot\r\n * - cubic yard\r\n */\r\nvar Volume = new Class_Class('Volume')\r\n    .setBaseConversion('tsp', 'ml', function (x) { return x * 4.92892; })\r\n    .setBaseConversion('tsp', 'mm3', function (x) { return x * 4928.92; })\r\n    .setBaseConversion('tsp', 'in3', function (x) { return x * 0.300781; })\r\n    .setBaseConversion('ml', 'tsp', function (x) { return x * 0.202884; })\r\n    .setBaseConversion('ml', 'mm3', function (x) { return x * 1000; })\r\n    .setBaseConversion('ml', 'in3', function (x) { return x * 0.0610237; })\r\n    .setBaseConversion('mm3', 'tsp', function (x) { return x * 0.000202884; })\r\n    .setBaseConversion('mm3', 'ml', function (x) { return x * 0.001; })\r\n    .setBaseConversion('mm3', 'in3', function (x) { return x * 0.0000610237; })\r\n    .setBaseConversion('in3', 'tsp', function (x) { return x * 3.32468; })\r\n    .setBaseConversion('in3', 'ml', function (x) { return x * 16.3871; })\r\n    .setBaseConversion('in3', 'mm3', function (x) { return x * 16387.1; })\r\n    .addGroups([\r\n    {\r\n        system: System.IMPERIAL,\r\n        common: true,\r\n        unit: 'tsp',\r\n        baseUnit: 'tsp',\r\n        denominators: [2, 3, 4],\r\n        units: {\r\n            'tsp': Plurality.EITHER,\r\n            'ts': Plurality.EITHER,\r\n            'tsps': Plurality.PLURAL,\r\n            'teaspoon': Plurality.SINGULAR,\r\n            'teaspoons': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.IMPERIAL,\r\n        common: true,\r\n        unit: 'tbsp',\r\n        relativeUnit: 'tsp',\r\n        relativeScale: 3,\r\n        denominators: [2, 3, 4],\r\n        units: {\r\n            'tbsp': Plurality.EITHER,\r\n            'tbsps': Plurality.PLURAL,\r\n            'tablespoon': Plurality.SINGULAR,\r\n            'tablespoons': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.IMPERIAL,\r\n        common: true,\r\n        unit: 'floz',\r\n        relativeUnit: 'tsp',\r\n        relativeScale: 6,\r\n        denominators: [2, 3, 6],\r\n        units: {\r\n            // 'oz': Plurality.EITHER,\r\n            // 'ounce': Plurality.SINGULAR,\r\n            // 'ounces': Plurality.PLURAL,\r\n            'floz': Plurality.EITHER,\r\n            'fl-oz': Plurality.EITHER,\r\n            'fl oz': Plurality.EITHER,\r\n            'fluid ounce': Plurality.SINGULAR,\r\n            'fluid ounces': Plurality.PLURAL,\r\n            'fl. oz': Plurality.EITHER,\r\n            'oz. fl': Plurality.EITHER,\r\n            'oz fl': Plurality.EITHER\r\n        }\r\n    },\r\n    {\r\n        system: System.IMPERIAL,\r\n        common: true,\r\n        unit: 'c',\r\n        relativeUnit: 'floz',\r\n        relativeScale: 8,\r\n        denominators: [2, 3, 4],\r\n        units: {\r\n            'c': Plurality.EITHER,\r\n            'cup': Plurality.SINGULAR,\r\n            'cups': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.IMPERIAL,\r\n        common: true,\r\n        unit: 'pt',\r\n        relativeUnit: 'c',\r\n        relativeScale: 2,\r\n        denominators: [2, 4, 8],\r\n        units: {\r\n            'pt': Plurality.EITHER,\r\n            'pint': Plurality.SINGULAR,\r\n            'pints': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.IMPERIAL,\r\n        common: true,\r\n        unit: 'qt',\r\n        relativeUnit: 'c',\r\n        relativeScale: 4,\r\n        denominators: [2, 4, 8],\r\n        units: {\r\n            'qt': Plurality.EITHER,\r\n            'quart': Plurality.SINGULAR,\r\n            'quarts': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.IMPERIAL,\r\n        common: true,\r\n        unit: 'gal',\r\n        relativeUnit: 'qt',\r\n        relativeScale: 4,\r\n        denominators: [2, 4, 8, 16],\r\n        units: {\r\n            'gal': Plurality.EITHER,\r\n            'gallon': Plurality.SINGULAR,\r\n            'gallons': Plurality.PLURAL,\r\n            'gals': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'ml',\r\n        baseUnit: 'ml',\r\n        denominators: [2, 10],\r\n        units: {\r\n            'ml': Plurality.EITHER,\r\n            'millilitre': Plurality.SINGULAR,\r\n            'millilitres': Plurality.PLURAL,\r\n            'milliliter': Plurality.SINGULAR,\r\n            'milliliters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        unit: 'cl',\r\n        relativeUnit: 'ml',\r\n        relativeScale: 10,\r\n        denominators: [10],\r\n        units: {\r\n            'cl': Plurality.EITHER,\r\n            'centilitre': Plurality.SINGULAR,\r\n            'centilitres': Plurality.PLURAL,\r\n            'centiliter': Plurality.SINGULAR,\r\n            'centiliters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'l',\r\n        relativeUnit: 'ml',\r\n        relativeScale: 1000,\r\n        denominators: [2, 3, 4, 10],\r\n        units: {\r\n            'l': Plurality.EITHER,\r\n            'litre': Plurality.SINGULAR,\r\n            'litres': Plurality.PLURAL,\r\n            'liter': Plurality.SINGULAR,\r\n            'liters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        unit: 'dl',\r\n        relativeUnit: 'l',\r\n        relativeScale: 10,\r\n        denominators: [10, 100],\r\n        units: {\r\n            'dl': Plurality.EITHER,\r\n            'decalitre': Plurality.SINGULAR,\r\n            'decalitres': Plurality.PLURAL,\r\n            'decaliter': Plurality.SINGULAR,\r\n            'decaliters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'kl',\r\n        relativeUnit: 'l',\r\n        relativeScale: 1000,\r\n        denominators: [10, 100],\r\n        units: {\r\n            'kl': Plurality.EITHER,\r\n            'kilolitre': Plurality.SINGULAR,\r\n            'kilolitres': Plurality.PLURAL,\r\n            'kiloliter': Plurality.SINGULAR,\r\n            'kiloliters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        unit: 'mm3',\r\n        baseUnit: 'mm3',\r\n        denominators: [2, 4, 8],\r\n        units: {\r\n            'mm3': Plurality.EITHER,\r\n            'mm^3': Plurality.EITHER,\r\n            'mm\\xb3': Plurality.EITHER,\r\n            'millimeter3': Plurality.SINGULAR,\r\n            'millimeter^3': Plurality.SINGULAR,\r\n            'millimeter\\xb3': Plurality.SINGULAR,\r\n            'millimeters3': Plurality.PLURAL,\r\n            'millimeters^3': Plurality.PLURAL,\r\n            'millimeters\\xb3': Plurality.PLURAL,\r\n            'cubic mm': Plurality.EITHER,\r\n            'cubic millimeter': Plurality.SINGULAR,\r\n            'cubic millimeters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        unit: 'cm3',\r\n        relativeUnit: 'mm3',\r\n        relativeScale: 1000,\r\n        denominators: [2, 4, 8],\r\n        units: {\r\n            'cm3': Plurality.EITHER,\r\n            'cm^3': Plurality.EITHER,\r\n            'cm\\xb3': Plurality.EITHER,\r\n            'centimeter3': Plurality.SINGULAR,\r\n            'centimeter^3': Plurality.SINGULAR,\r\n            'centimeter\\xb3': Plurality.SINGULAR,\r\n            'centimeters3': Plurality.PLURAL,\r\n            'centimeters^3': Plurality.PLURAL,\r\n            'centimeters\\xb3': Plurality.PLURAL,\r\n            'cubic cm': Plurality.EITHER,\r\n            'cubic centimeter': Plurality.SINGULAR,\r\n            'cubic centimeters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        unit: 'm3',\r\n        relativeUnit: 'cm3',\r\n        relativeScale: 1000000,\r\n        denominators: [2, 4, 8],\r\n        units: {\r\n            'm3': Plurality.EITHER,\r\n            'm^3': Plurality.EITHER,\r\n            'm\\xb3': Plurality.EITHER,\r\n            'meter3': Plurality.SINGULAR,\r\n            'meter^3': Plurality.SINGULAR,\r\n            'meter\\xb3': Plurality.SINGULAR,\r\n            'meters3': Plurality.PLURAL,\r\n            'meters^3': Plurality.PLURAL,\r\n            'meters\\xb3': Plurality.PLURAL,\r\n            'cubic m': Plurality.EITHER,\r\n            'cubic meter': Plurality.SINGULAR,\r\n            'cubic meters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        unit: 'km3',\r\n        relativeUnit: 'm3',\r\n        relativeScale: 1000000000,\r\n        denominators: [2, 4, 8],\r\n        units: {\r\n            'km3': Plurality.EITHER,\r\n            'km^3': Plurality.EITHER,\r\n            'km\\xb3': Plurality.EITHER,\r\n            'kilometer3': Plurality.SINGULAR,\r\n            'kilometer^3': Plurality.SINGULAR,\r\n            'kilometer\\xb3': Plurality.SINGULAR,\r\n            'kilometers3': Plurality.PLURAL,\r\n            'kilometers^3': Plurality.PLURAL,\r\n            'kilometers\\xb3': Plurality.PLURAL,\r\n            'cubic km': Plurality.EITHER,\r\n            'cubic kilometer': Plurality.SINGULAR,\r\n            'cubic kilometers': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.IMPERIAL,\r\n        unit: 'in3',\r\n        baseUnit: 'in3',\r\n        denominators: [2, 4, 8],\r\n        units: {\r\n            'in3': Plurality.EITHER,\r\n            'in^3': Plurality.EITHER,\r\n            'in\\xb3': Plurality.EITHER,\r\n            'inch3': Plurality.SINGULAR,\r\n            'inch^3': Plurality.SINGULAR,\r\n            'inch\\xb3': Plurality.SINGULAR,\r\n            'inches3': Plurality.PLURAL,\r\n            'inches^3': Plurality.PLURAL,\r\n            'inches\\xb3': Plurality.PLURAL,\r\n            'cubic in': Plurality.EITHER,\r\n            'cubic inch': Plurality.SINGULAR,\r\n            'cubic inches': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        unit: 'ft3',\r\n        relativeUnit: 'in3',\r\n        relativeScale: 1728,\r\n        denominators: [2, 4, 8],\r\n        units: {\r\n            'ft3': Plurality.EITHER,\r\n            'ft^3': Plurality.EITHER,\r\n            'ft\\xb3': Plurality.EITHER,\r\n            'foot3': Plurality.SINGULAR,\r\n            'foot^3': Plurality.SINGULAR,\r\n            'foot\\xb3': Plurality.SINGULAR,\r\n            'feet3': Plurality.PLURAL,\r\n            'feet^3': Plurality.PLURAL,\r\n            'feet\\xb3': Plurality.PLURAL,\r\n            'cubic ft': Plurality.EITHER,\r\n            'cubic foot': Plurality.SINGULAR,\r\n            'cubic feet': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        unit: 'yd3',\r\n        relativeUnit: 'ft3',\r\n        relativeScale: 27,\r\n        denominators: [2, 4, 8],\r\n        units: {\r\n            'yd3': Plurality.EITHER,\r\n            'yd^3': Plurality.EITHER,\r\n            'yd\\xb3': Plurality.EITHER,\r\n            'yard3': Plurality.SINGULAR,\r\n            'yard^3': Plurality.SINGULAR,\r\n            'yard\\xb3': Plurality.SINGULAR,\r\n            'yards3': Plurality.PLURAL,\r\n            'yards^3': Plurality.PLURAL,\r\n            'yards\\xb3': Plurality.PLURAL,\r\n            'cubic yd': Plurality.EITHER,\r\n            'cubic yard': Plurality.SINGULAR,\r\n            'cubic yards': Plurality.PLURAL\r\n        }\r\n    }\r\n])\r\n    .setClassScales();\r\n\n// CONCATENATED MODULE: ./src/classes/Length.ts\n\r\n\r\n\r\n\r\n/**\r\n * The Length class which contains the following groups.\r\n *\r\n * - inch\r\n * - foot\r\n * - yard\r\n * - mile\r\n * - league\r\n * - millimeter\r\n * - centimeter\r\n * - decimeter\r\n * - meter\r\n * - kilometer\r\n */\r\nvar Length = new Class_Class('Length')\r\n    .setBaseConversion('in', 'mm', function (x) { return x * 25.4; })\r\n    .setBaseConversion('mm', 'in', function (x) { return x * 0.039370; })\r\n    .addGroups([\r\n    {\r\n        system: System.IMPERIAL,\r\n        common: true,\r\n        unit: 'in',\r\n        baseUnit: 'in',\r\n        denominators: [2, 4, 8, 16, 32],\r\n        units: {\r\n            'in': Plurality.EITHER,\r\n            'inch': Plurality.SINGULAR,\r\n            'inches': Plurality.PLURAL,\r\n            '\"': Plurality.EITHER\r\n        }\r\n    },\r\n    {\r\n        system: System.IMPERIAL,\r\n        common: true,\r\n        unit: 'ft',\r\n        relativeUnit: 'in',\r\n        relativeScale: 12,\r\n        denominators: [2],\r\n        units: {\r\n            'ft': Plurality.EITHER,\r\n            'foot': Plurality.SINGULAR,\r\n            'feet': Plurality.PLURAL,\r\n            '\\'': Plurality.EITHER\r\n        }\r\n    },\r\n    {\r\n        system: System.IMPERIAL,\r\n        unit: 'yd',\r\n        relativeUnit: 'ft',\r\n        relativeScale: 3,\r\n        denominators: [],\r\n        units: {\r\n            'yd': Plurality.EITHER,\r\n            'yard': Plurality.SINGULAR,\r\n            'yards': Plurality.PLURAL,\r\n            'yds': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.IMPERIAL,\r\n        common: true,\r\n        unit: 'mi',\r\n        relativeUnit: 'ft',\r\n        relativeScale: 5280,\r\n        denominators: [2, 3, 4, 10],\r\n        units: {\r\n            'mi': Plurality.EITHER,\r\n            'mile': Plurality.SINGULAR,\r\n            'miles': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.IMPERIAL,\r\n        unit: 'league',\r\n        relativeUnit: 'mi',\r\n        relativeScale: 3,\r\n        denominators: [2, 3, 4, 5, 6, 7, 8, 9, 10],\r\n        units: {\r\n            'league': Plurality.EITHER,\r\n            'leagues': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'mm',\r\n        baseUnit: 'mm',\r\n        denominators: [10],\r\n        units: {\r\n            'mm': Plurality.EITHER,\r\n            'millimeter': Plurality.SINGULAR,\r\n            'millimeters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'cm',\r\n        relativeUnit: 'mm',\r\n        relativeScale: 10,\r\n        denominators: [2, 4, 10],\r\n        units: {\r\n            'cm': Plurality.EITHER,\r\n            'centimeter': Plurality.SINGULAR,\r\n            'centimeters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        unit: 'dc',\r\n        relativeUnit: 'cm',\r\n        relativeScale: 10,\r\n        denominators: [10],\r\n        units: {\r\n            'dc': Plurality.EITHER,\r\n            'decimeter': Plurality.SINGULAR,\r\n            'decimeters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'm',\r\n        relativeUnit: 'cm',\r\n        relativeScale: 100,\r\n        denominators: [2, 3, 4, 5, 10],\r\n        units: {\r\n            'm': Plurality.EITHER,\r\n            'meter': Plurality.SINGULAR,\r\n            'meters': Plurality.PLURAL\r\n        }\r\n    },\r\n    {\r\n        system: System.METRIC,\r\n        common: true,\r\n        unit: 'km',\r\n        relativeUnit: 'm',\r\n        relativeScale: 1000,\r\n        denominators: [2, 3, 4, 5, 6, 7, 8, 9, 10],\r\n        units: {\r\n            'km': Plurality.EITHER,\r\n            'kilometer': Plurality.SINGULAR,\r\n            'kilometers': Plurality.PLURAL\r\n        }\r\n    }\r\n])\r\n    .setClassScales();\r\n\n// CONCATENATED MODULE: ./src/classes/index.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Adds all classes that come with Unitz to [Core].\r\n */\r\nfunction addDefaults() {\r\n    Core_Core.addClasses(Weight, Area, Time, Digital, Temperature, Angle, Volume, Length);\r\n}\r\n\n// CONCATENATED MODULE: ./src/index.ts\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Plurality\", function() { return Plurality; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"System\", function() { return System; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Functions\", function() { return Functions; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Parse\", function() { return Parse_Parse; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"OutputUnit\", function() { return OutputUnit; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"OutputFormat\", function() { return OutputFormat; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Output\", function() { return Output_Output; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Transform\", function() { return Transform_Transform; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"SortType\", function() { return SortType; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Sort\", function() { return Sort_Sort; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Core\", function() { return Core_Core; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Group\", function() { return Group_Group; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Class\", function() { return Class_Class; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Value\", function() { return Value_Value; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Range\", function() { return Range_Range; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"uz\", function() { return uz; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Base\", function() { return Base_Base; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"addDefaults\", function() { return addDefaults; });\n\r\n// Enums\r\n\r\n\r\n// Functions\r\n\r\n\r\n// Secondary\r\n\r\n\r\n\r\n// Core\r\n\r\n\r\n\r\n\r\n\r\n\r\n// Classes\r\n\r\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// unitz.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 26489d530da7417eec80","\nimport { Functions as fn } from './Functions';\nimport { Core } from './Core';\nimport { Parse } from './Parse';\nimport { RangesInput, BaseInput } from './Types';\nimport { Range, RangeList, RangeMutator } from './Range';\nimport { Group } from './Group';\nimport { Transform, TransformInput } from './Transform';\nimport { Output, OutputInput } from './Output';\nimport { Sort, SortInput } from './Sort';\nimport { Value } from './Value';\nimport { Class, ClassGrouping } from './Class';\n\n\n/**\n * Takes user input and returns a new instance of [Base].\n */\nexport function uz(input: RangesInput)\n{\n  return new Base(input);\n}\n\n/**\n * The main class which contains a list of ranges and the user input.\n */\nexport class Base\n{\n\n  public input: RangesInput;\n  public ranges: RangeList;\n\n  public constructor(input: RangesInput, ranges?: RangeList )\n  {\n    this.input = input;\n    this.ranges = ranges || Parse.ranges( input, Core.getGroup );\n  }\n\n  // 1c, 2.3m SCALE BY 2 = 2c, 4.6m\n  public scale(amount: number): Base\n  {\n    return this.mutate(r => r.mul( amount ));\n  }\n\n  // 1c, 3m SCALE TO 1/2c = 1/2c, 1.5m\n  public scaleTo(unitValue: string, rangeDelta: number = 0.5): Base\n  {\n    return this.scale( this.getScaleTo(unitValue, rangeDelta) );\n  }\n\n  // 5 kilograms = 5kg\n  public preferred(): Base\n  {\n    return this.mutate(r => r.preferred());\n  }\n\n  // 0c, 2tbsp, -4tbsp = 0c, 2tbsp\n  public positive(): Base\n  {\n    return this.mutate(r => r.positive());\n  }\n\n  // 0c, 2tbsp, -4tbsp = -4tbsp\n  public negative(): Base\n  {\n    return this.mutate(r => r.negative());\n  }\n\n  // 0c, 2tbsp = 2tbsp\n  public nonzero(): Base\n  {\n    return this.mutate(r => r.nonzero());\n  }\n\n  // 1/2, 0.3 = 1/2, 3/10\n  public fractions(): Base\n  {\n    return this.mutate(r => r.fractioned());\n  }\n\n  // 1/2, 0.3 = 0.5, 0.3\n  public numbers(): Base\n  {\n    return this.mutate(r => r.numbered());\n  }\n\n  // 1 - 3c = 3c\n  public max(): Base\n  {\n    return this.hasRanges ? this.mutate(r => r.maxd()) : this;\n  }\n\n  // 1 - 3c = 1c\n  public min(): Base\n  {\n    return this.hasRanges ? this.mutate(r => r.mind()) : this;\n  }\n\n  // 1.5pt = 3c\n  public normalize(options?: TransformInput, forOutput?: OutputInput): Base\n  {\n    let output: Output = Core.globalOutput.extend( forOutput );\n    let transform: Transform = Core.globalTransform.extend( options );\n\n    return this.mutate(r => r.normalize( transform, output ));\n  }\n\n  // 1c, 1pt = 1.5pt\n  public compact(options?: TransformInput): Base\n  {\n    let compacted: RangeList = [];\n    let transform: Transform = Core.globalTransform.extend( options );\n    let { classes, groupless } = this.groupByClass();\n\n    for (let className in classes)\n    {\n      let entry = classes[ className ];\n      let ranges: RangeList = entry.ranges;\n      let parent: Class = entry.parent;\n      let minGroupChosen: Group = <Group>null;\n      let maxGroupChosen: Group = <Group>null;\n      let minSum: number = 0;\n      let maxSum: number = 0;\n\n      // If the transformation options ignores this class, skip it.\n      if (!transform.isClassMatch( parent ))\n      {\n        continue;\n      }\n\n      // Determine the smallest visible group we can use.\n      parent.getVisibleGroups( transform, false, null, (group) =>\n      {\n        minGroupChosen = maxGroupChosen = group;\n        return false;\n      });\n\n      // If we can't find one, then no groups are valid. Skip them.\n      if (!minGroupChosen)\n      {\n        continue;\n      }\n\n      // For each range, sum up the minimums and maximums while also determining\n      // the largest min & max that should be used to represent the sums.\n      for (let i = 0; i < ranges.length; i++)\n      {\n        let range: Range = ranges[ i ];\n        let minGroup: Group = range.min.group;\n        let maxGroup: Group = range.max.group;\n\n        if (minGroup.classScale > minGroupChosen.classScale && transform.isVisibleGroup( minGroup ))\n        {\n          if (i !== 0)\n          {\n            minSum = parent.convert( minSum, minGroupChosen, minGroup );\n          }\n          minGroupChosen = minGroup;\n        }\n\n        if (maxGroup.classScale > maxGroupChosen.classScale && transform.isVisibleGroup( maxGroup ))\n        {\n          if (i !== 0)\n          {\n            maxSum = parent.convert( maxSum, maxGroupChosen, maxGroup );\n          }\n          maxGroupChosen = maxGroup;\n        }\n\n        minSum += range.min.convertTo( minGroupChosen );\n        maxSum += range.max.convertTo( maxGroupChosen );\n      }\n\n      let min: Value = Value.fromNumberForGroup( minSum, minGroupChosen );\n      let max: Value = Value.fromNumberForGroup( maxSum, maxGroupChosen );\n\n      compacted.push( new Range( min, max ) );\n    }\n\n    // If the transform options permit groupless results and there are ranges\n    // without groups - sum them all.\n    if (transform.groupless && groupless.length)\n    {\n      let minSum: Value = new Value(0, 0, 1, '', <Group>null);\n      let maxSum: Value = new Value(0, 0, 1, '', <Group>null);\n\n      for (let i = 0; i < groupless.length; i++)\n      {\n        minSum = minSum.add( groupless[ i ].min );\n        maxSum = maxSum.add( groupless[ i ].max );\n      }\n\n      compacted.push( new Range( minSum, maxSum ) );\n    }\n\n    return new Base( this.input, compacted );\n  }\n\n  // 1.5pt = 1c, 1pt\n  public expand(options?: TransformInput): Base\n  {\n    let transform: Transform = Core.globalTransform.extend( options );\n    let compacted: Base = this.compact( transform );\n    let { ranges } = compacted;\n    let expanded: RangeList = [];\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n      let value: Value = transform.convertWithMax ? range.max : range.min;\n      let valueGroup: Group = value.group;\n      let valueSign: number = fn.sign( value.value );\n\n      if (valueGroup)\n      {\n        valueGroup.matches(transform, true, (group) =>\n        {\n          if (!fn.isZero( value.value ))\n          {\n            let transformed = value.convertToValue(group);\n\n            if (group.isBase)\n            {\n              value = value.zero();\n\n              expanded.push( Range.fromFixed( transformed ) )\n            }\n            else if (fn.abs( transformed.value ) >= 1 && fn.sign( transformed.value) === valueSign)\n            {\n              let truncated: Value = transformed.truncated();\n\n              value = value.sub( truncated.convertToValue( valueGroup ) );\n\n              expanded.push( Range.fromFixed( truncated ) );\n            }\n          }\n        });\n      }\n      else\n      {\n        expanded.push( range );\n      }\n    }\n\n    return new Base( this.input, expanded );\n  }\n\n  public add(input: BaseInput, scale: number = 1): Base\n  {\n    return this.operate(input, (a, b) => a.add(b, scale), (a) => a.mul( scale ));\n  }\n\n  public sub(input: BaseInput, scale: number = 1): Base\n  {\n    return this.operate(input, (a, b) => a.sub(b, scale), (a) => a.mul( -scale ));\n  }\n\n  public operate(input: BaseInput,\n    operate: (a: Range, b: Range) => Range,\n    remainder: (a: Range) => Range): Base\n  {\n    let ranges: RangeList = this.ranges;\n    let output: RangeList = [];\n\n    let other: Base = Parse.base( input );\n    let otherRanges: RangeList = other.ranges;\n    let otherUsed: boolean[] = [];\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n\n      for (let k = 0; k < otherRanges.length; k++)\n      {\n        if (!otherUsed[ k ])\n        {\n          let otherRange: Range = otherRanges[ k ];\n\n          if (range.isMatch( otherRange ))\n          {\n            range = operate( range, otherRange );\n            otherUsed[ k ] = true;\n          }\n        }\n      }\n\n      output.push( range );\n    }\n\n    for (let k = 0; k < otherRanges.length; k++)\n    {\n      if (!otherUsed[ k ])\n      {\n        output.push( remainder( otherRanges[ k ] ) );\n      }\n    }\n\n    return new Base( this.input, output );\n  }\n\n  public conversions(options?: TransformInput): Base\n  {\n    let transform: Transform = Core.globalTransform.extend( options );\n    let compacted: Base = this.compact( options );\n    let ranges: RangeList = compacted.ranges;\n    let output: RangeList = [];\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n      let convert: Value = transform.convertWithMax ? range.max : range.min;\n\n      convert.conversions(transform, false, (transformed) =>\n      {\n        let min: Value = transform.convertWithMax ? range.min.convertToValue( transformed.group ) : transformed;\n        let max: Value = transform.convertWithMax ? transformed : range.max.convertToValue( transformed.group );\n\n        if (min.value <= transform.max && max.value >= transform.min)\n        {\n          output.push( new Range( min, max ) );\n        }\n      });\n    }\n\n    return new Base( this.input, output );\n  }\n\n  public mutate(mutator: RangeMutator): Base\n  {\n    let ranges: RangeList = [];\n    let source: RangeList = this.ranges;\n\n    for (let i = 0; i < source.length; i++)\n    {\n      let mutated: Range = mutator( source[ i ] ) ;\n\n      if (mutated)\n      {\n        ranges.push( mutated );\n      }\n    }\n\n    return new Base( this.input, ranges );\n  }\n\n  public filter(options?: TransformInput): Base\n  {\n    let transform: Transform = Core.globalTransform.extend( options );\n    let ranges: RangeList = this.ranges;\n    let filtered: RangeList = [];\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n      let group: Group = transform.convertWithMax ? range.max.group : range.min.group;\n\n      if ((group && transform.isVisibleGroup( group )) || (!group && transform.groupless))\n      {\n        filtered.push( range );\n      }\n    }\n\n    return new Base( this.input, filtered );\n  }\n\n  public sort(options?: SortInput): Base\n  {\n    let sort: Sort = Core.globalSort.extend( options );\n    let ranges: RangeList = this.ranges.slice();\n\n    ranges.sort( sort.getSorter() );\n\n    return new Base( this.input, ranges );\n  }\n\n  public groupByClass(): ClassGrouping\n  {\n    let ranges: RangeList = this.ranges;\n    let classes = {};\n    let groupless = [];\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n\n      if (range.min.group)\n      {\n        let parent: Class = range.min.group.parent;\n        let entry = classes[ parent.name ];\n\n        if (!entry)\n        {\n          entry = classes[ parent.name ] = {\n            parent: parent,\n            ranges: []\n          };\n        }\n\n        entry.ranges.push( range );\n      }\n      else\n      {\n        groupless.push( range );\n      }\n    }\n\n    return { classes, groupless };\n  }\n\n  public getScaleTo(unitValue: string, rangeDelta: number = 0.5): number\n  {\n    let to: Value = Parse.value( unitValue, Core.getGroup );\n\n    if (!to.isValid)\n    {\n      return 0;\n    }\n\n    let converted: Range = this.convert( to.unit );\n\n    if (!converted || !converted.isValid)\n    {\n      return 0;\n    }\n\n    let convertedValue: number = (converted.maximum - converted.minimum) * rangeDelta + converted.minimum;\n    let scale: number = to.value / convertedValue;\n\n    return scale;\n  }\n\n  public output(options?: OutputInput): string\n  {\n    let output: Output = Core.globalOutput.extend( options );\n\n    return output.ranges( this.ranges );\n  }\n\n  public convert(unit: string): Range\n  {\n    let group: Group = Core.getGroup( unit );\n\n    if (!group)\n    {\n      return null;\n    }\n\n    let parent: Class = group.parent;\n    let ranges: RangeList = this.ranges;\n    let min: Value = new Value(0, 0, 1, unit, group);\n    let max: Value = new Value(0, 0, 1, unit, group);\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n      let rangeGroup: Group = range.min.group;\n\n      if (rangeGroup && rangeGroup.parent === parent)\n      {\n        min = min.add( range.min.convertToValue( group ) );\n        max = max.add( range.max.convertToValue( group ) );\n      }\n    }\n\n    return new Range( min, max );\n  }\n\n  public each(iterate: (range: Range) => any, reverse: boolean = false): this\n  {\n    let ranges: RangeList = this.ranges;\n    let start = reverse ? ranges.length - 1 : 0;\n    let end = reverse ? -1 : ranges.length;\n    let move = reverse ? -1 : 1;\n\n    for (let i = start; i !== end; i += move)\n    {\n      if (iterate( ranges[ i ] ) === false)\n      {\n        break;\n      }\n    }\n\n    return this;\n  }\n\n  public classes(): Class[]\n  {\n    let ranges: RangeList = this.ranges;\n    let classMap = {};\n    let classes: Class[] = [];\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n      let group: Group = range.min.group;\n\n      if (group)\n      {\n        classMap[ group.parent.name ] = group.parent;\n      }\n    }\n\n    for (let className in classMap)\n    {\n      classes.push( classMap[ className ] );\n    }\n\n    return classes;\n  }\n\n  public get hasRanges(): boolean\n  {\n    let ranges: RangeList = this.ranges;\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      if (ranges[ i ].isRange)\n      {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  public get isValid(): boolean\n  {\n    let ranges: RangeList = this.ranges;\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      if (!ranges[ i ].isValid)\n      {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Base.ts","\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n\n\n/**\n * The Digital class which contains the following groups:\n *\n * - bit\n * - nibble\n * - byte\n * - kilo/mego/giga/tera/peta/exa/zetta/yotta byte\n * - kibi/mebi/gibi/tebi/pebi/exbi/zebi/yobi byte\n * - kilo/mego/giga/tera/peta/exa/zetta/yotta bit\n * - ki/mi/gi/ti/pi/ez/zi/yi bit\n */\nexport let Digital = new Class('Digital')\n  .addGroups([\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'b',\n      baseUnit: 'b',\n      denominators: [],\n      units: {\n        'b': Plurality.EITHER,\n        'bit': Plurality.SINGULAR,\n        'bits': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      unit: 'nibble',\n      relativeUnit: 'b',\n      relativeScale: 4,\n      denominators: [],\n      units: {\n        'nibble': Plurality.EITHER,\n        'nibbles': Plurality.PLURAL,\n        'nybble': Plurality.EITHER,\n        'nyble': Plurality.EITHER,\n        'half-byte': Plurality.EITHER,\n        'half byte': Plurality.EITHER,\n        'tetrade': Plurality.EITHER,\n        'semi-octet': Plurality.EITHER,\n        'quadbit': Plurality.EITHER,\n        'quartet': Plurality.EITHER\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'B',\n      relativeUnit: 'b',\n      relativeScale: 8,\n      denominators: [2, 8],\n      units: {\n        'B': Plurality.EITHER,\n        'byte': Plurality.SINGULAR,\n        'bytes': Plurality.PLURAL\n      }\n    }\n  ])\n\naddDigitalUnits(\n  Digital,\n  'B',\n  1000,\n  [2, 4, 5, 10],\n  'byte', 'bytes',\n  [\n    ['kB', 'kilo'],\n    ['mB', 'mega'],\n    ['gB', 'giga'],\n    ['tB', 'tera'],\n    ['pB', 'peta'],\n    ['eB', 'exa'],\n    ['zB', 'zetta'],\n    ['yB', 'yotta']\n  ]\n);\n\naddDigitalUnits(\n  Digital,\n  'B',\n  1024,\n  [2, 4, 8, 16],\n  'byte', 'bytes',\n  [\n    ['KB', 'kibi'],\n    ['MB', 'mebi'],\n    ['GB', 'gibi'],\n    ['TB', 'tebi'],\n    ['PB', 'pebi'],\n    ['EB', 'exbi'],\n    ['ZB', 'zebi'],\n    ['YB', 'yobi']\n  ]\n);\n\naddDigitalUnits(\n  Digital,\n  'b',\n  1000,\n  [2, 4, 5, 10],\n  'bit', 'bits',\n  [\n    ['kb', 'kilo', 'kbit'],\n    ['mb', 'mega', 'mbit'],\n    ['gb', 'giga', 'gbit'],\n    ['tb', 'tera', 'tbit'],\n    ['pb', 'peta', 'pbit'],\n    ['eb', 'exa', 'ebit'],\n    ['zb', 'zetta', 'zbit'],\n    ['yb', 'yotta', 'ybit']\n  ]\n);\n\naddDigitalUnits(\n  Digital,\n  'b',\n  1024,\n  [2, 4, 8, 16],\n  'bit', 'bits',\n  [\n    ['kibit', 'kibi'],\n    ['mibit', 'mebi'],\n    ['gibit', 'gibi'],\n    ['tibit', 'tebi'],\n    ['pibit', 'pebi'],\n    ['eibit', 'exbi'],\n    ['zibit', 'zebi'],\n    ['yibit', 'yobi']\n  ]\n);\n\nDigital.setClassScales();\n\n\nfunction addDigitalUnits(parent: Class, relativeTo: string, relativeScales: number, denominators: number[], suffixSingular: string, suffixPlural: string, unitAndPrefixes: string[][])\n{\n  for (let i = 0; i < unitAndPrefixes.length; i++)\n  {\n    let [unit, prefix, extra] = unitAndPrefixes[ i ];\n\n    let units = {};\n    units[ unit ] = Plurality.EITHER;\n    units[ prefix + suffixSingular ] = Plurality.SINGULAR;\n    units[ prefix + suffixPlural ] = Plurality.PLURAL;\n\n    if (extra)\n    {\n      units[ extra ] = Plurality.EITHER;\n    }\n\n    parent.addGroup({\n      system: System.ANY,\n      common: true,\n      unit: unit,\n      relativeUnit: relativeTo,\n      relativeScale: relativeScales,\n      denominators: denominators,\n      units: units\n    });\n\n    relativeTo = unit;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Digital.ts","\nimport { Core } from '../Core';\nimport { Weight } from './Weight';\nimport { Area } from './Area';\nimport { Time } from './Time';\nimport { Digital } from './Digital';\nimport { Temperature } from './Temperature';\nimport { Angle } from './Angle';\nimport { Volume } from './Volume';\nimport { Length } from './Length';\n\n/**\n * Adds all classes that come with Unitz to [Core].\n */\nexport function addDefaults()\n{\n  Core.addClasses(\n    Weight,\n    Area,\n    Time,\n    Digital,\n    Temperature,\n    Angle,\n    Volume,\n    Length\n  );\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/index.ts","\n\nexport enum Plurality\n{\n  SINGULAR,\n  PLURAL,\n  EITHER\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Plurality.ts","\n\nexport enum System\n{\n  METRIC,\n  IMPERIAL,\n  NONE,\n  ANY,\n  GIVEN\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/System.ts","\n\nexport class Functions\n{\n\n  public static EPSILON: number = 0.00001;\n\n  public static isZero(x: number): boolean\n  {\n    return this.abs( x ) < this.EPSILON;\n  }\n\n  public static isEqual(a: number, b: number): boolean\n  {\n    return this.abs( a - b ) < this.EPSILON;\n  }\n\n  public static isWhole(x: number): boolean\n  {\n    return this.abs( Math.floor( x ) - x ) < this.EPSILON;\n  }\n\n  public static isSingular(x: any): boolean\n  {\n    return this.isNumber( x ) && this.abs( this.abs( x ) - 1 ) < this.EPSILON;\n  }\n\n  public static isPlural(x: number): boolean\n  {\n    return x !== 1 && x !== -1;\n  }\n\n  public static isNumber(x: any): boolean\n  {\n    return isFinite(x);\n  }\n\n  public static trim(x: string): string\n  {\n    return x ? x.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, '') : x;\n  }\n\n  public static gcd(a: number, b: number): number\n  {\n    if (!this.isWhole(a) || !this.isWhole(b))\n    {\n      return 1;\n    }\n\n    let x: number = a < b ? a : b;\n    let y: number = a < b ? b : a;\n    x = this.abs(x);\n    y = this.abs(y);\n\n    while(y)\n    {\n      let t = y;\n      y = x % y;\n      x = t;\n    }\n\n    return x;\n  }\n\n  public static abs(x: number): number\n  {\n    return x < 0 ? -x : x;\n  }\n\n  public static sign(x: number): number\n  {\n    return x < 0 ? -1 : (x === 0 ? 0 : 1);\n  }\n\n  public static appendTo<T>(array: T[], input: T | T[]): T[]\n  {\n    if (input instanceof Array)\n    {\n      array.push.apply( array, input );\n    }\n    else if (input)\n    {\n      array.push( input );\n    }\n\n    return array;\n  }\n\n  public static isGroupDefinition(input: any): boolean\n  {\n    return !!(input && input.system && input.unit && input.denominators && input.units);\n  }\n\n  public static isValueDefinition(input: any): boolean\n  {\n    return !!(input && (input.value || input.unit || input.num || input.den));\n  }\n\n  public static isRangeDefinition(input: any): boolean\n  {\n    return !!(input && input.min && input.max);\n  }\n\n  public static isArray(input: any): boolean\n  {\n    return input instanceof Array;\n  }\n\n  public static isString(input: any): boolean\n  {\n    return typeof(input) === 'string';\n  }\n\n  public static isDefined(input: any): boolean\n  {\n    return typeof(input) !== 'undefined';\n  }\n\n  public static coalesce(a: any, b: any): any\n  {\n    return this.isDefined( a ) ? a : b;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Functions.ts","\nimport { Value } from './Value';\nimport { Range, RangeList } from './Range';\nimport { Functions as fn } from './Functions';\n\n\nexport enum OutputUnit {\n  NONE,\n  GIVEN,\n  SHORT,\n  LONG\n}\n\nexport enum OutputFormat {\n  GIVEN,\n  NUMBER,\n  MIXED,\n  FRACTION,\n  IMPROPER\n}\n\nexport interface OutputInput {\n  unit?: OutputUnit;\n  format?: OutputFormat;\n  repeatUnit?: boolean;\n  unitSpacer?: string;\n  rangeSpacer?: string;\n  fractionSpacer?: string;\n  mixedSpacer?: string;\n  delimiter?: string;\n  significant?: number;\n}\n\nexport class Output implements OutputInput\n{\n\n  public unit: OutputUnit = OutputUnit.GIVEN;\n  public format: OutputFormat = OutputFormat.GIVEN;\n  public repeatUnit: boolean = false;\n  public unitSpacer: string = '';\n  public rangeSpacer: string = ' - ';\n  public fractionSpacer: string = '/';\n  public mixedSpacer: string = ' ';\n  public delimiter: string = ', ';\n  public significant: number = -1;\n\n  public constructor(input?: OutputInput)\n  {\n    if (fn.isDefined(input))\n    {\n      this.set( input );\n    }\n  }\n\n  public set(input: OutputInput): this\n  {\n    this.unit = fn.coalesce( input.unit, this.unit );\n    this.format = fn.coalesce( input.format, this.format );\n    this.repeatUnit = fn.coalesce( input.repeatUnit, this.repeatUnit );\n    this.unitSpacer = fn.coalesce( input.unitSpacer, this.unitSpacer );\n    this.rangeSpacer = fn.coalesce( input.rangeSpacer, this.rangeSpacer );\n    this.fractionSpacer = fn.coalesce( input.fractionSpacer, this.fractionSpacer );\n    this.mixedSpacer = fn.coalesce( input.mixedSpacer, this.mixedSpacer );\n    this.delimiter = fn.coalesce( input.delimiter, this.delimiter );\n    this.significant = fn.coalesce( input.significant, this.significant );\n\n    return this;\n  }\n\n  public extend(input?: OutputInput): Output\n  {\n    let extended: Output = this;\n\n    if (fn.isDefined(input))\n    {\n      if (input instanceof Output)\n      {\n        extended = input;\n      }\n      else\n      {\n        extended = new Output( this );\n        extended.set( input );\n      }\n    }\n\n    return extended;\n  }\n\n  public ranges(ranges: RangeList): string\n  {\n    let out = '';\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n\n      if (range.isValid)\n      {\n        if (out.length)\n        {\n          out += this.delimiter;\n        }\n\n        out += this.range( range );\n      }\n    }\n\n    return out;\n  }\n\n  public range(range: Range): string\n  {\n    let out = '';\n\n    if (!range.isValid)\n    {\n      // nothing\n    }\n    else if (range.isFixed)\n    {\n      out += this.value( range.min );\n    }\n    else\n    {\n      let minUnit: boolean = this.repeatUnit || range.min.unit !== range.max.unit;\n\n      out += this.value( range.min, minUnit );\n      out += this.rangeSpacer;\n      out += this.value( range.max );\n    }\n\n    return out;\n  }\n\n  public value(value: Value, showUnit: boolean = true): string\n  {\n    let out = '';\n\n    if (!value.isValid)\n    {\n\n    }\n    else if (this.isFraction( value ))\n    {\n      if (this.isMixed( value ))\n      {\n        out += value.mixedWhole;\n        out += this.mixedSpacer;\n        out += value.mixedNum;\n        out += this.fractionSpacer;\n        out += value.den;\n      }\n      else\n      {\n        out += value.num;\n        out += this.fractionSpacer;\n        out += value.den;\n      }\n    }\n    else\n    {\n      out += this.number( value.value );\n    }\n\n    if (value.isValid && this.unit !== OutputUnit.NONE && showUnit)\n    {\n      let group = value.group;\n\n      out += this.unitSpacer;\n\n      if (this.isLongUnit( value ))\n      {\n        out += fn.isSingular( value.value ) ? group.getSingularLong() : group.getPluralLong();\n      }\n      else if (this.isShortUnit( value ) || (group && group.dynamic))\n      {\n        out += fn.isSingular( value.value ) ? group.getSingularShort() : group.getPluralShort();\n      }\n      else\n      {\n        out += value.unit;\n      }\n    }\n\n    return out;\n  }\n\n  public number(x: number): string\n  {\n    let valueString: string = x + '';\n\n    if (this.significant >= 0 && valueString !== '0')\n    {\n      let valueSignificant: string = x\n        .toFixed(this.significant)\n        .replace(/0*$/, '')\n        .replace(/\\.$/, '');\n\n      return valueSignificant.length < valueString.length ? valueSignificant : valueString;\n    }\n\n    return valueString;\n  }\n\n  public isFraction(value: Value): boolean\n  {\n    return value.isFraction && this.format !== OutputFormat.NUMBER;\n  }\n\n  public isNumber(value: Value): boolean\n  {\n    return value.isValid && !this.isFraction( value );\n  }\n\n  public isMixed(value: Value): boolean\n  {\n    return value.mixedWhole !== 0 && this.format !== OutputFormat.IMPROPER;\n  }\n\n  public isShortUnit(value: Value)\n  {\n    return value.group && this.unit === OutputUnit.SHORT;\n  }\n\n  public isLongUnit(value: Value)\n  {\n    return value.group && this.unit === OutputUnit.LONG;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Output.ts","\nimport { Plurality } from './Plurality';\nimport { System } from './System';\nimport { Class } from './Class';\nimport { GroupDefinition, UnitDefinitionMap, Numbers } from './Types';\nimport { Functions as fn } from './Functions';\nimport { Transform } from './Transform';\n\n\nexport type GroupList = Group[];\n\nexport type GroupMap = { [key: string]: Group };\n\nexport type GroupFactory = (unit: string) => Group;\n\nexport class Group\n{\n\n  public system: System;\n  public common: boolean;\n  public unit: string;\n  public baseUnit: string;\n  public baseScale: number = 1;\n  public classScale: number = 0;\n  public preferredUnit: string;\n  public relativeUnit: string;\n  public relativeScale: number;\n  public units: UnitDefinitionMap;\n  public denominators: number[];\n  public dynamic: boolean = false;\n  public parent: Class;\n\n  private singularShort: string;\n  private singularLong: string;\n  private pluralShort: string;\n  private pluralLong: string;\n\n  public constructor(definition: GroupDefinition, parent: Class)\n  {\n    this.system = definition.system;\n    this.common = !!definition.common;\n    this.unit = definition.unit;\n    this.baseUnit = definition.baseUnit;\n    this.preferredUnit = definition.preferredUnit || definition.unit;\n    this.relativeUnit = definition.relativeUnit;\n    this.relativeScale = definition.relativeScale || 1;\n    this.units = definition.units;\n    this.denominators = definition.denominators;\n    this.parent = parent;\n\n    this.updateUnits();\n  }\n\n  public get isBase(): boolean\n  {\n    return this.unit === this.baseUnit;\n  }\n\n  public setDynamic(dynamic: boolean = true): this\n  {\n    this.dynamic = dynamic;\n\n    return this;\n  }\n\n  public addUnits(units: UnitDefinitionMap): this\n  {\n    let parent: Class = this.parent;\n\n    for (let unit in units)\n    {\n      this.units[ unit ] = units[ unit ];\n\n      parent.addGroupUnit( unit, this );\n    }\n\n    this.updateUnits();\n\n    return this;\n  }\n\n  public removeUnits(units: string[]): this\n  {\n    let parent: Class = this.parent;\n    let existing: UnitDefinitionMap = this.units;\n\n    for (let i = 0; i < units.length; i++)\n    {\n      let unit = units[ i ];\n\n      if (unit in existing)\n      {\n        delete existing[ unit ];\n\n        parent.removeGroupUnit( unit, this );\n      }\n    }\n\n    return this;\n  }\n\n  public addDenominator(denominators: Numbers): this\n  {\n    fn.appendTo( this.denominators, denominators );\n\n    return this;\n  }\n\n  public setDenominators(denominators: number[]): this\n  {\n    this.denominators = denominators;\n\n    return this;\n  }\n\n  public setCommon(common: boolean = true): this\n  {\n    this.common = common;\n\n    return this;\n  }\n\n  public setPreferred(unit: string): this\n  {\n    this.preferredUnit = unit;\n\n    return this;\n  }\n\n  public updateUnits(): this\n  {\n    this.singularShort = null;\n    this.singularLong = null;\n    this.pluralShort = null;\n    this.pluralLong = null;\n\n    for (let unit in this.units)\n    {\n      var plurality = this.units[ unit ];\n\n      if (plurality !== Plurality.PLURAL)\n      {\n        if (!this.singularShort || unit.length < this.singularShort.length)\n        {\n          this.singularShort = unit;\n        }\n\n        if (!this.singularLong || unit.length > this.singularLong.length)\n        {\n          this.singularLong = unit;\n        }\n      }\n\n      if (plurality !== Plurality.SINGULAR)\n      {\n        if (!this.pluralShort || unit.length < this.pluralShort.length)\n        {\n          this.pluralShort = unit;\n        }\n\n        if (!this.pluralLong || unit.length > this.pluralLong.length)\n        {\n          this.pluralLong = unit;\n        }\n      }\n    }\n\n    return this;\n  }\n\n  public getPluralLong(): string\n  {\n    return this.pluralLong;\n  }\n\n  public getPluralShort(): string\n  {\n    return this.pluralShort;\n  }\n\n  public getSingularLong(): string\n  {\n    return this.singularLong;\n  }\n\n  public getSingularShort(): string\n  {\n    return this.singularShort;\n  }\n\n  public matches(transform: Transform, reverse: boolean, callback: (group: Group, index: number) => any): void\n  {\n    if (this.parent)\n    {\n      this.parent.getVisibleGroups( transform, reverse, this, callback );\n    }\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Group.ts","\nimport { GroupDefinition, Converter, ConverterMap, ConverterDoubleMap } from './Types';\nimport { Group, GroupMap, GroupList } from './Group';\nimport { Transform } from './Transform';\nimport { RangeList } from './Range';\n\n\nexport type ClassMap = { [unit: string]: Class };\n\nexport type ClassGrouping = {\n  groupless: RangeList,\n  classes: { [className: string]: { ranges: RangeList, parent: Class } }\n}\n\nexport class Class\n{\n\n  public name: string;\n  public groupMap: GroupMap;\n  public groups: GroupList;\n  public converters: ConverterDoubleMap;\n\n  public constructor(name: string, groups?: GroupDefinition[])\n  {\n    this.name = name;\n    this.groupMap = {};\n    this.groups = [];\n    this.converters = {};\n\n    if (groups)\n    {\n      this.addGroups(groups);\n    }\n  }\n\n  public addGroups(definitions: GroupDefinition[]): this\n  {\n    for (let i = 0; i < definitions.length; i++)\n    {\n      this.addGroup(definitions[i]);\n    }\n\n    return this;\n  }\n\n  public addGroup(definition: GroupDefinition): Group\n  {\n    let group = new Group(definition, this);\n    let { relativeUnit, relativeScale, units } = group;\n\n    if (relativeUnit)\n    {\n      let relative: Group = this.groupMap[ relativeUnit ];\n\n      group.baseScale = relativeScale * relative.baseScale;\n      group.baseUnit = relative.baseUnit;\n    }\n\n    for (let alias in units)\n    {\n      this.addGroupUnit( alias, group );\n    }\n\n    this.groups.push( group );\n\n    return group;\n  }\n\n  public addGroupUnit(unit: string, group: Group): this\n  {\n    let lower: string = unit.toLowerCase();\n\n    this.groupMap[ unit ] = group;\n\n    if (!this.groupMap[ lower ])\n    {\n      this.groupMap[ lower ] = group;\n    }\n\n    return this;\n  }\n\n  public removeGroupUnit(unit: string, group: Group): this\n  {\n    let lower: string = unit.toLowerCase();\n\n    if (this.groupMap[ unit ] === group)\n    {\n      delete this.groupMap[ unit ];\n    }\n\n    if (this.groupMap[ lower ] === group)\n    {\n      delete this.groupMap[ lower ];\n    }\n\n    return this;\n  }\n\n  private getFirstBase(): Group\n  {\n    let groups: GroupList = this.groups;\n\n    for (let i = 0; i < groups.length; i++)\n    {\n      let group: Group = groups[ i ];\n\n      if (group.unit === group.baseUnit)\n      {\n        return group;\n      }\n    }\n\n    return null;\n  }\n\n  public setClassScales(): this\n  {\n    let groups: GroupList = this.groups;\n    let first: Group = this.getFirstBase();\n\n    if (first)\n    {\n      for (let i = 0; i < groups.length; i++)\n      {\n        let group: Group = groups[ i ];\n\n        if (group.baseUnit === first.baseUnit)\n        {\n          group.classScale = group.baseScale;\n        }\n        else if (group.baseUnit in this.converters)\n        {\n          group.classScale = this.converters[ group.baseUnit ][ first.baseUnit ]( group.baseScale );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  public setBaseConversion(fromUnit: string, toUnit: string, converter: Converter): this\n  {\n    let converters = this.converters;\n    converters[ fromUnit ] = converters[ fromUnit ] || {};\n    converters[ fromUnit ][ toUnit ] = converter;\n\n    return this;\n  }\n\n  public getVisibleGroups(transform: Transform, reverse: boolean, relatedGroup: Group, callback: (group: Group, index: number) => any): void\n  {\n    let groups: GroupList = this.groups;\n    let matched: number = 0;\n\n    let start = reverse ? groups.length - 1 : 0;\n    let stop = reverse ? -1 : groups.length;\n    let increment = reverse ? -1 : 1;\n\n    for (let i = start; i !== stop; i += increment)\n    {\n      let group: Group = groups[ i ];\n\n      if (transform.isVisibleGroup( group, relatedGroup ))\n      {\n        let result: any = callback( group, matched++ );\n\n        if (result === false)\n        {\n          break;\n        }\n      }\n    }\n  }\n\n  public convert(value: number, from: Group, to: Group): number\n  {\n    if (from === to || !from || !to)\n    {\n      return value;\n    }\n\n    let converted: number = value * from.baseScale;\n\n    if (from.baseUnit !== to.baseUnit)\n    {\n      let map: ConverterMap = this.converters[ from.baseUnit ];\n\n      if (!map || !map[ to.baseUnit ])\n      {\n        return 0;\n      }\n\n      let converter: Converter = map[ to.baseUnit ];\n\n      converted = converter( converted );\n    }\n\n    return converted / to.baseScale;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Class.ts","\nimport { Functions as fn } from './Functions';\nimport { Range } from './Range';\n\n\nexport enum SortType {\n  MIN,\n  MAX,\n  AVERAGE\n}\n\nexport interface SortInput {\n  ascending?: boolean;\n  type?: SortType;\n  classes?: SortClassMap;\n}\n\nexport type SortClassMap = { [className: string]: number };\n\nexport type Sorter = (a: Range, b: Range) => number;\n\nexport class Sort implements SortInput\n{\n\n  public ascending: boolean = false;\n  public type: SortType = SortType.MAX;\n  public classes: SortClassMap = {};\n\n  public constructor(input?: SortInput)\n  {\n    if (fn.isDefined(input))\n    {\n      this.set( input );\n    }\n  }\n\n  public set(input: SortInput): this\n  {\n    this.ascending = fn.coalesce( input.ascending, this.ascending );\n    this.type = fn.coalesce( input.type, this.type );\n\n    if (fn.isDefined( input.classes ))\n    {\n      for (let className in input.classes)\n      {\n        this.classes[ className ] = input.classes[ className ];\n      }\n    }\n\n    return this;\n  }\n\n  public extend(input?: SortInput): Sort\n  {\n    let extended: Sort = this;\n\n    if (fn.isDefined(input))\n    {\n      if (input instanceof Sort)\n      {\n        extended = input;\n      }\n      else\n      {\n        extended = new Sort( this );\n        extended.set( input );\n      }\n    }\n\n    return extended;\n  }\n\n  public getSorter(): Sorter\n  {\n    return (a: Range, b: Range) =>\n    {\n      let d: number = this.getClassComparison(a, b);\n\n      if (d === 0)\n      {\n        switch (this.type)\n        {\n          case SortType.MIN:\n            d = this.getMinComparison(a, b);\n            break;\n          case SortType.MAX:\n            d = this.getMaxComparison(a, b);\n            break;\n          case SortType.AVERAGE:\n            d = this.getAverageComparison(a, b);\n            break;\n        }\n      }\n\n      return this.ascending ? d : -d;\n    };\n  }\n\n  private getMinComparison(a: Range, b: Range): number\n  {\n    return fn.sign( a.min.classScaled - b.min.classScaled );\n  }\n\n  private getMaxComparison(a: Range, b: Range): number\n  {\n    return fn.sign( a.max.classScaled - b.max.classScaled );\n  }\n\n  private getAverageComparison(a: Range, b: Range): number\n  {\n    let avg: number = (a.min.classScaled + a.max.classScaled) * 0.5;\n    let bvg: number = (b.min.classScaled + b.max.classScaled) * 0.5;\n\n    return fn.sign( avg - bvg );\n  }\n\n  private getClassComparison(a: Range, b: Range): number\n  {\n    let ag: number = a.min.group ? 1 : -1;\n    let bg: number = b.min.group ? 1 : -1;\n\n    if (ag !== bg)\n    {\n      return ag - bg;\n    }\n\n    let ac: number = this.classes[ a.min.group.parent.name ] || 0;\n    let bc: number = this.classes[ b.min.group.parent.name ] || 0;\n\n    return ac - bc;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Sort.ts","\nimport { Functions as fn } from './Functions';\nimport { System } from './System';\nimport { Group } from './Group';\nimport { Class } from './Class';\n\n\nexport interface TransformInput {\n  common?: boolean;\n  system?: System;\n  min?: number;\n  max?: number;\n  groupless?: boolean;\n  convertWithMax?: boolean;\n  onlyUnits?: string[];\n  notUnits?: string[];\n  onlyClasses?: string[];\n  notClasses?: string[];\n}\n\nexport class Transform implements TransformInput\n{\n\n  public common: boolean = true;\n  public system: System = System.GIVEN;\n  public min: number = -Number.MAX_VALUE;\n  public max: number = Number.MAX_VALUE;\n  public convertWithMax: boolean = true;\n  public groupless: boolean = true;\n  public onlyUnits: string[];\n  public notUnits: string[];\n  public onlyClasses: string[];\n  public notClasses: string[];\n\n  public constructor(input?: TransformInput)\n  {\n    if (fn.isDefined(input))\n    {\n      this.set( input );\n    }\n  }\n\n  public set(input: TransformInput): this\n  {\n    this.common = fn.coalesce( input.common, this.common );\n    this.system = fn.coalesce( input.system, this.system );\n    this.min = fn.coalesce( input.min, this.min );\n    this.max = fn.coalesce( input.max, this.max );\n    this.groupless = fn.coalesce( input.groupless, this.groupless );\n    this.convertWithMax = fn.coalesce( input.convertWithMax, this.convertWithMax );\n    this.onlyUnits = fn.coalesce( input.onlyUnits, this.onlyUnits );\n    this.notUnits = fn.coalesce( input.notUnits, this.notUnits );\n    this.onlyClasses = fn.coalesce( input.onlyClasses, this.onlyClasses );\n    this.notClasses = fn.coalesce( input.notClasses, this.notClasses );\n\n    return this;\n  }\n\n  public extend(input?: TransformInput): Transform\n  {\n    let extended: Transform = this;\n\n    if (fn.isDefined(input))\n    {\n      if (input instanceof Transform)\n      {\n        extended = input;\n      }\n      else\n      {\n        extended = new Transform( this );\n        extended.set( input );\n      }\n    }\n\n    return extended;\n  }\n\n  public isVisibleGroup(group: Group, givenGroup?: Group): boolean\n  {\n    return this.isCommonMatch( group ) &&\n      this.isSystemMatch( group, givenGroup ) &&\n      this.isUnitMatch( group ) &&\n      this.isClassMatch( group.parent );\n  }\n\n  public isCommonMatch(group: Group): boolean\n  {\n    return !this.common || group.common;\n  }\n\n  public isSystemMatch(group: Group, givenGroup?: Group): boolean\n  {\n    switch (this.system)\n    {\n      case System.METRIC:\n        return group.system === System.METRIC || group.system === System.ANY;\n      case System.IMPERIAL:\n        return group.system === System.IMPERIAL || group.system === System.ANY;\n      case System.NONE:\n        return false;\n      case System.ANY:\n        return true;\n      case System.GIVEN:\n        return !givenGroup || group.baseUnit === givenGroup.baseUnit;\n    }\n\n    return false;\n  }\n\n  public isClassMatch(parent: Class): boolean\n  {\n    if (this.onlyClasses)\n    {\n      return this.onlyClasses.indexOf( parent.name ) !== -1;\n    }\n\n    if (this.notClasses)\n    {\n      return this.notClasses.indexOf( parent.name ) === -1;\n    }\n\n    return true;\n  }\n\n  public isUnitMatch(group: Group): boolean\n  {\n    if (this.onlyUnits)\n    {\n      return this.onlyUnits.indexOf( group.unit ) !== -1;\n    }\n\n    if (this.notUnits)\n    {\n      return this.notUnits.indexOf( group.unit ) === -1;\n    }\n\n    return true;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Transform.ts","\nimport { Plurality } from './Plurality';\nimport { System } from './System';\nimport { Class, ClassMap } from './Class';\nimport { Output } from './Output';\nimport { Group, GroupMap, GroupList } from './Group';\nimport { Transform } from './Transform';\nimport { Value } from './Value';\nimport { Sort } from './Sort';\n\n\nexport class Core\n{\n\n  public static classMap: ClassMap = {};\n  public static classes: Class[] = [];\n  public static unitToGroup: GroupMap = {};\n  public static dynamicGroups: GroupList = [];\n  public static dynamicMatches: GroupMap = {};\n  public static dynamicMatchLength: number = 3;\n\n  public static globalOutput: Output = new Output();\n  public static globalTransform: Transform = new Transform();\n  public static globalSort: Sort = new Sort();\n\n\n  public static getGroup(unit: string, createDynamic: boolean = true): Group\n  {\n    if (!unit)\n    {\n      return null;\n    }\n\n    let exactGroup: Group = Core.unitToGroup[ unit ];\n\n    if (exactGroup)\n    {\n      return exactGroup;\n    }\n\n    let normalizedUnit: string = unit.toLowerCase();\n    let normalizedGroup: Group = Core.unitToGroup[ normalizedUnit ];\n\n    if (normalizedGroup)\n    {\n      return normalizedGroup;\n    }\n\n    if (!createDynamic)\n    {\n      return null;\n    }\n\n    let dynamicUnit: string = Core.getDynamicMatch( unit );\n    let dynamicGroup: Group = Core.dynamicMatches[ dynamicUnit ];\n\n    if (dynamicGroup)\n    {\n      return Core.addDynamicUnit( unit, dynamicGroup );\n    }\n\n    return Core.newDynamicGroup( unit );\n  }\n\n  public static setPreferred(unit: string): void\n  {\n    let group: Group = this.getGroup( unit, false );\n\n    if (group)\n    {\n      group.setPreferred( unit );\n    }\n  }\n\n  public static setCommon(unit: string, common: boolean = true): void\n  {\n    let group: Group = this.getGroup( unit, false );\n\n    if (group)\n    {\n      group.setCommon( common );\n    }\n  }\n\n  public static setDenominators(unit: string, denominators: number[]): void\n  {\n    let group: Group = this.getGroup( unit, false );\n\n    if (group)\n    {\n      group.setDenominators( denominators );\n    }\n  }\n\n  public static addClass(parent: Class): void\n  {\n    this.classMap[ parent.name ] = parent;\n    this.classes.push( parent );\n\n    let groups: GroupMap = parent.groupMap;\n\n    for (let unit in groups)\n    {\n      this.unitToGroup[ unit ] = groups[ unit ];\n    }\n  }\n\n  public static addClasses(...classes: Class[]): void\n  {\n    for (let i = 0; i < classes.length; i++)\n    {\n      this.addClass( classes[ i ] );\n    }\n  }\n\n  public static addDynamicUnit(unit: string, group: Group): Group\n  {\n    group.units[ unit ] = Plurality.EITHER;\n\n    let unitCount: number = 0;\n\n    for (let groupUnit in group.units)\n    {\n      if (groupUnit)\n      {\n        unitCount++;\n      }\n    }\n\n    if (unitCount > 1)\n    {\n      let longest: string;\n\n      for (let groupUnit in group.units)\n      {\n        group.units[ groupUnit ] = Plurality.SINGULAR;\n\n        if (!longest || groupUnit.length > longest.length)\n        {\n          longest = groupUnit;\n        }\n      }\n\n      if (longest)\n      {\n        group.units[ longest ] = Plurality.PLURAL;\n      }\n    }\n\n    group.updateUnits();\n\n    this.unitToGroup[ unit ] = group;\n    this.unitToGroup[ unit.toLowerCase() ] = group;\n\n    this.dynamicMatches[ this.getDynamicMatch( unit ) ] = group;\n\n    return group;\n  }\n\n  public static newDynamicGroup(unit: string): Group\n  {\n    let parent: Class = new Class(unit);\n\n    let group: Group = parent.addGroup({\n      system: System.ANY,\n      unit: unit,\n      common: true,\n      baseUnit: unit,\n      denominators: [2, 3, 4, 5, 6, 8, 10],\n      units: {}\n    });\n\n    group.setDynamic();\n\n    this.addDynamicUnit( unit, group );\n    this.dynamicGroups.push( group );\n\n    return group;\n  }\n\n  public static getDynamicMatch(unit: string): string\n  {\n    return unit.substring( 0, this.dynamicMatchLength ).toLowerCase();\n  }\n\n  // @ts-ignore\n  public static isMoreNormal(fromValue: Value, toValue: Value, transform: Transform, forOutput: Output): boolean\n  {\n    if (!fromValue)\n    {\n      return true;\n    }\n\n    let fromString: string = forOutput.value( fromValue );\n    let toString: string = forOutput.value( toValue );\n\n    return toString.length <= fromString.length;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Core.ts","\nimport { Functions as fn } from './Functions';\nimport { Transform } from './Transform';\nimport { Output } from './Output';\nimport { Group } from './Group';\nimport { Core } from './Core';\n\n\n// TODO perUnit & perGroup (or: rateUnit & rateGroup)\n\nexport type ValueMap = { [unit: string]: Value };\n\nexport class Value\n{\n\n  public static INVALID: Value = new Value(Number.NaN, Number.NaN, 1, '', null);\n  public static SEPARATOR_FRACTION: string = '/';\n  public static SEPARATOR_MIXED: string = ' ';\n\n  public readonly value: number;\n  public readonly num: number;\n  public readonly den: number;\n  public readonly group: Group;\n  public unit: string;\n\n  public constructor(value: number, num: number, den: number, unit: string, group: Group)\n  {\n    let divisor: number = fn.gcd(num, den);\n    this.value = value;\n    this.num = num / divisor;\n    this.den = den / divisor;\n    this.unit = unit;\n    this.group = group;\n  }\n\n  public get isValid(): boolean\n  {\n    return isFinite(this.value);\n  }\n\n  public get isFraction(): boolean\n  {\n    return this.den !== 1;\n  }\n\n  public get isDecimal(): boolean\n  {\n    return this.den === 1;\n  }\n\n  public get scaled(): number\n  {\n    return this.group ? this.value * this.group.baseScale : this.value;\n  }\n\n  public get classScaled(): number\n  {\n    return this.group ? this.value * this.group.classScale : this.value;\n  }\n\n  public get actual(): number\n  {\n    return this.num / this.den;\n  }\n\n  public get mixedWhole(): number\n  {\n    return this.den !== 1 ? Math.floor(this.num / this.den) : 0;\n  }\n\n  public get mixedNum(): number\n  {\n    return this.den !== 1 ? this.num % this.den : this.num;\n  }\n\n  public get floor(): number\n  {\n    return Math.floor(this.value);\n  }\n\n  public get ceil(): number\n  {\n    return Math.ceil(this.value);\n  }\n\n  public get truncate(): number\n  {\n    return this.value < 0 ? this.ceil : this.floor;\n  }\n\n  public get remainder(): number\n  {\n    return this.value - this.floor;\n  }\n\n  public get error(): number\n  {\n    return this.actual - this.value;\n  }\n\n  public get distance(): number\n  {\n    return fn.abs(this.error);\n  }\n\n  public get asString(): string\n  {\n    return (this.den === 1) ?\n      (this.value + '') :\n      (this.mixedWhole !== 0 ?\n          (this.mixedWhole + Value.SEPARATOR_MIXED + this.mixedNum + Value.SEPARATOR_FRACTION + this.den) :\n          (this.num + Value.SEPARATOR_FRACTION + this.den)\n      )\n    ;\n  }\n\n  public preferred(): Value\n  {\n    return this.group ? new Value(this.value, this.num, this.den, this.group.preferredUnit, this.group) : this;\n  }\n\n  public copy(): Value\n  {\n    return new Value(this.value, this.num, this.den, this.unit, this.group);\n  }\n\n  public zero(): Value\n  {\n    return new Value(0, 0, 1, this.unit, this.group);\n  }\n\n  public truncated(): Value\n  {\n    return new Value(this.truncate, this.truncate, 1, this.unit, this.group);\n  }\n\n  public fractioned(): Value\n  {\n    if (this.isFraction)\n    {\n      return this;\n    }\n\n    if (this.group)\n    {\n      return Value.fromNumberWithDenominators(this.value, this.group.denominators, this.unit, this.group);\n    }\n\n    return this;\n  }\n\n  public numbered(): Value\n  {\n    if (this.isFraction)\n    {\n      return new Value(this.value, this.value, 1, this.unit, this.group);\n    }\n\n    return this;\n  }\n\n  public convertTo(to: Group): number\n  {\n    let group: Group = this.group;\n\n    return group ? group.parent.convert( this.value, group, to ) : this.value;\n  }\n\n  public convertToValue(group: Group): Value\n  {\n    return Value.fromNumberForGroup( this.convertTo( group ), group );\n  }\n\n  public conversions(transform: Transform, reverse: boolean, callback: (transformed: Value, index: number) => void): void\n  {\n    if (this.group)\n    {\n      this.group.matches(transform, reverse, (group, index) =>\n      {\n        callback( this.convertToValue( group ), index );\n      });\n    }\n  }\n\n  public normalize(transform: Transform, forOutput: Output): Value\n  {\n    let closest: Value;\n\n    this.conversions(transform, false, (convert) =>\n    {\n      let acceptable: boolean = !forOutput.isNumber( convert );\n\n      if (!acceptable)\n      {\n        let number: string = forOutput.number( convert.value );\n\n        acceptable = number !== '0';\n      }\n\n      if (acceptable && Core.isMoreNormal(closest, convert, transform, forOutput))\n      {\n        closest = convert;\n      }\n    });\n\n    return closest || this;\n  }\n\n  public add(addend: Value, scale: number = 1): Value\n  {\n    let num = this.num * addend.den + addend.num * this.den * scale;\n    let den = this.den * addend.den;\n    let result = this.value + addend.value * scale;\n\n    return new Value(result, num, den, this.unit, this.group);\n  }\n\n  public sub(subtrahend: Value, scale: number = 1): Value\n  {\n    let num = this.num * subtrahend.den - subtrahend.num * this.den * scale;\n    let den = this.den * subtrahend.den;\n    let result = this.value - subtrahend.value * scale;\n\n    return new Value(result, num, den, this.unit, this.group);\n  }\n\n  public mul(scale: number): Value\n  {\n    return new Value(this.value * scale, this.num * scale, this.den, this.unit, this.group);\n  }\n\n  public static fromNumber(value: number, unit: string = '', group: Group = null): Value\n  {\n    return new Value(value, value, 1, unit, group);\n  }\n\n  public static fromNumberWithRange(value: number, unit: string = '', group: Group = null, minDen: number = 1, maxDen: number = 100): Value\n  {\n    let closestDenominator: number = 0;\n    let closestDistance: number = -1;\n\n    for (let i = minDen; i <= maxDen; i++)\n    {\n      let den = i;\n      let num = Math.floor( den * value );\n      let actual = num / den;\n      let distance = fn.abs(value - actual);\n\n      if (closestDistance === -1 || distance < closestDistance)\n      {\n        closestDistance = distance;\n        closestDenominator = den;\n      }\n    }\n\n    if (closestDistance > fn.EPSILON)\n    {\n      return new Value(value, value, 1, unit, group);\n    }\n\n    if (closestDenominator === 0)\n    {\n      closestDenominator = 1;\n    }\n\n    return new Value(value, Math.floor(value * closestDenominator), closestDenominator, unit, group);\n  }\n\n  public static fromNumberForGroup(value: number, group: Group): Value\n  {\n    return this.fromNumberWithDenominators( value, group.denominators, group.preferredUnit, group );\n  }\n\n  public static fromNumberWithDenominators(value: number, denominators: number[], unit: string = '', group: Group = null): Value\n  {\n    let closestDenominator: number = 0;\n    let closestDistance: number = -1;\n\n    for (let i = 0; i < denominators.length; i++)\n    {\n      let den = denominators[ i ];\n      let num = Math.floor( den * value );\n      let actual = num / den;\n      let distance = fn.abs(value - actual);\n\n      if (closestDistance === -1 || distance < closestDistance)\n      {\n        closestDistance = distance;\n        closestDenominator = den;\n      }\n    }\n\n    if (closestDistance > fn.EPSILON)\n    {\n      return new Value(value, value, 1, unit, group);\n    }\n\n    if (closestDenominator === 0)\n    {\n      closestDenominator = 1;\n    }\n\n    return new Value(value, Math.floor(value * closestDenominator), closestDenominator, unit, group);\n  }\n\n  public static fromFraction(num: number, den: number, unit: string = '', group: Group = null): Value\n  {\n    return new Value(num / den, num, den, unit, group);\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Value.ts","\nimport { Value } from './Value';\nimport { Transform } from './Transform';\nimport { Output } from './Output';\n\n\nexport type RangeMap = { [key: string]: Range };\n\nexport type RangeList = Range[];\n\nexport type RangeMutator = (range: Range) => Range;\n\nexport class Range\n{\n\n  public static INVALID: Range = new Range( Value.INVALID, Value.INVALID );\n  public static SEPARATOR: string = ' - ';\n\n  public readonly min: Value;\n  public readonly max: Value;\n\n  public constructor(min: Value, max: Value)\n  {\n    this.min = min.value < max.value ? min : max;\n    this.max = max.value > min.value ? max : min;\n  }\n\n  public get isValid(): boolean\n  {\n    return this.min.isValid && this.max.isValid;\n  }\n\n  public get isFraction(): boolean\n  {\n    return this.min.isFraction || this.max.isFraction;\n  }\n\n  public get isDecimal(): boolean\n  {\n    return this.min.isDecimal && this.max.isDecimal;\n  }\n\n  public get isRange(): boolean\n  {\n    return this.min.value !== this.max.value;\n  }\n\n  public get isFixed(): boolean\n  {\n    return this.min.value === this.max.value;\n  }\n\n  public get average(): number\n  {\n    return (this.min.value + this.max.value) * 0.5;\n  }\n\n  public get value(): number\n  {\n    return this.min.value;\n  }\n\n  public get minimum(): number\n  {\n    return this.min.value;\n  }\n\n  public get maximum(): number\n  {\n    return this.max.value;\n  }\n\n  public get unit(): string\n  {\n    return this.min.group.unit;\n  }\n\n  public get asString(): string\n  {\n    return (this.min.value === this.max.value) ?\n      (this.min.asString) :\n      (this.min.asString + Range.SEPARATOR + this.max.asString);\n  }\n\n  public isMatch(range: Range): boolean\n  {\n    return this.min.group === range.min.group &&\n      this.max.group === range.max.group;\n  }\n\n  public preferred(): Range\n  {\n    let min: Value = this.min.preferred();\n    let max: Value = this.max.preferred();\n\n    return new Range( min, max );\n  }\n\n  public positive(): Range\n  {\n    let minNegative: boolean = this.min.value < 0;\n    let maxNegative: boolean = this.max.value < 0;\n\n    if (maxNegative)\n    {\n      return null;\n    }\n\n    let min: Value = minNegative ? this.min.zero() : this.min.copy();\n    let max: Value = this.max.copy();\n\n    return new Range( min, max );\n  }\n\n  public negative(): Range\n  {\n    let minPositive: boolean = this.min.value >= 0;\n    let maxPositive: boolean = this.max.value >= 0;\n\n    if (minPositive)\n    {\n      return null;\n    }\n\n    let min: Value = this.min.copy();\n    let max: Value = maxPositive ? this.max.zero() : this.max.copy();\n\n    return new Range( min, max );\n  }\n\n  public nonzero(): Range\n  {\n    let minZero: boolean = this.min.value === 0;\n    let maxZero: boolean = this.max.value === 0;\n\n    if (minZero && maxZero)\n    {\n      return null;\n    }\n\n    let min: Value = this.min.copy();\n    let max: Value = this.max.copy();\n\n    return new Range( min, max );\n  }\n\n  public maxd(): Range\n  {\n    let fixed: Value = this.max.copy();\n\n    return new Range(fixed, fixed);\n  }\n\n  public mind(): Range\n  {\n    let fixed: Value = this.min.copy();\n\n    return new Range(fixed, fixed);\n  }\n\n  public normalize(transform: Transform, forOutput: Output): Range\n  {\n    let min: Value = this.min.normalize( transform, forOutput );\n    let max: Value = this.max.normalize( transform, forOutput );\n\n    return new Range(min, max)\n  }\n\n  public add(addend: Range, scale: number = 1): Range\n  {\n    let min: Value = this.min.add(addend.min, scale);\n    let max: Value = this.max.add(addend.max, scale);\n\n    return new Range(min, max);\n  }\n\n  public sub(subtrahend: Range, scale: number = 1): Range\n  {\n    let min: Value = this.min.sub(subtrahend.min, scale);\n    let max: Value = this.max.sub(subtrahend.max, scale);\n\n    return new Range(min, max);\n  }\n\n  public mul(scale: number): Range\n  {\n    let min: Value = this.min.mul(scale);\n    let max: Value = this.max.mul(scale);\n\n    return new Range(min, max);\n  }\n\n  public fractioned(): Range\n  {\n    if (this.min.isFraction && this.max.isFraction)\n    {\n      return this;\n    }\n\n    let min: Value = this.min.fractioned();\n    let max: Value = this.max.fractioned();\n\n    return new Range(min, max);\n  }\n\n  public numbered(): Range\n  {\n    if (!this.min.isFraction && !this.max.isFraction)\n    {\n      return this;\n    }\n\n    let min: Value = this.min.numbered();\n    let max: Value = this.max.numbered();\n\n    return new Range(min, max);\n  }\n\n  public static fromFixed(fixed: Value): Range\n  {\n    return new Range(fixed, fixed);\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Range.ts","\nimport { Functions as fn } from './Functions';\nimport { BaseInput, RangeInput, RangesInput, RangeDefinition, ValueInput, ValueDefinition, ParseResult } from './Types';\nimport { Group, GroupFactory } from './Group';\nimport { Range, RangeList } from './Range';\nimport { Value } from './Value';\nimport { Base } from './Base';\n\n/** The class which takes user input and parses it to specific structures. **/\nexport class Parse\n{\n\n  /** The regular expression used to split up a string into multiple ranges. **/\n  public static REGEX_LIST: RegExp = /\\s*,\\s*/;\n\n  /** The regular expression used to split up a range string to determine the min and maximum values. **/\n  public static REGEX_RANGE: RegExp = /\\s*(-?[^-]+)-(.+)/;\n\n  /** The regular expression used to parse a value number or fraction and possible unit from a string. **/\n  public static REGEX_PARSE: RegExp = /^\\s*(-?\\d*)(\\s+(\\d+))?(\\s*\\/\\s*(\\d+)|\\.(\\d+)|)\\s*(.*)\\s*$/i;\n\n  /**\n   * Parses user input into a base.\n   *\n   * @param input The input to parse into a Base.\n   */\n  public static base(input: BaseInput): Base\n  {\n    if (input instanceof Base)\n    {\n      return <Base>input;\n    }\n\n    return new Base( <RangesInput>input );\n  }\n\n  public static ranges(input: RangesInput, groups: GroupFactory): RangeList\n  {\n    if (fn.isArray(input))\n    {\n      return this.rangesFromArray( <RangeInput[]>input, groups );\n    }\n    else if (fn.isString(input))\n    {\n      return this.rangesFromString( <string>input, groups );\n    }\n    else if (fn.isRangeDefinition(input))\n    {\n      return this.rangesFromArray( [ <RangeDefinition>input ], groups );\n    }\n    else if (fn.isValueDefinition(input))\n    {\n      return this.rangesFromArray( [ <ValueDefinition>input ], groups );\n    }\n\n    return [];\n  }\n\n  public static rangesFromArray(input: RangeInput[], groups: GroupFactory): RangeList\n  {\n    let ranges = [];\n\n    for (let i = 0; i < input.length; i++)\n    {\n      let range: Range = this.range( input[ i ], groups );\n\n      ranges.push( range );\n    }\n\n    return ranges;\n  }\n\n  public static rangesFromString(input: string, groups: GroupFactory): RangeList\n  {\n    let ranges: string[] = input.split( this.REGEX_LIST );\n\n    return this.rangesFromArray( ranges, groups );\n  }\n\n  public static range(input: RangeInput, groups: GroupFactory): Range\n  {\n    if (fn.isString(input))\n    {\n      return this.rangeFromString( <string>input, groups );\n    }\n    else if (fn.isRangeDefinition(input))\n    {\n      let range: RangeDefinition = <RangeDefinition>input;\n      let min: Value = this.value( range.min, groups );\n      let max: Value = this.value( range.max, groups );\n\n      return new Range( min, max );\n    }\n\n    return Range.INVALID;\n  }\n\n  public static rangeFromString(input: string, groups: GroupFactory): Range\n  {\n    let matches: string[] = this.REGEX_RANGE.exec( input );\n\n    if (!matches)\n    {\n      let fixed: Value = this.valueFromString(input, groups);\n\n      return new Range(fixed, fixed);\n    }\n\n    let minInput: string = matches[1];\n    let maxInput: string = matches[2];\n\n    let minParsed: ParseResult = this.input( minInput );\n    let maxParsed: ParseResult = this.input( maxInput );\n\n    if (!minParsed || !maxParsed)\n    {\n      return Range.INVALID;\n    }\n\n    let minUnit: string = minParsed.unit || maxParsed.unit;\n    let maxUnit: string = maxParsed.unit || minParsed.unit;\n\n    let min: Value = this.valueFromResult(minParsed, minUnit, groups);\n    let max: Value = this.valueFromResult(maxParsed, maxUnit, groups);\n\n    return new Range( min, max );\n  }\n\n  public static value(input: ValueInput, groups: GroupFactory): Value\n  {\n    if (fn.isString(input))\n    {\n      return this.valueFromString( <string>input, groups );\n    }\n    else if (fn.isValueDefinition(input))\n    {\n      return this.valueFromValue( <ValueDefinition>input, groups );\n    }\n\n    return Value.INVALID;\n  }\n\n  public static valueFromValue(input: ValueDefinition, groups: GroupFactory): Value\n  {\n    let givenValue: number = fn.isDefined( input.value ) ? input.value : 1;\n    let num: number = fn.isDefined( input.num ) ? input.num : givenValue;\n    let den: number = fn.isDefined( input.den ) ? input.den : 1;\n    let parsedValue: number = fn.isDefined( input.value ) ? input.value : num / den;\n    let unit: string = input.unit || '';\n    let group: Group = groups( unit );\n\n    return new Value( parsedValue, num, den, unit, group );\n  }\n\n  public static valueFromString(input: string, groups: GroupFactory): Value\n  {\n    let parsed: ParseResult = this.input( input );\n\n    return parsed ? this.valueFromResult(parsed, parsed.unit, groups) : Value.INVALID;\n  }\n\n  public static valueFromResult(result: ParseResult, unit: string, groups: GroupFactory): Value\n  {\n    let group: Group = groups( unit );\n\n    return new Value(result.value, result.valueNum, result.valueDen, unit, group);\n  }\n\n  /**\n   * Possible Values:\n   * 1tsp\n   * 1 tsp\n   * 1/2 tsp\n   * 1 1/2 tsp\n   * 1 - 2 tsp\n   * 1 tsp, 1 cup\n   * 2/3 - 1 c, 1 lb, 2.45 cats\n   */\n  public static input(input: string): ParseResult\n  {\n    let matches: string[] = this.REGEX_PARSE.exec( input );\n    let whole: number = parseInt( matches[1] );\n    let hasWhole: boolean = isFinite( whole );\n    let sign: number = matches[1].charAt(0) === '-' ? -1 : 1;\n    let num: number = parseInt( matches[3] );\n    let den: number = parseInt( matches[5] );\n    let decimal: string = matches[6];\n    let hasDecimal: boolean = isFinite( parseFloat( decimal ) );\n    let unit: string = fn.trim( matches[7] ).replace( /\\.$/, '' );\n\n    if ( !hasWhole && hasDecimal )\n    {\n      whole = 0;\n      hasWhole = true;\n    }\n\n    if ( !hasWhole && !unit )\n    {\n      return null;\n    }\n\n    let value: number = 1;\n    let valueDen: number = 1;\n    let valueNum: number = 1;\n\n    if ( hasWhole )\n    {\n      value = whole;\n      valueNum = whole;\n\n      if ( isFinite( den ) )\n      {\n        valueDen = den;\n\n        if ( isFinite( num ) )\n        {\n          value += ( num / den ) * sign;\n          valueNum *= den;\n          valueNum += num;\n        }\n        else\n        {\n          value /= den;\n        }\n      }\n      else if ( hasDecimal )\n      {\n        let remainder = parseFloat( '0.' + decimal );\n\n        value += remainder * sign;\n        valueNum += remainder;\n      }\n\n      valueNum *= sign;\n    }\n\n    return { value, valueNum, valueDen, num, den, unit };\n  }\n\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Parse.ts","\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n\n\n/**\n * The Weight clas which contains the following groups.\n *\n * - milligram\n * - gram\n * - kilogram\n * - ounce\n * - pound\n * - ton\n */\nexport let Weight = new Class('Weight')\n  .setBaseConversion('mg', 'oz', (x) => x * 0.000035274)\n\n  .setBaseConversion('oz', 'mg', (x) => x * 28349.5)\n\n  .addGroups([\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'mg',\n      baseUnit: 'mg',\n      denominators: [2, 10],\n      units: {\n        'mg': Plurality.EITHER,\n        'milligram': Plurality.SINGULAR,\n        'milligrams': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'g',\n      relativeUnit: 'mg',\n      relativeScale: 1000,\n      denominators: [2, 10, 1000],\n      units: {\n        'g': Plurality.EITHER,\n        'gram': Plurality.SINGULAR,\n        'grams': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'kg',\n      relativeUnit: 'g',\n      relativeScale: 1000,\n      denominators: [2, 10, 1000],\n      units: {\n        'kg': Plurality.EITHER,\n        'kilogram': Plurality.SINGULAR,\n        'kilograms': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.IMPERIAL,\n      common: true,\n      unit: 'oz',\n      baseUnit: 'oz',\n      denominators: [2, 3, 4, 16],\n      units: {\n        'oz': Plurality.EITHER,\n        'ounce': Plurality.SINGULAR,\n        'ounces': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.IMPERIAL,\n      common: true,\n      unit: 'lb',\n      relativeUnit: 'oz',\n      relativeScale: 16,\n      denominators: [2, 3, 4, 16],\n      units: {\n        'lb': Plurality.EITHER,\n        'lbs': Plurality.PLURAL,\n        'pound': Plurality.SINGULAR,\n        'pounds': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.IMPERIAL,\n      common: true,\n      unit: 'ton',\n      relativeUnit: 'lb',\n      relativeScale: 2000,\n      denominators: [2, 3, 4, 10],\n      units: {\n        'ton': Plurality.EITHER,\n        'tons': Plurality.PLURAL,\n        'tonnes': Plurality.PLURAL\n      }\n    }\n  ])\n  .setClassScales();\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Weight.ts","\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n\n\n/**\n * The Area class which contains the following groups:\n *\n * - square inch\n * - square foot\n * - square yard\n * - acre\n * - square mile\n * - square millimeter\n * - square centimeter\n * - square meter\n * - square kilometer\n */\nexport let Area = new Class('Area')\n  .setBaseConversion('sqin', 'sqmm', (x) => x * 645.16)\n\n  .setBaseConversion('sqmm', 'sqin', (x) => x * 0.00155)\n\n  .addGroups([\n    {\n      system: System.IMPERIAL,\n      common: true,\n      unit: 'sqin',\n      baseUnit: 'sqin',\n      denominators: [2, 4, 8, 16],\n      units: {\n        'sqin': Plurality.EITHER,\n        'sq. in': Plurality.EITHER,\n        'sq in': Plurality.EITHER,\n        'in2': Plurality.EITHER,\n        'in^2': Plurality.EITHER,\n        'in\\xb2': Plurality.EITHER,\n        'inch2': Plurality.SINGULAR,\n        'inch^2': Plurality.SINGULAR,\n        'inch\\xb2': Plurality.SINGULAR,\n        'inches2': Plurality.PLURAL,\n        'inches^2': Plurality.PLURAL,\n        'inches\\xb2': Plurality.PLURAL,\n        'square in': Plurality.EITHER,\n        'square inch': Plurality.SINGULAR,\n        'square inches': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.IMPERIAL,\n      common: true,\n      unit: 'sqft',\n      relativeUnit: 'sqin',\n      relativeScale: 12 * 12,\n      denominators: [2, 4, 8, 16],\n      units: {\n        'sqft': Plurality.EITHER,\n        'sq. ft': Plurality.EITHER,\n        'sq ft': Plurality.EITHER,\n        'ft2': Plurality.EITHER,\n        'ft^2': Plurality.EITHER,\n        'ft\\xb2': Plurality.EITHER,\n        'foot2': Plurality.SINGULAR,\n        'foot^2': Plurality.SINGULAR,\n        'foot\\xb2': Plurality.SINGULAR,\n        'feet2': Plurality.PLURAL,\n        'feet^2': Plurality.PLURAL,\n        'feet\\xb2': Plurality.PLURAL,\n        'square ft': Plurality.EITHER,\n        'square foot': Plurality.SINGULAR,\n        'square feet': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.IMPERIAL,\n      unit: 'sqyd',\n      relativeUnit: 'sqft',\n      relativeScale: 3 * 3,\n      denominators: [2, 3, 4, 8, 9, 16],\n      units: {\n        'sqyd': Plurality.EITHER,\n        'sq. yd': Plurality.EITHER,\n        'sq yd': Plurality.EITHER,\n        'yd2': Plurality.EITHER,\n        'yd^2': Plurality.EITHER,\n        'yd\\xb2': Plurality.EITHER,\n        'yard2': Plurality.SINGULAR,\n        'yard^2': Plurality.SINGULAR,\n        'yard\\xb2': Plurality.SINGULAR,\n        'yards2': Plurality.PLURAL,\n        'yards^2': Plurality.PLURAL,\n        'yards\\xb2': Plurality.PLURAL,\n        'square yard': Plurality.SINGULAR,\n        'square yards': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.IMPERIAL,\n      common: true,\n      unit: 'acre',\n      relativeUnit: 'sqyd',\n      relativeScale: 4840,\n      denominators: [2, 3, 4, 8, 10],\n      units: {\n        'acre': Plurality.EITHER,\n        'acres': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.IMPERIAL,\n      common: true,\n      unit: 'sqmi',\n      relativeUnit: 'acre',\n      relativeScale: 640,\n      denominators: [2, 3, 4, 8, 10],\n      units: {\n        'sqmi': Plurality.EITHER,\n        'sq. mi': Plurality.EITHER,\n        'sq mi': Plurality.EITHER,\n        'mi2': Plurality.EITHER,\n        'mi^2': Plurality.EITHER,\n        'mi\\xb2': Plurality.EITHER,\n        'mile2': Plurality.SINGULAR,\n        'mile^2': Plurality.SINGULAR,\n        'mile\\xb2': Plurality.SINGULAR,\n        'miles2': Plurality.PLURAL,\n        'miles^2': Plurality.PLURAL,\n        'miles\\xb2': Plurality.PLURAL,\n        'square mi': Plurality.EITHER,\n        'square mile': Plurality.SINGULAR,\n        'square miles': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'sqmm',\n      baseUnit: 'sqmm',\n      denominators: [2, 4, 8, 16],\n      units: {\n        'sqmm': Plurality.EITHER,\n        'sq. mm': Plurality.EITHER,\n        'sq mm': Plurality.EITHER,\n        'mm2': Plurality.EITHER,\n        'mm^2': Plurality.EITHER,\n        'mm\\xb2': Plurality.EITHER,\n        'millimeter2': Plurality.SINGULAR,\n        'millimeter^2': Plurality.SINGULAR,\n        'millimeter\\xb2': Plurality.SINGULAR,\n        'millimeters2': Plurality.PLURAL,\n        'millimeters^2': Plurality.PLURAL,\n        'millimeters\\xb2': Plurality.PLURAL,\n        'square mm': Plurality.EITHER,\n        'square millimeter': Plurality.SINGULAR,\n        'square millimeters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'sqcm',\n      relativeUnit: 'sqmm',\n      relativeScale: 100,\n      denominators: [2, 4, 8, 16],\n      units: {\n        'sqcm': Plurality.EITHER,\n        'sq. cm': Plurality.EITHER,\n        'sq cm': Plurality.EITHER,\n        'cm2': Plurality.EITHER,\n        'cm^2': Plurality.EITHER,\n        'cm\\xb2': Plurality.EITHER,\n        'centimeter2': Plurality.SINGULAR,\n        'centimeter^2': Plurality.SINGULAR,\n        'centimeter\\xb2': Plurality.SINGULAR,\n        'centimeters2': Plurality.PLURAL,\n        'centimeters^2': Plurality.PLURAL,\n        'centimeters\\xb2': Plurality.PLURAL,\n        'square cm': Plurality.EITHER,\n        'square centimeter': Plurality.SINGULAR,\n        'square centimeters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'sqm',\n      relativeUnit: 'sqcm',\n      relativeScale: 10000,\n      denominators: [2, 4, 8, 16],\n      units: {\n        'sqm': Plurality.EITHER,\n        'sq. m': Plurality.EITHER,\n        'sq m': Plurality.EITHER,\n        'm2': Plurality.EITHER,\n        'm^2': Plurality.EITHER,\n        'm\\xb2': Plurality.EITHER,\n        'meter2': Plurality.SINGULAR,\n        'meter^2': Plurality.SINGULAR,\n        'meter\\xb2': Plurality.SINGULAR,\n        'meters2': Plurality.PLURAL,\n        'meters^2': Plurality.PLURAL,\n        'meters\\xb2': Plurality.PLURAL,\n        'square m': Plurality.EITHER,\n        'square meter': Plurality.SINGULAR,\n        'square meters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'sqkm',\n      relativeUnit: 'sqm',\n      relativeScale: 1000000,\n      denominators: [2, 4, 8, 16],\n      units: {\n        'sqkm': Plurality.EITHER,\n        'sq. km': Plurality.EITHER,\n        'sq km': Plurality.EITHER,\n        'km2': Plurality.EITHER,\n        'km^2': Plurality.EITHER,\n        'km\\xb2': Plurality.EITHER,\n        'kilometer2': Plurality.SINGULAR,\n        'kilometer^2': Plurality.SINGULAR,\n        'kilometer\\xb2': Plurality.SINGULAR,\n        'kilometers2': Plurality.PLURAL,\n        'kilometers^2': Plurality.PLURAL,\n        'kilometers\\xb2': Plurality.PLURAL,\n        'square km': Plurality.EITHER,\n        'square kilometer': Plurality.SINGULAR,\n        'square kilometers': Plurality.PLURAL\n      }\n    }\n  ])\n  .setClassScales()\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Area.ts","\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n\n\n/**\n * The Time class which contains the following groups.\n *\n * - nanosecond\n * - microsecond\n * - millisecond\n * - second\n * - hour\n * - day\n * - week\n * - year\n * - score\n * - decade\n * - centry\n * - millennium\n */\nexport let Time = new Class('Time')\n  .addGroups([\n    {\n      system: System.ANY,\n      unit: 'ns',\n      baseUnit: 'ns',\n      denominators: [10, 100],\n      units: {\n        'ns': Plurality.EITHER,\n        'nanosecond': Plurality.SINGULAR,\n        'nanoseconds': Plurality.PLURAL,\n        'nano': Plurality.SINGULAR,\n        'nanos': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      unit: 'us',\n      relativeUnit: 'ns',\n      relativeScale: 1000,\n      denominators: [10, 100, 1000],\n      units: {\n        'us': Plurality.EITHER,\n        'microsecond': Plurality.SINGULAR,\n        'microseconds': Plurality.PLURAL,\n        'micro': Plurality.SINGULAR,\n        'micros': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'ms',\n      relativeUnit: 'us',\n      relativeScale: 1000,\n      denominators: [10, 100, 1000],\n      units: {\n        'ms': Plurality.EITHER,\n        'millisecond': Plurality.SINGULAR,\n        'milliseconds': Plurality.PLURAL,\n        'milli': Plurality.SINGULAR,\n        'millis': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 's',\n      relativeUnit: 'ms',\n      relativeScale: 1000,\n      denominators: [10, 100, 1000],\n      units: {\n        's': Plurality.EITHER,\n        'second': Plurality.SINGULAR,\n        'seconds': Plurality.PLURAL,\n        'sec': Plurality.SINGULAR,\n        'secs': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'min',\n      relativeUnit: 's',\n      relativeScale: 60,\n      denominators: [2, 3, 4, 60],\n      units: {\n        'min': Plurality.EITHER,\n        'minute': Plurality.SINGULAR,\n        'minutes': Plurality.PLURAL,\n        'mins': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'hr',\n      relativeUnit: 'min',\n      relativeScale: 60,\n      denominators: [2, 3, 4, 60],\n      units: {\n        'hr': Plurality.EITHER,\n        'hour': Plurality.SINGULAR,\n        'hours': Plurality.PLURAL,\n        'hrs': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'day',\n      relativeUnit: 'hr',\n      relativeScale: 24,\n      denominators: [2, 3, 4, 6, 24],\n      units: {\n        'day': Plurality.EITHER,\n        'days': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'wk',\n      relativeUnit: 'day',\n      relativeScale: 7,\n      denominators: [7],\n      units: {\n        'wk': Plurality.EITHER,\n        'week': Plurality.SINGULAR,\n        'weeks': Plurality.PLURAL,\n        'wks': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'yr',\n      relativeUnit: 'day',\n      relativeScale: 365.2425,\n      denominators: [2, 3, 4, 6, 12, 52],\n      units: {\n        'yr': Plurality.EITHER,\n        'year': Plurality.SINGULAR,\n        'years': Plurality.PLURAL,\n        'yrs': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'score',\n      relativeUnit: 'yr',\n      relativeScale: 20,\n      denominators: [20],\n      units: {\n        'score': Plurality.EITHER\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'decade',\n      relativeUnit: 'yr',\n      relativeScale: 10,\n      denominators: [10],\n      units: {\n        'decade': Plurality.EITHER,\n        'decades': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      unit: 'biennium',\n      relativeUnit: 'yr',\n      relativeScale: 2,\n      denominators: [],\n      units: {\n        'biennium': Plurality.EITHER,\n        'bienniums': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      unit: 'triennium',\n      relativeUnit: 'yr',\n      relativeScale: 3,\n      denominators: [],\n      units: {\n        'triennium': Plurality.EITHER,\n        'trienniums': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      unit: 'quadrennium',\n      relativeUnit: 'yr',\n      relativeScale: 4,\n      denominators: [],\n      units: {\n        'quadrennium': Plurality.EITHER,\n        'quadrenniums': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      unit: 'lustrum',\n      relativeUnit: 'yr',\n      relativeScale: 5,\n      denominators: [],\n      units: {\n        'lustrum': Plurality.EITHER,\n        'lustrums': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'decade',\n      relativeUnit: 'yr',\n      relativeScale: 10,\n      denominators: [2, 10],\n      units: {\n        'decade': Plurality.EITHER,\n        'decades': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'century',\n      relativeUnit: 'yr',\n      relativeScale: 100,\n      denominators: [2, 10],\n      units: {\n        'century': Plurality.EITHER,\n        'centurys': Plurality.PLURAL,\n        'centuries': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'millennium',\n      relativeUnit: 'yr',\n      relativeScale: 1000,\n      denominators: [2, 3, 4],\n      units: {\n        'millennium': Plurality.EITHER,\n        'millenniums': Plurality.PLURAL,\n        'millennia': Plurality.PLURAL,\n        'millennias': Plurality.PLURAL\n      }\n    }\n  ])\n  .setClassScales();\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Time.ts","\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n\n\nlet _C_: string = '\\xb0C';\n\n/**\n * The Temperature class which contains the following groups.\n *\n * - celsius\n * - kelvin\n * - fahrenheit\n */\nexport let Temperature = new Class('Temperature')\n  .setBaseConversion('F', _C_, x => ((x - 32) * 5 / 9))\n  .setBaseConversion('F', 'K', x => ((x + 459.67) * 5 / 9))\n\n  .setBaseConversion(_C_, 'F', x => ((x * 9 / 5) + 32))\n  .setBaseConversion(_C_, 'K', x => (x + 273.15))\n\n  .setBaseConversion('K', _C_, x => (x - 273.15))\n  .setBaseConversion('K', 'F', x => ((x * 9 / 5) - 459.67))\n\n  .addGroups([\n    {\n      system: System.IMPERIAL,\n      common: true,\n      unit: 'F',\n      baseUnit: 'F',\n      denominators: [],\n      units: {\n        'F': Plurality.EITHER,\n        '\\xb0F': Plurality.EITHER,\n        'Fahrenheit': Plurality.EITHER\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: _C_,\n      baseUnit: _C_,\n      denominators: [],\n      units: {\n        '\\xb0C': Plurality.EITHER,\n        'Celsius': Plurality.EITHER\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'K',\n      baseUnit: 'K',\n      denominators: [],\n      units: {\n        'K': Plurality.EITHER,\n        'kelvin': Plurality.SINGULAR,\n        'kelvins': Plurality.PLURAL\n      }\n    }\n  ])\n  .setClassScales()\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Temperature.ts","\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n\nlet RAD2DEG = 180 / Math.PI;\nlet DEG2RAD = Math.PI / 180;\n\n/**\n * The Angle class which contains the following groups.\n *\n * - degree\n * - radian\n */\nexport let Angle = new Class('Angle')\n  .setBaseConversion('deg', 'rad', (x) => x * DEG2RAD)\n\n  .setBaseConversion('rad', 'deg', (x) => x * RAD2DEG)\n\n  .addGroups([\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'deg',\n      baseUnit: 'deg',\n      denominators: [],\n      units: {\n        'deg': Plurality.EITHER,\n        '\\xb0': Plurality.EITHER,\n        'degrees': Plurality.PLURAL,\n        'degree': Plurality.SINGULAR\n      }\n    },\n    {\n      system: System.ANY,\n      common: true,\n      unit: 'rad',\n      baseUnit: 'rad',\n      denominators: [],\n      units: {\n        'rad': Plurality.EITHER,\n        'radians': Plurality.PLURAL,\n        'radian': Plurality.SINGULAR\n      }\n    }\n  ])\n  .setClassScales()\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Angle.ts","\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n\n\n/**\n * The Volume clas which contains the following groups.\n *\n * - teaspoon\n * - tablespoon\n * - fluid ounce\n * - cup\n * - pint\n * - quart\n * - gallon\n * - milliliter\n * - centiliter\n * - decaliter\n * - kiloliter\n * - cubic millimeter\n * - cubic centimeter\n * - cubic meter\n * - cubic kilometer\n * - cubic inch\n * - cubic foot\n * - cubic yard\n */\nexport let Volume = new Class('Volume')\n  .setBaseConversion('tsp', 'ml', (x) => x * 4.92892)\n  .setBaseConversion('tsp', 'mm3', (x) => x * 4928.92)\n  .setBaseConversion('tsp', 'in3', (x) => x * 0.300781)\n\n  .setBaseConversion('ml', 'tsp', (x) => x * 0.202884)\n  .setBaseConversion('ml', 'mm3', (x) => x * 1000)\n  .setBaseConversion('ml', 'in3', (x) => x * 0.0610237)\n\n  .setBaseConversion('mm3', 'tsp', (x) => x * 0.000202884)\n  .setBaseConversion('mm3', 'ml', (x) => x * 0.001)\n  .setBaseConversion('mm3', 'in3', (x) => x * 0.0000610237)\n\n  .setBaseConversion('in3', 'tsp', (x) => x * 3.32468)\n  .setBaseConversion('in3', 'ml', (x) => x * 16.3871)\n  .setBaseConversion('in3', 'mm3', (x) => x * 16387.1)\n\n  .addGroups([\n    {\n      system: System.IMPERIAL,\n      common: true,\n      unit: 'tsp',\n      baseUnit: 'tsp',\n      denominators: [2, 3, 4],\n      units: {\n        'tsp': Plurality.EITHER,\n        'ts': Plurality.EITHER,\n        'tsps': Plurality.PLURAL,\n        'teaspoon': Plurality.SINGULAR,\n        'teaspoons': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.IMPERIAL,\n      common: true,\n      unit: 'tbsp',\n      relativeUnit: 'tsp',\n      relativeScale: 3,\n      denominators: [2, 3, 4],\n      units: {\n        'tbsp': Plurality.EITHER,\n        'tbsps': Plurality.PLURAL,\n        'tablespoon': Plurality.SINGULAR,\n        'tablespoons': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.IMPERIAL,\n      common: true,\n      unit: 'floz',\n      relativeUnit: 'tsp',\n      relativeScale: 6,\n      denominators: [2, 3, 6],\n      units: {\n        // 'oz': Plurality.EITHER,\n        // 'ounce': Plurality.SINGULAR,\n        // 'ounces': Plurality.PLURAL,\n        'floz': Plurality.EITHER,\n        'fl-oz': Plurality.EITHER,\n        'fl oz': Plurality.EITHER,\n        'fluid ounce': Plurality.SINGULAR,\n        'fluid ounces': Plurality.PLURAL,\n        'fl. oz': Plurality.EITHER,\n        'oz. fl': Plurality.EITHER,\n        'oz fl': Plurality.EITHER\n      }\n    },\n    {\n      system: System.IMPERIAL,\n      common: true,\n      unit: 'c',\n      relativeUnit: 'floz',\n      relativeScale: 8,\n      denominators: [2, 3, 4],\n      units: {\n        'c': Plurality.EITHER,\n        'cup': Plurality.SINGULAR,\n        'cups': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.IMPERIAL,\n      common: true,\n      unit: 'pt',\n      relativeUnit: 'c',\n      relativeScale: 2,\n      denominators: [2, 4, 8],\n      units: {\n        'pt': Plurality.EITHER,\n        'pint': Plurality.SINGULAR,\n        'pints': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.IMPERIAL,\n      common: true,\n      unit: 'qt',\n      relativeUnit: 'c',\n      relativeScale: 4,\n      denominators: [2, 4, 8],\n      units: {\n        'qt': Plurality.EITHER,\n        'quart': Plurality.SINGULAR,\n        'quarts': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.IMPERIAL,\n      common: true,\n      unit: 'gal',\n      relativeUnit: 'qt',\n      relativeScale: 4,\n      denominators: [2, 4, 8, 16],\n      units: {\n        'gal': Plurality.EITHER,\n        'gallon': Plurality.SINGULAR,\n        'gallons': Plurality.PLURAL,\n        'gals': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'ml',\n      baseUnit: 'ml',\n      denominators: [2, 10],\n      units: {\n        'ml': Plurality.EITHER,\n        'millilitre': Plurality.SINGULAR,\n        'millilitres': Plurality.PLURAL,\n        'milliliter': Plurality.SINGULAR,\n        'milliliters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'cl',\n      relativeUnit: 'ml',\n      relativeScale: 10,\n      denominators: [10],\n      units: {\n        'cl': Plurality.EITHER,\n        'centilitre': Plurality.SINGULAR,\n        'centilitres': Plurality.PLURAL,\n        'centiliter': Plurality.SINGULAR,\n        'centiliters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'l',\n      relativeUnit: 'ml',\n      relativeScale: 1000,\n      denominators: [2, 3, 4, 10],\n      units: {\n        'l': Plurality.EITHER,\n        'litre': Plurality.SINGULAR,\n        'litres': Plurality.PLURAL,\n        'liter': Plurality.SINGULAR,\n        'liters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'dl',\n      relativeUnit: 'l',\n      relativeScale: 10,\n      denominators: [10, 100],\n      units: {\n        'dl': Plurality.EITHER,\n        'decalitre': Plurality.SINGULAR,\n        'decalitres': Plurality.PLURAL,\n        'decaliter': Plurality.SINGULAR,\n        'decaliters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'kl',\n      relativeUnit: 'l',\n      relativeScale: 1000,\n      denominators: [10, 100],\n      units: {\n        'kl': Plurality.EITHER,\n        'kilolitre': Plurality.SINGULAR,\n        'kilolitres': Plurality.PLURAL,\n        'kiloliter': Plurality.SINGULAR,\n        'kiloliters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'mm3',\n      baseUnit: 'mm3',\n      denominators: [2, 4, 8],\n      units: {\n        'mm3': Plurality.EITHER,\n        'mm^3': Plurality.EITHER,\n        'mm\\xb3': Plurality.EITHER,\n        'millimeter3': Plurality.SINGULAR,\n        'millimeter^3': Plurality.SINGULAR,\n        'millimeter\\xb3': Plurality.SINGULAR,\n        'millimeters3': Plurality.PLURAL,\n        'millimeters^3': Plurality.PLURAL,\n        'millimeters\\xb3': Plurality.PLURAL,\n        'cubic mm': Plurality.EITHER,\n        'cubic millimeter': Plurality.SINGULAR,\n        'cubic millimeters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'cm3',\n      relativeUnit: 'mm3',\n      relativeScale: 1000,\n      denominators: [2, 4, 8],\n      units: {\n        'cm3': Plurality.EITHER,\n        'cm^3': Plurality.EITHER,\n        'cm\\xb3': Plurality.EITHER,\n        'centimeter3': Plurality.SINGULAR,\n        'centimeter^3': Plurality.SINGULAR,\n        'centimeter\\xb3': Plurality.SINGULAR,\n        'centimeters3': Plurality.PLURAL,\n        'centimeters^3': Plurality.PLURAL,\n        'centimeters\\xb3': Plurality.PLURAL,\n        'cubic cm': Plurality.EITHER,\n        'cubic centimeter': Plurality.SINGULAR,\n        'cubic centimeters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'm3',\n      relativeUnit: 'cm3',\n      relativeScale: 1000000,\n      denominators: [2, 4, 8],\n      units: {\n        'm3': Plurality.EITHER,\n        'm^3': Plurality.EITHER,\n        'm\\xb3': Plurality.EITHER,\n        'meter3': Plurality.SINGULAR,\n        'meter^3': Plurality.SINGULAR,\n        'meter\\xb3': Plurality.SINGULAR,\n        'meters3': Plurality.PLURAL,\n        'meters^3': Plurality.PLURAL,\n        'meters\\xb3': Plurality.PLURAL,\n        'cubic m': Plurality.EITHER,\n        'cubic meter': Plurality.SINGULAR,\n        'cubic meters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'km3',\n      relativeUnit: 'm3',\n      relativeScale: 1000000000,\n      denominators: [2, 4, 8],\n      units: {\n        'km3': Plurality.EITHER,\n        'km^3': Plurality.EITHER,\n        'km\\xb3': Plurality.EITHER,\n        'kilometer3': Plurality.SINGULAR,\n        'kilometer^3': Plurality.SINGULAR,\n        'kilometer\\xb3': Plurality.SINGULAR,\n        'kilometers3': Plurality.PLURAL,\n        'kilometers^3': Plurality.PLURAL,\n        'kilometers\\xb3': Plurality.PLURAL,\n        'cubic km': Plurality.EITHER,\n        'cubic kilometer': Plurality.SINGULAR,\n        'cubic kilometers': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.IMPERIAL,\n      unit: 'in3',\n      baseUnit: 'in3',\n      denominators: [2, 4, 8],\n      units: {\n        'in3': Plurality.EITHER,\n        'in^3': Plurality.EITHER,\n        'in\\xb3': Plurality.EITHER,\n        'inch3': Plurality.SINGULAR,\n        'inch^3': Plurality.SINGULAR,\n        'inch\\xb3': Plurality.SINGULAR,\n        'inches3': Plurality.PLURAL,\n        'inches^3': Plurality.PLURAL,\n        'inches\\xb3': Plurality.PLURAL,\n        'cubic in': Plurality.EITHER,\n        'cubic inch': Plurality.SINGULAR,\n        'cubic inches': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'ft3',\n      relativeUnit: 'in3',\n      relativeScale: 1728,\n      denominators: [2, 4, 8],\n      units: {\n        'ft3': Plurality.EITHER,\n        'ft^3': Plurality.EITHER,\n        'ft\\xb3': Plurality.EITHER,\n        'foot3': Plurality.SINGULAR,\n        'foot^3': Plurality.SINGULAR,\n        'foot\\xb3': Plurality.SINGULAR,\n        'feet3': Plurality.PLURAL,\n        'feet^3': Plurality.PLURAL,\n        'feet\\xb3': Plurality.PLURAL,\n        'cubic ft': Plurality.EITHER,\n        'cubic foot': Plurality.SINGULAR,\n        'cubic feet': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'yd3',\n      relativeUnit: 'ft3',\n      relativeScale: 27,\n      denominators: [2, 4, 8],\n      units: {\n        'yd3': Plurality.EITHER,\n        'yd^3': Plurality.EITHER,\n        'yd\\xb3': Plurality.EITHER,\n        'yard3': Plurality.SINGULAR,\n        'yard^3': Plurality.SINGULAR,\n        'yard\\xb3': Plurality.SINGULAR,\n        'yards3': Plurality.PLURAL,\n        'yards^3': Plurality.PLURAL,\n        'yards\\xb3': Plurality.PLURAL,\n        'cubic yd': Plurality.EITHER,\n        'cubic yard': Plurality.SINGULAR,\n        'cubic yards': Plurality.PLURAL\n      }\n    }\n  ])\n  .setClassScales()\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Volume.ts","\nimport { System } from '../System';\nimport { Class } from '../Class';\nimport { Plurality } from '../Plurality';\n\n\n/**\n * The Length class which contains the following groups.\n *\n * - inch\n * - foot\n * - yard\n * - mile\n * - league\n * - millimeter\n * - centimeter\n * - decimeter\n * - meter\n * - kilometer\n */\nexport let Length = new Class('Length')\n  .setBaseConversion('in', 'mm', (x) => x * 25.4)\n\n  .setBaseConversion('mm', 'in', (x) => x * 0.039370)\n\n  .addGroups([\n    {\n      system: System.IMPERIAL,\n      common: true,\n      unit: 'in',\n      baseUnit: 'in',\n      denominators: [2, 4, 8, 16, 32],\n      units: {\n        'in': Plurality.EITHER,\n        'inch': Plurality.SINGULAR,\n        'inches': Plurality.PLURAL,\n        '\"': Plurality.EITHER\n      }\n    },\n    {\n      system: System.IMPERIAL,\n      common: true,\n      unit: 'ft',\n      relativeUnit: 'in',\n      relativeScale: 12,\n      denominators: [2],\n      units: {\n        'ft': Plurality.EITHER,\n        'foot': Plurality.SINGULAR,\n        'feet': Plurality.PLURAL,\n        '\\'': Plurality.EITHER\n      }\n    },\n    {\n      system: System.IMPERIAL,\n      unit: 'yd',\n      relativeUnit: 'ft',\n      relativeScale: 3,\n      denominators: [],\n      units: {\n        'yd': Plurality.EITHER,\n        'yard': Plurality.SINGULAR,\n        'yards': Plurality.PLURAL,\n        'yds': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.IMPERIAL,\n      common: true,\n      unit: 'mi',\n      relativeUnit: 'ft',\n      relativeScale: 5280,\n      denominators: [2, 3, 4, 10],\n      units: {\n        'mi': Plurality.EITHER,\n        'mile': Plurality.SINGULAR,\n        'miles': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.IMPERIAL,\n      unit: 'league',\n      relativeUnit: 'mi',\n      relativeScale: 3,\n      denominators: [2, 3, 4, 5, 6, 7, 8, 9, 10],\n      units: {\n        'league': Plurality.EITHER,\n        'leagues': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'mm',\n      baseUnit: 'mm',\n      denominators: [10],\n      units: {\n        'mm': Plurality.EITHER,\n        'millimeter': Plurality.SINGULAR,\n        'millimeters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'cm',\n      relativeUnit: 'mm',\n      relativeScale: 10,\n      denominators: [2, 4, 10],\n      units: {\n        'cm': Plurality.EITHER,\n        'centimeter': Plurality.SINGULAR,\n        'centimeters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      unit: 'dc',\n      relativeUnit: 'cm',\n      relativeScale: 10,\n      denominators: [10],\n      units: {\n        'dc': Plurality.EITHER,\n        'decimeter': Plurality.SINGULAR,\n        'decimeters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'm',\n      relativeUnit: 'cm',\n      relativeScale: 100,\n      denominators: [2, 3, 4, 5, 10],\n      units: {\n        'm': Plurality.EITHER,\n        'meter': Plurality.SINGULAR,\n        'meters': Plurality.PLURAL\n      }\n    },\n    {\n      system: System.METRIC,\n      common: true,\n      unit: 'km',\n      relativeUnit: 'm',\n      relativeScale: 1000,\n      denominators: [2, 3, 4, 5, 6, 7, 8, 9, 10],\n      units: {\n        'km': Plurality.EITHER,\n        'kilometer': Plurality.SINGULAR,\n        'kilometers': Plurality.PLURAL\n      }\n    }\n  ])\n  .setClassScales()\n\n\n\n// WEBPACK FOOTER //\n// ./src/classes/Length.ts"],"sourceRoot":""}