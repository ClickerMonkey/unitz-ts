{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///unitz.min.js","webpack:///webpack/bootstrap 9875a0135952b2b4305e","webpack:///./src/Functions.ts","webpack:///./src/Parse.ts","webpack:///./src/Group.ts","webpack:///./src/Global.ts","webpack:///./src/Base.ts","webpack:///./src/Plurality.ts","webpack:///./src/System.ts","webpack:///./src/Output.ts","webpack:///./src/Range.ts","webpack:///./src/Value.ts","webpack:///./src/Sort.ts","webpack:///./src/Transform.ts","webpack:///./src/Class.ts"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","isZero","x","abs","EPSILON","isEqual","a","b","isWhole","Math","floor","isSingular","isNumber","isPlural","isFinite","gcd","y","t","sign","appendTo","array","input","Array","push","apply","isGroupDefinition","system","unit","denominators","units","isValueDefinition","value","num","den","isRangeDefinition","min","max","isArray","isString","isDefined","coalesce","parseRanges","groups","parseRangesFromArray","parseRangesFromString","ranges","length","range","parseRange","split","REGEX_LIST","parseRangeFromString","parseValue","Range","matches","REGEX_RANGE","exec","fixed","parseValueFromString","minInput","maxInput","minParsed","parseInput","maxParsed","minUnit","maxUnit","parseValueFromResult","parseValueFromValue","givenValue","parsedValue","group","Value_Value","parsed","result","valueNum","valueDen","REGEX_PARSE","whole","parseInt","hasWhole","charAt","decimal","remainder","parseFloat","matchesGroup","desired","givenGroup","System","METRIC","IMPERIAL","NONE","ANY","GIVEN","baseUnit","getGroupForUnit","normalizedUnit","toLowerCase","parent","unitToClass","groupMap","addClass","classMap","Global_classes","converters","addClasses","classes","_i","arguments","uz","Base_Base","parseBase","Plurality","OutputUnit","isValid","isFraction","isDecimal","asString","SEPARATOR","isMatch","positive","minNegative","zero","copy","negative","minPositive","maxPositive","nonzero","minZero","maxZero","maxd","mind","normalize","transform","add","addend","scale","sub","subtrahend","mul","fromFixed","Value","divisor","baseScale","classScale","actual","error","mixedWhole","SEPARATOR_MIXED","mixedNum","SEPARATOR_FRACTION","floored","convertTo","to","convert","convertToValue","fromNumberForGroup","conversions","reverse","callback","_this","index","closest","closestString","convertString","fromNumber","fromNumberWithRange","minDen","maxDen","closestDenominator","closestDistance","distance","fromNumberWithDenominators","preferredUnit","fromFraction","INVALID","Number","NaN","OutputFormat","SortType","Output_Output","Output","format","repeatUnit","unitSpacer","rangeSpacer","fractionSpacer","mixedSpacer","delimiter","significant","set","extend","extended","out","isFixed","showUnit","isMixed","valueString","valueSignificant","toFixed","replace","isLongUnit","getSingularLong","getPluralLong","isShortUnit","getSingularShort","getPluralShort","NUMBER","MIXED","SHORT","LONG","Transform_Transform","Transform","common","Group_Group","Group","definition","dynamic","relativeUnit","relativeScale","updateUnits","setDynamic","addUnits","addDenominator","setDenominators","singularShort","singularLong","pluralShort","pluralLong","plurality","PLURAL","SINGULAR","matched","start","stop_1","increment","Class_Class","Class","bases","mapping","addGroups","definitions","addGroup","alias","getFirstBase","setClassScales","first","setBaseConversion","fromUnit","toUnit","converter","from","converted","Sort_Sort","Sort","ascending","type","MAX","className","getSorter","getClassComparison","MIN","getMinComparison","getMaxComparison","AVERAGE","getAverageComparison","classScaled","ag","bg","globalOutput","globalTransform","globalSort","Base","amount","mutate","r","scaleTo","unitValue","getScaleTo","options","compact","compacted","_a","groupByClass","groupless","entry","parent_1","minGroupChosen","maxGroupChosen","minSum","maxSum","minGroup","maxGroup","expand","expanded","transformed","isBase","scaled","parent_2","operateMatches","operate","output","other","otherRanges","otherUsed","k","otherRange","average","mutator","source","mutated","rangeGroup","rangeScale","sort","slice"],"mappings":"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","file":"unitz.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Unitz\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Unitz\"] = factory();\n\telse\n\t\troot[\"Unitz\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"Unitz\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"Unitz\"] = factory();\n\telse\n\t\troot[\"Unitz\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(1);\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n\n// CONCATENATED MODULE: ./src/Plurality.ts\n\r\nvar Plurality;\r\n(function (Plurality) {\r\n    Plurality[Plurality[\"SINGULAR\"] = 0] = \"SINGULAR\";\r\n    Plurality[Plurality[\"PLURAL\"] = 1] = \"PLURAL\";\r\n    Plurality[Plurality[\"EITHER\"] = 2] = \"EITHER\";\r\n})(Plurality = Plurality || (Plurality = {}));\r\n\n// CONCATENATED MODULE: ./src/System.ts\n\r\nvar System;\r\n(function (System) {\r\n    System[System[\"METRIC\"] = 0] = \"METRIC\";\r\n    System[System[\"IMPERIAL\"] = 1] = \"IMPERIAL\";\r\n    System[System[\"NONE\"] = 2] = \"NONE\";\r\n    System[System[\"ANY\"] = 3] = \"ANY\";\r\n    System[System[\"GIVEN\"] = 4] = \"GIVEN\";\r\n})(System = System || (System = {}));\r\n\n// CONCATENATED MODULE: ./src/Functions.ts\n\r\nvar EPSILON = 0.00001;\r\nfunction isZero(x) {\r\n    return abs(x) < EPSILON;\r\n}\r\nfunction isEqual(a, b) {\r\n    return abs(a - b) < EPSILON;\r\n}\r\nfunction isWhole(x) {\r\n    return abs(Math.floor(x) - x) < EPSILON;\r\n}\r\nfunction isSingular(x) {\r\n    return isNumber(x) && abs(abs(x) - 1) < EPSILON;\r\n}\r\nfunction isPlural(x) {\r\n    return x !== 1 && x !== -1;\r\n}\r\nfunction isNumber(x) {\r\n    return isFinite(x);\r\n}\r\nfunction gcd(a, b) {\r\n    if (!isWhole(a) || !isWhole(b)) {\r\n        return 1;\r\n    }\r\n    var x = a < b ? a : b;\r\n    var y = a < b ? b : a;\r\n    x = abs(x);\r\n    y = abs(y);\r\n    while (y) {\r\n        var t = y;\r\n        y = x % y;\r\n        x = t;\r\n    }\r\n    return x;\r\n}\r\nfunction abs(x) {\r\n    return x < 0 ? -x : x;\r\n}\r\nfunction sign(x) {\r\n    return x < 0 ? -1 : (x === 0 ? 0 : 1);\r\n}\r\nfunction appendTo(array, input) {\r\n    if (input instanceof Array) {\r\n        array.push.apply(array, input);\r\n    }\r\n    else if (input) {\r\n        array.push(input);\r\n    }\r\n    return array;\r\n}\r\nfunction isGroupDefinition(input) {\r\n    return !!(input && input.system && input.unit && input.denominators && input.units);\r\n}\r\nfunction isValueDefinition(input) {\r\n    return !!(input && (input.value || input.unit || input.num || input.den));\r\n}\r\nfunction isRangeDefinition(input) {\r\n    return !!(input && input.min && input.max);\r\n}\r\nfunction isArray(input) {\r\n    return input instanceof Array;\r\n}\r\nfunction isString(input) {\r\n    return typeof (input) === 'string';\r\n}\r\nfunction isDefined(input) {\r\n    return typeof (input) !== 'undefined';\r\n}\r\nfunction coalesce(a, b) {\r\n    return isDefined(a) ? a : b;\r\n}\r\n\n// CONCATENATED MODULE: ./src/Range.ts\n\r\nvar Range = (function () {\r\n    function Range(min, max) {\r\n        this.min = min.value < max.value ? min : max;\r\n        this.max = max.value > min.value ? max : min;\r\n    }\r\n    Object.defineProperty(Range.prototype, \"isValid\", {\r\n        get: function () {\r\n            return this.min.isValid && this.max.isValid;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"isFraction\", {\r\n        get: function () {\r\n            return this.min.isFraction || this.max.isFraction;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"isDecimal\", {\r\n        get: function () {\r\n            return this.min.isDecimal && this.max.isDecimal;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"isRange\", {\r\n        get: function () {\r\n            return this.min.value !== this.max.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"isFixed\", {\r\n        get: function () {\r\n            return this.min.value === this.max.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"average\", {\r\n        get: function () {\r\n            return (this.min.value + this.max.value) * 0.5;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"value\", {\r\n        get: function () {\r\n            return this.min.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"minimum\", {\r\n        get: function () {\r\n            return this.min.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"maximum\", {\r\n        get: function () {\r\n            return this.max.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"unit\", {\r\n        get: function () {\r\n            return this.min.group.unit;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Range.prototype, \"asString\", {\r\n        get: function () {\r\n            return (this.min.value === this.max.value) ?\r\n                (this.min.asString) :\r\n                (this.min.asString + Range.SEPARATOR + this.max.asString);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Range.prototype.isMatch = function (range) {\r\n        return this.min.group === range.min.group &&\r\n            this.max.group === range.max.group;\r\n    };\r\n    Range.prototype.positive = function () {\r\n        var minNegative = this.min.value < 0;\r\n        var maxNegative = this.max.value < 0;\r\n        if (maxNegative) {\r\n            return null;\r\n        }\r\n        var min = minNegative ? this.min.zero() : this.min.copy();\r\n        var max = this.max.copy();\r\n        return new Range(min, max);\r\n    };\r\n    Range.prototype.negative = function () {\r\n        var minPositive = this.min.value >= 0;\r\n        var maxPositive = this.max.value >= 0;\r\n        if (minPositive) {\r\n            return null;\r\n        }\r\n        var min = this.min.copy();\r\n        var max = maxPositive ? this.max.zero() : this.max.copy();\r\n        return new Range(min, max);\r\n    };\r\n    Range.prototype.nonzero = function () {\r\n        var minZero = this.min.value === 0;\r\n        var maxZero = this.max.value === 0;\r\n        if (minZero && maxZero) {\r\n            return null;\r\n        }\r\n        var min = this.min.copy();\r\n        var max = this.max.copy();\r\n        return new Range(min, max);\r\n    };\r\n    Range.prototype.maxd = function () {\r\n        var fixed = this.max.copy();\r\n        return new Range(fixed, fixed);\r\n    };\r\n    Range.prototype.mind = function () {\r\n        var fixed = this.min.copy();\r\n        return new Range(fixed, fixed);\r\n    };\r\n    Range.prototype.normalize = function (transform) {\r\n        var min = this.min.normalize(transform);\r\n        var max = this.max.normalize(transform);\r\n        return new Range(min, max);\r\n    };\r\n    Range.prototype.add = function (addend, scale) {\r\n        if (scale === void 0) { scale = 1; }\r\n        var min = this.min.add(addend.min, scale);\r\n        var max = this.max.add(addend.max, scale);\r\n        return new Range(min, max);\r\n    };\r\n    Range.prototype.sub = function (subtrahend, scale) {\r\n        if (scale === void 0) { scale = 1; }\r\n        var min = this.min.sub(subtrahend.min, scale);\r\n        var max = this.max.sub(subtrahend.max, scale);\r\n        return new Range(min, max);\r\n    };\r\n    Range.prototype.mul = function (scale) {\r\n        var min = this.min.mul(scale);\r\n        var max = this.max.mul(scale);\r\n        return new Range(min, max);\r\n    };\r\n    Range.fromFixed = function (fixed) {\r\n        return new Range(fixed, fixed);\r\n    };\r\n    Range.SEPARATOR = ' - ';\r\n    return Range;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Value.ts\n\r\n\r\nvar Value_Value = (function () {\r\n    function Value(value, num, den, unit, group) {\r\n        var divisor = gcd(num, den);\r\n        this.value = value;\r\n        this.num = num / divisor;\r\n        this.den = den / divisor;\r\n        this.unit = unit;\r\n        this.group = group;\r\n    }\r\n    Object.defineProperty(Value.prototype, \"isValid\", {\r\n        get: function () {\r\n            return isFinite(this.value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"isFraction\", {\r\n        get: function () {\r\n            return this.den !== 1;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"isDecimal\", {\r\n        get: function () {\r\n            return this.den === 1;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"scaled\", {\r\n        get: function () {\r\n            return this.group ? this.value * this.group.baseScale : this.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"classScaled\", {\r\n        get: function () {\r\n            return this.group ? this.value * this.group.classScale : this.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"actual\", {\r\n        get: function () {\r\n            return this.num / this.den;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"mixedWhole\", {\r\n        get: function () {\r\n            return this.den !== 1 ? Math.floor(this.num / this.den) : 0;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"mixedNum\", {\r\n        get: function () {\r\n            return this.den !== 1 ? this.num % this.den : this.num;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"floor\", {\r\n        get: function () {\r\n            return Math.floor(this.value);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"remainder\", {\r\n        get: function () {\r\n            return this.value - this.floor;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"error\", {\r\n        get: function () {\r\n            return this.actual - this.value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"distance\", {\r\n        get: function () {\r\n            return abs(this.error);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Value.prototype, \"asString\", {\r\n        get: function () {\r\n            return (this.den === 1) ?\r\n                (this.value + '') :\r\n                (this.mixedWhole !== 0 ?\r\n                    (this.mixedWhole + Value.SEPARATOR_MIXED + this.mixedNum + Value.SEPARATOR_FRACTION + this.den) :\r\n                    (this.num + Value.SEPARATOR_FRACTION + this.den));\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Value.prototype.copy = function () {\r\n        return new Value(this.value, this.num, this.den, this.unit, this.group);\r\n    };\r\n    Value.prototype.zero = function () {\r\n        return new Value(0, 0, 1, this.unit, this.group);\r\n    };\r\n    Value.prototype.floored = function () {\r\n        return new Value(this.floor, this.floor, 1, this.unit, this.group);\r\n    };\r\n    Value.prototype.convertTo = function (to) {\r\n        var group = this.group;\r\n        return group ? group.parent.convert(this.value, group, to) : this.value;\r\n    };\r\n    Value.prototype.convertToValue = function (group) {\r\n        return Value.fromNumberForGroup(this.convertTo(group), group);\r\n    };\r\n    Value.prototype.conversions = function (transform, reverse, callback) {\r\n        var _this = this;\r\n        if (this.group) {\r\n            this.group.matches(transform, reverse, function (group, index) {\r\n                callback(_this.convertToValue(group), index);\r\n            });\r\n        }\r\n    };\r\n    Value.prototype.normalize = function (transform) {\r\n        var closest = this;\r\n        var closestString = this.asString;\r\n        this.conversions(transform, false, function (convert) {\r\n            var convertString = convert.asString;\r\n            if (convertString.length <= closestString.length) {\r\n                closest = convert;\r\n                closestString = convertString;\r\n            }\r\n        });\r\n        return closest;\r\n    };\r\n    Value.prototype.add = function (addend, scale) {\r\n        if (scale === void 0) { scale = 1; }\r\n        var num = this.num * addend.den + addend.num * this.den * scale;\r\n        var den = this.den * addend.den;\r\n        var result = this.value + addend.value * scale;\r\n        return new Value(result, num, den, this.unit, this.group);\r\n    };\r\n    Value.prototype.sub = function (subtrahend, scale) {\r\n        if (scale === void 0) { scale = 1; }\r\n        var num = this.num * subtrahend.den - subtrahend.num * this.den * scale;\r\n        var den = this.den * subtrahend.den;\r\n        var result = this.value - subtrahend.value * scale;\r\n        return new Value(result, num, den, this.unit, this.group);\r\n    };\r\n    Value.prototype.mul = function (scale) {\r\n        return new Value(this.value * scale, this.num * scale, this.den, this.unit, this.group);\r\n    };\r\n    Value.fromNumber = function (value, unit, group) {\r\n        if (unit === void 0) { unit = ''; }\r\n        if (group === void 0) { group = null; }\r\n        return new Value(value, value, 1, unit, group);\r\n    };\r\n    Value.fromNumberWithRange = function (value, unit, group, minDen, maxDen) {\r\n        if (unit === void 0) { unit = ''; }\r\n        if (group === void 0) { group = null; }\r\n        if (minDen === void 0) { minDen = 1; }\r\n        if (maxDen === void 0) { maxDen = 100; }\r\n        var closestDenominator = 0;\r\n        var closestDistance = -1;\r\n        for (var i = minDen; i <= maxDen; i++) {\r\n            var den = i;\r\n            var num = Math.floor(den * value);\r\n            var actual = num / den;\r\n            var distance = abs(value - actual);\r\n            if (closestDistance === -1 || distance < closestDistance) {\r\n                closestDistance = distance;\r\n                closestDenominator = den;\r\n            }\r\n        }\r\n        if (closestDistance > EPSILON) {\r\n            return new Value(value, value, 1, unit, group);\r\n        }\r\n        return new Value(value, Math.floor(value * closestDenominator), closestDenominator, unit, group);\r\n    };\r\n    Value.fromNumberForGroup = function (value, group) {\r\n        return this.fromNumberWithDenominators(value, group.denominators, group.preferredUnit, group);\r\n    };\r\n    Value.fromNumberWithDenominators = function (value, denominators, unit, group) {\r\n        if (unit === void 0) { unit = ''; }\r\n        if (group === void 0) { group = null; }\r\n        var closestDenominator = 0;\r\n        var closestDistance = -1;\r\n        for (var i = 0; i < denominators.length; i++) {\r\n            var den = denominators[i];\r\n            var num = Math.floor(den * value);\r\n            var actual = num / den;\r\n            var distance = abs(value - actual);\r\n            if (closestDistance === -1 || distance < closestDistance) {\r\n                closestDistance = distance;\r\n                closestDenominator = den;\r\n            }\r\n        }\r\n        if (closestDistance > EPSILON) {\r\n            return new Value(value, value, 1, unit, group);\r\n        }\r\n        return new Value(value, Math.floor(value * closestDenominator), closestDenominator, unit, group);\r\n    };\r\n    Value.fromFraction = function (num, den, unit, group) {\r\n        if (unit === void 0) { unit = ''; }\r\n        if (group === void 0) { group = null; }\r\n        return new Value(num / den, num, den, unit, group);\r\n    };\r\n    Value.INVALID = new Value(Number.NaN, Number.NaN, 1, '', null);\r\n    Value.SEPARATOR_FRACTION = '/';\r\n    Value.SEPARATOR_MIXED = ' ';\r\n    return Value;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Parse.ts\n\r\n\r\n\r\n\r\nvar REGEX_RANGE = /\\s*(-?[^-]+)-(.+)/;\r\nvar REGEX_LIST = /\\s*,\\s*/;\r\nvar REGEX_PARSE = /^\\s*(-?\\d*)(\\s+(\\d+))?(\\s*\\/\\s*(\\d+)|\\.(\\d+)|)\\s*(.*)\\s*$/i;\r\nfunction parseRanges(input, groups) {\r\n    if (isArray(input)) {\r\n        return parseRangesFromArray(input, groups);\r\n    }\r\n    else if (isString(input)) {\r\n        return parseRangesFromString(input, groups);\r\n    }\r\n    else if (isRangeDefinition(input)) {\r\n        return parseRangesFromArray([input], groups);\r\n    }\r\n    else if (isValueDefinition(input)) {\r\n        return parseRangesFromArray([input], groups);\r\n    }\r\n    return [];\r\n}\r\nfunction parseRangesFromArray(input, groups) {\r\n    var ranges = [];\r\n    for (var i = 0; i < input.length; i++) {\r\n        var range = parseRange(input[i], groups);\r\n        ranges.push(range);\r\n    }\r\n    return ranges;\r\n}\r\nfunction parseRangesFromString(input, groups) {\r\n    var ranges = input.split(REGEX_LIST);\r\n    return parseRangesFromArray(ranges, groups);\r\n}\r\nfunction parseRange(input, groups) {\r\n    if (isString(input)) {\r\n        return parseRangeFromString(input, groups);\r\n    }\r\n    else if (isRangeDefinition(input)) {\r\n        var range = input;\r\n        var min = parseValue(range.min, groups);\r\n        var max = parseValue(range.max, groups);\r\n        return new Range(min, max);\r\n    }\r\n    return null;\r\n}\r\nfunction parseRangeFromString(input, groups) {\r\n    var matches = REGEX_RANGE.exec(input);\r\n    if (!matches) {\r\n        var fixed = parseValueFromString(input, groups);\r\n        return new Range(fixed, fixed);\r\n    }\r\n    var minInput = matches[1];\r\n    var maxInput = matches[2];\r\n    var minParsed = parseInput(minInput);\r\n    var maxParsed = parseInput(maxInput);\r\n    var minUnit = minParsed.unit || maxParsed.unit;\r\n    var maxUnit = maxParsed.unit || minParsed.unit;\r\n    var min = parseValueFromResult(minParsed, minUnit, groups);\r\n    var max = parseValueFromResult(maxParsed, maxUnit, groups);\r\n    return new Range(min, max);\r\n}\r\nfunction parseValue(input, groups) {\r\n    if (isString(input)) {\r\n        return parseValueFromString(input, groups);\r\n    }\r\n    else if (isValueDefinition(input)) {\r\n        return parseValueFromValue(input, groups);\r\n    }\r\n    return null;\r\n}\r\nfunction parseValueFromValue(input, groups) {\r\n    var givenValue = isDefined(input.value) ? input.value : 1;\r\n    var num = isDefined(input.num) ? input.num : givenValue;\r\n    var den = isDefined(input.den) ? input.den : 1;\r\n    var parsedValue = isDefined(input.value) ? input.value : num / den;\r\n    var unit = input.unit || '';\r\n    var group = groups(unit);\r\n    return new Value_Value(parsedValue, num, den, unit, group);\r\n}\r\nfunction parseValueFromString(input, groups) {\r\n    var parsed = parseInput(input);\r\n    return parseValueFromResult(parsed, parsed.unit, groups);\r\n}\r\nfunction parseValueFromResult(result, unit, groups) {\r\n    var group = groups(unit);\r\n    return new Value_Value(result.value, result.valueNum, result.valueDen, unit, group);\r\n}\r\n/**\r\n * Possible Values:\r\n * 1tsp\r\n * 1 tsp\r\n * 1/2 tsp\r\n * 1 1/2 tsp\r\n * 1 - 2 tsp\r\n * 1 tsp, 1 cup\r\n * 2/3 - 1 c, 1 lb, 2.45 cats\r\n */\r\nfunction parseInput(input) {\r\n    var matches = REGEX_PARSE.exec(input);\r\n    var whole = parseInt(matches[1]);\r\n    var hasWhole = isFinite(whole);\r\n    var sign = matches[1].charAt(0) === '-' ? -1 : 1;\r\n    var num = parseInt(matches[3]);\r\n    var den = parseInt(matches[5]);\r\n    var decimal = parseInt(matches[6]);\r\n    var unit = matches[7];\r\n    if (!hasWhole && isFinite(decimal)) {\r\n        whole = 0;\r\n        hasWhole = true;\r\n    }\r\n    if (!hasWhole && !unit) {\r\n        return null;\r\n    }\r\n    var value = 1;\r\n    var valueDen = 1;\r\n    var valueNum = 1;\r\n    if (hasWhole) {\r\n        value = whole;\r\n        valueNum = whole;\r\n        if (isFinite(den)) {\r\n            valueDen = den;\r\n            if (isFinite(num)) {\r\n                value += (num / den) * sign;\r\n                valueNum *= den;\r\n                valueNum += num;\r\n            }\r\n            else {\r\n                value /= den;\r\n            }\r\n        }\r\n        else if (isFinite(decimal)) {\r\n            var remainder = parseFloat('0.' + decimal);\r\n            value += remainder * sign;\r\n            valueNum += remainder;\r\n        }\r\n        valueNum *= sign;\r\n    }\r\n    return { value: value, valueNum: valueNum, valueDen: valueDen, num: num, den: den, unit: unit };\r\n}\r\n\n// CONCATENATED MODULE: ./src/Output.ts\n\r\n\r\nvar OutputUnit;\r\n(function (OutputUnit) {\r\n    OutputUnit[OutputUnit[\"NONE\"] = 0] = \"NONE\";\r\n    OutputUnit[OutputUnit[\"GIVEN\"] = 1] = \"GIVEN\";\r\n    OutputUnit[OutputUnit[\"SHORT\"] = 2] = \"SHORT\";\r\n    OutputUnit[OutputUnit[\"LONG\"] = 3] = \"LONG\";\r\n})(OutputUnit = OutputUnit || (OutputUnit = {}));\r\nvar OutputFormat;\r\n(function (OutputFormat) {\r\n    OutputFormat[OutputFormat[\"GIVEN\"] = 0] = \"GIVEN\";\r\n    OutputFormat[OutputFormat[\"NUMBER\"] = 1] = \"NUMBER\";\r\n    OutputFormat[OutputFormat[\"MIXED\"] = 2] = \"MIXED\";\r\n    OutputFormat[OutputFormat[\"FRACTION\"] = 3] = \"FRACTION\";\r\n})(OutputFormat = OutputFormat || (OutputFormat = {}));\r\nvar Output_Output = (function () {\r\n    function Output(input) {\r\n        this.unit = OutputUnit.GIVEN;\r\n        this.format = OutputFormat.GIVEN;\r\n        this.repeatUnit = false;\r\n        this.unitSpacer = '';\r\n        this.rangeSpacer = ' - ';\r\n        this.fractionSpacer = '/';\r\n        this.mixedSpacer = ' ';\r\n        this.delimiter = ', ';\r\n        this.significant = 2;\r\n        if (isDefined(input)) {\r\n            this.set(input);\r\n        }\r\n    }\r\n    Output.prototype.set = function (input) {\r\n        this.unit = coalesce(input.unit, this.unit);\r\n        this.format = coalesce(input.format, this.format);\r\n        this.repeatUnit = coalesce(input.repeatUnit, this.repeatUnit);\r\n        this.unitSpacer = coalesce(input.unitSpacer, this.unitSpacer);\r\n        this.rangeSpacer = coalesce(input.rangeSpacer, this.rangeSpacer);\r\n        this.fractionSpacer = coalesce(input.fractionSpacer, this.fractionSpacer);\r\n        this.mixedSpacer = coalesce(input.mixedSpacer, this.mixedSpacer);\r\n        this.delimiter = coalesce(input.delimiter, this.delimiter);\r\n        this.significant = coalesce(input.significant, this.significant);\r\n        return this;\r\n    };\r\n    Output.prototype.extend = function (input) {\r\n        var extended = this;\r\n        if (isDefined(input)) {\r\n            if (input instanceof Output) {\r\n                extended = input;\r\n            }\r\n            else {\r\n                extended = new Output(this);\r\n                extended.set(input);\r\n            }\r\n        }\r\n        return extended;\r\n    };\r\n    Output.prototype.ranges = function (ranges) {\r\n        var out = '';\r\n        for (var i = 0; i < ranges.length; i++) {\r\n            if (i > 0) {\r\n                out += this.delimiter;\r\n            }\r\n            out += this.range(ranges[i]);\r\n        }\r\n        return out;\r\n    };\r\n    Output.prototype.range = function (range) {\r\n        var out = '';\r\n        if (range.isFixed) {\r\n            out += this.value(range.min);\r\n        }\r\n        else {\r\n            var minUnit = this.repeatUnit || range.min.unit !== range.max.unit;\r\n            out += this.value(range.min, minUnit);\r\n            out += this.rangeSpacer;\r\n            out += this.value(range.max);\r\n        }\r\n        return out;\r\n    };\r\n    Output.prototype.value = function (value, showUnit) {\r\n        if (showUnit === void 0) { showUnit = true; }\r\n        var out = '';\r\n        if (this.isFraction(value)) {\r\n            if (this.isMixed(value)) {\r\n                out += value.mixedWhole;\r\n                out += this.mixedSpacer;\r\n                out += value.mixedNum;\r\n                out += this.fractionSpacer;\r\n                out += value.den;\r\n            }\r\n            else {\r\n                out += value.num;\r\n                out += this.fractionSpacer;\r\n                out += value.den;\r\n            }\r\n        }\r\n        else {\r\n            var valueString = value.value + '';\r\n            var valueSignificant = value.value\r\n                .toFixed(this.significant)\r\n                .replace(/0*$/, '')\r\n                .replace(/\\.$/, '');\r\n            out += valueSignificant.length < valueString.length ? valueSignificant : valueString;\r\n        }\r\n        if (this.unit !== OutputUnit.NONE && showUnit) {\r\n            var group = value.group;\r\n            out += this.unitSpacer;\r\n            if (this.isLongUnit(value)) {\r\n                out += isSingular(value.value) ? group.getSingularLong() : group.getPluralLong();\r\n            }\r\n            else if (this.isShortUnit(value)) {\r\n                out += isSingular(value.value) ? group.getSingularShort() : group.getPluralShort();\r\n            }\r\n            else {\r\n                out += value.unit;\r\n            }\r\n        }\r\n        return out;\r\n    };\r\n    Output.prototype.isFraction = function (value) {\r\n        return value.isFraction && this.format !== OutputFormat.NUMBER;\r\n    };\r\n    Output.prototype.isMixed = function (value) {\r\n        return value.mixedWhole !== 0 && this.format === OutputFormat.MIXED;\r\n    };\r\n    Output.prototype.isShortUnit = function (value) {\r\n        return value.group && this.unit === OutputUnit.SHORT;\r\n    };\r\n    Output.prototype.isLongUnit = function (value) {\r\n        return value.group && this.unit === OutputUnit.LONG;\r\n    };\r\n    return Output;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Transform.ts\n\r\n\r\n\r\nvar Transform_Transform = (function () {\r\n    function Transform(input) {\r\n        this.common = true;\r\n        this.system = System.GIVEN;\r\n        if (isDefined(input)) {\r\n            this.set(input);\r\n        }\r\n    }\r\n    Transform.prototype.set = function (input) {\r\n        this.common = coalesce(input.common, this.common);\r\n        this.system = coalesce(input.system, this.system);\r\n        return this;\r\n    };\r\n    Transform.prototype.extend = function (input) {\r\n        var extended = this;\r\n        if (isDefined(input)) {\r\n            if (input instanceof Transform) {\r\n                extended = input;\r\n            }\r\n            else {\r\n                extended = new Transform(this);\r\n                extended.set(input);\r\n            }\r\n        }\r\n        return extended;\r\n    };\r\n    return Transform;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Group.ts\n\r\n\r\n\r\n\r\nvar Group_Group = (function () {\r\n    function Group(definition, parent) {\r\n        this.baseScale = 1;\r\n        this.classScale = 0;\r\n        this.dynamic = false;\r\n        this.system = definition.system;\r\n        this.common = !!definition.common;\r\n        this.unit = definition.unit;\r\n        this.baseUnit = definition.baseUnit;\r\n        this.preferredUnit = definition.preferredUnit || definition.unit;\r\n        this.relativeUnit = definition.relativeUnit;\r\n        this.relativeScale = definition.relativeScale || 1;\r\n        this.units = definition.units;\r\n        this.denominators = definition.denominators;\r\n        this.parent = parent;\r\n        this.updateUnits();\r\n    }\r\n    Object.defineProperty(Group.prototype, \"isBase\", {\r\n        get: function () {\r\n            return this.unit === this.baseUnit;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Group.prototype.setDynamic = function (dynamic) {\r\n        if (dynamic === void 0) { dynamic = true; }\r\n        this.dynamic = dynamic;\r\n        return this;\r\n    };\r\n    Group.prototype.addUnits = function (units) {\r\n        for (var unit in units) {\r\n            this.units[unit] = units[unit];\r\n        }\r\n        this.updateUnits();\r\n        return this;\r\n    };\r\n    Group.prototype.addDenominator = function (denominators) {\r\n        appendTo(this.denominators, denominators);\r\n        return this;\r\n    };\r\n    Group.prototype.setDenominators = function (denominators) {\r\n        this.denominators = denominators;\r\n        return this;\r\n    };\r\n    Group.prototype.updateUnits = function () {\r\n        this.singularShort = null;\r\n        this.singularLong = null;\r\n        this.pluralShort = null;\r\n        this.pluralLong = null;\r\n        for (var unit in this.units) {\r\n            var plurality = this.units[unit];\r\n            if (plurality !== Plurality.PLURAL) {\r\n                if (!this.singularShort || unit.length < this.singularShort.length) {\r\n                    this.singularShort = unit;\r\n                }\r\n                if (!this.singularLong || unit.length > this.singularLong.length) {\r\n                    this.singularLong = unit;\r\n                }\r\n            }\r\n            if (plurality !== Plurality.SINGULAR) {\r\n                if (!this.pluralShort || unit.length < this.pluralShort.length) {\r\n                    this.pluralShort = unit;\r\n                }\r\n                if (!this.pluralLong || unit.length > this.pluralLong.length) {\r\n                    this.pluralLong = unit;\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    Group.prototype.getPluralLong = function () {\r\n        return this.pluralLong;\r\n    };\r\n    Group.prototype.getPluralShort = function () {\r\n        return this.pluralShort;\r\n    };\r\n    Group.prototype.getSingularLong = function () {\r\n        return this.singularLong;\r\n    };\r\n    Group.prototype.getSingularShort = function () {\r\n        return this.singularShort;\r\n    };\r\n    Group.prototype.matches = function (transform, reverse, callback) {\r\n        if (this.parent) {\r\n            var groups = this.parent.groups;\r\n            var matched = 0;\r\n            var start = reverse ? groups.length - 1 : 0;\r\n            var stop_1 = reverse ? -1 : groups.length;\r\n            var increment = reverse ? -1 : 1;\r\n            for (var i = start; i !== stop_1; i += increment) {\r\n                var group = groups[i];\r\n                if (matchesGroup(transform.system, group, this) && (group.common || !transform.common)) {\r\n                    callback(group, matched++);\r\n                }\r\n            }\r\n        }\r\n    };\r\n    return Group;\r\n}());\r\n\r\nfunction matchesGroup(desired, group, givenGroup) {\r\n    switch (desired) {\r\n        case System.METRIC:\r\n            return group.system === System.METRIC;\r\n        case System.IMPERIAL:\r\n            return group.system === System.IMPERIAL;\r\n        case System.NONE:\r\n            return false;\r\n        case System.ANY:\r\n            return true;\r\n        case System.GIVEN:\r\n            return givenGroup && group.baseUnit === givenGroup.baseUnit;\r\n    }\r\n    return false;\r\n}\r\n\n// CONCATENATED MODULE: ./src/Class.ts\n\r\n\r\nvar Class_Class = (function () {\r\n    function Class(name, groups) {\r\n        this.name = name;\r\n        this.groupMap = {};\r\n        this.groups = [];\r\n        this.bases = {};\r\n        this.converters = {};\r\n        this.mapping = {};\r\n        if (groups) {\r\n            this.addGroups(groups);\r\n        }\r\n    }\r\n    Class.prototype.addGroups = function (definitions) {\r\n        for (var i = 0; i < definitions.length; i++) {\r\n            this.addGroup(definitions[i]);\r\n        }\r\n        return this;\r\n    };\r\n    Class.prototype.addGroup = function (definition) {\r\n        var group = new Group_Group(definition, this);\r\n        var relativeUnit = group.relativeUnit, units = group.units;\r\n        if (relativeUnit) {\r\n            group.baseScale = group.relativeScale * this.converters[relativeUnit];\r\n            group.baseUnit = this.bases[relativeUnit];\r\n        }\r\n        for (var alias in units) {\r\n            this.converters[alias] = group.baseScale;\r\n            this.bases[alias] = group.baseUnit;\r\n            this.groupMap[alias] = group;\r\n        }\r\n        this.groups.push(group);\r\n        return this;\r\n    };\r\n    Class.prototype.getFirstBase = function () {\r\n        var groups = this.groups;\r\n        for (var i = 0; i < groups.length; i++) {\r\n            var group = groups[i];\r\n            if (group.unit === group.baseUnit) {\r\n                return group;\r\n            }\r\n        }\r\n        return null;\r\n    };\r\n    Class.prototype.setClassScales = function () {\r\n        var groups = this.groups;\r\n        var first = this.getFirstBase();\r\n        if (first) {\r\n            for (var i = 0; i < groups.length; i++) {\r\n                var group = groups[i];\r\n                if (group.baseUnit === first.baseUnit) {\r\n                    group.classScale = group.baseScale;\r\n                }\r\n                else if (group.baseUnit in this.mapping) {\r\n                    group.classScale = this.mapping[group.baseUnit][first.baseUnit](group.baseScale);\r\n                }\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    Class.prototype.setBaseConversion = function (fromUnit, toUnit, converter) {\r\n        var mapping = this.mapping;\r\n        mapping[fromUnit] = mapping[fromUnit] || {};\r\n        mapping[fromUnit][toUnit] = converter;\r\n        return this;\r\n    };\r\n    Class.prototype.convert = function (value, from, to) {\r\n        if (from === to || !from || !to) {\r\n            return value;\r\n        }\r\n        var converted = value * from.baseScale;\r\n        if (from.baseUnit !== to.baseUnit) {\r\n            var converter = this.mapping[from.baseUnit][to.baseUnit];\r\n            converted = converter(converted);\r\n        }\r\n        return converted / to.baseScale;\r\n    };\r\n    return Class;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Sort.ts\n\r\n\r\nvar SortType;\r\n(function (SortType) {\r\n    SortType[SortType[\"MIN\"] = 0] = \"MIN\";\r\n    SortType[SortType[\"MAX\"] = 1] = \"MAX\";\r\n    SortType[SortType[\"AVERAGE\"] = 2] = \"AVERAGE\";\r\n})(SortType = SortType || (SortType = {}));\r\nvar Sort_Sort = (function () {\r\n    function Sort(input) {\r\n        this.ascending = false;\r\n        this.type = SortType.MAX;\r\n        this.classes = {};\r\n        if (isDefined(input)) {\r\n            this.set(input);\r\n        }\r\n    }\r\n    Sort.prototype.set = function (input) {\r\n        this.ascending = coalesce(input.ascending, this.ascending);\r\n        this.type = coalesce(input.type, this.type);\r\n        if (isDefined(input.classes)) {\r\n            for (var className in input.classes) {\r\n                this.classes[className] = input.classes[className];\r\n            }\r\n        }\r\n        return this;\r\n    };\r\n    Sort.prototype.extend = function (input) {\r\n        var extended = this;\r\n        if (isDefined(input)) {\r\n            if (input instanceof Sort) {\r\n                extended = input;\r\n            }\r\n            else {\r\n                extended = new Sort(this);\r\n                extended.set(input);\r\n            }\r\n        }\r\n        return extended;\r\n    };\r\n    Sort.prototype.getSorter = function () {\r\n        var _this = this;\r\n        return function (a, b) {\r\n            var d = _this.getClassComparison(a, b);\r\n            if (d === 0) {\r\n                switch (_this.type) {\r\n                    case SortType.MIN:\r\n                        d = _this.getMinComparison(a, b);\r\n                        break;\r\n                    case SortType.MAX:\r\n                        d = _this.getMaxComparison(a, b);\r\n                        break;\r\n                    case SortType.AVERAGE:\r\n                        d = _this.getAverageComparison(a, b);\r\n                        break;\r\n                }\r\n            }\r\n            return _this.ascending ? d : -d;\r\n        };\r\n    };\r\n    Sort.prototype.getMinComparison = function (a, b) {\r\n        return sign(a.min.classScaled - b.min.classScaled);\r\n    };\r\n    Sort.prototype.getMaxComparison = function (a, b) {\r\n        return sign(a.max.classScaled - b.max.classScaled);\r\n    };\r\n    Sort.prototype.getAverageComparison = function (a, b) {\r\n        var avg = (a.min.classScaled + a.max.classScaled) * 0.5;\r\n        var bvg = (b.min.classScaled + b.max.classScaled) * 0.5;\r\n        return sign(avg - bvg);\r\n    };\r\n    Sort.prototype.getClassComparison = function (a, b) {\r\n        var ag = a.min.group ? 1 : -1;\r\n        var bg = b.min.group ? 1 : -1;\r\n        if (ag !== bg) {\r\n            return ag - bg;\r\n        }\r\n        var ac = this.classes[a.min.group.parent.name] || 0;\r\n        var bc = this.classes[b.min.group.parent.name] || 0;\r\n        return ac - bc;\r\n    };\r\n    return Sort;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/Global.ts\n\r\n\r\n\r\n\r\nvar classMap = {};\r\nvar Global_classes = [];\r\nvar unitToClass = {};\r\nvar globalOutput = new Output_Output();\r\nvar globalTransform = new Transform_Transform();\r\nvar globalSort = new Sort_Sort();\r\nfunction getGroupForUnit(unit) {\r\n    var normalizedUnit = (unit || '').toLowerCase();\r\n    var parent = unitToClass[normalizedUnit];\r\n    return parent ? parent.groupMap[normalizedUnit] : null;\r\n}\r\nfunction addClass(parent) {\r\n    classMap[parent.name] = parent;\r\n    Global_classes.push(parent);\r\n    for (var unit in parent.converters) {\r\n        unitToClass[unit] = parent;\r\n    }\r\n}\r\nfunction addClasses() {\r\n    var classes = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        classes[_i] = arguments[_i];\r\n    }\r\n    for (var i = 0; i < classes.length; i++) {\r\n        addClass(classes[i]);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/Base.ts\n\r\n\r\n\r\n\r\n\r\n// TODO filter (out certain classes or groups)\r\n// TODO preferred () converts units to preferredUnits if available\r\nfunction uz(input) {\r\n    return new Base_Base(input);\r\n}\r\nfunction parseBase(input) {\r\n    if (input instanceof Base_Base) {\r\n        return input;\r\n    }\r\n    return new Base_Base(input);\r\n}\r\nvar Base_Base = (function () {\r\n    function Base(input, ranges) {\r\n        this.input = input;\r\n        this.ranges = ranges || parseRanges(input, getGroupForUnit);\r\n    }\r\n    // 1c, 2.3m SCALE BY 2 = 2c, 4.6m\r\n    Base.prototype.scale = function (amount) {\r\n        return this.mutate(function (r) { return r.mul(amount); });\r\n    };\r\n    // 1c, 3m SCALE TO 1/2c = 1/2c, 1.5m\r\n    Base.prototype.scaleTo = function (unitValue) {\r\n        return this.scale(this.getScaleTo(unitValue));\r\n    };\r\n    // 0c, 2tbsp, -4tbsp = 0c, 2tbsp\r\n    Base.prototype.positive = function () {\r\n        return this.mutate(function (r) { return r.positive(); });\r\n    };\r\n    // 0c, 2tbsp, -4tbsp = -4tbsp\r\n    Base.prototype.negative = function () {\r\n        return this.mutate(function (r) { return r.negative(); });\r\n    };\r\n    // 0c, 2tbsp = 2tbsp\r\n    Base.prototype.nonzero = function () {\r\n        return this.mutate(function (r) { return r.nonzero(); });\r\n    };\r\n    // 1 - 3c = 3c\r\n    Base.prototype.max = function () {\r\n        return this.mutate(function (r) { return r.maxd(); });\r\n    };\r\n    // 1 - 3c = 1c\r\n    Base.prototype.min = function () {\r\n        return this.mutate(function (r) { return r.mind(); });\r\n    };\r\n    // 1.5pt = 3c\r\n    Base.prototype.normalize = function (options) {\r\n        var transform = globalTransform.extend(options);\r\n        return this.mutate(function (r) { return r.normalize(transform); });\r\n    };\r\n    // 1c, 1pt = 1.5pt\r\n    Base.prototype.compact = function (options) {\r\n        var compacted = [];\r\n        var transform = globalTransform.extend(options);\r\n        var _a = this.groupByClass(), classes = _a.classes, groupless = _a.groupless;\r\n        for (var className in classes) {\r\n            var entry = classes[className];\r\n            var ranges = entry.ranges;\r\n            var parent_1 = entry.parent;\r\n            var minGroupChosen = null;\r\n            var maxGroupChosen = null;\r\n            var minSum = 0;\r\n            var maxSum = 0;\r\n            for (var i = 0; i < ranges.length; i++) {\r\n                var range = ranges[i];\r\n                var minGroup = range.min.group;\r\n                var maxGroup = range.max.group;\r\n                if (!minGroupChosen || ((minGroup.common || !transform.common) && minGroup.baseScale > minGroupChosen.baseScale)) {\r\n                    minSum = parent_1.convert(minSum, minGroupChosen, minGroup);\r\n                    minGroupChosen = minGroup;\r\n                }\r\n                if (!maxGroupChosen || ((maxGroup.common || !transform.common) && maxGroup.baseScale > maxGroupChosen.baseScale)) {\r\n                    maxSum = parent_1.convert(maxSum, maxGroupChosen, maxGroup);\r\n                    maxGroupChosen = maxGroup;\r\n                }\r\n                minSum += range.min.convertTo(minGroupChosen);\r\n                maxSum += range.max.convertTo(maxGroupChosen);\r\n            }\r\n            var min = Value_Value.fromNumberForGroup(minSum, minGroupChosen);\r\n            var max = Value_Value.fromNumberForGroup(maxSum, maxGroupChosen);\r\n            compacted.push(new Range(min, max));\r\n        }\r\n        if (groupless.length) {\r\n            var minSum = new Value_Value(0, 0, 1, '', null);\r\n            var maxSum = new Value_Value(0, 0, 1, '', null);\r\n            for (var i = 0; i < groupless.length; i++) {\r\n                minSum = minSum.add(groupless[i].min);\r\n                maxSum = maxSum.add(groupless[i].max);\r\n            }\r\n            compacted.push(new Range(minSum, maxSum));\r\n        }\r\n        return new Base(this.input, compacted);\r\n    };\r\n    // 1.5pt = 1c, 1pt\r\n    Base.prototype.expand = function (options) {\r\n        var transform = globalTransform.extend(options);\r\n        var compacted = this.compact(transform);\r\n        var ranges = compacted.ranges;\r\n        var expanded = [];\r\n        var _loop_1 = function (i) {\r\n            var range = ranges[i];\r\n            var min = range.min;\r\n            var minGroup = min.group;\r\n            if (minGroup) {\r\n                minGroup.matches(transform, true, function (group) {\r\n                    if (min.value > 0) {\r\n                        var transformed = min.convertToValue(group);\r\n                        if (group.isBase) {\r\n                            expanded.push(Range.fromFixed(transformed));\r\n                        }\r\n                        else if (transformed.value > 1) {\r\n                            var floored = transformed.floored();\r\n                            var scaled = group.baseScale / minGroup.baseScale;\r\n                            min = min.sub(floored, scaled);\r\n                            expanded.push(Range.fromFixed(floored));\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n            else {\r\n                expanded.push(range);\r\n            }\r\n        };\r\n        for (var i = 0; i < ranges.length; i++) {\r\n            _loop_1(i);\r\n        }\r\n        return new Base(this.input, expanded);\r\n    };\r\n    Base.prototype.groupByClass = function () {\r\n        var ranges = this.ranges;\r\n        var classes = {};\r\n        var groupless = [];\r\n        for (var i = 0; i < ranges.length; i++) {\r\n            var range = ranges[i];\r\n            if (range.min.group) {\r\n                var parent_2 = range.min.group.parent;\r\n                var entry = classes[parent_2.name];\r\n                if (!entry) {\r\n                    entry = classes[parent_2.name] = {\r\n                        parent: parent_2,\r\n                        ranges: []\r\n                    };\r\n                }\r\n                entry.ranges.push(range);\r\n            }\r\n            else {\r\n                groupless.push(range);\r\n            }\r\n        }\r\n        return { classes: classes, groupless: groupless };\r\n    };\r\n    Base.prototype.add = function (input, scale) {\r\n        if (scale === void 0) { scale = 1; }\r\n        return this.operateMatches(input, function (a, b) {\r\n            return a.add(b, scale);\r\n        });\r\n    };\r\n    Base.prototype.sub = function (input, scale) {\r\n        if (scale === void 0) { scale = 1; }\r\n        return this.operateMatches(input, function (a, b) {\r\n            return a.sub(b, scale);\r\n        });\r\n    };\r\n    Base.prototype.operateMatches = function (input, operate) {\r\n        var ranges = this.ranges;\r\n        var output = [];\r\n        var other = parseBase(input);\r\n        var otherRanges = other.ranges;\r\n        var otherUsed = [];\r\n        for (var i = 0; i < ranges.length; i++) {\r\n            var range = ranges[i];\r\n            for (var k = 0; k < otherRanges.length; k++) {\r\n                if (!otherUsed[k]) {\r\n                    var otherRange = otherRanges[k];\r\n                    if (range.isMatch(otherRange)) {\r\n                        range = operate(range, otherRange);\r\n                        otherUsed[k] = true;\r\n                    }\r\n                }\r\n            }\r\n            output.push(range);\r\n        }\r\n        for (var k = 0; k < otherRanges.length; k++) {\r\n            if (!otherUsed[k]) {\r\n                output.push(otherRanges[k]);\r\n            }\r\n        }\r\n        return new Base(this.input, output);\r\n    };\r\n    Base.prototype.transform = function (options) {\r\n        var transform = globalTransform.extend(options);\r\n        return this.mutate(function (r) {\r\n            var min = null;\r\n            var max = null;\r\n            r.min.conversions(transform, false, function (transformed) {\r\n                if (!min || transformed.asString.length < min.asString.length) {\r\n                    min = transformed;\r\n                }\r\n            });\r\n            r.max.conversions(transform, false, function (transformed) {\r\n                if (!max || transformed.asString.length < max.asString.length) {\r\n                    max = transformed;\r\n                }\r\n            });\r\n            return new Range(min, max);\r\n        });\r\n    };\r\n    Base.prototype.getScaleTo = function (unitValue) {\r\n        var to = parseValue(unitValue, getGroupForUnit);\r\n        var converted = this.convert(to.unit);\r\n        var scale = to.value / converted.average;\r\n        return scale;\r\n    };\r\n    Base.prototype.mutate = function (mutator) {\r\n        var ranges = [];\r\n        var source = this.ranges;\r\n        for (var i = 0; i < source.length; i++) {\r\n            var mutated = mutator(source[i]);\r\n            if (mutated) {\r\n                ranges.push(mutated);\r\n            }\r\n        }\r\n        return new Base(this.input, ranges);\r\n    };\r\n    Base.prototype.output = function (options) {\r\n        var output = globalOutput.extend(options);\r\n        return output.ranges(this.ranges);\r\n    };\r\n    Base.prototype.convert = function (unit) {\r\n        var group = getGroupForUnit(unit);\r\n        if (!group) {\r\n            return null;\r\n        }\r\n        var parent = group.parent;\r\n        var ranges = this.ranges;\r\n        var min = new Value_Value(0, 0, 1, group.unit, group);\r\n        var max = new Value_Value(0, 0, 1, group.unit, group);\r\n        for (var i = 0; i < ranges.length; i++) {\r\n            var range = ranges[i];\r\n            var rangeGroup = range.min.group;\r\n            if (rangeGroup && rangeGroup.parent === parent) {\r\n                var rangeScale = rangeGroup.baseScale / group.baseScale;\r\n                min = min.add(range.min, rangeScale);\r\n                max = max.add(range.max, rangeScale);\r\n            }\r\n        }\r\n        return new Range(min, max);\r\n    };\r\n    Base.prototype.sort = function (options) {\r\n        var sort = globalSort.extend(options);\r\n        var ranges = this.ranges.slice();\r\n        ranges.sort(sort.getSorter());\r\n        return new Base(this.input, ranges);\r\n    };\r\n    return Base;\r\n}());\r\n\r\n\n// CONCATENATED MODULE: ./src/index.ts\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Plurality\", function() { return Plurality; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"System\", function() { return System; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"EPSILON\", function() { return EPSILON; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"isZero\", function() { return isZero; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"isEqual\", function() { return isEqual; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"isWhole\", function() { return isWhole; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"isSingular\", function() { return isSingular; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"isPlural\", function() { return isPlural; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"isNumber\", function() { return isNumber; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"gcd\", function() { return gcd; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"abs\", function() { return abs; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"sign\", function() { return sign; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"appendTo\", function() { return appendTo; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"isGroupDefinition\", function() { return isGroupDefinition; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"isValueDefinition\", function() { return isValueDefinition; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"isRangeDefinition\", function() { return isRangeDefinition; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"isArray\", function() { return isArray; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"isString\", function() { return isString; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"isDefined\", function() { return isDefined; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"coalesce\", function() { return coalesce; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"REGEX_RANGE\", function() { return REGEX_RANGE; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"REGEX_LIST\", function() { return REGEX_LIST; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"REGEX_PARSE\", function() { return REGEX_PARSE; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"parseRanges\", function() { return parseRanges; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"parseRange\", function() { return parseRange; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"parseValue\", function() { return parseValue; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"parseInput\", function() { return parseInput; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"OutputUnit\", function() { return OutputUnit; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"OutputFormat\", function() { return OutputFormat; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Output\", function() { return Output_Output; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Transform\", function() { return Transform_Transform; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Group\", function() { return Group_Group; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"matchesGroup\", function() { return matchesGroup; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Class\", function() { return Class_Class; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Value\", function() { return Value_Value; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Range\", function() { return Range; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"uz\", function() { return uz; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"parseBase\", function() { return parseBase; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Base\", function() { return Base_Base; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"classMap\", function() { return classMap; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"classes\", function() { return Global_classes; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"unitToClass\", function() { return unitToClass; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"globalOutput\", function() { return globalOutput; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"globalTransform\", function() { return globalTransform; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"globalSort\", function() { return globalSort; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"getGroupForUnit\", function() { return getGroupForUnit; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"addClass\", function() { return addClass; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"addClasses\", function() { return addClasses; });\n\r\n// Enums\r\n\r\n\r\n// Functions\r\n\r\n\r\n// Secondary\r\n\r\n\r\n// Core\r\n\r\n\r\n\r\n\r\n\r\n// Global\r\n\r\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// unitz.min.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 9875a0135952b2b4305e","\n\nexport let EPSILON = 0.00001;\n\nexport function isZero(x: 3): boolean\n{\n  return abs( x ) < EPSILON;\n}\n\nexport function isEqual(a: number, b: number): boolean\n{\n  return abs( a - b ) < EPSILON;\n}\n\nexport function isWhole(x: number): boolean\n{\n  return abs( Math.floor( x ) - x ) < EPSILON;\n}\n\nexport function isSingular(x: any): boolean\n{\n  return isNumber( x ) && abs( abs( x ) - 1 ) < EPSILON;\n}\n\nexport function isPlural(x: number): boolean\n{\n  return x !== 1 && x !== -1;\n}\n\nexport function isNumber(x: any): boolean\n{\n  return isFinite(x);\n}\n\nexport function gcd(a: number, b: number): number\n{\n  if (!isWhole(a) || !isWhole(b))\n  {\n    return 1;\n  }\n\n  let x: number = a < b ? a : b;\n  let y: number = a < b ? b : a;\n  x = abs(x);\n  y = abs(y);\n\n  while(y)\n  {\n    let t = y;\n    y = x % y;\n    x = t;\n  }\n\n  return x;\n}\n\nexport function abs(x: number): number\n{\n  return x < 0 ? -x : x;\n}\n\nexport function sign(x: number): number\n{\n  return x < 0 ? -1 : (x === 0 ? 0 : 1);\n}\n\nexport function appendTo<T>(array: T[], input: T | T[]): T[]\n{\n  if (input instanceof Array)\n  {\n    array.push.apply( array, input );\n  }\n  else if (input)\n  {\n    array.push( input );\n  }\n\n  return array;\n}\n\nexport function isGroupDefinition(input: any): boolean\n{\n  return !!(input && input.system && input.unit && input.denominators && input.units);\n}\n\nexport function isValueDefinition(input: any): boolean\n{\n  return !!(input && (input.value || input.unit || input.num || input.den));\n}\n\nexport function isRangeDefinition(input: any): boolean\n{\n  return !!(input && input.min && input.max);\n}\n\nexport function isArray(input: any): boolean\n{\n  return input instanceof Array;\n}\n\nexport function isString(input: any): boolean\n{\n  return typeof(input) === 'string';\n}\n\nexport function isDefined(input: any): boolean\n{\n  return typeof(input) !== 'undefined';\n}\n\nexport function coalesce(a: any, b: any): any\n{\n  return isDefined( a ) ? a : b;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Functions.ts","\nimport { isArray, isString, isRangeDefinition, isValueDefinition, isDefined } from './Functions';\nimport { RangeInput, RangesInput, RangeDefinition, ValueInput, ValueDefinition, ParseResult } from './Types';\nimport { Group, GroupFactory } from './Group';\nimport { Range, RangeList } from './Range';\nimport { Value } from './Value';\n\n\nexport let REGEX_RANGE: RegExp = /\\s*(-?[^-]+)-(.+)/;\nexport let REGEX_LIST: RegExp = /\\s*,\\s*/;\nexport let REGEX_PARSE: RegExp = /^\\s*(-?\\d*)(\\s+(\\d+))?(\\s*\\/\\s*(\\d+)|\\.(\\d+)|)\\s*(.*)\\s*$/i;\n\nexport function parseRanges(input: RangesInput, groups: GroupFactory): RangeList\n{\n  if (isArray(input))\n  {\n    return parseRangesFromArray( <RangeInput[]>input, groups );\n  }\n  else if (isString(input))\n  {\n    return parseRangesFromString( <string>input, groups );\n  }\n  else if (isRangeDefinition(input))\n  {\n    return parseRangesFromArray( [ <RangeDefinition>input ], groups );\n  }\n  else if (isValueDefinition(input))\n  {\n    return parseRangesFromArray( [ <ValueDefinition>input ], groups );\n  }\n\n  return [];\n}\n\nfunction parseRangesFromArray(input: RangeInput[], groups: GroupFactory): RangeList\n{\n  let ranges = [];\n\n  for (let i = 0; i < input.length; i++)\n  {\n    let range: Range = parseRange( input[ i ], groups );\n\n    ranges.push( range );\n  }\n\n  return ranges;\n}\n\nfunction parseRangesFromString(input: string, groups: GroupFactory): RangeList\n{\n  let ranges: string[] = input.split( REGEX_LIST );\n\n  return parseRangesFromArray( ranges, groups );\n}\n\nexport function parseRange(input: RangeInput, groups: GroupFactory): Range\n{\n  if (isString(input))\n  {\n    return parseRangeFromString( <string>input, groups );\n  }\n  else if (isRangeDefinition(input))\n  {\n    let range: RangeDefinition = <RangeDefinition>input;\n    let min: Value = parseValue( range.min, groups );\n    let max: Value = parseValue( range.max, groups );\n\n    return new Range( min, max );\n  }\n\n  return null;\n}\n\nfunction parseRangeFromString(input: string, groups: GroupFactory): Range\n{\n  let matches: string[] = REGEX_RANGE.exec( input );\n\n  if (!matches) {\n    let fixed: Value = parseValueFromString(input, groups);\n\n    return new Range(fixed, fixed);\n  }\n\n  let minInput: string = matches[1];\n  let maxInput: string = matches[2];\n\n  let minParsed: ParseResult = parseInput( minInput );\n  let maxParsed: ParseResult = parseInput( maxInput );\n\n  let minUnit: string = minParsed.unit || maxParsed.unit;\n  let maxUnit: string = maxParsed.unit || minParsed.unit;\n\n  let min: Value = parseValueFromResult(minParsed, minUnit, groups);\n  let max: Value = parseValueFromResult(maxParsed, maxUnit, groups);\n\n  return new Range(min, max);\n}\n\nexport function parseValue(input: ValueInput, groups: GroupFactory): Value\n{\n  if (isString(input))\n  {\n    return parseValueFromString( <string>input, groups );\n  }\n  else if (isValueDefinition(input))\n  {\n    return parseValueFromValue( <ValueDefinition>input, groups );\n  }\n\n  return null;\n}\n\nfunction parseValueFromValue(input: ValueDefinition, groups: GroupFactory): Value\n{\n  let givenValue: number = isDefined( input.value ) ? input.value : 1;\n  let num: number = isDefined( input.num ) ? input.num : givenValue;\n  let den: number = isDefined( input.den ) ? input.den : 1;\n  let parsedValue: number = isDefined( input.value ) ? input.value : num / den;\n  let unit: string = input.unit || '';\n  let group: Group = groups( unit );\n\n  return new Value( parsedValue, num, den, unit, group );\n}\n\nfunction parseValueFromString(input: string, groups: GroupFactory): Value\n{\n  let parsed: ParseResult = parseInput( input );\n\n  return parseValueFromResult(parsed, parsed.unit, groups);\n}\n\nfunction parseValueFromResult(result: ParseResult, unit: string, groups: GroupFactory): Value\n{\n  let group: Group = groups( unit );\n\n  return new Value(result.value, result.valueNum, result.valueDen, unit, group);\n}\n\n/**\n * Possible Values:\n * 1tsp\n * 1 tsp\n * 1/2 tsp\n * 1 1/2 tsp\n * 1 - 2 tsp\n * 1 tsp, 1 cup\n * 2/3 - 1 c, 1 lb, 2.45 cats\n */\nexport function parseInput(input: string): ParseResult\n{\n  let matches: string[] = REGEX_PARSE.exec( input );\n  let whole: number = parseInt( matches[1] );\n  let hasWhole: boolean = isFinite( whole );\n  let sign: number = matches[1].charAt(0) === '-' ? -1 : 1;\n  let num: number = parseInt( matches[3] );\n  let den: number = parseInt( matches[5] );\n  let decimal: number = parseInt( matches[6] );\n  let unit: string = matches[7];\n\n  if ( !hasWhole && isFinite( decimal ) )\n  {\n    whole = 0;\n    hasWhole = true;\n  }\n\n  if ( !hasWhole && !unit )\n  {\n    return null;\n  }\n\n  let value: number = 1;\n  let valueDen: number = 1;\n  let valueNum: number = 1;\n\n  if ( hasWhole )\n  {\n    value = whole;\n    valueNum = whole;\n\n    if ( isFinite( den ) )\n    {\n      valueDen = den;\n\n      if ( isFinite( num ) )\n      {\n        value += ( num / den ) * sign;\n        valueNum *= den;\n        valueNum += num;\n      }\n      else\n      {\n        value /= den;\n      }\n    }\n    else if ( isFinite( decimal ) )\n    {\n      let remainder = parseFloat( '0.' + decimal );\n\n      value += remainder * sign;\n      valueNum += remainder;\n    }\n\n    valueNum *= sign;\n  }\n\n  return { value, valueNum, valueDen, num, den, unit };\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Parse.ts","\nimport { Plurality } from './Plurality';\nimport { System } from './System';\nimport { Class } from './Class';\nimport { GroupDefinition, UnitDefinitionMap, Numbers } from './Types';\nimport { appendTo } from './Functions';\nimport { Transform } from './Transform';\n\n\nexport type GroupList = Group[];\n\nexport type GroupMap = { [key: string]: Group };\n\nexport type GroupFactory = (unit: string) => Group;\n\nexport class Group\n{\n\n  public system: System;\n  public common: boolean;\n  public unit: string;\n  public baseUnit: string;\n  public baseScale: number = 1;\n  public classScale: number = 0;\n  public preferredUnit: string;\n  public relativeUnit: string;\n  public relativeScale: number;\n  public units: UnitDefinitionMap;\n  public denominators: number[];\n  public dynamic: boolean = false;\n  public parent: Class;\n\n  private singularShort: string;\n  private singularLong: string;\n  private pluralShort: string;\n  private pluralLong: string;\n\n  public constructor(definition: GroupDefinition, parent: Class)\n  {\n    this.system = definition.system;\n    this.common = !!definition.common;\n    this.unit = definition.unit;\n    this.baseUnit = definition.baseUnit;\n    this.preferredUnit = definition.preferredUnit || definition.unit;\n    this.relativeUnit = definition.relativeUnit;\n    this.relativeScale = definition.relativeScale || 1;\n    this.units = definition.units;\n    this.denominators = definition.denominators;\n    this.parent = parent;\n\n    this.updateUnits();\n  }\n\n  public get isBase(): boolean\n  {\n    return this.unit === this.baseUnit;\n  }\n\n  public setDynamic(dynamic: boolean = true): this\n  {\n    this.dynamic = dynamic;\n\n    return this;\n  }\n\n  public addUnits(units: UnitDefinitionMap): this\n  {\n    for (let unit in units)\n    {\n      this.units[ unit ] = units[ unit ];\n    }\n\n    this.updateUnits();\n\n    return this;\n  }\n\n  public addDenominator(denominators: Numbers): this\n  {\n    appendTo( this.denominators, denominators );\n\n    return this;\n  }\n\n  public setDenominators(denominators: number[]): this\n  {\n    this.denominators = denominators;\n\n    return this;\n  }\n\n  public updateUnits(): this\n  {\n    this.singularShort = null;\n    this.singularLong = null;\n    this.pluralShort = null;\n    this.pluralLong = null;\n\n    for (let unit in this.units)\n    {\n      var plurality = this.units[ unit ];\n\n      if (plurality !== Plurality.PLURAL)\n      {\n        if (!this.singularShort || unit.length < this.singularShort.length)\n        {\n          this.singularShort = unit;\n        }\n\n        if (!this.singularLong || unit.length > this.singularLong.length)\n        {\n          this.singularLong = unit;\n        }\n      }\n\n      if (plurality !== Plurality.SINGULAR)\n      {\n        if (!this.pluralShort || unit.length < this.pluralShort.length)\n        {\n          this.pluralShort = unit;\n        }\n\n        if (!this.pluralLong || unit.length > this.pluralLong.length)\n        {\n          this.pluralLong = unit;\n        }\n      }\n    }\n\n    return this;\n  }\n\n  public getPluralLong(): string\n  {\n    return this.pluralLong;\n  }\n\n  public getPluralShort(): string\n  {\n    return this.pluralShort;\n  }\n\n  public getSingularLong(): string\n  {\n    return this.singularLong;\n  }\n\n  public getSingularShort(): string\n  {\n    return this.singularShort;\n  }\n\n  public matches(transform: Transform, reverse: boolean, callback: (group: Group, index: number) => any): void\n  {\n    if (this.parent)\n    {\n      let groups: GroupList = this.parent.groups;\n      let matched: number = 0;\n\n      let start = reverse ? groups.length - 1 : 0;\n      let stop = reverse ? -1 : groups.length;\n      let increment = reverse ? -1 : 1;\n\n      for (let i = start; i !== stop; i += increment)\n      {\n        let group: Group = groups[ i ];\n\n        if (matchesGroup( transform.system, group, this ) && (group.common || !transform.common))\n        {\n          callback( group, matched++ );\n        }\n      }\n    }\n  }\n\n}\n\nexport function matchesGroup(desired: System, group: Group, givenGroup?: Group): boolean\n{\n  switch (desired)\n  {\n    case System.METRIC:\n      return group.system === System.METRIC;\n    case System.IMPERIAL:\n      return group.system === System.IMPERIAL;\n    case System.NONE:\n      return false;\n    case System.ANY:\n      return true;\n    case System.GIVEN:\n      return givenGroup && group.baseUnit === givenGroup.baseUnit;\n  }\n\n  return false;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Group.ts","\nimport { Class, ClassMap } from './Class';\nimport { Output } from './Output';\nimport { Group } from './Group';\nimport { Transform } from './Transform';\nimport { Sort } from './Sort';\n\n\nexport let classMap: ClassMap = {};\nexport let classes: Class[] = [];\nexport let unitToClass: ClassMap = {};\nexport let globalOutput: Output = new Output();\nexport let globalTransform: Transform = new Transform();\nexport let globalSort: Sort = new Sort();\n\n\nexport function getGroupForUnit(unit: string): Group | undefined\n{\n  let normalizedUnit: string = (unit || '').toLowerCase();\n  let parent: Class = unitToClass[ normalizedUnit ];\n\n  return parent ? parent.groupMap[ normalizedUnit ] : null;\n}\n\nexport function addClass(parent: Class): void\n{\n  classMap[ parent.name ] = parent;\n  classes.push( parent );\n\n  for (let unit in parent.converters)\n  {\n    unitToClass[ unit ] = parent;\n  }\n}\n\nexport function addClasses(...classes: Class[]): void\n{\n  for (let i = 0; i < classes.length; i++)\n  {\n    addClass( classes[ i ] );\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Global.ts","\nimport { parseRanges, parseValue } from './Parse';\nimport { getGroupForUnit, globalTransform, globalOutput, globalSort } from './Global';\nimport { RangesInput } from './Types';\nimport { Range, RangeList, RangeMutator } from './Range';\nimport { Group } from './Group';\n\nimport { Transform, TransformInput } from './Transform';\nimport { Output, OutputInput } from './Output';\nimport { Sort, SortInput } from './Sort';\nimport { Value } from './Value';\nimport { Class } from './Class';\n\n\n// TODO filter (out certain classes or groups)\n// TODO preferred () converts units to preferredUnits if available\n\nexport function uz(input: RangesInput)\n{\n  return new Base(input);\n}\n\nexport type BaseInput = Base | RangesInput;\n\nexport function parseBase(input: BaseInput): Base\n{\n  if (input instanceof Base)\n  {\n    return <Base>input;\n  }\n\n  return new Base( <RangesInput>input );\n}\n\nexport type ClassGrouping = {\n  groupless: RangeList,\n  classes: { [className: string]: { ranges: RangeList, parent: Class } }\n};\n\nexport class Base\n{\n\n  public input: RangesInput;\n  public ranges: RangeList;\n\n  public constructor(input: RangesInput, ranges?: RangeList )\n  {\n    this.input = input;\n    this.ranges = ranges || parseRanges( input, getGroupForUnit );\n  }\n\n  // 1c, 2.3m SCALE BY 2 = 2c, 4.6m\n  public scale(amount: number): Base\n  {\n    return this.mutate(r => r.mul( amount ));\n  }\n\n  // 1c, 3m SCALE TO 1/2c = 1/2c, 1.5m\n  public scaleTo(unitValue: string): Base\n  {\n    return this.scale( this.getScaleTo(unitValue) );\n  }\n\n  // 0c, 2tbsp, -4tbsp = 0c, 2tbsp\n  public positive(): Base\n  {\n    return this.mutate(r => r.positive());\n  }\n\n  // 0c, 2tbsp, -4tbsp = -4tbsp\n  public negative(): Base\n  {\n    return this.mutate(r => r.negative());\n  }\n\n  // 0c, 2tbsp = 2tbsp\n  public nonzero(): Base\n  {\n    return this.mutate(r => r.nonzero());\n  }\n\n  // 1 - 3c = 3c\n  public max(): Base\n  {\n    return this.mutate(r => r.maxd());\n  }\n\n  // 1 - 3c = 1c\n  public min(): Base\n  {\n    return this.mutate(r => r.mind());\n  }\n\n  // 1.5pt = 3c\n  public normalize(options?: TransformInput): Base\n  {\n    let transform: Transform = globalTransform.extend( options );\n\n    return this.mutate(r => r.normalize( transform ));\n  }\n\n  // 1c, 1pt = 1.5pt\n  public compact(options?: TransformInput): Base\n  {\n    let compacted: RangeList = [];\n    let transform: Transform = globalTransform.extend( options );\n    let { classes, groupless } = this.groupByClass();\n\n    for (let className in classes)\n    {\n      let entry = classes[ className ];\n      let ranges: RangeList = entry.ranges;\n      let parent: Class = entry.parent;\n      let minGroupChosen: Group = <Group>null;\n      let maxGroupChosen: Group = <Group>null;\n      let minSum: number = 0;\n      let maxSum: number = 0;\n\n      for (let i = 0; i < ranges.length; i++)\n      {\n        let range: Range = ranges[ i ];\n        let minGroup: Group = range.min.group;\n        let maxGroup: Group = range.max.group;\n\n        if (!minGroupChosen || ((minGroup.common || !transform.common) && minGroup.baseScale > minGroupChosen.baseScale))\n        {\n          minSum = parent.convert( minSum, minGroupChosen, minGroup );\n          minGroupChosen = minGroup;\n        }\n\n        if (!maxGroupChosen || ((maxGroup.common || !transform.common) && maxGroup.baseScale > maxGroupChosen.baseScale))\n        {\n          maxSum = parent.convert( maxSum, maxGroupChosen, maxGroup );\n          maxGroupChosen = maxGroup;\n        }\n\n        minSum += range.min.convertTo( minGroupChosen );\n        maxSum += range.max.convertTo( maxGroupChosen );\n      }\n\n      let min: Value = Value.fromNumberForGroup( minSum, minGroupChosen );\n      let max: Value = Value.fromNumberForGroup( maxSum, maxGroupChosen );\n\n      compacted.push( new Range( min, max ) );\n    }\n\n    if (groupless.length)\n    {\n      let minSum: Value = new Value(0, 0, 1, '', <Group>null);\n      let maxSum: Value = new Value(0, 0, 1, '', <Group>null);\n\n      for (let i = 0; i < groupless.length; i++)\n      {\n        minSum = minSum.add( groupless[ i ].min );\n        maxSum = maxSum.add( groupless[ i ].max );\n      }\n\n      compacted.push( new Range( minSum, maxSum ) );\n    }\n\n    return new Base( this.input, compacted );\n  }\n\n  // 1.5pt = 1c, 1pt\n  public expand(options?: TransformInput): Base\n  {\n    let transform: Transform = globalTransform.extend( options );\n    let compacted: Base = this.compact( transform );\n    let { ranges } = compacted;\n    let expanded: RangeList = [];\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n      let min: Value = range.min;\n      let minGroup: Group = min.group;\n\n      if (minGroup)\n      {\n        minGroup.matches(transform, true, (group) =>\n        {\n          if (min.value > 0)\n          {\n            let transformed = min.convertToValue(group);\n\n            if (group.isBase)\n            {\n              expanded.push( Range.fromFixed( transformed ) )\n            }\n            else if (transformed.value > 1)\n            {\n              let floored: Value = transformed.floored();\n              let scaled: number = group.baseScale / minGroup.baseScale;\n\n              min = min.sub( floored, scaled );\n              expanded.push( Range.fromFixed( floored ) );\n            }\n          }\n        });\n      }\n      else\n      {\n        expanded.push( range );\n      }\n    }\n\n    return new Base( this.input, expanded );\n  }\n\n  private groupByClass(): ClassGrouping\n  {\n    let ranges: RangeList = this.ranges;\n    let classes = {};\n    let groupless = [];\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n\n      if (range.min.group)\n      {\n        let parent: Class = range.min.group.parent;\n        let entry = classes[ parent.name ];\n\n        if (!entry)\n        {\n          entry = classes[ parent.name ] = {\n            parent: parent,\n            ranges: []\n          };\n        }\n\n        entry.ranges.push( range );\n      }\n      else\n      {\n        groupless.push( range );\n      }\n    }\n\n    return { classes, groupless };\n  }\n\n  public add(input: BaseInput, scale: number = 1): Base\n  {\n    return this.operateMatches(input, (a, b) =>\n    {\n      return a.add(b, scale);\n    });\n  }\n\n  public sub(input: BaseInput, scale: number = 1): Base\n  {\n    return this.operateMatches(input, (a, b) =>\n    {\n      return a.sub(b, scale);\n    });\n  }\n\n  private operateMatches(input: BaseInput, operate: (a: Range, b: Range) => any): Base\n  {\n    let ranges: RangeList = this.ranges;\n    let output: RangeList = [];\n\n    let other: Base = parseBase( input );\n    let otherRanges: RangeList = other.ranges;\n    let otherUsed: boolean[] = [];\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n\n      for (let k = 0; k < otherRanges.length; k++)\n      {\n        if (!otherUsed[ k ])\n        {\n          let otherRange: Range = otherRanges[ k ];\n\n          if (range.isMatch( otherRange ))\n          {\n            range = operate( range, otherRange );\n            otherUsed[ k ] = true;\n          }\n        }\n      }\n\n      output.push( range );\n    }\n\n    for (let k = 0; k < otherRanges.length; k++)\n    {\n      if (!otherUsed[ k ])\n      {\n        output.push( otherRanges[ k ] );\n      }\n    }\n\n    return new Base( this.input, output );\n  }\n\n  public transform(options?: TransformInput): Base\n  {\n    let transform: Transform = globalTransform.extend( options );\n\n    return this.mutate((r) =>\n    {\n      let min: Value = null;\n      let max: Value = null;\n\n      r.min.conversions(transform, false, (transformed) => {\n        if (!min || transformed.asString.length < min.asString.length) {\n          min = transformed;\n        }\n      });\n\n      r.max.conversions(transform, false, (transformed) => {\n        if (!max || transformed.asString.length < max.asString.length) {\n          max = transformed;\n        }\n      });\n\n      return new Range( min, max );\n    });\n  }\n\n  public getScaleTo(unitValue: string): number\n  {\n    let to: Value = parseValue( unitValue, getGroupForUnit );\n    let converted: Range = this.convert( to.unit );\n    let scale: number = to.value / converted.average;\n\n    return scale;\n  }\n\n  public mutate(mutator: RangeMutator): Base\n  {\n    let ranges: RangeList = [];\n    let source: RangeList = this.ranges;\n\n    for (let i = 0; i < source.length; i++)\n    {\n      let mutated: Range = mutator( source[ i ] ) ;\n\n      if (mutated)\n      {\n        ranges.push( mutated );\n      }\n    }\n\n    return new Base( this.input, ranges );\n  }\n\n  public output(options?: OutputInput): string\n  {\n    let output: Output = globalOutput.extend( options );\n\n    return output.ranges( this.ranges );\n  }\n\n  public convert(unit: string): Range\n  {\n    let group: Group = getGroupForUnit( unit );\n\n    if (!group)\n    {\n      return null;\n    }\n\n    let parent: Class = group.parent;\n    let ranges: RangeList = this.ranges;\n    let min: Value = new Value(0, 0, 1, group.unit, group);\n    let max: Value = new Value(0, 0, 1, group.unit, group);\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      let range: Range = ranges[ i ];\n      let rangeGroup: Group = range.min.group;\n\n      if (rangeGroup && rangeGroup.parent === parent)\n      {\n        let rangeScale: number = rangeGroup.baseScale / group.baseScale;\n\n        min = min.add(range.min, rangeScale);\n        max = max.add(range.max, rangeScale);\n      }\n    }\n\n    return new Range( min, max );\n  }\n\n  public sort(options?: SortInput): Base\n  {\n    let sort: Sort = globalSort.extend( options );\n    let ranges: RangeList = this.ranges.slice();\n\n    ranges.sort( sort.getSorter() );\n\n    return new Base( this.input, ranges );\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Base.ts","\n\nexport enum Plurality\n{\n  SINGULAR,\n  PLURAL,\n  EITHER\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Plurality.ts","\n\nexport enum System\n{\n  METRIC,\n  IMPERIAL,\n  NONE,\n  ANY,\n  GIVEN\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/System.ts","\nimport { Value } from './Value';\nimport { Range, RangeList } from './Range';\nimport { isDefined, isSingular, coalesce } from './Functions';\n\n\nexport enum OutputUnit {\n  NONE,\n  GIVEN,\n  SHORT,\n  LONG\n}\n\nexport enum OutputFormat {\n  GIVEN,\n  NUMBER,\n  MIXED,\n  FRACTION\n}\n\nexport interface OutputInput {\n  unit?: OutputUnit;\n  format?: OutputFormat;\n  repeatUnit?: boolean;\n  unitSpacer?: string;\n  rangeSpacer?: string;\n  fractionSpacer?: string;\n  mixedSpacer?: string;\n  delimiter?: string;\n  significant?: number;\n}\n\nexport class Output implements OutputInput\n{\n\n  public unit: OutputUnit = OutputUnit.GIVEN;\n  public format: OutputFormat = OutputFormat.GIVEN;\n  public repeatUnit: boolean = false;\n  public unitSpacer: string = '';\n  public rangeSpacer: string = ' - ';\n  public fractionSpacer: string = '/';\n  public mixedSpacer: string = ' ';\n  public delimiter: string = ', ';\n  public significant: number = 2;\n\n  public constructor(input?: OutputInput)\n  {\n    if (isDefined(input))\n    {\n      this.set( input );\n    }\n  }\n\n  public set(input: OutputInput): this\n  {\n    this.unit = coalesce( input.unit, this.unit );\n    this.format = coalesce( input.format, this.format );\n    this.repeatUnit = coalesce( input.repeatUnit, this.repeatUnit );\n    this.unitSpacer = coalesce( input.unitSpacer, this.unitSpacer );\n    this.rangeSpacer = coalesce( input.rangeSpacer, this.rangeSpacer );\n    this.fractionSpacer = coalesce( input.fractionSpacer, this.fractionSpacer );\n    this.mixedSpacer = coalesce( input.mixedSpacer, this.mixedSpacer );\n    this.delimiter = coalesce( input.delimiter, this.delimiter );\n    this.significant = coalesce( input.significant, this.significant );\n\n    return this;\n  }\n\n  public extend(input?: OutputInput): Output\n  {\n    let extended: Output = this;\n\n    if (isDefined(input))\n    {\n      if (input instanceof Output)\n      {\n        extended = input;\n      }\n      else\n      {\n        extended = new Output( this );\n        extended.set( input );\n      }\n    }\n\n    return extended;\n  }\n\n  public ranges(ranges: RangeList): string\n  {\n    let out = '';\n\n    for (let i = 0; i < ranges.length; i++)\n    {\n      if (i > 0)\n      {\n        out += this.delimiter;\n      }\n\n      out += this.range( ranges[ i ] );\n    }\n\n    return out;\n  }\n\n  public range(range: Range): string\n  {\n    let out = '';\n\n    if (range.isFixed)\n    {\n      out += this.value( range.min );\n    }\n    else\n    {\n      let minUnit: boolean = this.repeatUnit || range.min.unit !== range.max.unit;\n\n      out += this.value( range.min, minUnit );\n      out += this.rangeSpacer;\n      out += this.value( range.max );\n    }\n\n    return out;\n  }\n\n  public value(value: Value, showUnit: boolean = true): string\n  {\n    let out = '';\n\n    if (this.isFraction( value ))\n    {\n      if (this.isMixed( value ))\n      {\n        out += value.mixedWhole;\n        out += this.mixedSpacer;\n        out += value.mixedNum;\n        out += this.fractionSpacer;\n        out += value.den;\n      }\n      else\n      {\n        out += value.num;\n        out += this.fractionSpacer;\n        out += value.den;\n      }\n    }\n    else\n    {\n      let valueString: string = value.value + '';\n\n      let valueSignificant: string = value.value\n        .toFixed(this.significant)\n        .replace(/0*$/, '')\n        .replace(/\\.$/, '');\n\n      out += valueSignificant.length < valueString.length ? valueSignificant : valueString;\n    }\n\n    if (this.unit !== OutputUnit.NONE && showUnit)\n    {\n      let group = value.group;\n\n      out += this.unitSpacer;\n\n      if (this.isLongUnit( value ))\n      {\n        out += isSingular( value.value ) ? group.getSingularLong() : group.getPluralLong();\n      }\n      else if (this.isShortUnit( value ))\n      {\n        out += isSingular( value.value ) ? group.getSingularShort() : group.getPluralShort();\n      }\n      else\n      {\n        out += value.unit;\n      }\n    }\n\n    return out;\n  }\n\n  public isFraction(value: Value): boolean\n  {\n    return value.isFraction && this.format !== OutputFormat.NUMBER;\n  }\n\n  public isMixed(value: Value): boolean\n  {\n    return value.mixedWhole !== 0 && this.format === OutputFormat.MIXED;\n  }\n\n  public isShortUnit(value: Value)\n  {\n    return value.group && this.unit === OutputUnit.SHORT;\n  }\n\n  public isLongUnit(value: Value)\n  {\n    return value.group && this.unit === OutputUnit.LONG;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Output.ts","\nimport { Value } from './Value';\nimport { Transform } from './Transform';\n\n\nexport type RangeMap = { [key: string]: Range };\n\nexport type RangeList = Range[];\n\nexport type RangeMutator = (range: Range) => Range;\n\nexport class Range\n{\n\n  public static SEPARATOR: string = ' - ';\n\n  public readonly min: Value;\n  public readonly max: Value;\n\n  public constructor(min: Value, max: Value)\n  {\n    this.min = min.value < max.value ? min : max;\n    this.max = max.value > min.value ? max : min;\n  }\n\n  public get isValid(): boolean\n  {\n    return this.min.isValid && this.max.isValid;\n  }\n\n  public get isFraction(): boolean\n  {\n    return this.min.isFraction || this.max.isFraction;\n  }\n\n  public get isDecimal(): boolean\n  {\n    return this.min.isDecimal && this.max.isDecimal;\n  }\n\n  public get isRange(): boolean\n  {\n    return this.min.value !== this.max.value;\n  }\n\n  public get isFixed(): boolean\n  {\n    return this.min.value === this.max.value;\n  }\n\n  public get average(): number\n  {\n    return (this.min.value + this.max.value) * 0.5;\n  }\n\n  public get value(): number\n  {\n    return this.min.value;\n  }\n\n  public get minimum(): number\n  {\n    return this.min.value;\n  }\n\n  public get maximum(): number\n  {\n    return this.max.value;\n  }\n\n  public get unit(): string\n  {\n    return this.min.group.unit;\n  }\n\n  public get asString(): string\n  {\n    return (this.min.value === this.max.value) ?\n      (this.min.asString) :\n      (this.min.asString + Range.SEPARATOR + this.max.asString);\n  }\n\n  public isMatch(range: Range): boolean\n  {\n    return this.min.group === range.min.group &&\n      this.max.group === range.max.group;\n  }\n\n  public positive(): Range\n  {\n    let minNegative: boolean = this.min.value < 0;\n    let maxNegative: boolean = this.max.value < 0;\n\n    if (maxNegative)\n    {\n      return null;\n    }\n\n    let min: Value = minNegative ? this.min.zero() : this.min.copy();\n    let max: Value = this.max.copy();\n\n    return new Range( min, max );\n  }\n\n  public negative(): Range\n  {\n    let minPositive: boolean = this.min.value >= 0;\n    let maxPositive: boolean = this.max.value >= 0;\n\n    if (minPositive)\n    {\n      return null;\n    }\n\n    let min: Value = this.min.copy();\n    let max: Value = maxPositive ? this.max.zero() : this.max.copy();\n\n    return new Range( min, max );\n  }\n\n  public nonzero(): Range\n  {\n    let minZero: boolean = this.min.value === 0;\n    let maxZero: boolean = this.max.value === 0;\n\n    if (minZero && maxZero)\n    {\n      return null;\n    }\n\n    let min: Value = this.min.copy();\n    let max: Value = this.max.copy();\n\n    return new Range( min, max );\n  }\n\n  public maxd(): Range\n  {\n    let fixed: Value = this.max.copy();\n\n    return new Range(fixed, fixed);\n  }\n\n  public mind(): Range\n  {\n    let fixed: Value = this.min.copy();\n\n    return new Range(fixed, fixed);\n  }\n\n  public normalize(transform: Transform): Range\n  {\n    let min: Value = this.min.normalize( transform );\n    let max: Value = this.max.normalize( transform );\n\n    return new Range(min, max)\n  }\n\n  public add(addend: Range, scale: number = 1): Range\n  {\n    let min: Value = this.min.add(addend.min, scale);\n    let max: Value = this.max.add(addend.max, scale);\n\n    return new Range(min, max);\n  }\n\n  public sub(subtrahend: Range, scale: number = 1): Range\n  {\n    let min: Value = this.min.sub(subtrahend.min, scale);\n    let max: Value = this.max.sub(subtrahend.max, scale);\n\n    return new Range(min, max);\n  }\n\n  public mul(scale: number): Range\n  {\n    let min: Value = this.min.mul(scale);\n    let max: Value = this.max.mul(scale);\n\n    return new Range(min, max);\n  }\n\n  public static fromFixed(fixed: Value): Range\n  {\n    return new Range(fixed, fixed);\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Range.ts","\nimport { gcd, abs, EPSILON } from './Functions';\nimport { Transform } from './Transform';\nimport { Group } from './Group';\n\nexport type ValueMap = { [unit: string]: Value };\n\nexport class Value\n{\n\n  public static INVALID: Value = new Value(Number.NaN, Number.NaN, 1, '', null);\n  public static SEPARATOR_FRACTION: string = '/';\n  public static SEPARATOR_MIXED: string = ' ';\n\n  public readonly value: number;\n  public readonly num: number;\n  public readonly den: number;\n  public readonly group: Group;\n  public unit: string;\n\n  public constructor(value: number, num: number, den: number, unit: string, group: Group)\n  {\n    let divisor: number = gcd(num, den);\n    this.value = value;\n    this.num = num / divisor;\n    this.den = den / divisor;\n    this.unit = unit;\n    this.group = group;\n  }\n\n  public get isValid(): boolean\n  {\n    return isFinite(this.value);\n  }\n\n  public get isFraction(): boolean\n  {\n    return this.den !== 1;\n  }\n\n  public get isDecimal(): boolean\n  {\n    return this.den === 1;\n  }\n\n  public get scaled(): number\n  {\n    return this.group ? this.value * this.group.baseScale : this.value;\n  }\n\n  public get classScaled(): number\n  {\n    return this.group ? this.value * this.group.classScale : this.value;\n  }\n\n  public get actual(): number\n  {\n    return this.num / this.den;\n  }\n\n  public get mixedWhole(): number\n  {\n    return this.den !== 1 ? Math.floor(this.num / this.den) : 0;\n  }\n\n  public get mixedNum(): number\n  {\n    return this.den !== 1 ? this.num % this.den : this.num;\n  }\n\n  public get floor(): number\n  {\n    return Math.floor(this.value);\n  }\n\n  public get remainder(): number\n  {\n    return this.value - this.floor;\n  }\n\n  public get error(): number\n  {\n    return this.actual - this.value;\n  }\n\n  public get distance(): number\n  {\n    return abs(this.error);\n  }\n\n  public get asString(): string\n  {\n    return (this.den === 1) ?\n      (this.value + '') :\n      (this.mixedWhole !== 0 ?\n          (this.mixedWhole + Value.SEPARATOR_MIXED + this.mixedNum + Value.SEPARATOR_FRACTION + this.den) :\n          (this.num + Value.SEPARATOR_FRACTION + this.den)\n      )\n    ;\n  }\n\n  public copy(): Value\n  {\n    return new Value(this.value, this.num, this.den, this.unit, this.group);\n  }\n\n  public zero(): Value\n  {\n    return new Value(0, 0, 1, this.unit, this.group);\n  }\n\n  public floored(): Value\n  {\n    return new Value(this.floor, this.floor, 1, this.unit, this.group);\n  }\n\n  public convertTo(to: Group): number\n  {\n    let group: Group = this.group;\n\n    return group ? group.parent.convert( this.value, group, to ) : this.value;\n  }\n\n  public convertToValue(group: Group): Value\n  {\n    return Value.fromNumberForGroup( this.convertTo( group ), group );\n  }\n\n  public conversions(transform: Transform, reverse: boolean, callback: (transformed: Value, index: number) => void): void\n  {\n    if (this.group)\n    {\n      this.group.matches(transform, reverse, (group, index) =>\n      {\n        callback( this.convertToValue( group ), index );\n      });\n    }\n  }\n\n  public normalize(transform: Transform): Value\n  {\n    let closest: Value = this;\n    let closestString: string = this.asString;\n\n    this.conversions(transform, false, (convert) =>\n    {\n      let convertString: string = convert.asString;\n\n      if (convertString.length <= closestString.length)\n      {\n        closest = convert;\n        closestString = convertString;\n      }\n    });\n\n    return closest;\n  }\n\n  public add(addend: Value, scale: number = 1): Value\n  {\n    let num = this.num * addend.den + addend.num * this.den * scale;\n    let den = this.den * addend.den;\n    let result = this.value + addend.value * scale;\n\n    return new Value(result, num, den, this.unit, this.group);\n  }\n\n  public sub(subtrahend: Value, scale: number = 1): Value\n  {\n    let num = this.num * subtrahend.den - subtrahend.num * this.den * scale;\n    let den = this.den * subtrahend.den;\n    let result = this.value - subtrahend.value * scale;\n\n    return new Value(result, num, den, this.unit, this.group);\n  }\n\n  public mul(scale: number): Value\n  {\n    return new Value(this.value * scale, this.num * scale, this.den, this.unit, this.group);\n  }\n\n  public static fromNumber(value: number, unit: string = '', group: Group = null): Value\n  {\n    return new Value(value, value, 1, unit, group);\n  }\n\n  public static fromNumberWithRange(value: number, unit: string = '', group: Group = null, minDen: number = 1, maxDen: number = 100): Value\n  {\n    let closestDenominator: number = 0;\n    let closestDistance: number = -1;\n\n    for (let i = minDen; i <= maxDen; i++)\n    {\n      let den = i;\n      let num = Math.floor( den * value );\n      let actual = num / den;\n      let distance = abs(value - actual);\n\n      if (closestDistance === -1 || distance < closestDistance)\n      {\n        closestDistance = distance;\n        closestDenominator = den;\n      }\n    }\n\n    if (closestDistance > EPSILON)\n    {\n      return new Value(value, value, 1, unit, group);\n    }\n\n    return new Value(value, Math.floor(value * closestDenominator), closestDenominator, unit, group);\n  }\n\n  public static fromNumberForGroup(value: number, group: Group): Value\n  {\n    return this.fromNumberWithDenominators( value, group.denominators, group.preferredUnit, group );\n  }\n\n  public static fromNumberWithDenominators(value: number, denominators: number[], unit: string = '', group: Group = null): Value\n  {\n    let closestDenominator: number = 0;\n    let closestDistance: number = -1;\n\n    for (let i = 0; i < denominators.length; i++)\n    {\n      let den = denominators[ i ];\n      let num = Math.floor( den * value );\n      let actual = num / den;\n      let distance = abs(value - actual);\n\n      if (closestDistance === -1 || distance < closestDistance)\n      {\n        closestDistance = distance;\n        closestDenominator = den;\n      }\n    }\n\n    if (closestDistance > EPSILON)\n    {\n      return new Value(value, value, 1, unit, group);\n    }\n\n    return new Value(value, Math.floor(value * closestDenominator), closestDenominator, unit, group);\n  }\n\n  public static fromFraction(num: number, den: number, unit: string = '', group: Group = null): Value\n  {\n    return new Value(num / den, num, den, unit, group);\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Value.ts","\nimport { sign, isDefined, coalesce } from './Functions';\nimport { Range } from './Range';\n\n\nexport enum SortType {\n  MIN,\n  MAX,\n  AVERAGE\n}\n\nexport interface SortInput {\n  ascending?: boolean;\n  type?: SortType;\n  classes?: SortClassMap;\n}\n\nexport type SortClassMap = { [className: string]: number };\n\nexport type Sorter = (a: Range, b: Range) => number;\n\nexport class Sort implements SortInput\n{\n\n  public ascending: boolean = false;\n  public type: SortType = SortType.MAX;\n  public classes: SortClassMap = {};\n\n  public constructor(input?: SortInput)\n  {\n    if (isDefined(input))\n    {\n      this.set( input );\n    }\n  }\n\n  public set(input: SortInput): this\n  {\n    this.ascending = coalesce( input.ascending, this.ascending );\n    this.type = coalesce( input.type, this.type );\n\n    if (isDefined( input.classes ))\n    {\n      for (let className in input.classes)\n      {\n        this.classes[ className ] = input.classes[ className ];\n      }\n    }\n\n    return this;\n  }\n\n  public extend(input?: SortInput): Sort\n  {\n    let extended: Sort = this;\n\n    if (isDefined(input))\n    {\n      if (input instanceof Sort)\n      {\n        extended = input;\n      }\n      else\n      {\n        extended = new Sort( this );\n        extended.set( input );\n      }\n    }\n\n    return extended;\n  }\n\n  public getSorter(): Sorter\n  {\n    return (a: Range, b: Range) =>\n    {\n      let d: number = this.getClassComparison(a, b);\n\n      if (d === 0)\n      {\n        switch (this.type)\n        {\n          case SortType.MIN:\n            d = this.getMinComparison(a, b);\n            break;\n          case SortType.MAX:\n            d = this.getMaxComparison(a, b);\n            break;\n          case SortType.AVERAGE:\n            d = this.getAverageComparison(a, b);\n            break;\n        }\n      }\n\n      return this.ascending ? d : -d;\n    };\n  }\n\n  private getMinComparison(a: Range, b: Range): number\n  {\n    return sign( a.min.classScaled - b.min.classScaled );\n  }\n\n  private getMaxComparison(a: Range, b: Range): number\n  {\n    return sign( a.max.classScaled - b.max.classScaled );\n  }\n\n  private getAverageComparison(a: Range, b: Range): number\n  {\n    let avg: number = (a.min.classScaled + a.max.classScaled) * 0.5;\n    let bvg: number = (b.min.classScaled + b.max.classScaled) * 0.5;\n\n    return sign( avg - bvg );\n  }\n\n  private getClassComparison(a: Range, b: Range): number\n  {\n    let ag: number = a.min.group ? 1 : -1;\n    let bg: number = b.min.group ? 1 : -1;\n\n    if (ag !== bg)\n    {\n      return ag - bg;\n    }\n\n    let ac: number = this.classes[ a.min.group.parent.name ] || 0;\n    let bc: number = this.classes[ b.min.group.parent.name ] || 0;\n\n    return ac - bc;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Sort.ts","\nimport { isDefined, coalesce } from './Functions';\nimport { System } from './System';\n\nexport interface TransformInput {\n  common?: boolean;\n  system?: System;\n}\n\nexport class Transform implements TransformInput\n{\n\n  public common: boolean = true;\n  public system: System = System.GIVEN;\n\n  public constructor(input?: TransformInput)\n  {\n    if (isDefined(input))\n    {\n      this.set( input );\n    }\n  }\n\n  public set(input: TransformInput): this\n  {\n    this.common = coalesce( input.common, this.common );\n    this.system = coalesce( input.system, this.system );\n\n    return this;\n  }\n\n  public extend(input?: TransformInput): Transform\n  {\n    let extended: Transform = this;\n\n    if (isDefined(input))\n    {\n      if (input instanceof Transform)\n      {\n        extended = input;\n      }\n      else\n      {\n        extended = new Transform( this );\n        extended.set( input );\n      }\n    }\n\n    return extended;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Transform.ts","\nimport { GroupDefinition, StringMap, NumberMap, Converter, ConverterDoubleMap } from './Types';\nimport { Group, GroupMap, GroupList } from './Group';\n\n\nexport type ClassMap = { [unit: string]: Class };\n\nexport class Class\n{\n\n  public name: string;\n  public groupMap: GroupMap;\n  public groups: GroupList;\n  public bases: StringMap;\n  public converters: NumberMap;\n  public mapping: ConverterDoubleMap;\n\n  public constructor(name: string, groups?: GroupDefinition[])\n  {\n    this.name = name;\n    this.groupMap = {};\n    this.groups = [];\n    this.bases = {};\n    this.converters = {};\n    this.mapping = {};\n\n    if (groups)\n    {\n      this.addGroups(groups);\n    }\n  }\n\n  public addGroups(definitions: GroupDefinition[]): this\n  {\n    for (let i = 0; i < definitions.length; i++)\n    {\n      this.addGroup(definitions[i]);\n    }\n\n    return this;\n  }\n\n  public addGroup(definition: GroupDefinition): this\n  {\n    let group = new Group(definition, this);\n    let { relativeUnit, units } = group;\n\n    if (relativeUnit)\n    {\n      group.baseScale = group.relativeScale * this.converters[ relativeUnit ];\n      group.baseUnit = this.bases[ relativeUnit ];\n    }\n\n    for (let alias in units)\n    {\n      this.converters[ alias ] = group.baseScale;\n      this.bases[ alias ] = group.baseUnit;\n      this.groupMap[ alias ] = group;\n    }\n\n    this.groups.push( group );\n\n    return this;\n  }\n\n  private getFirstBase(): Group\n  {\n    let groups: GroupList = this.groups;\n\n    for (let i = 0; i < groups.length; i++)\n    {\n      let group: Group = groups[ i ];\n\n      if (group.unit === group.baseUnit)\n      {\n        return group;\n      }\n    }\n\n    return null;\n  }\n\n  public setClassScales(): this\n  {\n    let groups: GroupList = this.groups;\n    let first: Group = this.getFirstBase();\n\n    if (first)\n    {\n      for (let i = 0; i < groups.length; i++)\n      {\n        let group: Group = groups[ i ];\n\n        if (group.baseUnit === first.baseUnit)\n        {\n          group.classScale = group.baseScale;\n        }\n        else if (group.baseUnit in this.mapping)\n        {\n          group.classScale = this.mapping[ group.baseUnit ][ first.baseUnit ]( group.baseScale );\n        }\n      }\n    }\n\n    return this;\n  }\n\n  public setBaseConversion(fromUnit: string, toUnit: string, converter: Converter): this\n  {\n    let mapping = this.mapping;\n    mapping[ fromUnit ] = mapping[ fromUnit ] || {};\n    mapping[ fromUnit ][ toUnit ] = converter;\n\n    return this;\n  }\n\n  public convert(value: number, from: Group, to: Group): number\n  {\n    if (from === to || !from || !to)\n    {\n      return value;\n    }\n\n    let converted: number = value * from.baseScale;\n\n    if (from.baseUnit !== to.baseUnit)\n    {\n      let converter: Converter = this.mapping[ from.baseUnit ][ to.baseUnit ];\n\n      converted = converter( converted );\n    }\n\n    return converted / to.baseScale;\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/Class.ts"],"sourceRoot":""}